<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>noitaro.github.io</title>
  
  
  <link href="https://noitaro.github.io/atom.xml" rel="self"/>
  
  <link href="https://noitaro.github.io/"/>
  <updated>2024-03-18T02:41:41.203Z</updated>
  <id>https://noitaro.github.io/</id>
  
  <author>
    <name>Noita</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>innocn WR40-PRO モニターを買った</title>
    <link href="https://noitaro.github.io/innocn-wr40-pro/"/>
    <id>https://noitaro.github.io/innocn-wr40-pro/</id>
    <published>2024-03-13T02:15:26.000Z</published>
    <updated>2024-03-18T02:41:41.203Z</updated>
    
    <content type="html"><![CDATA[<p>INNOCN の 40インチ ワイドモニター を買いました。</p><p><img src="PXL_20240127_020551638.png" loading="lazy"></p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3IAz7hO"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3IAz7hO"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: INNOCN 40インチワイドモニター WR40 PRO WQHD HDR600@144hzゲーミングモニター HDMI Display Port USB-C 90W Freesync 高さ調整 スピーカー内蔵 VESA (40インチ HDR600)</div><div class="hbc-url">https://amzn.to/3IAz7hO</div></div></div></div></a></div></div><h2 id="INNOCN-WR40-PRO"><a href="#INNOCN-WR40-PRO" class="headerlink" title="INNOCN WR40-PRO"></a>INNOCN WR40-PRO</h2><ul><li>40インチ ワイドモニター</li><li>解像度 WQHD (3440 x 1440)</li><li>21:9 ウルトラワイドアスペクト比</li><li>リフレッシュレート 144Hz HDR600</li><li>応答速度 1ms (MPRT)</li></ul><h3 id="入出力端子"><a href="#入出力端子" class="headerlink" title="入出力端子"></a>入出力端子</h3><ul><li>Audio Out</li><li>DP (Ver1.4)</li><li>HDMI (Ver2.0) x 2</li><li>Type-C (Ver3.1)</li></ul><p>Type-C で接続した場合、モニターから90W給電ができます。</p><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><ul><li><p>たぶん個人差があると思うが、目が疲れる。私は目疲れを感じにくい方だと思っていたが、左目が疲れやすくなった気がする。確かに左目でモノを見ている気はしてたが、ここまで顕著に現れたのはモニターを変えてからだ。</p></li><li><p>モニターの画面が表示される時に、スピーカーからボンッという音がする。これはモニターの Audio Out にスピーカージャックを刺しているから、発生する現象。 パソコンにスピーカーを繋げないのは、ニンテンドースイッチをこのモニターで遊ぶからで、入力が切り替わってもちゃんとスピーカーから音が出るようにしたいと思って、モニターにスピーカーを繋げている。</p></li><li><p>モニターの背面がピカピカ光ってる。止めれない。壁に面して配置しているから、誰も見ないし見えないのに光ってる。ムダ。</p></li></ul><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3IAz7hO"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3IAz7hO"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: INNOCN 40インチワイドモニター WR40 PRO WQHD HDR600@144hzゲーミングモニター HDMI Display Port USB-C 90W Freesync 高さ調整 スピーカー内蔵 VESA (40インチ HDR600)</div><div class="hbc-url">https://amzn.to/3IAz7hO</div></div></div></div></a></div></div><h2 id="写真"><a href="#写真" class="headerlink" title="写真"></a>写真</h2><p>とりあえずデカい！ 大きさが分かるようにティッシュボックスを置いてみた。<br><img src="PXL_20240127_010429033.png" loading="lazy"></p><p>組み立てたらこんな感じ。 組み立て用の白手袋が入ってた。これをつけて組み立てたので、指紋が付かずキレイに仕上がった。<br><img src="PXL_20240127_011946463.png" loading="lazy"></p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3IAz7hO"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3IAz7hO"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: INNOCN 40インチワイドモニター WR40 PRO WQHD HDR600@144hzゲーミングモニター HDMI Display Port USB-C 90W Freesync 高さ調整 スピーカー内蔵 VESA (40インチ HDR600)</div><div class="hbc-url">https://amzn.to/3IAz7hO</div></div></div></div></a></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;INNOCN の 40インチ ワイドモニター を買いました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;PXL_20240127_020551638.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;blog-card&quot;&gt;&lt;div class=&quot;hbc-li</summary>
      
    
    
    
    
    <category term="gadget" scheme="https://noitaro.github.io/tags/gadget/"/>
    
    <category term="pc" scheme="https://noitaro.github.io/tags/pc/"/>
    
  </entry>
  
  <entry>
    <title>Bevy 3D モデル表示</title>
    <link href="https://noitaro.github.io/bevy-3d-models/"/>
    <id>https://noitaro.github.io/bevy-3d-models/</id>
    <published>2024-02-19T05:48:36.000Z</published>
    <updated>2024-03-18T02:41:40.779Z</updated>
    
    <content type="html"><![CDATA[<p>3D モデルを読み込んでゲーム内に表示させます。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 23H2</li><li>Rust 1.76.0</li><li>Bevy 0.12.1</li><li>Blender 3.3.2</li></ul><h2 id="3D-モデル"><a href="#3D-モデル" class="headerlink" title="3D モデル"></a>3D モデル</h2><p><a href="https://maxparata.itch.io/voxel-plane">itch.io</a> から無料の 3D モデルをお借りしました。</p><p>Bevy で 3D モデルを読み込ませるには ‘GLTF 2.0’ 形式に変換する必要があります。</p><p>変換には <a href="https://www.blender.org/">Blender</a> を使いました。</p><h3 id="インポート"><a href="#インポート" class="headerlink" title="インポート"></a>インポート</h3><p><code>ファイル -&gt; インポート -&gt; Wavefront (.obj)</code> を選択</p><p><img src="2024-02-19_152109.png" loading="lazy"></p><p>Bevy は、<code>右手 Y アップ座標</code> 形式を採用しているため、Blender で変換するときは Y軸 が上になるように設定します。<br><a href="https://bevy-cheatbook.github.io/fundamentals/coords.html#2d-and-3d-scenes-and-cameras">https://bevy-cheatbook.github.io/fundamentals/coords.html#2d-and-3d-scenes-and-cameras</a></p><p><img src="2024-02-19_152649.png" loading="lazy"></p><p>Y軸を上にしたとき、3D モデルが上を向いているか確認します。</p><p><img src="2024-02-19_153316.png" loading="lazy"></p><h3 id="エクスポート"><a href="#エクスポート" class="headerlink" title="エクスポート"></a>エクスポート</h3><p><code>ファイル -&gt; エクスポート -&gt; glTF 2.0 (.glb/.gltf)</code> を選択</p><p><img src="2024-02-19_155110.png" loading="lazy"></p><p>特に設定は変えずエクスポートして問題ありませんでした。</p><p><img src="2024-02-19_155456.png" loading="lazy"></p><p>プロジェクトディレクトリ内の <code>assets</code> フォルダーに 3D モデルを入れておけば、ゲームから参照することができます。</p><p><img src="2024-02-19_155827.png" loading="lazy"></p><h2 id="ゲームのコード"><a href="#ゲームのコード" class="headerlink" title="ゲームのコード"></a>ゲームのコード</h2><p><code>src/main.rs</code> ファイルを開き、以下のように修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">use bevy::&#123;app::*,ecs::&#123;system::*,&#125;,utils::*,math::*,transform::&#123;components::*,&#125;,scene::*,render::&#123;camera::*,color::*,mesh::*,&#125;,core_pipeline::&#123;core_3d::*,&#125;,pbr::*,asset::*,DefaultPlugins,&#125;;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    App::new()</span><br><span class="line">        .add_plugins(DefaultPlugins)</span><br><span class="line">        .add_systems(Startup, setup)</span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn setup(</span><br><span class="line">    mut commands: Commands,</span><br><span class="line">    mut meshes: ResMut&lt;Assets&lt;Mesh&gt;&gt;,</span><br><span class="line">    mut materials: ResMut&lt;Assets&lt;StandardMaterial&gt;&gt;,</span><br><span class="line">    ass: Res&lt;AssetServer&gt;,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    // 円形メッシュの作成</span><br><span class="line">    // 白色のマテリアルを適用</span><br><span class="line">    // X軸を90度回転</span><br><span class="line">    commands.spawn(PbrBundle &#123;</span><br><span class="line">        mesh: meshes.add(shape::Circle::new(4.0).into()),</span><br><span class="line">        material: materials.add(Color::WHITE.into()),</span><br><span class="line">        transform: Transform::from_rotation(Quat::from_rotation_x(-std::f32::consts::FRAC_PI_2)),</span><br><span class="line">        ..default()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 点光源の追加</span><br><span class="line">    // 影の有効化</span><br><span class="line">    commands.spawn(PointLightBundle &#123;</span><br><span class="line">        point_light: PointLight &#123;</span><br><span class="line">            intensity: 1500.0,</span><br><span class="line">            shadows_enabled: true,</span><br><span class="line">            ..default()</span><br><span class="line">        &#125;,</span><br><span class="line">        transform: Transform::from_xyz(4.0, 8.0, 4.0),</span><br><span class="line">        ..default()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 3Dカメラをシーンに追加</span><br><span class="line">    // シーンの中心を見下ろすように設定</span><br><span class="line">    commands.spawn(Camera3dBundle &#123;</span><br><span class="line">        projection: OrthographicProjection &#123;</span><br><span class="line">            scaling_mode: ScalingMode::FixedVertical(16.0),</span><br><span class="line">            scale: 1.0 / 3.0,</span><br><span class="line">            ..default()</span><br><span class="line">        &#125;.into(),</span><br><span class="line">        transform: Transform::from_xyz(0.0, 12.0, 16.0)</span><br><span class="line">            .looking_at(Vec3::ZERO, Vec3::Y),</span><br><span class="line">        ..default()</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    // 3D モデルを配置</span><br><span class="line">    // &#x27;Scene0&#x27; ラベルを含める必要があることに注意</span><br><span class="line">    commands.spawn(SceneBundle &#123;</span><br><span class="line">        scene: ass.load(&quot;Plane01.glb#Scene0&quot;),</span><br><span class="line">        transform: &#123;Transform &#123;</span><br><span class="line">            translation: Vec3::new(0.0, 1.0, 1.0), </span><br><span class="line">            scale: Vec3::new(0.3, 0.3, 0.3), </span><br><span class="line">            ..default()</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">        ..default()</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ビルドと実行"><a href="#ビルドと実行" class="headerlink" title="ビルドと実行"></a>ビルドと実行</h2><p>ターミナルで以下のコマンドを実行して、アプリケーションをビルド実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure><p>ゲームに 3D モデルが表示されれば成功です。</p><p><img src="2024-02-19_160207.png" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.rs/bevy/0.12.1/bevy/index.html">https://docs.rs/bevy/0.12.1/bevy/index.html</a></p><p><a href="https://bevy-cheatbook.github.io/3d/gltf.html?highlight=SceneBundle#3d-models-and-scenes-gltf">https://bevy-cheatbook.github.io/3d/gltf.html?highlight=SceneBundle#3d-models-and-scenes-gltf</a></p><p><a href="https://itch.io/game-assets">https://itch.io/game-assets</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;3D モデルを読み込んでゲーム内に表示させます。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 23H2&lt;/li&gt;
&lt;li&gt;Ru</summary>
      
    
    
    
    
    <category term="bevy" scheme="https://noitaro.github.io/tags/bevy/"/>
    
    <category term="rust" scheme="https://noitaro.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Bevy の始め方</title>
    <link href="https://noitaro.github.io/bevy-started/"/>
    <id>https://noitaro.github.io/bevy-started/</id>
    <published>2024-02-16T02:17:46.000Z</published>
    <updated>2024-03-18T02:41:40.783Z</updated>
    
    <content type="html"><![CDATA[<p>Bevy は、Rust言語で開発されたゲームエンジンのことです。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 23H2</li><li>Rust 1.76.0</li><li>Bevy 0.12.1</li></ul><h2 id="Cargo-プロジェクトの作成"><a href="#Cargo-プロジェクトの作成" class="headerlink" title="Cargo プロジェクトの作成"></a>Cargo プロジェクトの作成</h2><p>Bevy は Cargo でプロジェクトを管理します。</p><p>新しいプロジェクトを作成するには、ターミナルに以下コマンドを入力して実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new hello-rust</span><br></pre></td></tr></table></figure><p><img src="2024-02-12_192653.png" loading="lazy"></p><h2 id="Bevy-の依存関係を追加"><a href="#Bevy-の依存関係を追加" class="headerlink" title="Bevy の依存関係を追加"></a>Bevy の依存関係を追加</h2><p>プロジェクトディレクトリで以下コマンドを実行して Bevy を依存関係に追加します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo add bevy</span><br></pre></td></tr></table></figure><p><img src="2024-02-12_212450.png" loading="lazy"></p><p><code>cargo add</code> コマンドを実行すると、最新バージョンのパッケージが自動的に検索され <code>Cargo.toml</code> に 依存関係が追加されます。</p><p><code>Cargo.toml</code><br><img src="2024-02-12_212748.png" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = &quot;hello-rust&quot;</span><br><span class="line">version = &quot;0.1.0&quot;</span><br><span class="line">edition = &quot;2021&quot;</span><br><span class="line"></span><br><span class="line"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">bevy = &quot;0.12.1&quot;</span><br></pre></td></tr></table></figure><h2 id="ゲームのコードを書く"><a href="#ゲームのコードを書く" class="headerlink" title="ゲームのコードを書く"></a>ゲームのコードを書く</h2><p><code>src/main.rs</code> ファイルを開き、以下のように編集して Bevy の基本的な構造を作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">// ライブラリのインポート</span><br><span class="line">// Bevyエンジンから必要なコンポーネントをインポート</span><br><span class="line">// 今回は、アプリケーション構築、アセット管理、3Dカメラの設定、物理ベースのレンダリング(PBR)、メッシュとマテリアルのハンドリング、数学関数をインポート</span><br><span class="line">use bevy::app::App;</span><br><span class="line">use bevy::app::Startup;</span><br><span class="line">use bevy::asset::Assets;</span><br><span class="line">use bevy::core_pipeline::core_3d::Camera3dBundle;</span><br><span class="line">use bevy::DefaultPlugins;</span><br><span class="line">use bevy::ecs::system::Commands;</span><br><span class="line">use bevy::ecs::system::ResMut;</span><br><span class="line">use bevy::math::Quat;</span><br><span class="line">use bevy::math::Vec3;</span><br><span class="line">use bevy::pbr::PbrBundle;</span><br><span class="line">use bevy::pbr::PointLight;</span><br><span class="line">use bevy::pbr::PointLightBundle;</span><br><span class="line">use bevy::pbr::StandardMaterial;</span><br><span class="line">use bevy::render::color::Color;</span><br><span class="line">use bevy::render::mesh::Mesh;</span><br><span class="line">use bevy::render::mesh::shape;</span><br><span class="line">use bevy::transform::components::Transform;</span><br><span class="line">use bevy::utils::default;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    // Bevyアプリケーションの設定</span><br><span class="line">    // デフォルトプラグインの追加</span><br><span class="line">    // アプリケーション起動時に実行されるsetup関数の登録</span><br><span class="line">    App::new()</span><br><span class="line">        .add_plugins(DefaultPlugins)</span><br><span class="line">        .add_systems(Startup, setup)</span><br><span class="line">        .run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn setup(</span><br><span class="line">    mut commands: Commands,</span><br><span class="line">    mut meshes: ResMut&lt;Assets&lt;Mesh&gt;&gt;,</span><br><span class="line">    mut materials: ResMut&lt;Assets&lt;StandardMaterial&gt;&gt;,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    // 円形メッシュの作成</span><br><span class="line">    // 白色のマテリアルを適用</span><br><span class="line">    // X軸を90度回転</span><br><span class="line">    commands.spawn(PbrBundle &#123;</span><br><span class="line">        mesh: meshes.add(shape::Circle::new(4.0).into()),</span><br><span class="line">        material: materials.add(Color::WHITE.into()),</span><br><span class="line">        transform: Transform::from_rotation(Quat::from_rotation_x(-std::f32::consts::FRAC_PI_2)),</span><br><span class="line">        ..default()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 立方体メッシュの作成</span><br><span class="line">    // RGB色のマテリアルを適用</span><br><span class="line">    commands.spawn(PbrBundle &#123;</span><br><span class="line">        mesh: meshes.add(Mesh::from(shape::Cube &#123; size: 1.0 &#125;)),</span><br><span class="line">        material: materials.add(Color::rgb_u8(124, 144, 255).into()),</span><br><span class="line">        transform: Transform::from_xyz(0.0, 0.5, 0.0),</span><br><span class="line">        ..default()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 点光源の追加</span><br><span class="line">    // 影の有効化</span><br><span class="line">    commands.spawn(PointLightBundle &#123;</span><br><span class="line">        point_light: PointLight &#123;</span><br><span class="line">            intensity: 1500.0,</span><br><span class="line">            shadows_enabled: true,</span><br><span class="line">            ..default()</span><br><span class="line">        &#125;,</span><br><span class="line">        transform: Transform::from_xyz(4.0, 8.0, 4.0),</span><br><span class="line">        ..default()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 3Dカメラをシーンに追加</span><br><span class="line">    // シーンの中心を見下ろすように設定</span><br><span class="line">    commands.spawn(Camera3dBundle &#123;</span><br><span class="line">        transform: Transform::from_xyz(-2.5, 4.5, 9.0).looking_at(Vec3::ZERO, Vec3::Y),</span><br><span class="line">        ..default()</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="アプリケーションのビルドと実行"><a href="#アプリケーションのビルドと実行" class="headerlink" title="アプリケーションのビルドと実行"></a>アプリケーションのビルドと実行</h2><p>ターミナルで以下のコマンドを実行して、アプリケーションをビルド実行します。</p><p>初回は依存関係の構築があるため、実行に時間がかかるが、次回以降はすぐに実行されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure><p>しばらく待つと、ゲーム画面が表示される。</p><p><img src="2024-02-13_125028.png" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://bevyengine.org/learn/quick-start/getting-started/">https://bevyengine.org/learn/quick-start/getting-started/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Bevy は、Rust言語で開発されたゲームエンジンのことです。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 23H2&lt;/li</summary>
      
    
    
    
    
    <category term="bevy" scheme="https://noitaro.github.io/tags/bevy/"/>
    
    <category term="rust" scheme="https://noitaro.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>【Rust】インストールと実行</title>
    <link href="https://noitaro.github.io/rust-lang-install/"/>
    <id>https://noitaro.github.io/rust-lang-install/</id>
    <published>2024-02-12T09:28:22.000Z</published>
    <updated>2024-03-18T02:41:41.571Z</updated>
    
    <content type="html"><![CDATA[<p>Rust言語 を使うには、インストーラーでインストールする必要がある。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 23H2</li><li>Rust 1.76.0</li></ul><h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><p><a href="https://www.rust-lang.org/learn/get-started">公式サイト</a> の <code>Download rustup-init.exe (64-bit)</code> から <code>rustup-init.exe</code> をダウンロードする。</p><p><img src="2024-02-12_184706.png" loading="lazy"></p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>ダウンロードした <code>rustup-init.exe</code> を実行する。</p><p>指示に従ってインストールを進める。</p><p>Rust にはリンカーと Windows API ライブラリが必要なので、<code>1</code> の Visual Studio Community をインストールする。</p><p><img src="2024-02-12_190433.png" loading="lazy"></p><p>Visual Studio Installer で2つの個別コンポーネントをインストールする。</p><ul><li>MSVC v143 - VS 2022 C++ x64&#x2F;x86 ビルドツール</li><li>Windows 11 SDK (10.0.22000.0)</li></ul><p><img src="2024-02-12_190822.png" loading="lazy"></p><p>個別コンポーネント のインストールが終わると、元のターミナルで次に進めるようになる。</p><p>インストールを続行するため、<code>1</code> を入力してエンターキーを押す。</p><p><img src="2024-02-12_191841.png" loading="lazy"></p><p>いろいろと文字が流れて最終的に <code>Great!</code> と表示されれインストールが完了となる。</p><p><img src="2024-02-12_192253.png" loading="lazy"></p><p>ちなみに次のものがインストールされた。</p><ul><li>cargo（パッケージマネージャとビルドシステム）</li><li>rustc（コンパイラ）</li><li>標準ライブラリ等</li></ul><p>以下のコマンドで Rust が正しくインストールされているか確認できる。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rustc --version</span><br><span class="line">cargo --version</span><br></pre></td></tr></table></figure><p>結果は次の通りとなった。</p><ul><li>rustc 1.76.0 (07dca489a 2024-02-04)</li><li>cargo 1.76.0 (c84b36747 2024-01-18)</li></ul><p><img src="2024-02-15_143448.png" loading="lazy"></p><h2 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h2><p>以下のコマンドで新しいプロジェクトを作成する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new hello-rust</span><br></pre></td></tr></table></figure><p><img src="2024-02-12_192653.png" loading="lazy"></p><p><code>hello_rust</code> ディレクトリが作られ、基本的なプロジェクト構成がセットアップされる。</p><h2 id="プログラムのビルドと実行"><a href="#プログラムのビルドと実行" class="headerlink" title="プログラムのビルドと実行"></a>プログラムのビルドと実行</h2><p>プロジェクトディレクトリで以下のコマンドを実行してプログラムのビルドと実行をする。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure><p>コンパイルが行われ、プログラムが実行される。</p><p><code>Hello, world!</code> と表示されれば成功。</p><p><img src="2024-02-12_192911.png" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.rust-lang.org/">https://www.rust-lang.org/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Rust言語 を使うには、インストーラーでインストールする必要がある。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 23H2&lt;</summary>
      
    
    
    
    
    <category term="rust" scheme="https://noitaro.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>サービスアカウントで VM インスタンスに SSH 接続</title>
    <link href="https://noitaro.github.io/gcp-serviceaccount-ssh/"/>
    <id>https://noitaro.github.io/gcp-serviceaccount-ssh/</id>
    <published>2024-01-14T03:44:55.000Z</published>
    <updated>2024-03-18T02:41:41.071Z</updated>
    
    <content type="html"><![CDATA[<p>Google Cloud Platform (GCP) の VM インスタンスに、サービスアカウントで SSH 接続する方法です。</p><h2 id="この記事で説明すること"><a href="#この記事で説明すること" class="headerlink" title="この記事で説明すること"></a>この記事で説明すること</h2><ul><li>サービスアカウントに付与する権限 (ロール)</li><li>gcloud CLI での SSH 接続方法</li></ul><h2 id="この記事で説明しないこと"><a href="#この記事で説明しないこと" class="headerlink" title="この記事で説明しないこと"></a>この記事で説明しないこと</h2><ul><li>VM インスタンスの作り方</li><li>サービスアカウントの作り方</li><li>gcloud CLI のインストール方法</li></ul><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 23H2</li><li>WSL2</li></ul><h2 id="権限付与"><a href="#権限付与" class="headerlink" title="権限付与"></a>権限付与</h2><p>サービスアカウントに権限を付与します。</p><p><a href="https://console.cloud.google.com/iam-admin/iam">IAM</a> の <code>アクセス権を付与</code> を選択</p><p><img src="20240114-1.png" loading="lazy"></p><ul><li><code>新しいプリンシバル</code> に サービスアカウントの <code>client_email</code> を入力</li><li><code>ロール</code> に <code>サービスアカウントユーザー</code> を指定</li><li><code>ロール</code> に <code>Compute インスタンス管理者</code> を指定</li></ul><p><img src="20240114-2.png" loading="lazy"></p><p>ちなみに <code>サービスアカウントユーザー</code> は <code>Service Accounts -&gt; サービス アカウント ユーザー</code> にある。<br><img src="20240114-3.png" loading="lazy"></p><p><code>Compute インスタンス管理者</code> は <code>Compute Engine -&gt; Compute インスタンス管理者</code> にある。 <code>v1</code> でも <code>ベータ版</code> でもどちらでもよい。<br><img src="20240114-4.png" loading="lazy"></p><h2 id="gcloud-で-SSH-接続"><a href="#gcloud-で-SSH-接続" class="headerlink" title="gcloud で SSH 接続"></a>gcloud で SSH 接続</h2><p>gcloud に自分の GMail ではなく、サービスアカウントで承認します。</p><p>サービスアカウントの JSONファイルは、事前に作成&amp;ダウンロードしておく。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud auth activate-service-account [ACCOUNT] --key-file=KEY_FILE</span><br></pre></td></tr></table></figure><p><a href="https://cloud.google.com/sdk/gcloud/reference/auth/activate-service-account">https://cloud.google.com/sdk/gcloud/reference/auth/activate-service-account</a></p><p>実際はこんな感じになる。</p><p><img src="20240114-5.png" loading="lazy"></p><p>次のコマンドで VM インスタンス に SSH 接続します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute ssh INSTANCE [--zone=ZONE] [--project=PROJECT]</span><br></pre></td></tr></table></figure><p><a href="https://cloud.google.com/sdk/gcloud/reference/compute/ssh">https://cloud.google.com/sdk/gcloud/reference/compute/ssh</a></p><p>実際はこんな感じになる。<br><img src="20240114-7.png" loading="lazy"></p><p>ちなみに <code>VM インスタンス</code> ページの <code>gcloud コマンドを表示</code> で、接続コマンドがコピーできる。</p><p><img src="20240114-6.png" loading="lazy"></p><h2 id="エラー対応"><a href="#エラー対応" class="headerlink" title="エラー対応"></a>エラー対応</h2><p>権限が正しく付与されていないと次のエラーが表示される。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: (gcloud.compute.ssh) Could not fetch resource:</span><br><span class="line"> - Required &#x27;compute.projects.get&#x27; permission for &#x27;projects/*****&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: (gcloud.compute.ssh) Could not add SSH key to instance metadata:</span><br><span class="line"> - Required &#x27;compute.instances.setMetadata&#x27; permission for &#x27;projects/*****/zones/us-central1-a/instances/instance-1&#x27;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.google.com/iam/docs/understanding-roles">IAM basic and predefined roles reference | IAM Documentation | Google Cloud</a><br><a href="https://cloud.google.com/sdk/docs/install">gcloud CLI をインストールする | Google Cloud CLI のドキュメント</a><br><a href="https://zenn.dev/pino0701/articles/gcloud_install">WSL2(ubuntu-22.04)にgcloud CLIをインストールする【2023年7月】</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Google Cloud Platform (GCP) の VM インスタンスに、サービスアカウントで SSH 接続する方法です。&lt;/p&gt;
&lt;h2 id=&quot;この記事で説明すること&quot;&gt;&lt;a href=&quot;#この記事で説明すること&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="google" scheme="https://noitaro.github.io/tags/google/"/>
    
    <category term="gcp" scheme="https://noitaro.github.io/tags/gcp/"/>
    
  </entry>
  
  <entry>
    <title>PDF にフォームを埋め込む</title>
    <link href="https://noitaro.github.io/pdf-form/"/>
    <id>https://noitaro.github.io/pdf-form/</id>
    <published>2023-12-01T01:18:39.000Z</published>
    <updated>2024-03-18T02:41:41.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PDFフォームとは？"><a href="#PDFフォームとは？" class="headerlink" title="PDFフォームとは？"></a>PDFフォームとは？</h1><p>PDFフォームは、PDFファイルの中に入力可能なフィールドが組み込まれているものです。</p><p>ユーザーがPDFフォームに情報を入力し印刷することが可能。</p><p>ブラウザーでも開いて入力することができるが、日本語入力ができない。</p><p>PDFフォームに日本語を入力したい場合は、Adobe Acrobat を使う。</p><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><p><a href="https://pdf-lib.js.org/">PDF-LIB</a> を使う。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pdf-lib</span><br></pre></td></tr></table></figure><h1 id="ソース"><a href="#ソース" class="headerlink" title="ソース"></a>ソース</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PDFDocument</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;pdf-lib&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PDFフォームを操作する非同期関数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">pdfForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// PDFを取得し、バイト配列として読み込む</span></span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;https://www.env.go.jp/content/900473371.pdf&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> existingPdfBytes = <span class="keyword">await</span> <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">arrayBuffer</span>())</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PDF内のページを取得</span></span><br><span class="line">  <span class="keyword">const</span> pdfDoc = <span class="keyword">await</span> <span class="title class_">PDFDocument</span>.<span class="title function_">load</span>(existingPdfBytes)</span><br><span class="line">  <span class="keyword">const</span> pages = pdfDoc.<span class="title function_">getPages</span>()</span><br><span class="line">  <span class="keyword">const</span> firstPage = pages[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// テキストフィールドを作成し、ページに追加</span></span><br><span class="line">  <span class="keyword">const</span> superheroField = form.<span class="title function_">createTextField</span>(<span class="string">&#x27;favorite.superhero&#x27;</span>)</span><br><span class="line">  superheroField.<span class="title function_">setText</span>(<span class="string">&#x27;One Punch Man&#x27;</span>)</span><br><span class="line">  superheroField.<span class="title function_">addToPage</span>(firstPage, &#123; <span class="attr">x</span>: <span class="number">55</span>, <span class="attr">y</span>: <span class="number">640</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 変更を加えたPDFを保存</span></span><br><span class="line">  <span class="keyword">const</span> pdfBytes = <span class="keyword">await</span> pdfDoc.<span class="title function_">save</span>()</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([pdfBytes], &#123; <span class="attr">type</span>: <span class="string">&#x27;application/pdf&#x27;</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">  <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  a.<span class="property">href</span> = url;</span><br><span class="line">  a.<span class="property">download</span> = <span class="string">&#x27;updated-document.pdf&#x27;</span>;</span><br><span class="line">  a.<span class="title function_">click</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PDFフォームとは？&quot;&gt;&lt;a href=&quot;#PDFフォームとは？&quot; class=&quot;headerlink&quot; title=&quot;PDFフォームとは？&quot;&gt;&lt;/a&gt;PDFフォームとは？&lt;/h1&gt;&lt;p&gt;PDFフォームは、PDFファイルの中に入力可能なフィールドが組み込まれている</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
    <category term="pdf" scheme="https://noitaro.github.io/tags/pdf/"/>
    
  </entry>
  
  <entry>
    <title>複数のEXCELシートを1つのEXCELにまとめる</title>
    <link href="https://noitaro.github.io/exceljs-merge-sheets/"/>
    <id>https://noitaro.github.io/exceljs-merge-sheets/</id>
    <published>2023-11-30T08:26:53.000Z</published>
    <updated>2024-03-18T02:41:41.039Z</updated>
    
    <content type="html"><![CDATA[<p>ExcelJSを使用して、2つのExcelブックのシートを1つのシートにまとめる方法</p><h1 id="ExcelJSのインストール"><a href="#ExcelJSのインストール" class="headerlink" title="ExcelJSのインストール"></a>ExcelJSのインストール</h1><p>Node.jsプロジェクトにExcelJSをインストールする。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install exceljs</span><br></pre></td></tr></table></figure><h1 id="ソース"><a href="#ソース" class="headerlink" title="ソース"></a>ソース</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ExcelJS</span> <span class="keyword">from</span> <span class="string">&#x27;exceljs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2つのExcelファイルのシートを1つに統合する。</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mergeExcelSheets</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1つ目のExcelファイルを読み込み</span></span><br><span class="line">  <span class="keyword">const</span> workbook1 = <span class="keyword">new</span> <span class="title class_">ExcelJS</span>.<span class="title class_">Workbook</span>();</span><br><span class="line">  <span class="keyword">await</span> workbook1.<span class="property">xlsx</span>.<span class="title function_">readFile</span>(<span class="string">&#x27;book1.xlsx&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2つ目のExcelファイルを読み込み</span></span><br><span class="line">  <span class="keyword">const</span> workbook2 = <span class="keyword">new</span> <span class="title class_">ExcelJS</span>.<span class="title class_">Workbook</span>();</span><br><span class="line">  <span class="keyword">await</span> workbook2.<span class="property">xlsx</span>.<span class="title function_">readFile</span>(<span class="string">&#x27;book2.xlsx&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2つ目のExcelの全シートを1つ目のExcelに統合</span></span><br><span class="line">  workbook2.<span class="title function_">eachSheet</span>(<span class="function">(<span class="params">worksheet</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cloneSheet = workbook1.<span class="title function_">addWorksheet</span>(<span class="string">&quot;Clone&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> tmpModel = <span class="title function_">structuredClone</span>(worksheet.<span class="property">model</span>);</span><br><span class="line">    cloneSheet.<span class="property">model</span> = tmpModel;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 統合したワークブックを保存</span></span><br><span class="line">  <span class="keyword">await</span> workbook1.<span class="property">xlsx</span>.<span class="title function_">writeFile</span>(<span class="string">&#x27;book1-merged.xlsx&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意として、同じシート名が存在するエラーになる。</p><p>エラーを回避するには、コピーするときにシート名を変更する必要がある。</p><p>React やブラウザーで使いたい場合は Excelファイル をダウンロードすることになる。</p><p>ファイルをダウンロードするには axios を使う。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">`https://example.com/book1.xlsx`</span>, &#123; <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(response.<span class="property">data</span>);</span><br><span class="line"><span class="keyword">const</span> workbook1 = <span class="keyword">new</span> <span class="title class_">ExcelJS</span>.<span class="title class_">Workbook</span>();</span><br><span class="line"><span class="keyword">await</span> workbook1.<span class="property">xlsx</span>.<span class="title function_">load</span>(data);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ExcelJSを使用して、2つのExcelブックのシートを1つのシートにまとめる方法&lt;/p&gt;
&lt;h1 id=&quot;ExcelJSのインストール&quot;&gt;&lt;a href=&quot;#ExcelJSのインストール&quot; class=&quot;headerlink&quot; title=&quot;ExcelJSのインストール</summary>
      
    
    
    
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
    <category term="excel" scheme="https://noitaro.github.io/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>VRoid Studio で作ったアバターを VRChat で使う</title>
    <link href="https://noitaro.github.io/vroidstudio-to-vrchat-avator/"/>
    <id>https://noitaro.github.io/vroidstudio-to-vrchat-avator/</id>
    <published>2023-10-28T10:27:53.000Z</published>
    <updated>2024-03-18T02:41:40.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Unity v2019.4.31f1</li><li>VRChat Creator Companion v2.1.6</li><li>VRM Converter for VRChat</li><li>VRoid Studio v1.24.1</li></ul><h2 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h2><h3 id="Unity"><a href="#Unity" class="headerlink" title="Unity"></a>Unity</h3><p><a href="https://unity.com/releases/editor/archive">https://unity.com/releases/editor/archive</a></p><p><code>Unity 2019.4.31</code> をダウンロード &amp; インストール</p><p>Unity Hub を介してインストールするため <code>Unity Hub</code> をクリック</p><p><img src="2023-10-29_173323.png" loading="lazy"></p><p><img src="2023-10-29_173333.png" loading="lazy"></p><p>Unity Hub が起動する。</p><p><img src="2023-10-29_173406.png" loading="lazy"></p><p><img src="2023-10-29_174859.png" loading="lazy"></p><h3 id="VRChat-Creator-Companion"><a href="#VRChat-Creator-Companion" class="headerlink" title="VRChat Creator Companion"></a>VRChat Creator Companion</h3><p><a href="https://vrchat.com/home/download">https://vrchat.com/home/download</a></p><p><code>VRChat_CreatorCompanion_Setup_2.1.6.exe</code> をダウンロード &amp; インストール</p><p><img src="2023-10-28_193641.png" loading="lazy"></p><h3 id="VRM-Converter-for-VRChat"><a href="#VRM-Converter-for-VRChat" class="headerlink" title="VRM Converter for VRChat"></a>VRM Converter for VRChat</h3><p>VRMモデルをVRChat用アバターへ変換するために必要</p><p>クリエイターコンパニオンを起動して <code>Settings &gt; Packages &gt; Add Repository</code> をクリック</p><p><img src="2023-10-29_210729.png" loading="lazy"></p><p><code>Repository Listing URL</code> に次のURLをコピペして <code>Add</code> をクリック</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://esperecyan.github.io/VRMConverterForVRChat/registry.json</span><br></pre></td></tr></table></figure><p><img src="2023-10-29_210834.png" loading="lazy"></p><p>確認画面がでるので <code>I Understand, Add Repository</code> をクリック</p><p><img src="2023-10-29_210902.png" loading="lazy"></p><p><code>Community Repositories</code> に <a href="https://pokemori.booth.pm/items/1025226">100の人</a> のリポジトリが追加されればOK</p><p><img src="2023-10-29_210917.png" loading="lazy"></p><h3 id="VRMモデル"><a href="#VRMモデル" class="headerlink" title="VRMモデル"></a>VRMモデル</h3><p>事前に <code>VRoid Studio</code> でVRMモデルを作成しておく。</p><p><img src="2023-10-30_123506.png" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="クリエイターコンパニオン"><a href="#クリエイターコンパニオン" class="headerlink" title="クリエイターコンパニオン"></a>クリエイターコンパニオン</h3><p>インストールした <code>CreatorCompanion.exe</code> を実行</p><p><img src="2023-10-29_195410.png" loading="lazy"></p><p>今回はアバターを作りたいので、右上の <code>Avatars</code> を選択し <code>Create Project</code> をクリック</p><p><img src="2023-10-29_195617.png" loading="lazy"></p><p>Manage Packages 画面に遷移するので <code>VRM Converter for VRChat</code> の <code>＋</code> をクリックして、プロジェクトにパッケージを追加する。</p><p><img src="2023-10-29_211835.png" loading="lazy"></p><p>その後 <code>Open Project</code> をクリックしてプロジェクトを開く</p><p><img src="2023-10-29_200026.png" loading="lazy"></p><h3 id="VRMモデルのインポート"><a href="#VRMモデルのインポート" class="headerlink" title="VRMモデルのインポート"></a>VRMモデルのインポート</h3><p>Unity が起動したら VRMモデル をインポートします。</p><p><code>VRM0 &gt; Imoirt from VRM 0.x</code> を選択</p><p><img src="2023-10-30_110348.png" loading="lazy"></p><p><code>VRoid Studio</code> で作成した <code>VRMモデル</code> を選択</p><p><img src="2023-10-30_124111.png" loading="lazy"></p><p>プレハブの保存先を指定（特に変える必要なし）</p><p><img src="2023-10-30_124146.png" loading="lazy"></p><p><code>Assets</code> の中に VRMモデルがインポートされる。</p><p><img src="2023-10-30_124358.png" loading="lazy"></p><h3 id="VRChatアバターに変換"><a href="#VRChatアバターに変換" class="headerlink" title="VRChatアバターに変換"></a>VRChatアバターに変換</h3><p>Assets のモデルを選択してから <code>VRM0 &gt; Duplicate and Convert for VRChat</code> をクリック</p><p><img src="2023-10-30_124732.png" loading="lazy"></p><p>アバター設定画面が表示されるので <code>複製して変換</code> をクリック</p><p><img src="2023-10-30_125408.png" loading="lazy"></p><p>保存先を指定して <code>保存</code> をクリック</p><p><img src="2023-10-30_125425.png" loading="lazy"></p><p>変換された VRChatモデル が保存される。</p><p><img src="2023-10-30_125559.png" loading="lazy"></p><h3 id="VRChatへアップロード"><a href="#VRChatへアップロード" class="headerlink" title="VRChatへアップロード"></a>VRChatへアップロード</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Unity v2019.4.31f1&lt;/li&gt;
&lt;li&gt;VRChat Creator Companion v2.1.6&lt;/li&gt;</summary>
      
    
    
    
    
    <category term="vr" scheme="https://noitaro.github.io/tags/vr/"/>
    
  </entry>
  
  <entry>
    <title>【Python】エクセルファイルをPDFに変換する</title>
    <link href="https://noitaro.github.io/python-xlsx2pdf/"/>
    <id>https://noitaro.github.io/python-xlsx2pdf/</id>
    <published>2023-10-23T09:57:37.000Z</published>
    <updated>2024-03-18T02:41:41.499Z</updated>
    
    <content type="html"><![CDATA[<p>エクセルファイルをPDFに変換するWEBサービスを作ります。</p><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><ul><li>エクセルファイルアップロードすると、PDFファイルがダウンロードできるようにする。</li><li>Dockerfile を使ってデプロイを簡単にする。</li></ul><h2 id="ファイル構成"><a href="#ファイル構成" class="headerlink" title="ファイル構成"></a>ファイル構成</h2><p>この3つで完結できます。</p><ul><li>Dockerfile</li><li>main.py</li><li>requirements.txt</li></ul><p><img src="2023-10-23_190240.png" loading="lazy"></p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>PythonアプリケーションをDockerコンテナで実行する構成となっています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.9-alpine3.12</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . /app</span><br><span class="line"></span><br><span class="line">RUN apk update</span><br><span class="line"></span><br><span class="line">RUN apk add --no-cache --virtual .build-rundeps \</span><br><span class="line">    linux-headers \</span><br><span class="line">    build-base \</span><br><span class="line">    mariadb-connector-c-dev \</span><br><span class="line">    libxml2-dev \</span><br><span class="line">    libxslt-dev</span><br><span class="line"></span><br><span class="line">RUN  apk add --no-cache --virtual .libreoffice-rundeps \</span><br><span class="line">    libreoffice \</span><br><span class="line">    libreoffice-base \</span><br><span class="line">    libreoffice-lang-ja \</span><br><span class="line">    font-noto-cjk</span><br><span class="line"></span><br><span class="line">COPY requirements.txt .</span><br><span class="line">RUN pip install --upgrade pip</span><br><span class="line">RUN python3 -m pip install --no-cache-dir -r requirements.txt</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD [&quot;uvicorn&quot;, &quot;main:app&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;, &quot;--port&quot;, &quot;80&quot;]</span><br></pre></td></tr></table></figure><h3 id="Dockerfileの説明"><a href="#Dockerfileの説明" class="headerlink" title="Dockerfileの説明"></a>Dockerfileの説明</h3><h4 id="ベースイメージの設定"><a href="#ベースイメージの設定" class="headerlink" title="ベースイメージの設定"></a>ベースイメージの設定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.9-alpine3.12</span><br></pre></td></tr></table></figure><p>Python 3.9 がインストールされた Alpine Linux 3.12 イメージをベースに使用します。</p><h4 id="作業ディレクトリの設定"><a href="#作業ディレクトリの設定" class="headerlink" title="作業ディレクトリの設定"></a>作業ディレクトリの設定</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /app</span><br></pre></td></tr></table></figure><p>作業ディレクトリをコンテナ内の <code>app</code> に設定します。</p><h4 id="ファイルのコピー"><a href="#ファイルのコピー" class="headerlink" title="ファイルのコピー"></a>ファイルのコピー</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY . /app</span><br></pre></td></tr></table></figure><p>ホストマシンの現在のディレクトリの内容をコンテナ内の <code>app</code> にコピーします。</p><h4 id="パッケージの更新"><a href="#パッケージの更新" class="headerlink" title="パッケージの更新"></a>パッケージの更新</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN apk update</span><br></pre></td></tr></table></figure><p>Alpine Linux のパッケージリストを更新します。</p><h4 id="依存パッケージのインストール（ビルド関連）"><a href="#依存パッケージのインストール（ビルド関連）" class="headerlink" title="依存パッケージのインストール（ビルド関連）"></a>依存パッケージのインストール（ビルド関連）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RUN apk add --no-cache --virtual .build-rundeps \</span><br><span class="line">    linux-headers \</span><br><span class="line">    build-base \</span><br><span class="line">    mariadb-connector-c-dev \</span><br><span class="line">    libxml2-dev \</span><br><span class="line">    libxslt-dev</span><br></pre></td></tr></table></figure><p>ビルドに関連する依存パッケージをインストールします。</p><h4 id="依存パッケージのインストール（LibreOffice関連）"><a href="#依存パッケージのインストール（LibreOffice関連）" class="headerlink" title="依存パッケージのインストール（LibreOffice関連）"></a>依存パッケージのインストール（LibreOffice関連）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RUN  apk add --no-cache --virtual .libreoffice-rundeps \</span><br><span class="line">    libreoffice \</span><br><span class="line">    libreoffice-base \</span><br><span class="line">    libreoffice-lang-ja \</span><br><span class="line">    font-noto-cjk</span><br></pre></td></tr></table></figure><p>LibreOffice および関連パッケージをインストールします。</p><h4 id="Python-の依存ライブラリのインストール"><a href="#Python-の依存ライブラリのインストール" class="headerlink" title="Python の依存ライブラリのインストール"></a>Python の依存ライブラリのインストール</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COPY requirements.txt .</span><br><span class="line">RUN pip install --upgrade pip</span><br><span class="line">RUN python3 -m pip install --no-cache-dir -r requirements.txt</span><br></pre></td></tr></table></figure><p>Python の依存ライブラリを <code>requirements.txt</code> ファイルに基づいてインストールします。</p><h4 id="ポートの公開"><a href="#ポートの公開" class="headerlink" title="ポートの公開"></a>ポートの公開</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><p>コンテナがポート 80 を外部に公開することを宣言します。</p><h4 id="コンテナの起動コマンド"><a href="#コンテナの起動コマンド" class="headerlink" title="コンテナの起動コマンド"></a>コンテナの起動コマンド</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;uvicorn&quot;, &quot;main:app&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;, &quot;--port&quot;, &quot;80&quot;]</span><br></pre></td></tr></table></figure><p>コンテナが起動された際に実行されるコマンドを指定します。 <code>uvicorn</code> を使用して Pythonアプリケーション を <code>ホスト:0.0.0.0</code> の <code>ポート:80</code> で実行します。</p><h2 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h2><ul><li>FastAPI を使用してWebサービスを構築します。</li><li>ExcelファイルからPDFへの変換機能を提供します。</li><li>ユーザーはExcelファイルをアップロードし、変換されたPDFファイルを受け取ることができます。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line">import tempfile</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">from fastapi import FastAPI, UploadFile</span><br><span class="line">from fastapi.responses import FileResponse</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">def convertXlsx2Pdf(out_path, file_name):</span><br><span class="line">    cmd = []</span><br><span class="line">    cmd.append(&quot;libreoffice&quot;)</span><br><span class="line">    cmd.append(&quot;--headless&quot;)</span><br><span class="line">    cmd.append(&quot;--nologo&quot;)</span><br><span class="line">    cmd.append(&quot;--nofirststartwizard&quot;)</span><br><span class="line">    cmd.append(&quot;--convert-to&quot;)</span><br><span class="line">    cmd.append(&quot;pdf:calc_pdf_Export&quot;)</span><br><span class="line">    cmd.append(&quot;--outdir&quot;)</span><br><span class="line">    cmd.append(out_path)</span><br><span class="line">    cmd.append(file_name)</span><br><span class="line"></span><br><span class="line">    subprocess.run(&quot; &quot;.join(cmd), shell=True)</span><br><span class="line"></span><br><span class="line">@app.post(&quot;/xlsx2pdf/&quot;)</span><br><span class="line">async def create_upload_file(upload_file: UploadFile):</span><br><span class="line"></span><br><span class="line">    with tempfile.NamedTemporaryFile(delete=False) as temp_file:</span><br><span class="line">        shutil.copyfileobj(upload_file.file, temp_file)</span><br><span class="line"></span><br><span class="line">    convertXlsx2Pdf(&#x27;./work&#x27;, temp_file.name)</span><br><span class="line"></span><br><span class="line">    temp_file_name = os.path.basename(temp_file.name)</span><br><span class="line">    upload_file_name = upload_file.filename.rsplit(&#x27;.&#x27;, 1)[0]</span><br><span class="line"></span><br><span class="line">    return FileResponse(f&#x27;./work/&#123;temp_file_name&#125;.pdf&#x27;, media_type=&#x27;application/octet-stream&#x27;, filename=f&#x27;&#123;upload_file_name&#125;.pdf&#x27;)</span><br></pre></td></tr></table></figure><h2 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fastapi==0.104.0</span><br><span class="line">uvicorn==0.23.2</span><br><span class="line">python-multipart==0.0.6</span><br></pre></td></tr></table></figure><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>次のコマンドで <code>Dockerイメージ</code> を作成し、<code>Dockerコンテナー</code> を実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t xlsx2pdf-image .</span><br><span class="line">docker run -p 80:80 xlsx2pdf-image</span><br></pre></td></tr></table></figure><p>Dockerコンテナーが起動したらブラウザーで <a href="http://localhost/docs">http://localhost/docs</a> を開くことができます。</p><p><img src="2023-10-23_193840.png" loading="lazy"></p><ul><li>XLSXファイルをアップロードする。</li><li>Execute で ファイルを POST する。</li><li>Download file で 変換されたPDFをダウンロードする。</li></ul><p><img src="2023-10-23_194340.png" loading="lazy"></p><p>あとは、自身のWEBサービスから呼んであげてください。</p><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><a href="https://github.com/noitaro/python-xlsx2pdf">https://github.com/noitaro/python-xlsx2pdf</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;エクセルファイルをPDFに変換するWEBサービスを作ります。&lt;/p&gt;
&lt;h2 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;エクセルファイルアップロードすると、PDFフ</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>【Minecraft 1.12.2】BuildCraft を入れる</title>
    <link href="https://noitaro.github.io/buildcraft-for-minecraft/"/>
    <id>https://noitaro.github.io/buildcraft-for-minecraft/</id>
    <published>2023-10-14T11:46:53.000Z</published>
    <updated>2024-03-18T02:41:40.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 22H2</li><li>Minecraft v1.12.2</li><li>BuildCraft v7.99.24.8</li><li>Forge v14.23.5.2860</li></ul><h2 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h2><h3 id="BuildCraft"><a href="#BuildCraft" class="headerlink" title="BuildCraft"></a>BuildCraft</h3><p><code>Minecraft 1.12.2</code> に対応している <code>BuildCraft 7.99.24.8</code> をダウンロードします。</p><p><a href="https://mod-buildcraft.com/pages/download.html">https://mod-buildcraft.com/pages/download.html</a></p><p><img src="2023-10-14_215956.png" loading="lazy"></p><h3 id="Forge"><a href="#Forge" class="headerlink" title="Forge"></a>Forge</h3><p><code>Minecraft 1.12.2</code> に対応している <code>Forge 14.23.5.2860</code> をダウンロードします。</p><p><a href="https://files.minecraftforge.net/net/minecraftforge/forge/index_1.12.2.html">https://files.minecraftforge.net/net/minecraftforge/forge/index_1.12.2.html</a></p><p><code>Installer</code> をクリックし、</p><p><img src="2023-10-14_211543.png" loading="lazy"></p><p>右上の <code>SKIP</code> をクリックすると <code>forge-1.12.2-14.23.5.2860-installer.jar</code> がダウンロードできます。</p><p><img src="2023-10-14_211630.png" loading="lazy"></p><p>保存先はとりあえず <code>D:\Minecraft</code> にしました。</p><p><img src="2023-10-14_212418.png" loading="lazy"></p><h4 id="警告がでる場合は？"><a href="#警告がでる場合は？" class="headerlink" title="警告がでる場合は？"></a>警告がでる場合は？</h4><p>たまに警告が表示されるけど、<code>保存</code> を押せば問題なくダウンロードできる。</p><p><img src="2023-10-14_211709.png" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="起動構成"><a href="#起動構成" class="headerlink" title="起動構成"></a>起動構成</h3><p>Minecraft 1.12.2 を起動できるようにします。</p><p>Minecraft Java Edition の <code>起動構成 -&gt; 新規作成</code> をクリックします。</p><p><img src="2023-10-14_205132.png" loading="lazy"></p><p>バージョンのところに <code>1.12.2</code> と入力し、BuildCraft が対応している <code>Minecraft 1.12.2</code> を入手します。</p><p><img src="2023-10-14_205908.png" loading="lazy"></p><p><code>Minecraft 1.12.2</code> が追加されたことを確認します。</p><p><img src="2023-10-14_210228.png" loading="lazy"></p><h3 id="Forge-のインストール"><a href="#Forge-のインストール" class="headerlink" title="Forge のインストール"></a>Forge のインストール</h3><p>事前にダウンロードしておいた <code>forge-1.12.2-14.23.5.2860-installer.jar</code> を実行してインストールします。</p><p><img src="2023-10-14_212854.png" loading="lazy"></p><p><code>OK</code> を押すとインストールが始まります。</p><p><img src="2023-10-14_213636.png" loading="lazy"></p><h3 id="MOD用のゲームディレクトリ"><a href="#MOD用のゲームディレクトリ" class="headerlink" title="MOD用のゲームディレクトリ"></a>MOD用のゲームディレクトリ</h3><p>バニラ構成とMOD構成を分けるため、MOD用のゲームディレクトリを作成します。</p><p>適当なフォルダーを作成し、起動構成を作成します。</p><p>今回は <code>D:\Minecraft\Forge_14.23.5</code> というフォルダーを作成してゲームディレクトリに設定します。</p><p><img src="2023-10-14_214408.png" loading="lazy"></p><ul><li>名前: <code>Forge_14.23.5</code></li><li>バージョン: <code>release 1.12.2-forge-14.23.5.2860</code></li><li>ゲームディレクトリ: <code>D:\Minecraft\Forge_14.23.5</code></li></ul><p><img src="2023-10-14_214627.png" loading="lazy"></p><p>今作った <code>Forge_14.23.5</code> の起動構成でゲームを開始します。</p><p><img src="2023-10-14_214919.png" loading="lazy"></p><p><code>Minecraft 1.12.2</code> に <code>Forge 14.23.5</code> が導入できていることが確認できます。</p><p><img src="2023-10-14_215158.png" loading="lazy"></p><h3 id="MOD導入"><a href="#MOD導入" class="headerlink" title="MOD導入"></a>MOD導入</h3><p>事前にダウンロードしておいた <code>buildcraft-all-7.99.24.8.jar</code> を <code>D:\Minecraft\Forge_14.23.5\mods</code> フォルダーにコピペします。</p><p>これでMODの導入は完了です。</p><p>ゲームを実行して <code>Mods</code> を確認すると <code>BuildCraft</code> が認識されています。</p><p><img src="2023-10-14_220450.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 22H2&lt;/li&gt;
&lt;li&gt;Minecraft v1.12.2&lt;/li&gt;
&lt;li&gt;BuildCr</summary>
      
    
    
    
    
    <category term="game" scheme="https://noitaro.github.io/tags/game/"/>
    
    <category term="minecraft" scheme="https://noitaro.github.io/tags/minecraft/"/>
    
    <category term="mod" scheme="https://noitaro.github.io/tags/mod/"/>
    
  </entry>
  
  <entry>
    <title>アンドロイドゲームに ModMenu を追加する</title>
    <link href="https://noitaro.github.io/android-mod-menu-added/"/>
    <id>https://noitaro.github.io/android-mod-menu-added/</id>
    <published>2023-09-24T03:58:56.000Z</published>
    <updated>2024-03-18T02:41:40.675Z</updated>
    
    <content type="html"><![CDATA[<p>今回使うAPKファイルは Unity で自作したものです。一般にリリースされてるスマホゲームでも可能ですが、全て自己責任でお願いいたします。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 22H2</li><li>Java v17.0.8</li><li>APK Easy Tool v1.60</li><li>Apktool v2.8.1</li><li>Mod Menu Template v3.2</li><li>Android Studio Giraffe | 2022.3.1 Patch 1</li></ul><p>今回は Dドライブの直下に <code>work</code> フォルダーを作成して、そのフォルダーの中で全て作業します。</p><h2 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h2><h3 id="APK-Easy-Tool"><a href="#APK-Easy-Tool" class="headerlink" title="APK Easy Tool"></a>APK Easy Tool</h3><p><a href="https://forum.xda-developers.com/t/discontinued-windows-apk-easy-tool-v1-60-2022-06-23.3333960/">https://forum.xda-developers.com/t/discontinued-windows-apk-easy-tool-v1-60-2022-06-23.3333960/</a></p><p>少しスクロールして Download links の Box からダウンロードすることができます。</p><p><img src="2023-09-24_192954.png" loading="lazy"></p><p><code>APK Easy Tool v1.60 Portable.zip</code> を右クリックするとダウンロードボタン表示されるので、work フォルダーにダウンロードします。</p><p><img src="2023-09-24_193018.png" loading="lazy"></p><p>ダウンロードできたら展開しておきます。</p><p><img src="2023-09-24_193346.png" loading="lazy"></p><h3 id="Apktool"><a href="#Apktool" class="headerlink" title="Apktool"></a>Apktool</h3><p><a href="https://apktool.org/">https://apktool.org/</a></p><p>右上の Download から <code>apktool_2.8.1.jar</code> を work フォルダーにダウンロードします。</p><p><img src="2023-09-24_191133.png" loading="lazy"></p><h3 id="Mod-Menu-Template"><a href="#Mod-Menu-Template" class="headerlink" title="Mod Menu Template"></a>Mod Menu Template</h3><p><a href="https://github.com/LGLTeam/Android-Mod-Menu/releases">https://github.com/LGLTeam/Android-Mod-Menu/releases</a></p><p><code>Android-Mod-Menu-3.2.zip</code> をダウンロードして展開しておきます。</p><p><img src="2023-09-24_214402.png" loading="lazy"></p><h2 id="APK-Easy-Tool-を使ってメインアクティビティを探す"><a href="#APK-Easy-Tool-を使ってメインアクティビティを探す" class="headerlink" title="APK Easy Tool を使ってメインアクティビティを探す"></a>APK Easy Tool を使ってメインアクティビティを探す</h2><p>メインアクティビティが何なのか必要なため、事前に特定しておきます。</p><p>展開しておいた <code>APK Easy Tool v1.60 Portable</code> フォルダー内の <code>apkeasytool.exe</code> を実行します。</p><p>PC保護が表示される場合は、プロパティの <code>セキュリティ: 許可する</code> にチェックすると以後表示されなくなります。</p><p><img src="2023-09-24_193724.png" loading="lazy"></p><p><code>Browse</code> をクリックしてAPKファイルを選択すると、<code>Launch activity</code> にメインアクティビティが表示されるので、メモしておきます。</p><p><img src="2023-09-24_193848.png" loading="lazy"></p><p>今回のゲームは <code>com.unity3d.player.UnityPlayerActivity</code> でした。</p><h2 id="APKファイルを逆コンパイルする"><a href="#APKファイルを逆コンパイルする" class="headerlink" title="APKファイルを逆コンパイルする"></a>APKファイルを逆コンパイルする</h2><p>Apktool を使って APKファイル を展開します。</p><p>次のコマンドをターミナルにコピペすると、展開することができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool_2.8.1.jar d unity-example.apk</span><br></pre></td></tr></table></figure><p><img src="2023-09-24_191712.png" loading="lazy"></p><p>ログ等は出ませんが、APKファイルと同じフォルダーが作られ、その中にデコードされたファイルが入っています。</p><p><img src="2023-09-24_191720.png" loading="lazy"></p><h2 id="ModMenu-を追加する"><a href="#ModMenu-を追加する" class="headerlink" title="ModMenu を追加する"></a>ModMenu を追加する</h2><p><code>UnityPlayerActivity.smali</code> ファイルを修正して ModMenu を追加します。</p><p><code>D:\work\unity-example\smali</code> フォルダーを起点にして、メインアクティビティ <code>smali</code> を開きます。</p><p>今回のメインアクティビティは <code>com.unity3d.player.UnityPlayerActivity</code> でしたので、<code>D:\work\unity-example\smali\com\unity3d\player\UnityPlayerActivity.smali</code> を開いて修正していきます。</p><p><img src="2023-09-24_194957.png" loading="lazy"></p><p><code>OnCreate</code> メソッドを検索して、次のコードをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-static &#123;p0&#125;, Lcom/android/support/Main;-&gt;Start(Landroid/content/Context;)V</span><br></pre></td></tr></table></figure><p>貼り付け位置は <code>OnCreate</code> メソッド内の <code>invoke-super</code> より前に貼り付けます。</p><p><img src="2023-09-24_195452.png" loading="lazy"></p><h2 id="オーバーレイを許可する"><a href="#オーバーレイを許可する" class="headerlink" title="オーバーレイを許可する"></a>オーバーレイを許可する</h2><p><code>AndroidManifest.xml</code> を開き、<code>SYSTEM_ALERT_WINDOW</code> が無い場合、追加します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt;</span><br></pre></td></tr></table></figure><p>アプリケーションの終了タグの上にサービスを追加します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;service android:name=&quot;com.android.support.Launcher&quot; android:enabled=&quot;true&quot; android:exported=&quot;false&quot; android:stopWithTask=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure><p><img src="2023-09-24_200204.png" loading="lazy"></p><h2 id="チート機能を作成する"><a href="#チート機能を作成する" class="headerlink" title="チート機能を作成する"></a>チート機能を作成する</h2><p>展開した <code>Android-Mod-Menu-3.2</code> を Android Studio で開いてチート機能を追加します。</p><p><img src="2023-09-24_214820.png" loading="lazy"></p><p>今回は特に触らずビルドします。</p><p><code>Build -&gt; Build Bundle(s)/APK(s) -&gt; Build APK(s)</code> からビルドしてAPKファイルを作成します。</p><p><img src="2023-09-24_215851.png" loading="lazy"></p><p><code>D:\work\Android-Mod-Menu-3.2\app\build\intermediates\apk\debug</code> に <code>app-debug.apk</code> が作成されます。</p><p>出来上がった <code>app-debug.apk</code> を <code>D:\work\</code> に移動させて逆コンパイルします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool_2.8.1.jar d app-debug.apk</span><br></pre></td></tr></table></figure><p>逆コンパイルされた <code>app-debug</code> フォルダー内の <code>smali</code> を <code>D:\work\unity-example\smali</code> にコピーします。</p><p><img src="2023-09-24_221226.png" loading="lazy"></p><p><code>app-debug</code> フォルダー内の ライブラリファイル (.so) を <code>D:\work\unity-example\lib</code> にコピーします。</p><p>今回は <code>armeabi-v7a</code> アーキテクチャしか無いので、それだけコピーしました。</p><p><img src="2023-09-24_221729.png" loading="lazy"></p><h2 id="APKファイルに戻す"><a href="#APKファイルに戻す" class="headerlink" title="APKファイルに戻す"></a>APKファイルに戻す</h2><p>次のコマンドを使って、修正したファイルを再度 APKファイルに戻します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool_2.8.1.jar b unity-example -o unity-example_moded.apk</span><br></pre></td></tr></table></figure><p><img src="2023-09-24_204409.png" loading="lazy"></p><h2 id="APKファイルに署名する"><a href="#APKファイルに署名する" class="headerlink" title="APKファイルに署名する"></a>APKファイルに署名する</h2><p><code>apksigner</code> ツールを使用して APK に署名します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apksigner sign --ks &quot;C:\Users\*****\.android\debug.keystore&quot; -v --v2-signing-enabled true --ks-key-alias androiddebugkey unity-example_moded.apk</span><br></pre></td></tr></table></figure><ul><li><code>apksigner</code> は Android Studio に含まれています。 私の場合は <code>C:\Users\*****\AppData\Local\Android\Sdk\build-tools\34.0.0\apksigner.bat</code> にありました。</li><li><code>debug.keystore</code> のパスワードは <code>android</code> です。</li></ul><p><img src="2023-09-24_213626.png" loading="lazy"></p><h2 id="動かしてみる"><a href="#動かしてみる" class="headerlink" title="動かしてみる"></a>動かしてみる</h2><p>エミュレーターや実機にインストールして動かしてみます。</p><p>インストールが出来たらアプリ情報を開いて <code>他のアプリの上に重ねて描画</code> を有効にします。</p><p><img src="Screenshot_20230925-101255.png" loading="lazy"></p><p>ゲームを起動して左側に ModMenu のアイコンが表示されます。</p><p><img src="Screenshot_20230925-101633.png" loading="lazy"></p><p>ModMenu のアイコンをタップして開くと、チートのオンオフが選択できます。今回は作ってないので何も機能しません。</p><p><img src="Screenshot_20230925-101639.png" loading="lazy"></p><h2 id="動かない場合は？"><a href="#動かない場合は？" class="headerlink" title="動かない場合は？"></a>動かない場合は？</h2><ul><li>アンドロイドのバージョンとゲームのバージョンが合ってるか確認する。</li></ul><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>次回は実際にチート機能を作っていきます。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今回使うAPKファイルは Unity で自作したものです。一般にリリースされてるスマホゲームでも可能ですが、全て自己責任でお願いいたします。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="android-studio" scheme="https://noitaro.github.io/tags/android-studio/"/>
    
    <category term="java" scheme="https://noitaro.github.io/tags/java/"/>
    
    <category term="cheat" scheme="https://noitaro.github.io/tags/cheat/"/>
    
    <category term="unity" scheme="https://noitaro.github.io/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>リバースエンジニアリングツール</title>
    <link href="https://noitaro.github.io/reverse-engineering-tools/"/>
    <id>https://noitaro.github.io/reverse-engineering-tools/</id>
    <published>2023-09-22T07:42:42.000Z</published>
    <updated>2024-03-18T02:41:41.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静的解析"><a href="#静的解析" class="headerlink" title="静的解析"></a>静的解析</h2><h3 id="JADX"><a href="#JADX" class="headerlink" title="JADX"></a>JADX</h3><p>Dex から Java への逆コンパイラ</p><p><a href="https://github.com/skylot/jadx">https://github.com/skylot/jadx</a></p><p>Android Dex および APK ファイルから Java ソースコードを生成する。</p><p><img src="142730720-839f017e-38db-423e-b53f-39f5f0a0316f.png" loading="lazy"></p><h3 id="Radare2"><a href="#Radare2" class="headerlink" title="Radare2"></a>Radare2</h3><p>リバースエンジニアリング コマンドラインツール</p><p><a href="https://github.com/radareorg/radare2">https://github.com/radareorg/radare2</a></p><p>バイナリの分析、エミュレート、デバッグ、変更、および逆アセンブルが可能。</p><p><img src="shot.png" loading="lazy"></p><h3 id="Ghidra"><a href="#Ghidra" class="headerlink" title="Ghidra"></a>Ghidra</h3><p>ソフトウェアリバースエンジニアリングフレームワーク</p><p><a href="https://github.com/NationalSecurityAgency/ghidra">https://github.com/NationalSecurityAgency/ghidra</a></p><p>Windows、macOS、Linux などのさまざまなプラットフォームでコンパイルされたコードを分析できる。逆アセンブリ、アセンブリ、逆コンパイル。さまざまなプロセッサ命令セットと実行可能形式をサポート。</p><p><img src="2023-09-22_171514.png" loading="lazy"></p><h3 id="IDA-Freeware"><a href="#IDA-Freeware" class="headerlink" title="IDA Freeware"></a>IDA Freeware</h3><p>TODO: 追記する。</p><h3 id="ReClass-NET"><a href="#ReClass-NET" class="headerlink" title="ReClass.NET"></a>ReClass.NET</h3><p>ReClass の .NET プラットフォーム移植版</p><p><a href="https://github.com/ReClassNET/ReClass.NET">https://github.com/ReClassNET/ReClass.NET</a></p><p><img src="68747470733a2f2f61626c6f61642e64652f696d672f6d61696e346873626a2e6a7067.jpg" loading="lazy"></p><h3 id="Cutter"><a href="#Cutter" class="headerlink" title="Cutter"></a>Cutter</h3><p>rizin を利用した無料のオープンソース リバース エンジニアリング プラットフォーム</p><p><a href="https://github.com/rizinorg/cutter">https://github.com/rizinorg/cutter</a></p><p><img src="screenshot.png" loading="lazy"></p><h3 id="Apktool"><a href="#Apktool" class="headerlink" title="Apktool"></a>Apktool</h3><p>Android apk ファイルをリバースエンジニアリングするためのツール</p><p><a href="https://github.com/iBotPeaches/Apktool">https://github.com/iBotPeaches/Apktool</a></p><h3 id="Il2CppDumper"><a href="#Il2CppDumper" class="headerlink" title="Il2CppDumper"></a>Il2CppDumper</h3><p>Unity il2cpp リバース エンジニアリング</p><p><a href="https://github.com/Perfare/Il2CppDumper">https://github.com/Perfare/Il2CppDumper</a></p><h2 id="動的解析"><a href="#動的解析" class="headerlink" title="動的解析"></a>動的解析</h2><h3 id="Cheat-Engine"><a href="#Cheat-Engine" class="headerlink" title="Cheat Engine"></a>Cheat Engine</h3><p>TODO: 追記する。</p><h3 id="x64dbg"><a href="#x64dbg" class="headerlink" title="x64dbg"></a>x64dbg</h3><p>Windows 用のオープンソースの x64&#x2F;x32 デバッガー</p><p><a href="https://x64dbg.com/">https://x64dbg.com/</a></p><p><img src="slide1.png" loading="lazy"></p><h3 id="DebugView"><a href="#DebugView" class="headerlink" title="DebugView"></a>DebugView</h3><p>デバッグ出力を監視するアプリケーション</p><p><a href="https://learn.microsoft.com/ja-jp/sysinternals/downloads/debugview">https://learn.microsoft.com/ja-jp/sysinternals/downloads/debugview</a></p><p><img src="debugview.gif" loading="lazy"></p><h3 id="WinDbg"><a href="#WinDbg" class="headerlink" title="WinDbg"></a>WinDbg</h3><p>Windows用 多目的デバッガー</p><p><a href="https://learn.microsoft.com/ja-jp/windows-hardware/drivers/debugger/">https://learn.microsoft.com/ja-jp/windows-hardware/drivers/debugger/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;静的解析&quot;&gt;&lt;a href=&quot;#静的解析&quot; class=&quot;headerlink&quot; title=&quot;静的解析&quot;&gt;&lt;/a&gt;静的解析&lt;/h2&gt;&lt;h3 id=&quot;JADX&quot;&gt;&lt;a href=&quot;#JADX&quot; class=&quot;headerlink&quot; title=&quot;JADX&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="tool" scheme="https://noitaro.github.io/tags/tool/"/>
    
    <category term="reverse-engineering" scheme="https://noitaro.github.io/tags/reverse-engineering/"/>
    
  </entry>
  
  <entry>
    <title>RVC でモデル作成とリアルタイムボイスチェンジ</title>
    <link href="https://noitaro.github.io/rvc/"/>
    <id>https://noitaro.github.io/rvc/</id>
    <published>2023-09-05T00:55:09.000Z</published>
    <updated>2024-03-18T02:41:41.571Z</updated>
    
    <content type="html"><![CDATA[<p>RVC でのモデル作成（学習）とリアルタイムボイスチェンジについて説明します。</p><h2 id="RVC（Retrieval-based-Voice-Conversion）"><a href="#RVC（Retrieval-based-Voice-Conversion）" class="headerlink" title="RVC（Retrieval-based-Voice-Conversion）"></a>RVC（Retrieval-based-Voice-Conversion）</h2><p>RVC は機械学習ベースのボイスチェンジ技術で、少量のデータで高品質なボイスチェンジが可能です。</p><h2 id="音声データの準備"><a href="#音声データの準備" class="headerlink" title="音声データの準備"></a>音声データの準備</h2><p>なりたい声の音声データを準備します。</p><p>今回は <a href="https://tsumugi-official.studio.site/">春日部つむぎ</a> の声を使ってモデル作成をします。</p><p>文章はなんでもよくて、30分以上の音声データになるようにします。</p><p><img src="2023-09-05_110051.png" loading="lazy"></p><p><code>音声書き出し</code> で 個別の音声ファイルにします。</p><p><img src="2023-09-05_110200.png" loading="lazy"></p><p>分かりやすいように <code>D:\rvc\kasukabe_tsumugi</code> フォルダーに保存しました。</p><p><img src="2023-09-05_110515.png" loading="lazy"></p><h2 id="RVCの導入"><a href="#RVCの導入" class="headerlink" title="RVCの導入"></a>RVCの導入</h2><p>学習用音声データが準備できたら、RVC で学習させます。</p><p><a href="https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI/releases">GitHub</a> から最新バージョンをダウンロードします。 とりあえず <code>D:\rvc</code> フォルダーに保存しました。</p><p><img src="2023-09-05_111131.png" loading="lazy"></p><p>私のPCは Nvidia GPU なので上のをダウンロードしました。 AMD や Intel GPU の場合は下のを使います。ちょっと前までは1つZIPで分かりやすかったんですが、変わったんですかね。</p><p><code>RVC0813Nvidia.7z</code> を展開します。7z形式なので展開するには <a href="https://portableapps.com/apps/utilities/7-zip_portable">7-Zip</a> を使いました。ポータブル版なのでインストール要らず。</p><p><img src="2023-09-05_112948.png" loading="lazy"></p><p>展開したフォルダー内にある <code>D:\rvc\RVC0813Nvidia\go-web.bat</code> を実行すると、ブラウザーで RVC WebUI が開きます。</p><p><img src="2023-09-05_124915.png" loading="lazy"></p><h2 id="学習"><a href="#学習" class="headerlink" title="学習"></a>学習</h2><p>設定するのは、ステップ2a のトレーニング用フォルダーパスだけ。前の工程で作った学習用音声データフォルダーを指定します。</p><p><img src="2023-09-05_133306.png" loading="lazy"></p><p>ステップ3 のワンクリックトレーニングを押すとモデルの学習が始まります。</p><p>コマンドプロンプトに <code>saving final ckpt:Success.</code> が表示されるか、RVC WebUI の出力情報に <code>全工程が完了！</code> が表示されれば学習は完了です。30分ぐらいですね。</p><p><img src="2023-09-05_140506.png" loading="lazy"></p><p><img src="2023-09-05_140523.png" loading="lazy"></p><h2 id="リアルタイムボイスチェンジ"><a href="#リアルタイムボイスチェンジ" class="headerlink" title="リアルタイムボイスチェンジ"></a>リアルタイムボイスチェンジ</h2><p>今作ったモデルを使ってリアルタイムボイスチェンジをします。</p><h3 id="VB-CABLE"><a href="#VB-CABLE" class="headerlink" title="VB-CABLE"></a>VB-CABLE</h3><p>ボイスチェンジした音声をマイク入力に流すため、VB-CABLE を使います。</p><p><a href="https://vb-audio.com/Cable/">公式サイト</a> から最新版の <code>VBCABLE_Driver</code> をダウンロードして展開します。</p><p><img src="2023-09-05_141659.png" loading="lazy"></p><p>展開したら <code>VBCABLE_Setup_x64.exe</code> を実行してドライバーをインストールします。</p><p>インストールしたらサウンド設定に <code>CABLE Input</code> と <code>CABLE Output</code> が追加されます。</p><p><img src="2023-09-05_142126.png" loading="lazy"></p><h3 id="RVC-GUI"><a href="#RVC-GUI" class="headerlink" title="RVC GUI"></a>RVC GUI</h3><p><code>D:\rcv\RVC0813Nvidia\go-realtime-gui.bat</code> を実行します。</p><p>モデルとオーディオデバイスを設定します。</p><h4 id="モデル"><a href="#モデル" class="headerlink" title="モデル"></a>モデル</h4><ul><li>pthファイル: <code>D:\rcv\RVC0813Nvidia\weights\kasukabe-tsumugi.pth</code></li><li>indexファイル: <code>D:\rcv\RVC0813Nvidia\logs\kasukabe-tsumugi\added_IVF1763_Flat_nprobe_1_kasukabe-tsumugi_v2.index</code></li></ul><h4 id="オーディオデバイス"><a href="#オーディオデバイス" class="headerlink" title="オーディオデバイス"></a>オーディオデバイス</h4><ul><li><p>入力デバイス: <code>Line (Steinberg UR12 ) (MME)</code></p></li><li><p>出力デバイス: <code>CABLE Input (VB-Audio Virtual C (MME)</code></p><p>どちらも <code>MME</code> が入ってるのを選択する。</p></li></ul><h4 id="音声変換"><a href="#音声変換" class="headerlink" title="音声変換"></a>音声変換</h4><p><code>音声変換を開始</code> でマイクで拾った音声がボイスチェンジされて出てきます。遅延は1秒ぐらいあります。</p><p><img src="2023-09-05_145732.png" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI">https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI</a></p><p><a href="https://github.com/w-okada/voice-changer">https://github.com/w-okada/voice-changer</a></p><p><a href="https://vb-audio.com/Cable/">https://vb-audio.com/Cable/</a></p><h3 id="春日部つむぎ（VOICEVOX）"><a href="#春日部つむぎ（VOICEVOX）" class="headerlink" title="春日部つむぎ（VOICEVOX）"></a>春日部つむぎ（VOICEVOX）</h3><p><a href="https://tsumugi-official.studio.site/">https://tsumugi-official.studio.site</a></p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>他にも MMVC という技術があるみたいなので、近いうちにこっちも試してみたいと思います。</p><p><a href="https://github.com/isletennos/MMVC_Trainer">https://github.com/isletennos/MMVC_Trainer</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;RVC でのモデル作成（学習）とリアルタイムボイスチェンジについて説明します。&lt;/p&gt;
&lt;h2 id=&quot;RVC（Retrieval-based-Voice-Conversion）&quot;&gt;&lt;a href=&quot;#RVC（Retrieval-based-Voice-Conversion</summary>
      
    
    
    
    
    <category term="model" scheme="https://noitaro.github.io/tags/model/"/>
    
    <category term="ai" scheme="https://noitaro.github.io/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Actions で Hexo デプロイの自動化</title>
    <link href="https://noitaro.github.io/hexo-deploy-github-actions/"/>
    <id>https://noitaro.github.io/hexo-deploy-github-actions/</id>
    <published>2023-08-30T23:37:06.000Z</published>
    <updated>2024-03-18T02:41:41.127Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.co.jp/features/actions">GitHub Actions</a> で <a href="https://hexo.io/">Hexo</a> のデプロイを自動化します。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 22H2</li><li>Node.js v18.16.0</li><li>hexo-cli: 4.3.1</li></ul><h3 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h3><p>今回は2つのリポジトリが必要になります。</p><ul><li>Hexo プロジェクト用のプライベートリポジトリ。GitHub Actions でデプロイの自動化を設定する。</li><li>GitHub Pages で公開する用のパブリックリポジトリ。ビルドされたブログが自動でプッシュされる。</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>事前に Hexo でブログを作成しておきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><img src="2023-08-31_084809.png" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="個人用アクセストークン"><a href="#個人用アクセストークン" class="headerlink" title="個人用アクセストークン"></a>個人用アクセストークン</h3><p>Hexo から GitHub Pages にデプロイするため、個人用アクセストークンを取得します。このアクセストークンがあれば、パスワード不要でデプロイできるようになります。</p><p><a href="https://github.com/settings/tokens">GitHub &gt; Settings &gt; Developer Settings</a> のページを開き、<code>Generate new token</code> で新規トークンを作成します。</p><p><img src="2023-08-31_134324.png" loading="lazy"></p><ul><li>Expiration: <code>No expiration</code> を選択。有効期限切れしないように。</li><li>Select scopes: <code>repo</code> を選択。プライベートリポジトリを操作するため。</li></ul><p><img src="2023-08-31_134806.png" loading="lazy"></p><p>作ったトークンわ後ほど使うのでメモしておきます。管理は厳重にして、絶対に公開しないでください。</p><p><img src="2023-08-31_135304.png" loading="lazy"></p><h3 id="プロジェクトのデプロイ設定"><a href="#プロジェクトのデプロイ設定" class="headerlink" title="プロジェクトのデプロイ設定"></a>プロジェクトのデプロイ設定</h3><p>Hexo のプロジェクトに <code>hexo-deployer-git</code> パッケージを追加します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><code>_config.yml</code> に GitHub へのデプロイ情報を記載します。 <code>***</code> の部分は先ほど取得したアクセストークンにを貼ってください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://**********@github.com/noitaro/hexo-deploy-example.git</span><br><span class="line">  branch: main</span><br><span class="line">  name: noitaro</span><br><span class="line">  email: 52857466+noitaro@users.noreply.github.com</span><br></pre></td></tr></table></figure><p>デプロイ先のリポジトリは事前に作っておきます。中身はカラで大丈夫。</p><p><img src="2023-08-31_140251.png" loading="lazy"></p><p>ここまでのデプロイ設定ができたら、リポジトリはプライベートで GitHub にプッシュします。</p><h3 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h3><p>GitHub Actions で自動化のワークフローを設定をします。</p><p>新規で <code>deploy.yml</code> を作成して、次のワークフローをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">name: Deploy</span><br><span class="line"></span><br><span class="line">on: [push]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    name: A job to deploy blog.</span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout</span><br><span class="line">      uses: actions/checkout@v2</span><br><span class="line">    </span><br><span class="line">    # Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.)</span><br><span class="line">    - name: Cache node modules</span><br><span class="line">      uses: actions/cache@v1</span><br><span class="line">      id: cache</span><br><span class="line">      with:</span><br><span class="line">        path: node_modules</span><br><span class="line">        key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">        restore-keys: |</span><br><span class="line">          $&#123;&#123; runner.os &#125;&#125;-node-</span><br><span class="line">    - name: Install Dependencies</span><br><span class="line">      if: steps.cache.outputs.cache-hit != &#x27;true&#x27;</span><br><span class="line">      run: npm ci</span><br><span class="line">    </span><br><span class="line">    - name: Configuration environment</span><br><span class="line">      run: |</span><br><span class="line">        sudo timedatectl set-timezone &quot;Asia/Tokyo&quot;</span><br><span class="line">    - name: Hexo deploy</span><br><span class="line">      run: |</span><br><span class="line">        npm install -g hexo-cli</span><br><span class="line">        npm install</span><br><span class="line">        npm run clean</span><br><span class="line">        npm run build</span><br><span class="line">        npm run deploy</span><br></pre></td></tr></table></figure><p>このワークフローは、GitHubリポジトリ内でプッシュイベントが発生するたびに、ブログのビルドとデプロイを実行します。また、依存モジュールのキャッシュを利用することで作業の高速化を図っています。</p><h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p>最後に、デプロイされたリポジトリを GitHub Pages で公開します。</p><p><img src="2023-08-31_143216.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.co.jp/features/actions&quot;&gt;GitHub Actions&lt;/a&gt; で &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt; のデプロイを自動化します。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="github" scheme="https://noitaro.github.io/tags/github/"/>
    
    <category term="hexo" scheme="https://noitaro.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Nintendo Switch PCでチートアドレスを探す</title>
    <link href="https://noitaro.github.io/nintendo-switch-noexs/"/>
    <id>https://noitaro.github.io/nintendo-switch-noexs/</id>
    <published>2023-08-04T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.411Z</updated>
    
    <content type="html"><![CDATA[<p>前に書いた記事からだいぶ時間がたってしまったので、新しく書き直しました。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><h3 id="PC側"><a href="#PC側" class="headerlink" title="PC側"></a>PC側</h3><ul><li>Windows 11 Home 22H2</li><li>Java SE Runtime Environment v10.0.2</li><li>JNoexsClient v1.4.157</li><li>TegraRcmGUI v2.6</li></ul><h3 id="スイッチ側"><a href="#スイッチ側" class="headerlink" title="スイッチ側"></a>スイッチ側</h3><ul><li>Nintendo Switch v16.0.3 (未対策機 2018年7月より前に製造されたもの)</li><li>Atmosphère v1.5.4</li><li>hekate v6.0.5 &amp; Nyx v1.5.4</li><li>EdiZon SE v3.8.36</li></ul><h4 id="オーバーレイ"><a href="#オーバーレイ" class="headerlink" title="オーバーレイ"></a>オーバーレイ</h4><ul><li>054e4f4558454000 v1.4.157</li><li>nx-ovlloader v1.0.7</li><li>ovlSysmodule v1.3.1</li><li>Tesla-Menu v1.2.3</li><li>EdiZon-Overlay v1.0.7</li></ul><h3 id="RCMジグ"><a href="#RCMジグ" class="headerlink" title="RCMジグ"></a>RCMジグ</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/47Q3FYt"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/47Q3FYt"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: RGEEK RCMジグ 任天堂スイッチ用 RCMツール RCM SX OS ショートサーキットツール アーカイブプレイ GBA/FBA その他のシミュレーターの変更に使用 : ゲーム</div><div class="hbc-url">https://amzn.to/47Q3FYt</div></div></div></div></a></div></div><h3 id="USB-Type-C-データ転送ケーブル"><a href="#USB-Type-C-データ転送ケーブル" class="headerlink" title="USB Type-C データ転送ケーブル"></a>USB Type-C データ転送ケーブル</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3qex79z"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3qex79z"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: USB Type C ケーブル 10Gbpsデータ転送 60W 20V/3A急速充電 USB C to USB A ケーブル 高速データ転送 USB C ケーブルXperia XZ2 XZ3 XZ1、Galaxy Note /S20 S10 S9 A21 A22 A30 A51、Sense 3/4、LG その他USB-C機器対応 テレワーク リモート在宅勤務 (1M) : パソコン・周辺機器</div><div class="hbc-url">https://amzn.to/3qex79z</div></div></div></div></a></div></div><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="PC側-1"><a href="#PC側-1" class="headerlink" title="PC側"></a>PC側</h3><h4 id="Java-SE-Runtime-Environment-10-0-2"><a href="#Java-SE-Runtime-Environment-10-0-2" class="headerlink" title="Java SE Runtime Environment 10.0.2"></a>Java SE Runtime Environment 10.0.2</h4><p><a href="https://www.oracle.com/jp/java/technologies/java-archive-javase10-downloads.html">Java Archive Downloads - Java SE 10 | Oracle 日本</a></p><p><code>jre-10.0.2_windows-x64_bin.exe</code> をダウンロードしてインストール<br><img src="2023-08-01_153111.png" loading="lazy"></p><p><img src="2023-08-01_153921.png" loading="lazy"></p><p>次のコマンドで正しくインストールされたか確認</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java --version</span><br></pre></td></tr></table></figure><p><img src="2023-08-01_154511.png" loading="lazy"></p><h4 id="JNoexsClient"><a href="#JNoexsClient" class="headerlink" title="JNoexsClient"></a>JNoexsClient</h4><p><a href="https://github.com/tomvita/Noexes/releases">Releases · tomvita&#x2F;Noexes</a></p><p><code>JNoexsClient.jar</code> をダウンロード<br><img src="2023-08-01_155351.png" loading="lazy"></p><p>今回は <code>D:\Switch</code> に保存した。<br><img src="2023-08-01_155629.png" loading="lazy"></p><p>基本的にダブルクリックで起動するが、もし起動しない場合は、JARファイルを保存したフォルダーで次のコマンドを実行する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNoexsClient.jar</span><br></pre></td></tr></table></figure><p><img src="2023-08-01_160037.png" loading="lazy"></p><p><img src="2023-08-01_160218.png" loading="lazy"></p><h4 id="TegraRcmGUI"><a href="#TegraRcmGUI" class="headerlink" title="TegraRcmGUI"></a>TegraRcmGUI</h4><p><a href="https://github.com/NXcondenser001/TegraRcmGUI-JP/releases">Releases · NXcondenser001&#x2F;TegraRcmGUI-JP</a></p><p><code>TegraRcm-JP.v2.6.zip</code> をダウンロードし展開もしておく<br><img src="2023-08-01_174054.png" loading="lazy"></p><h3 id="スイッチ側-1"><a href="#スイッチ側-1" class="headerlink" title="スイッチ側"></a>スイッチ側</h3><h4 id="Atmosphere"><a href="#Atmosphere" class="headerlink" title="Atmosphère"></a>Atmosphère</h4><p><a href="https://github.com/Atmosphere-NX/Atmosphere/releases">Releases · Atmosphere-NX&#x2F;Atmosphere</a></p><p><code>atmosphere-1.5.4-master-3cb54e2b4+hbl-2.4.3+hbmenu-3.5.1.zip</code> をダウンロード<br><img src="2023-08-01_172713.png" loading="lazy"></p><p>今回は <code>D:\Switch</code> に保存した。</p><p>展開もしておく<br><img src="2023-08-01_172941.png" loading="lazy"></p><h4 id="hekate-Nyx"><a href="#hekate-Nyx" class="headerlink" title="hekate &amp; Nyx"></a>hekate &amp; Nyx</h4><p><a href="https://github.com/CTCaer/hekate/releases">Releases · CTCaer&#x2F;hekate</a></p><p><code>hekate_ctcaer_6.0.5_Nyx_1.5.4_v2.zip</code> をダウンロード<br><img src="2023-08-01_171248.png" loading="lazy"></p><p>今回は <code>D:\Switch</code> に保存した。</p><p>展開もしておく<br><img src="2023-08-01_171427.png" loading="lazy"></p><h4 id="EdiZon-SE"><a href="#EdiZon-SE" class="headerlink" title="EdiZon SE"></a>EdiZon SE</h4><p><a href="https://github.com/tomvita/EdiZon-SE/releases">Releases · tomvita&#x2F;EdiZon-SE</a></p><p><code>EdiZon.zip</code> をダウンロードして展開する。<br><img src="2023-08-01_182243.png" loading="lazy"></p><p>展開した中身を、SDカードの直下にコピペする。</p><h4 id="054e4f4558454000"><a href="#054e4f4558454000" class="headerlink" title="054e4f4558454000"></a>054e4f4558454000</h4><p><a href="https://github.com/tomvita/Noexes/releases">Releases · tomvita&#x2F;Noexes</a></p><p><code>054e4f4558454000.zip</code> をダウンロード &amp; 展開</p><p>SDカードの <code>./atmosphere/contents</code> に <code>054e4f4558454000</code> をコピペする。</p><h4 id="nx-ovlloader"><a href="#nx-ovlloader" class="headerlink" title="nx-ovlloader"></a>nx-ovlloader</h4><p><a href="https://github.com/WerWolv/nx-ovlloader/releases">Releases · WerWolv&#x2F;nx-ovlloader</a></p><p><code>nx-ovlloader.zip</code> をダウンロード &amp; 展開</p><p>SDカードの <code>./atmosphere/contents</code> に <code>420000000007E51A</code> をコピペする。</p><h4 id="ovlSysmodule"><a href="#ovlSysmodule" class="headerlink" title="ovlSysmodule"></a>ovlSysmodule</h4><p><a href="https://github.com/WerWolv/ovl-sysmodules/releases">Releases · WerWolv&#x2F;ovl-sysmodules</a></p><p><code>ovlSysmodules.ovl</code> をダウンロード</p><p>SDカードの <code>./switch/.overlays</code> に <code>ovlSysmodules.ovl</code> をコピペする。</p><h4 id="Tesla-Menu"><a href="#Tesla-Menu" class="headerlink" title="Tesla-Menu"></a>Tesla-Menu</h4><p><a href="https://github.com/WerWolv/Tesla-Menu/releases">Releases · WerWolv&#x2F;Tesla-Menu</a></p><p><code>ovlmenu.zip</code> をダウンロード &amp; 展開</p><p>SDカードの <code>./switch/.overlays</code> に <code>ovlmenu.ovl</code> をコピペする。</p><h4 id="EdiZon-Overlay"><a href="#EdiZon-Overlay" class="headerlink" title="EdiZon-Overlay"></a>EdiZon-Overlay</h4><p><a href="https://github.com/proferabg/EdiZon-Overlay/releases">Releases · proferabg&#x2F;EdiZon-Overlay</a></p><p><code>EdiZon-Overlay.zip</code> をダウンロード &amp; 展開</p><p>SDカードの <code>./switch/.overlays</code> に <code>ovlEdiZon.ovl</code> をコピペする。</p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>スイッチの電源が切れている状態で <code>音量大ボタン</code> と <code>電源ボタン</code> を押して、hekate をペイロードする。</p><p>そこから atmosphere へと入る。</p><p>ホーム画面で <code>Lボタン</code> + <code>下ボタン</code> + <code>Rスティック</code> を押し込むとオーバーレイメニューが表示される。</p><p><code>Sysmodules</code> を選択し、<code>Noexes</code> を <code>ON</code> にする。</p><p><code>EdiZon</code> の <code>Local IP</code> と <code>Process ID</code> をメモする。</p><p><code>JNoexs</code> で IP と PID を設定して <code>Attach Process</code> を押すとスイッチのゲームをデバッグできるようになる。</p><p><img src="2023-08-02_081317.png" loading="lazy"></p><p>スクショだと忘れているが、<code>Auto Resume</code> にチェックを入れないとゲームが止まるので、チェックしておく。</p><p><code>Value</code>　に現在の値を入れて <code>Convert Decimal to Hex</code> で 16進数に変換して <code>Search</code> でゲーム内の値を検索する。</p><p>何回か値を変更して繰り返して絞っていく。</p><p><img src="2023-08-02_093150.png" loading="lazy"></p><p>ある程度絞れたら、<code>Watch List</code> に追加して、細かくみていく。</p><p>アドレスが分かったら、値を変えてみる。</p><p><code>MeMory Viewer</code> で付近のアドレスを見て、似たような箇所の値を変えてチート範囲を拡張していく。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://re-doing.com/switch-first-hack-atmosphere-hekate/">2023年4月【日本一わかりやすい】Switch 改造手順 Atmosphere(CFW)を導入してEmunandを作るまで - もぐ淡々</a></p><p><a href="https://majipon.jp/blog/?p=1710">SwitchをPCでチート JNoexs(Noexes)の使い方(FW 13.0対応) | majipon.jp　まじポン！</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前に書いた記事からだいぶ時間がたってしまったので、新しく書き直しました。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;h3 id=&quot;PC側&quot;&gt;&lt;a href=&quot;#PC側&quot; c</summary>
      
    
    
    
    
    <category term="cheat" scheme="https://noitaro.github.io/tags/cheat/"/>
    
    <category term="nintendo-switch" scheme="https://noitaro.github.io/tags/nintendo-switch/"/>
    
    <category term="hekate" scheme="https://noitaro.github.io/tags/hekate/"/>
    
  </entry>
  
  <entry>
    <title>Godot 子供スクリプトから親スクリプトを呼ぶ</title>
    <link href="https://noitaro.github.io/godot-emit-signal/"/>
    <id>https://noitaro.github.io/godot-emit-signal/</id>
    <published>2023-07-30T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Godot v4.1</li></ul><h2 id="シグナル"><a href="#シグナル" class="headerlink" title="シグナル"></a>シグナル</h2><p>子ノードから親ノードにシグナルを送信する。</p><p>親ノードはそのシグナルを受信し、対応するメソッドを実行する。</p><h3 id="子供スクリプト"><a href="#子供スクリプト" class="headerlink" title="子供スクリプト"></a>子供スクリプト</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 公開シグナルプロパティ</span><br><span class="line">signal custom_signal</span><br><span class="line"></span><br><span class="line">func some_function():</span><br><span class="line">    # シグナル送信</span><br><span class="line">    custom_signal.emit(&quot;abc&quot;)</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><h3 id="親スクリプト"><a href="#親スクリプト" class="headerlink" title="親スクリプト"></a>親スクリプト</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func _ready():</span><br><span class="line">    # 子供ノード取得</span><br><span class="line">  var child_node = get_node(&quot;ChildNode2D&quot;)</span><br><span class="line">    # 子供ノードのシグナル接続</span><br><span class="line">    child_node.custom_signal.connect(parent_method)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># シグナルを受け取った時に実行するファンクション</span><br><span class="line">func parent_method(text: String):</span><br><span class="line">    print(&quot;This is the parent method! &quot;, text)</span><br><span class="line">    pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Godot v4.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;シグナル&quot;&gt;&lt;a href=&quot;#シグナル&quot; class=&quot;heade</summary>
      
    
    
    
    
    <category term="games" scheme="https://noitaro.github.io/tags/games/"/>
    
    <category term="godot" scheme="https://noitaro.github.io/tags/godot/"/>
    
  </entry>
  
  <entry>
    <title>アダプター と ラッパー の違い</title>
    <link href="https://noitaro.github.io/adapter-vs-wrapper/"/>
    <id>https://noitaro.github.io/adapter-vs-wrapper/</id>
    <published>2023-07-29T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Adapter-アダプター"><a href="#Adapter-アダプター" class="headerlink" title="Adapter (アダプター)"></a>Adapter (アダプター)</h2><p>アダプターは、既存のクラスやコンポーネントを別のインターフェースに変換するためのデザインパターンです。主な目的は、互換性のないインターフェースを持つクラス同士を連携させることです。これにより、既存のコードを変更することなく、異なるコンポーネントを統合できるようになります。</p><p>具体的な例を挙げると、異なるデータベースシステムにアクセスするためのインターフェースが異なる場合、データベースアダプターを使用してアプリケーションコードが統一された方法でデータベースにアクセスできるようにします。</p><h2 id="Wrapper-ラッパー"><a href="#Wrapper-ラッパー" class="headerlink" title="Wrapper (ラッパー)"></a>Wrapper (ラッパー)</h2><p>ラッパーは、既存のクラスやコンポーネントを囲む（ラッピングする）新しいクラスまたはオブジェクトを作成する手法です。これにより、既存の機能を保持しながら新しい機能を追加したり、既存の動作を変更したりできます。ラッパーは、コードの再利用や拡張性を向上させるのに役立ちます。</p><p>具体的な例として、外部ライブラリやAPIを使用する際に、そのライブラリの機能をカプセル化し、よりシンプルで使いやすいインターフェースを提供するためにラッパークラスを作成することがあります。</p><p>要約すると、Adapterはインターフェースの互換性を確保し、既存のクラスやコンポーネントを接続するためのものであり、Wrapperは既存のクラスやコンポーネントを包んで新しい機能を追加したり、シンプルなインターフェースを提供するためのものです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Adapter-アダプター&quot;&gt;&lt;a href=&quot;#Adapter-アダプター&quot; class=&quot;headerlink&quot; title=&quot;Adapter (アダプター)&quot;&gt;&lt;/a&gt;Adapter (アダプター)&lt;/h2&gt;&lt;p&gt;アダプターは、既存のクラスやコンポーネントを</summary>
      
    
    
    
    
    <category term="openai" scheme="https://noitaro.github.io/tags/openai/"/>
    
  </entry>
  
  <entry>
    <title>Python Web Server について</title>
    <link href="https://noitaro.github.io/python-web-server/"/>
    <id>https://noitaro.github.io/python-web-server/</id>
    <published>2023-07-19T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PythonのWebフレームワーク"><a href="#PythonのWebフレームワーク" class="headerlink" title="PythonのWebフレームワーク"></a>PythonのWebフレームワーク</h2><p>PythonはWeb開発のための多くのフレームワークを提供しています。以下はその中の主要なものをいくつか紹介します。</p><h3 id="1-Django"><a href="#1-Django" class="headerlink" title="1. Django"></a>1. Django</h3><p><a href="https://www.djangoproject.com/">https://www.djangoproject.com/</a></p><ul><li>大規模なWebアプリケーションの開発に適したフルスタックフレームワーク。”バッテリー同梱”の哲学に基づき、多くの機能が最初から組み込まれています。</li></ul><h3 id="2-Flask"><a href="#2-Flask" class="headerlink" title="2. Flask"></a>2. Flask</h3><p><a href="https://flask.palletsprojects.com/">https://flask.palletsprojects.com/</a></p><ul><li>マイクロフレームワークとして知られ、シンプルで拡張性が高い。小規模から中規模のアプリケーション開発に適しています。</li></ul><h3 id="3-FastAPI"><a href="#3-FastAPI" class="headerlink" title="3. FastAPI"></a>3. FastAPI</h3><p><a href="https://fastapi.tiangolo.com/">https://fastapi.tiangolo.com/</a></p><ul><li>高性能で現代的なフレームワーク。Pythonの型ヒントを使用し、非同期処理をネイティブサポートしています。</li></ul><h3 id="4-Pyramid"><a href="#4-Pyramid" class="headerlink" title="4. Pyramid"></a>4. Pyramid</h3><p><a href="https://trypyramid.com/">https://trypyramid.com/</a></p><ul><li>柔軟性とモジュラリティを重視したフレームワーク。Flaskと同様にマイクロフレームワークとして始めることができ、必要に応じて機能を追加していくことができます。</li></ul><h3 id="5-CherryPy"><a href="#5-CherryPy" class="headerlink" title="5. CherryPy"></a>5. CherryPy</h3><p><a href="https://cherrypy.dev/">https://cherrypy.dev/</a></p><ul><li>Pythonのオブジェクト指向プログラムをWebアプリケーション開発に適用することを目的としたフレームワーク。HTTP&#x2F;1.1準拠のWebサーバを持っています。</li></ul><h3 id="6-Tornado"><a href="#6-Tornado" class="headerlink" title="6. Tornado"></a>6. Tornado</h3><p><a href="https://www.tornadoweb.org/">https://www.tornadoweb.org/</a></p><ul><li>高性能な非同期WebサーバとWebアプリケーションフレームワークを一体化したもの。リアルタイムWebサービスの開発に特に適しています。</li></ul><p>これらのフレームワークは、それぞれ独自の特性や利点を持っているため、プロジェクトの要件や好みに合わせて選択すると良いでしょう。</p><h2 id="1-Django-ジャンゴ-について"><a href="#1-Django-ジャンゴ-について" class="headerlink" title="1. Django (ジャンゴ) について"></a>1. Django (ジャンゴ) について</h2><p>DjangoはPythonで書かれた、高度に再利用可能なコンポーネントを持つフルスタックのWebフレームワークです。*”Django makes it easier to build web applications quickly and with less code”* とのフレーズで知られています。</p><h3 id="特徴"><a href="#特徴" class="headerlink" title="特徴"></a>特徴</h3><ul><li><p><strong>MTVアーキテクチャ</strong><br>  DjangoはMVCアーキテクチャに似ていますが、Djangoの場合はMTV（Model-Template-View）として知られています。</p><ul><li>Model: データベースとのインタラクションを担当する部分。</li><li>Template: ユーザーに表示される部分、HTMLを生成する部分。</li><li>View: アプリケーションのロジックを持つ部分。</li></ul></li><li><p><strong>DRY原則</strong><br>  “Don’t Repeat Yourself”（繰り返しを避ける）を実践して、コードの再利用を促進します。</p></li><li><p><strong>バッテリー同梱</strong><br>  Djangoには「バッテリー同梱」という哲学があり、多くの機能（認証、セキュリティ、フォーム、管理パネルなど）がデフォルトで含まれています。</p></li><li><p><strong>安全性</strong><br>  Djangoは、多くの一般的なセキュリティ問題（XSS、CSRF、SQLインジェクションなど）を考慮し、これらの問題から保護する機能を提供します。</p></li><li><p><strong>データベースのマイグレーション</strong><br>  簡単にデータベースの変更やアップデートを行うためのツールが組み込まれています。</p></li></ul><h3 id="開始方法"><a href="#開始方法" class="headerlink" title="開始方法"></a>開始方法</h3><ol><li><p><strong>Djangoをインストールする。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure></li><li><p><strong>新しいプロジェクトを作成する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject projectname</span><br></pre></td></tr></table></figure></li><li><p><strong>開発サーバーを起動する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd projectname</span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p> これにより、デフォルトで <code>http://127.0.0.1:8000/</code> にローカルサーバーが起動します。</p></li></ol><p><img src="2023-07-19_150146.png" loading="lazy"></p><p>Djangoは非常に包括的で強力なフレームワークなので、詳細な情報やチュートリアルは公式ドキュメントや関連書籍を参照することをおすすめします。</p><h2 id="2-Flask-フラスク-について"><a href="#2-Flask-フラスク-について" class="headerlink" title="2. Flask (フラスク) について"></a>2. Flask (フラスク) について</h2><p>FlaskはPythonで書かれた軽量なWebフレームワークです。単純さと拡張性を重視しており、小さなアプリケーションから大規模なプロジェクトまで対応可能です。</p><h3 id="特徴-1"><a href="#特徴-1" class="headerlink" title="特徴"></a>特徴</h3><ul><li><p><strong>軽量</strong>: Flaskは「マイクロ」フレームワークとして設計されており、必要最低限の機能のみが含まれています。しかし、多くの拡張が提供されており、必要に応じて機能を追加できます。</p></li><li><p><strong>簡単なルーティング</strong>: URLルートを関数にマッピングすることが非常に簡単です。</p></li><li><p><strong>開発サーバーとデバッガ</strong>: 組み込みの開発サーバーとデバッガを提供しています。</p></li><li><p><strong>Jinja2テンプレート</strong>: FlaskはJinja2テンプレートエンジンを使用しており、動的コンテンツのレンダリングが簡単になります。</p></li><li><p><strong>RESTful要求のサポート</strong>: RESTful要求の送信やデータの取得が容易です。</p></li><li><p><strong>セキュア</strong>: 保護機能（データの安全な保存、セッションなど）が提供されています。</p></li></ul><h3 id="開始方法-1"><a href="#開始方法-1" class="headerlink" title="開始方法"></a>開始方法</h3><ol><li><p><strong>Flaskをインストールする。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask</span><br></pre></td></tr></table></figure></li><li><p><strong>簡単なアプリケーションを作成する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def hello_world():</span><br><span class="line">    return &#x27;Hello, World!&#x27;</span><br></pre></td></tr></table></figure></li><li><p><strong>アプリケーションを実行する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask --app main.py run</span><br></pre></td></tr></table></figure></li></ol><p>上記の手順で、開発サーバーが起動し、<code>http://127.0.0.1:5000/</code> にアクセスすると “Hello, World!” が表示されます。<br><img src="2023-07-19_150824.png" loading="lazy"></p><p>公式ドキュメントやチュートリアルはFlaskのウェブサイトで提供されており、初心者から上級者までの情報が豊富に用意されています。</p><h2 id="3-FastAPI-ファーストAPI-について"><a href="#3-FastAPI-ファーストAPI-について" class="headerlink" title="3. FastAPI (ファーストAPI) について"></a>3. FastAPI (ファーストAPI) について</h2><p>FastAPIは、Python 3.6以降のバージョンでのみ動作する、現代的で、高速(高性能)なWebフレームワークです。FastAPIは標準のPython型ヒントを使用してAPIを構築することを特徴としています。</p><h3 id="特徴-2"><a href="#特徴-2" class="headerlink" title="特徴"></a>特徴</h3><ul><li><p><strong>型ヒント</strong>: Pythonの型ヒントを利用してパラメータのバリデーション、シリアライゼーション、ドキュメント作成を自動化します。</p></li><li><p><strong>高性能</strong>: NodeJSやGoと同等の性能を持ちながら、Pythonの簡潔さと易しさを維持しています。</p></li><li><p><strong>自動ドキュメント</strong>: FastAPIを使用してAPIを構築すると、自動的にSwagger UIとReDocの2つのインタラクティブなAPIドキュメントが生成されます。</p></li><li><p><strong>OAuth2とJWTの統合</strong>: セキュリティと認証の仕組みを簡単に導入することができます。</p></li><li><p><strong>非同期処理</strong>: <code>async</code>&#x2F;<code>await</code>を使用した非同期処理をネイティブサポートしています。これにより、非常に高速なAPIを簡単に構築できます。</p></li></ul><h3 id="開始方法-2"><a href="#開始方法-2" class="headerlink" title="開始方法"></a>開始方法</h3><ol><li><p><strong>FastAPIをインストールする。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fastapi[all]</span><br></pre></td></tr></table></figure></li><li><p><strong>簡単なアプリケーションを作成する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from fastapi import FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">@app.get(&quot;/&quot;)</span><br><span class="line">def read_root():</span><br><span class="line">    return &#123;&quot;Hello&quot;: &quot;World&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>アプリケーションを実行する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uvicorn main:app --reload</span><br></pre></td></tr></table></figure><p> 上記の手順で、開発サーバーが起動し、<code>http://127.0.0.1:8000/</code> にアクセスすると “Hello, World!” のJSONレスポンスが得られます。</p></li></ol><p><img src="2023-07-19_151628.png" loading="lazy"></p><p>また、<code>http://127.0.0.1:8000/docs</code>にアクセスすると、自動生成されたSwagger UIのドキュメントが表示されます。<br><img src="2023-07-19_151718.png" loading="lazy"></p><p>FastAPIは非常に包括的で強力なフレームワークであり、その詳細な情報やチュートリアルは公式ドキュメントを参照することをおすすめします。</p><h2 id="4-Pyramid-ピラミッド-について"><a href="#4-Pyramid-ピラミッド-について" class="headerlink" title="4. Pyramid (ピラミッド) について"></a>4. Pyramid (ピラミッド) について</h2><p>PyramidはPythonで書かれたWebアプリケーションフレームワークで、柔軟性とモジュラリティを特長としています。</p><h3 id="特徴-3"><a href="#特徴-3" class="headerlink" title="特徴"></a>特徴</h3><ul><li><p><strong>スケーラビリティ</strong>: Pyramidは「最小限のフレームワーク」として始めることができ、必要に応じて拡張することができます。</p></li><li><p><strong>柔軟性</strong>: Pyramidは、あなたの要件に応じて必要なコンポーネントを選択して使うことができます。</p></li><li><p><strong>URLジェネレーション</strong>: Webアプリケーション内のページへのリンクを動的に生成できます。</p></li><li><p><strong>拡張性</strong>: 多くのプラグインやアドオンが利用可能で、独自の機能やミドルウェアを追加することも容易です。</p></li><li><p><strong>セキュリティ</strong>: CSRF、クロスサイトスクリプティング、SQLインジェクションなどの一般的なWeb脅威からの保護機能が組み込まれています。</p></li></ul><h3 id="開始方法-3"><a href="#開始方法-3" class="headerlink" title="開始方法"></a>開始方法</h3><ol><li><p><strong>Pyramidをインストールする。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyramid</span><br></pre></td></tr></table></figure></li><li><p><strong>簡単なアプリケーションを作成する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line">from pyramid.config import Configurator</span><br><span class="line">from pyramid.response import Response</span><br><span class="line"></span><br><span class="line">def hello_world(request):</span><br><span class="line">    return Response(&#x27;Hello World!&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    with Configurator() as config:</span><br><span class="line">        config.add_route(&#x27;hello&#x27;, &#x27;/&#x27;)</span><br><span class="line">        config.add_view(hello_world, route_name=&#x27;hello&#x27;)</span><br><span class="line">        app = config.make_wsgi_app()</span><br><span class="line">    server = make_server(&#x27;0.0.0.0&#x27;, 6543, app)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure></li><li><p><strong>アプリケーションを実行する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure><p> 上記の手順で、開発サーバーが起動し、<code>http://localhost:6543/</code> にアクセスすると “Hello World!” が表示されます。</p></li></ol><p><img src="2023-07-19_152327.png" loading="lazy"></p><p>公式ドキュメントは非常に詳細で、新しいユーザーから経験豊富な開発者まで役立つ情報が提供されています。Pyramidのコミュニティも活発で、多くのリソースやサポートが提供されています。</p><h2 id="5-CherryPy-チェリーパイ-について"><a href="#5-CherryPy-チェリーパイ-について" class="headerlink" title="5. CherryPy (チェリーパイ) について"></a>5. CherryPy (チェリーパイ) について</h2><p>CherryPyは、Pythonのオブジェクト指向プログラミングをWebアプリケーション開発に適用することを目的としたフレームワークです。HTTP&#x2F;1.1準拠のWebサーバも組み込まれており、単体で動作させることが可能です。</p><h3 id="特徴-4"><a href="#特徴-4" class="headerlink" title="特徴"></a>特徴</h3><ul><li><p><strong>シンプルなAPI</strong>: CherryPyはPythonicなアプローチを採用しており、簡単に理解しやすいAPIを提供しています。</p></li><li><p><strong>組み込みサーバ</strong>: 独自の組み込みHTTPサーバを持っており、別途サーバソフトウェアをセットアップする必要がありません。</p></li><li><p><strong>フレキシブルなプラグインアーキテクチャ</strong>: CherryPyは多くのプラグインをサポートしており、簡単に追加や変更が可能です。</p></li><li><p><strong>マルチスレッドサーバ</strong>: マルチスレッドのWebサーバが組み込まれており、複数のリクエストを同時に処理することができます。</p></li></ul><h3 id="開始方法-4"><a href="#開始方法-4" class="headerlink" title="開始方法"></a>開始方法</h3><ol><li><p><strong>CherryPyをインストールする。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cherrypy</span><br></pre></td></tr></table></figure></li><li><p><strong>簡単なアプリケーションを作成する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import cherrypy</span><br><span class="line"></span><br><span class="line">class HelloWorld:</span><br><span class="line">    @cherrypy.expose</span><br><span class="line">    def index(self):</span><br><span class="line">        return &quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">cherrypy.quickstart(HelloWorld())</span><br></pre></td></tr></table></figure></li><li><p><strong>アプリケーションを実行する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure><p> スクリプトを実行すると、CherryPyのサーバが起動し、<code>http://127.0.0.1:8080/</code> にアクセスすることで “Hello World!” が表示されます。</p></li></ol><p><img src="2023-07-19_152932.png" loading="lazy"></p><p>CherryPyは長い歴史を持つフレームワークであり、簡潔さと強力さを兼ね備えています。詳細な情報やチュートリアルは公式ドキュメントを参照することをおすすめします。</p><h2 id="6-Tornado-トルネード-について"><a href="#6-Tornado-トルネード-について" class="headerlink" title="6. Tornado (トルネード) について"></a>6. Tornado (トルネード) について</h2><p>Tornadoは、高性能な非同期WebサーバおよびWebアプリケーションフレームワークとして知られています。リアルタイムWebサービスの開発に特に適しており、数千の同時接続をサポートしています。</p><h3 id="特徴-5"><a href="#特徴-5" class="headerlink" title="特徴"></a>特徴</h3><ul><li><p><strong>非同期I&#x2F;O</strong>: Tornadoは非同期I&#x2F;Oをネイティブサポートしており、高い同時接続数を持つアプリケーションでも高いパフォーマンスを維持します。</p></li><li><p><strong>リアルタイムサービス</strong>: WebSocketsやlong pollingなどのリアルタイムの通信技術をサポートしています。</p></li><li><p><strong>組み込みのHTTPサーバ</strong>: Tornadoは独自の高性能HTTPサーバを持っており、追加の設定やデプロイメントが不要です。</p></li><li><p><strong>サードパーティのサポート</strong>: 多くのサードパーティのライブラリやフレームワークとの統合が容易です。</p></li></ul><h3 id="開始方法-5"><a href="#開始方法-5" class="headerlink" title="開始方法"></a>開始方法</h3><ol><li><p><strong>Tornadoをインストールする。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tornado</span><br></pre></td></tr></table></figure></li><li><p><strong>簡単なアプリケーションを作成する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import tornado.ioloop</span><br><span class="line">import tornado.web</span><br><span class="line"></span><br><span class="line">class MainHandler(tornado.web.RequestHandler):</span><br><span class="line">    def get(self):</span><br><span class="line">        self.write(&quot;Hello, Tornado!&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app = tornado.web.Application([(r&quot;/&quot;, MainHandler)])</span><br><span class="line">    app.listen(8888)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure></li><li><p><strong>アプリケーションを実行する。</strong>  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure><p> スクリプトを実行すると、Tornadoのサーバが起動し、<code>http://127.0.0.1:8888/</code> にアクセスすることで “Hello, Tornado!” が表示されます。</p></li></ol><p><img src="2023-07-19_153249.png" loading="lazy"></p><p>Tornadoは非同期のWebアプリケーションの開発に特化しており、高い性能要件を持つプロジェクトにおすすめです。詳細な情報やチュートリアルは公式ドキュメントを参照してください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PythonのWebフレームワーク&quot;&gt;&lt;a href=&quot;#PythonのWebフレームワーク&quot; class=&quot;headerlink&quot; title=&quot;PythonのWebフレームワーク&quot;&gt;&lt;/a&gt;PythonのWebフレームワーク&lt;/h2&gt;&lt;p&gt;PythonはWeb</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="django" scheme="https://noitaro.github.io/tags/django/"/>
    
    <category term="flask" scheme="https://noitaro.github.io/tags/flask/"/>
    
    <category term="fastapi" scheme="https://noitaro.github.io/tags/fastapi/"/>
    
    <category term="pyramid" scheme="https://noitaro.github.io/tags/pyramid/"/>
    
    <category term="cherrypy" scheme="https://noitaro.github.io/tags/cherrypy/"/>
    
    <category term="tornado" scheme="https://noitaro.github.io/tags/tornado/"/>
    
  </entry>
  
  <entry>
    <title>【Langchain】Embedding 自作モデルの作成、PKL保存、回答</title>
    <link href="https://noitaro.github.io/langchain-embedding/"/>
    <id>https://noitaro.github.io/langchain-embedding/</id>
    <published>2023-07-18T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.227Z</updated>
    
    <content type="html"><![CDATA[<p>チャットボットで使うモデルを事前に作って、PKLファイル形式で保存する。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><h3 id="パッケージ"><a href="#パッケージ" class="headerlink" title="パッケージ"></a>パッケージ</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install openai==0.27.8</span><br><span class="line">pip install tiktoken==0.4.0</span><br><span class="line">pip install faiss-cpu==1.7.4</span><br><span class="line">pip install langchain==0.0.235</span><br><span class="line">pip install pypdf==3.12.2</span><br></pre></td></tr></table></figure><h3 id="PKLファイル形式で保存"><a href="#PKLファイル形式で保存" class="headerlink" title="PKLファイル形式で保存"></a>PKLファイル形式で保存</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from langchain.vectorstores import FAISS</span><br><span class="line">from langchain.embeddings import OpenAIEmbeddings</span><br><span class="line">from langchain.text_splitter import RecursiveCharacterTextSplitter</span><br><span class="line">from langchain.document_loaders import PyPDFLoader</span><br><span class="line">import faiss</span><br><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">file_path_list = [&#x27;日本財政の現状と望ましい税制の考察.pdf&#x27;,]</span><br><span class="line"></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=0)</span><br><span class="line">texts = []</span><br><span class="line"></span><br><span class="line">for file_path in file_path_list:</span><br><span class="line">    print(file_path)</span><br><span class="line">    loader = PyPDFLoader(file_path)</span><br><span class="line">    documents = loader.load()</span><br><span class="line">    texts = texts + text_splitter.split_documents(documents)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">store = FAISS.from_documents(texts, OpenAIEmbeddings(openai_api_key=&quot;*****&quot;))</span><br><span class="line">faiss.write_index(store.index, &quot;store.index&quot;)</span><br><span class="line">store.index = None</span><br><span class="line">with open(&quot;faiss_store.pkl&quot;, &quot;wb&quot;) as f:</span><br><span class="line">    pickle.dump(store, f)</span><br></pre></td></tr></table></figure><p>PDFファイルを読み込んで <code>store.index</code> と <code>faiss_store.pkl</code> を作成します。</p><h3 id="読み込み及び回答"><a href="#読み込み及び回答" class="headerlink" title="読み込み及び回答"></a>読み込み及び回答</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from langchain.chains import RetrievalQA</span><br><span class="line">from langchain.chat_models import ChatOpenAI</span><br><span class="line">import faiss</span><br><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">index = faiss.read_index(&quot;store.index&quot;)</span><br><span class="line">with open(&quot;faiss_store.pkl&quot;, &quot;rb&quot;) as f:</span><br><span class="line">    store = pickle.load(f)</span><br><span class="line">store.index = index</span><br><span class="line"></span><br><span class="line">qa = RetrievalQA.from_chain_type(llm=ChatOpenAI(openai_api_key=&quot;*****&quot;), chain_type=&quot;stuff&quot;, retriever=store.as_retriever())</span><br><span class="line"></span><br><span class="line">query = &quot;財政の果たす三つの機能とは？&quot;</span><br><span class="line">answer = qa.run(query)</span><br><span class="line"></span><br><span class="line">print(answer)</span><br></pre></td></tr></table></figure><p>事前に作成した <code>store.index</code> と <code>faiss_store.pkl</code> を読み込んで、質問に回答します。</p><p>回答は <code>財政の果たす三つの機能は、資源配分の調整、所得の再分配、経済の安定化です。</code> でした。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ict-worker.com/ai/gpt35-with-smeca.html">【Langchain】EmbeddingでChatGPTに自分専用Q&amp;Aをしてもらう方法</a></p><p><a href="http://www.ec.kagawa-u.ac.jp/m/~tetsuta/jeps/no11/tabuchi.pdf">日本財政の現状と望ましい税制の考察.pdf</a></p><p><a href="https://platform.openai.com/account/api-keys">API keys - OpenAI API</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;チャットボットで使うモデルを事前に作って、PKLファイル形式で保存する。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;h3 id=&quot;パッケージ&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="openai" scheme="https://noitaro.github.io/tags/openai/"/>
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="langchain" scheme="https://noitaro.github.io/tags/langchain/"/>
    
    <category term="embedding" scheme="https://noitaro.github.io/tags/embedding/"/>
    
    <category term="chat-gpt" scheme="https://noitaro.github.io/tags/chat-gpt/"/>
    
  </entry>
  
  <entry>
    <title>WordPress から Gatsby へ移行</title>
    <link href="https://noitaro.github.io/gatsby/"/>
    <id>https://noitaro.github.io/gatsby/</id>
    <published>2023-07-14T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.059Z</updated>
    
    <content type="html"><![CDATA[<p>いろいろ思うことがあって WordPress から Gatsby へ移行しました。</p><h2 id="Gatsby-プロジェクトの作成"><a href="#Gatsby-プロジェクトの作成" class="headerlink" title="Gatsby プロジェクトの作成"></a>Gatsby プロジェクトの作成</h2><p>今回は <a href="https://www.gatsbyjs.com/starters/gatsbyjs/gatsby-starter-blog">gatsby-starter-blog</a> を使います。</p><h3 id="Gatsby-Starter-Blog-とは？"><a href="#Gatsby-Starter-Blog-とは？" class="headerlink" title="Gatsby Starter Blog とは？"></a>Gatsby Starter Blog とは？</h3><p>“Gatsby Starter Blog”は、Gatsby.js を使用してブログを作成するためのスターターテンプレートです。</p><p>Gatsby.js は、React ベースの静的サイトジェネレーターで、データを GraphQL を介して取得します。</p><p>“Gatsby Starter Blog”は、ブログ投稿やページネーション、タグなど、ブログに必要な機能を兼ね備えており、Markdown 記法でブログを作成することができます。</p><p>あとカスタマイズも容易で、Gatsbyのプラグインを使って、SEO や、Google Analytics など、さまざまな機能を簡単に追加することができます。</p><p>適当なフォルダーで次のコマンドを実行する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx gatsby new gatsby-starter-blog https://github.com/gatsbyjs/gatsby-starter-blog</span><br></pre></td></tr></table></figure><p><img src="2023-07-14_111303.png" loading="lazy"></p><p>続いて次のコマンドでデバッグ実行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd gatsby-starter-blog</span><br><span class="line">npm run develop</span><br></pre></td></tr></table></figure><p><img src="2023-07-14_112727.png" loading="lazy"></p><p><a href="http://localhost:8000/">http://localhost:8000/</a> で開く</p><p><img src="2023-07-14_113027.png" loading="lazy"></p><p>あとは、これをカスタマイズしてく。</p><h2 id="WordPress-からエクスポート"><a href="#WordPress-からエクスポート" class="headerlink" title="WordPress からエクスポート"></a>WordPress からエクスポート</h2><p>WordPress のエクスポート機能を使って、XMLファイルをダウンロードする。</p><p><code>ダッシュボード &gt; ツール &gt; エクスポート</code> の順で選択。</p><p>エクスポートする内容は <code>すべてのコンテンツ</code> を選択し、エクスポートファイルをダウンロードする。</p><p><img src="image-846.png" loading="lazy"></p><p>XMLファイルがダウンロードできる。</p><p><img src="2023-07-14_120332.png" loading="lazy"></p><h2 id="インポート"><a href="#インポート" class="headerlink" title="インポート"></a>インポート</h2><p>インポートには <a href="https://github.com/lonekorean/wordpress-export-to-markdown">wordpress-export-to-markdown</a> プラグインを使う。</p><h3 id="wordpress-export-to-markdown-とは？"><a href="#wordpress-export-to-markdown-とは？" class="headerlink" title="wordpress-export-to-markdown とは？"></a>wordpress-export-to-markdown とは？</h3><p>wordpress-export-to-markdown は、WordPress の記事を Markdown 形式でエクスポートするためのプラグインです。</p><p>WordPress は PHP のコンテンツ管理システムであり、記事を HTML 形式で保存しています。</p><p>wordpress-export-to-markdown を使用すると、WordPress の記事を Markdown 形式でエクスポートできます。</p><p>これにより、エクスポートされたファイルを他のプラットフォームやブログシステムにインポートする際に、Markdown 形式を利用できます。</p><p>次のコマンドを実行すると、WordPress から記事や画像を Markdown 形式でダウンロードしてくれる。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx wordpress-export-to-markdown</span><br></pre></td></tr></table></figure><p>ウィザードにしたがってオプションを設定する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Starting wizard...</span><br><span class="line">? Path to WordPress export file? WordPress.2023-07-14.xml</span><br><span class="line">? Path to output folder? gatsby-starter-blog/content/blog</span><br><span class="line">? Create year folders? No</span><br><span class="line">? Create month folders? No</span><br><span class="line">? Create a folder for each post? Yes</span><br><span class="line">? Prefix post folders/files with date? No</span><br><span class="line">? Save images attached to posts? Yes</span><br><span class="line">? Save images scraped from post body content? Yes</span><br><span class="line">? Include custom post types and pages? No</span><br></pre></td></tr></table></figure><p><img src="image-847.png" loading="lazy"></p><p><code>./content/blog</code> に記事の数だけフォルダーと Markdownファイル が作られる。</p><p><img src="2023-07-14_121653.png" loading="lazy"></p><h2 id="カスタマイズ"><a href="#カスタマイズ" class="headerlink" title="カスタマイズ"></a>カスタマイズ</h2><p><code>gatsby-starter-blog</code> は最小限の機能しか備わっていないので、ここからは自分好みにカスタマイズしていく。</p><h3 id="gatsby-plugin-sitemap"><a href="#gatsby-plugin-sitemap" class="headerlink" title="gatsby-plugin-sitemap"></a>gatsby-plugin-sitemap</h3><p><a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-sitemap/">gatsby-plugin-sitemap</a></p><p>ビルド時にサイトマップを出力してくれるようになります。</p><p>google search console に登録するときに必要なため導入した。</p><p><img src="2023-07-14_124641.png" loading="lazy"></p><h3 id="gatsby-remark-external-links"><a href="#gatsby-remark-external-links" class="headerlink" title="gatsby-remark-external-links"></a>gatsby-remark-external-links</h3><p><a href="https://www.gatsbyjs.com/plugins/gatsby-remark-external-links/">gatsby-remark-external-links</a></p><p>外部リンクを開くときに「新しいタブで開く」ようになります。</p><h3 id="gatsby-remark-autolink-headers"><a href="#gatsby-remark-autolink-headers" class="headerlink" title="gatsby-remark-autolink-headers"></a>gatsby-remark-autolink-headers</h3><p><a href="https://www.gatsbyjs.com/plugins/gatsby-remark-autolink-headers/">gatsby-remark-autolink-headers</a></p><p>目次を自動で作ってくれます。</p><p><code>./src/templates/blog-post.js</code> の <code>section</code> の前にコードを入れると目次が出力されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;toc-002&quot; dangerouslySetInnerHTML=&#123;&#123; __html: post.tableOfContents &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><p><img src="2023-07-14_125937.png" loading="lazy"></p><p>スタイルが何も当たっていないので、<code>./src/style.css</code> にスタイルを追記するとそれらしく見やすくなる。</p><h3 id="gatsby-remark-images-medium-zoom"><a href="#gatsby-remark-images-medium-zoom" class="headerlink" title="gatsby-remark-images-medium-zoom"></a>gatsby-remark-images-medium-zoom</h3><p><a href="https://www.gatsbyjs.com/plugins/gatsby-remark-images-medium-zoom/">gatsby-remark-images-medium-zoom</a></p><p>画像をクリックしたときに、ズーム表示してくれるようになります。</p><h3 id="ページネーション"><a href="#ページネーション" class="headerlink" title="ページネーション"></a>ページネーション</h3><p><a href="https://www.gatsbyjs.com/plugins/gatsby-awesome-pagination/">gatsby-awesome-pagination</a></p><p>プロジェクトルートにある <code>./gatsby-config.js</code> に次のコードを追記する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; paginate &#125; = require(`gatsby-awesome-pagination`)</span><br></pre></td></tr></table></figure><p><img src="2023-07-14_132819.png" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">exports.createPages = async (&#123; graphql, actions, reporter &#125;) =&gt; &#123;</span><br><span class="line">  ~~~ 既存処理 ~~~</span><br><span class="line">  </span><br><span class="line">  ↓↓↓ 追記 ↓↓↓</span><br><span class="line">  // Create your paginated pages</span><br><span class="line">  paginate(&#123;</span><br><span class="line">    createPage, // The Gatsby `createPage` function</span><br><span class="line">    items: posts, // An array of objects</span><br><span class="line">    itemsPerPage: 10, // How many items you want per page</span><br><span class="line">    pathPrefix: (&#123; pageNumber &#125;) =&gt; (pageNumber === 0 ? &#x27;/&#x27; : &#x27;/page&#x27;), // Creates pages like `/blog`, `/blog/2`, etc</span><br><span class="line">    component: path.resolve(&#x27;./src/templates/index.js&#x27;), // Just like `createPage()`</span><br><span class="line">  &#125;)</span><br><span class="line">  ↑↑↑ 追記 ↑↑↑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="2023-07-14_132835.png" loading="lazy"></p><p>上記修正をすると <code>./src/templates/index.js</code> で ページネーションコンテキスト が使えるようになる。</p><h4 id="pageQuery-に-skip-と-limit-を追加"><a href="#pageQuery-に-skip-と-limit-を追加" class="headerlink" title="pageQuery に skip と limit を追加"></a><code>pageQuery</code> に <code>skip</code> と <code>limit</code> を追加</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">export const pageQuery = graphql`</span><br><span class="line">  query ($skip: Int!, $limit: Int!) &#123;</span><br><span class="line">    site &#123;</span><br><span class="line">      siteMetadata &#123;</span><br><span class="line">        title</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    allMarkdownRemark(sort: &#123; frontmatter: &#123; date: DESC &#125; &#125; skip: $skip limit: $limit) &#123;</span><br><span class="line">      nodes &#123;</span><br><span class="line">        excerpt</span><br><span class="line">        fields &#123;</span><br><span class="line">          slug</span><br><span class="line">        &#125;</span><br><span class="line">        frontmatter &#123;</span><br><span class="line">          date(formatString: &quot;YYYY/MM/DD&quot;)</span><br><span class="line">          title</span><br><span class="line">          description</span><br><span class="line">          tags</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><img src="2023-07-14_144744.png" loading="lazy"></p><h4 id="BlogIndex-の引数に-を追加"><a href="#BlogIndex-の引数に-を追加" class="headerlink" title="BlogIndex の引数に &#96;&#96; を追加"></a><code>BlogIndex</code> の引数に &#96;&#96; を追加</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const BlogIndex = (&#123; data, location, pageContext &#125;) =&gt; &#123;</span><br><span class="line">  ~~~ 既存処理 ~~~</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="2023-07-14_145039.png" loading="lazy"></p><h4 id="ページネーションを追加"><a href="#ページネーションを追加" class="headerlink" title="ページネーションを追加"></a>ページネーションを追加</h4><p>ページの最後にページネーションを追加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;pageContext.previousPagePath ? &lt;Link to=&#123;pageContext.previousPagePath&#125;&gt;Previous&lt;/Link&gt; : null&#125;</span><br><span class="line">  &#123;pageContext.nextPagePath ? &lt;Link to=&#123;pageContext.nextPagePath&#125;&gt;Next&lt;/Link&gt; : null&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="2023-07-14_145205.png" loading="lazy"></p><h3 id="サイト内検索"><a href="#サイト内検索" class="headerlink" title="サイト内検索"></a>サイト内検索</h3><h4 id="検索コンポーネントを作成"><a href="#検索コンポーネントを作成" class="headerlink" title="検索コンポーネントを作成"></a>検索コンポーネントを作成</h4><p><code>./src/components/search.tsx</code> を作成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component, useEffect, useState &#125; from &quot;react&quot;</span><br><span class="line">import &#123; Paper, IconButton, InputBase &#125; from &quot;@mui/material&quot;</span><br><span class="line">import SearchIcon from &#x27;@mui/icons-material/Search&#x27;;</span><br><span class="line">import &#123; navigate &#125; from &quot;gatsby&quot;;</span><br><span class="line">import &#123; useLocation &#125; from &quot;@reach/router&quot;</span><br><span class="line"></span><br><span class="line">// Search component</span><br><span class="line">const Search = () =&gt; &#123;</span><br><span class="line">  const location = useLocation();</span><br><span class="line"></span><br><span class="line">  const [searchValue, setSearchvalue] = useState(&quot;&quot;);</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    const query = new URLSearchParams(location.search);</span><br><span class="line">    const search: string = query.get(&#x27;s&#x27;) ?? &quot;&quot;;</span><br><span class="line">    setSearchvalue(search);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  const clickedSearch = () =&gt; &#123;</span><br><span class="line">    navigate(`/search/?s=$&#123;searchValue&#125;`);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;Paper sx=&#123;&#123; p: &#x27;2px 4px&#x27;, display: &#x27;flex&#x27;, alignItems: &#x27;center&#x27;, width: 400 &#125;&#125; elevation=&#123;0&#125; &gt;</span><br><span class="line">      &lt;InputBase sx=&#123;&#123; ml: 1, flex: 1 &#125;&#125; placeholder=&quot;サイト内を検索&quot; value=&#123;searchValue&#125; onChange=&#123;(event) =&gt; &#123; setSearchvalue(event.target.value); &#125;&#125; /&gt;</span><br><span class="line">      &lt;IconButton type=&quot;button&quot; sx=&#123;&#123; p: &#x27;10px&#x27; &#125;&#125; onClick=&#123;clickedSearch&#125;&gt;</span><br><span class="line">        &lt;SearchIcon /&gt;</span><br><span class="line">      &lt;/IconButton&gt;</span><br><span class="line">    &lt;/Paper&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Search;</span><br></pre></td></tr></table></figure><p>これを <code>./src/components/layout.js</code> の <code>header</code> と <code>main</code> の間に追加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;global-wrapper&quot; data-is-root-path=&#123;isRootPath&#125;&gt;</span><br><span class="line">  &lt;header className=&quot;global-header&quot;&gt;&#123;header&#125;&lt;/header&gt;</span><br><span class="line">  &lt;Search /&gt;</span><br><span class="line">  &lt;main&gt;&#123;children&#125;&lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    © &#123;new Date().getFullYear()&#125;, Built with</span><br><span class="line">    &#123;` `&#125;</span><br><span class="line">    &lt;a href=&quot;https://www.gatsbyjs.com&quot;&gt;Gatsby&lt;/a&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="2023-07-14_145944.png" loading="lazy"><br><img src="2023-07-14_150042.png" loading="lazy"></p><h4 id="検索結果ページを作成"><a href="#検索結果ページを作成" class="headerlink" title="検索結果ページを作成"></a>検索結果ページを作成</h4><p><code>./src/pages/search.tsx</code> を作成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useEffect, useState &#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; graphql, useStaticQuery &#125; from &#x27;gatsby&#x27;</span><br><span class="line">import &#123; useLocation &#125; from &quot;@reach/router&quot;</span><br><span class="line">import BlogIndex from &#x27;../templates&#x27;</span><br><span class="line"></span><br><span class="line">const SearchPage = () =&gt; &#123;</span><br><span class="line">  const location = useLocation();</span><br><span class="line"></span><br><span class="line">  const pageQuery: any = useStaticQuery(graphql`</span><br><span class="line">  query &#123;</span><br><span class="line">    site &#123;</span><br><span class="line">      siteMetadata &#123;</span><br><span class="line">        title</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    allMarkdownRemark(sort: &#123; frontmatter: &#123; date: DESC &#125; &#125;) &#123;</span><br><span class="line">      nodes &#123;</span><br><span class="line">        excerpt</span><br><span class="line">        fields &#123;</span><br><span class="line">          slug</span><br><span class="line">        &#125;</span><br><span class="line">        frontmatter &#123;</span><br><span class="line">          date(formatString: &quot;YYYY/MM/DD&quot;)</span><br><span class="line">          title</span><br><span class="line">          description</span><br><span class="line">          tags</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">`)</span><br><span class="line"></span><br><span class="line">  const [data, setData] = useState(pageQuery);</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    const query = new URLSearchParams(location.search);</span><br><span class="line">    const search: string = query.get(&#x27;s&#x27;) ?? &quot;&quot;;</span><br><span class="line">    if (search == &quot;&quot;) &#123;</span><br><span class="line">      setData(&#123; ...&#123; site: pageQuery.site &#125;, ...&#123; allMarkdownRemark: &#123; nodes: [] &#125; &#125; &#125;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const posts = pageQuery.allMarkdownRemark.nodes.map((x: any) =&gt; &#123;</span><br><span class="line">      const target = Object.assign(&#123; excerpt: x.excerpt &#125;, x.fields, x.frontmatter);</span><br><span class="line">      const key = `$&#123;target.title.toLowerCase()&#125; $&#123;target.tags?.join(&quot; &quot;).toLowerCase()&#125; $&#123;target.date.toLowerCase()&#125; $&#123;target.description?.toLowerCase()&#125;`</span><br><span class="line">      return &#123; ...x, ...&#123; key: key &#125; &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    const filtered = posts.filter((e: any) =&gt; &#123;</span><br><span class="line">      return e.key.indexOf(search) !== -1;</span><br><span class="line">    &#125;)</span><br><span class="line">    setData(&#123; ...&#123; site: pageQuery.site &#125;, ...&#123; allMarkdownRemark: &#123; nodes: filtered &#125; &#125; &#125;);</span><br><span class="line">  &#125;, [location]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;BlogIndex data=&#123;data&#125; location=&#123;location&#125; /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default SearchPage</span><br></pre></td></tr></table></figure><p>右上の検索すると、URLパラメーター で検索ページに遷移して、記事が抽出される。<br><img src="2023-07-14_150410.png" loading="lazy"></p><h3 id="タグ一覧"><a href="#タグ一覧" class="headerlink" title="タグ一覧"></a>タグ一覧</h3><h4 id="タグ一覧ページを作成"><a href="#タグ一覧ページを作成" class="headerlink" title="タグ一覧ページを作成"></a>タグ一覧ページを作成</h4><p><code>./src/pages/tag.tsx</code> を作成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useEffect, useState &#125; from &#x27;react&#x27;</span><br><span class="line">import Layout from &#x27;../components/layout&#x27;</span><br><span class="line">import &#123; graphql, useStaticQuery, Link &#125; from &#x27;gatsby&#x27;</span><br><span class="line">import &#123; useLocation &#125; from &quot;@reach/router&quot;</span><br><span class="line"></span><br><span class="line">const TagPage = () =&gt; &#123;</span><br><span class="line">  const location = useLocation();</span><br><span class="line"></span><br><span class="line">  const pageQuery: any = useStaticQuery(graphql`</span><br><span class="line">    query &#123;</span><br><span class="line">      site &#123;</span><br><span class="line">        siteMetadata &#123;</span><br><span class="line">          title</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      allMarkdownRemark &#123;</span><br><span class="line">        group (field: &#123;frontmatter: &#123;tags: SELECT&#125;&#125;) &#123;</span><br><span class="line">          tag: fieldValue</span><br><span class="line">          totalCount</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  `)</span><br><span class="line"></span><br><span class="line">  const [siteTitle, setSiteTitle] = useState(pageQuery.site.siteMetadata.title);</span><br><span class="line">  const [group, setGroup] = useState(pageQuery.allMarkdownRemark.group as []);</span><br><span class="line">  </span><br><span class="line">  return (</span><br><span class="line">    &lt;Layout location=&#123;location&#125; title=&#123;siteTitle&#125;&gt;</span><br><span class="line">      &lt;h1&gt;タグ&lt;/h1&gt;</span><br><span class="line">      &lt;Stack direction=&quot;row&quot; spacing=&#123;2&#125; useFlexGap flexWrap=&quot;wrap&quot;&gt;</span><br><span class="line">        &#123;group.slice().sort((a: any, b: any) =&gt; (a.totalCount - b.totalCount)*-1).map((item: any) =&gt; (</span><br><span class="line">          &lt;Button key=&#123;item.tag&#125; component=&#123;Link&#125; variant=&quot;outlined&quot; size=&quot;small&quot; to=&#123;`/tag/$&#123;item.tag&#125;/`&#125; startIcon=&#123;&lt;LocalOfferIcon /&gt;&#125;&gt;&#123;item.tag&#125;(&#123;item.totalCount&#125;)&lt;/Button&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/Stack&gt;</span><br><span class="line">    &lt;/Layout&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default TagPage</span><br></pre></td></tr></table></figure><p>このページを開くとタグ一覧が表示される。<br><img src="2023-07-14_151037.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;いろいろ思うことがあって WordPress から Gatsby へ移行しました。&lt;/p&gt;
&lt;h2 id=&quot;Gatsby-プロジェクトの作成&quot;&gt;&lt;a href=&quot;#Gatsby-プロジェクトの作成&quot; class=&quot;headerlink&quot; title=&quot;Gatsby プロジェ</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="react" scheme="https://noitaro.github.io/tags/react/"/>
    
    <category term="github" scheme="https://noitaro.github.io/tags/github/"/>
    
    <category term="gatsby" scheme="https://noitaro.github.io/tags/gatsby/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Discord BOT を作る</title>
    <link href="https://noitaro.github.io/python-discord-bot/"/>
    <id>https://noitaro.github.io/python-discord-bot/</id>
    <published>2023-07-07T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.471Z</updated>
    
    <content type="html"><![CDATA[<p>思ってたより簡単に作れそう。</p><h2 id="Discord-BOT-アカウント作成"><a href="#Discord-BOT-アカウント作成" class="headerlink" title="Discord BOT アカウント作成"></a>Discord BOT アカウント作成</h2><p>Discord API を使うため、Discord BOT アカウントを作成します。</p><p><a href="https://discord.com/developers/applications" title="developer portal の Applications ページ">developer portal の Applications ページ</a> を開き、右上の「New Application」をクリック。</p><p><img src="image-828.png" loading="lazy"></p><p>アプリケーションの名前を入力し「Create」をクリック。</p><p><img src="image-830.png" loading="lazy"></p><p>「Bot」タブに移動し「Reset Token」をクリック。</p><p><img src="image-832.png" loading="lazy"></p><p>「Yes, do it!」をクリック。</p><p><img src="image-833.png" loading="lazy"></p><p>トークンが発行されるので、コピペしておきます。</p><p><img src="image-834.png" loading="lazy"></p><h2 id="サーバーに-BOT-追加"><a href="#サーバーに-BOT-追加" class="headerlink" title="サーバーに BOT 追加"></a>サーバーに BOT 追加</h2><p>今作った BOT をサーバーに追加するため、BOTの招待用URL を作成します。</p><p>「OAuth2」タブの「URL Generator」カテゴリーに移動し、</p><p><img src="image-835.png" loading="lazy"></p><p>「SCOPES」セクションの「bot」を選択。</p><p><img src="image-838.png" loading="lazy"></p><p>「BOT PERMISSIONS」セクションの「Administrator」を選択。</p><p><img src="image-837.png" loading="lazy"></p><p>今回はお試しのため、Administrator を選択したが、実際の運用時は最低限の権限を選択する。</p><p>「GENERATED URL」セクションに 招待用URL が表示される。</p><p><img src="image-839.png" loading="lazy"></p><p>招待用URL をブラウザーで開き、サーバーに BOT を追加します。</p><p><img src="image-840.png" loading="lazy"></p><p><img src="image-841.png" loading="lazy"></p><h2 id="対話型BOT"><a href="#対話型BOT" class="headerlink" title="対話型BOT"></a>対話型BOT</h2><p>Python の <a href="https://github.com/Rapptz/discord.py" title="discord.py ライブラリー">discord.py ライブラリー</a> を使って、対話型BOT を作成します。</p><h3 id="discord-py-ライブラリー"><a href="#discord-py-ライブラリー" class="headerlink" title="discord.py ライブラリー"></a>discord.py ライブラリー</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U discord.py</span><br></pre></td></tr></table></figure><h3 id="ソース"><a href="#ソース" class="headerlink" title="ソース"></a>ソース</h3><p>適当なフォルダー内に「main.py」を作成して、次のソースをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import discord</span><br><span class="line"></span><br><span class="line">intents = discord.Intents.default()</span><br><span class="line">client = discord.Client(intents=intents)</span><br><span class="line"></span><br><span class="line">@client.event</span><br><span class="line">async def on_ready():</span><br><span class="line">    print(&#x27;We have logged in as &#123;0.user&#125;&#x27;.format(client))</span><br><span class="line"></span><br><span class="line">@client.event</span><br><span class="line">async def on_message(message):</span><br><span class="line">    if message.author == client.user:</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    if message.content.startswith(&#x27;$hello&#x27;):</span><br><span class="line">        await message.channel.send(&#x27;Hello!&#x27;)</span><br><span class="line"></span><br><span class="line">client.run(token=&#x27;*****&#x27;)</span><br></pre></td></tr></table></figure><p>「token&#x3D;’*****’」の部分は、自分の トークンに差し替えてください。</p><p><img src="image-842.png" loading="lazy"></p><h3 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h3><p>これを実行して BOT にメッセージ「$hello」を送ると、BOT が反応してくれます。</p><p><img src="image-843.png" loading="lazy"></p><h2 id="定期的に実行するBOT"><a href="#定期的に実行するBOT" class="headerlink" title="定期的に実行するBOT"></a>定期的に実行するBOT</h2><p>前回のは 対話型BOT でしたが、今回は定期的に実行されるBOTを紹介します。</p><h3 id="ソース-1"><a href="#ソース-1" class="headerlink" title="ソース"></a>ソース</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import discord</span><br><span class="line">from discord.ext import tasks, commands</span><br><span class="line"></span><br><span class="line">intents = discord.Intents.default()</span><br><span class="line">intents.members = True  # membersを受け取る</span><br><span class="line">bot = commands.Bot(command_prefix=&#x27;!&#x27;, intents=intents)</span><br><span class="line"></span><br><span class="line">@tasks.loop(minutes=1)</span><br><span class="line">async def fetch_members():</span><br><span class="line">    for guild in bot.guilds:</span><br><span class="line">        members = []</span><br><span class="line">        async for member in guild.fetch_members():</span><br><span class="line">            print(f&quot;Fetched Member &#123;member&#125;&quot;)</span><br><span class="line">            members.append(member)</span><br><span class="line">        # 続きの処理...</span><br><span class="line">        print(f&quot;Fetched &#123;len(members)&#125; members.&quot;)</span><br><span class="line">    print(&quot;Members fetching job done.&quot;)</span><br><span class="line"></span><br><span class="line">@bot.event</span><br><span class="line">async def on_ready():</span><br><span class="line">    print(&#x27;We have logged in as &#123;0.user&#125;&#x27;.format(bot))</span><br><span class="line">    fetch_members.start()  # Start the task</span><br><span class="line"></span><br><span class="line">bot.run(token=&#x27;*****&#x27;)</span><br></pre></td></tr></table></figure><h3 id="確認-1"><a href="#確認-1" class="headerlink" title="確認"></a>確認</h3><p>これを実行すると、1分ごとにサーバーのメンバーリストを取得してコンソールに表示してくれます。</p><p><img src="image-845.png" loading="lazy"></p><h3 id="例外エラー"><a href="#例外エラー" class="headerlink" title="例外エラー"></a>例外エラー</h3><p>BOT が「サーバーのメンバーリストを扱う」ということを宣言していないため。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例外が発生しました: PrivilegedIntentsRequired</span><br><span class="line">Shard ID None is requesting privileged intents that have not been explicitly enabled in the developer portal. It is recommended to go to https://discord.com/developers/applications/ and explicitly enable the privileged intents within your application&#x27;s page. If this is not possible, then consider disabling the privileged intents instead.</span><br><span class="line">discord.gateway.WebSocketClosure: </span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line">discord.errors.ConnectionClosed: Shard ID None WebSocket closed with 4014</span><br><span class="line">During handling of the above exception, another exception occurred:</span><br></pre></td></tr></table></figure><p>「Bot」セクションの「SERVER MEMBERS INTENT」を有効にする。</p><p><img src="image-844.png" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freecodecamp.org/japanese/news/create-a-discord-bot-with-python/">https://www.freecodecamp.org/japanese/news/create-a-discord-bot-with-python/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;思ってたより簡単に作れそう。&lt;/p&gt;
&lt;h2 id=&quot;Discord-BOT-アカウント作成&quot;&gt;&lt;a href=&quot;#Discord-BOT-アカウント作成&quot; class=&quot;headerlink&quot; title=&quot;Discord BOT アカウント作成&quot;&gt;&lt;/a&gt;Discord</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="discord" scheme="https://noitaro.github.io/tags/discord/"/>
    
    <category term="bot" scheme="https://noitaro.github.io/tags/bot/"/>
    
  </entry>
  
  <entry>
    <title>Azure Blob Storage にファイルをアップロードする</title>
    <link href="https://noitaro.github.io/azure-blob-storage-to-file-upload/"/>
    <id>https://noitaro.github.io/azure-blob-storage-to-file-upload/</id>
    <published>2023-06-21T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.775Z</updated>
    
    <content type="html"><![CDATA[<p>クライアント側だけで全て完結させます。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="Azure-Blob-Storage"><a href="#Azure-Blob-Storage" class="headerlink" title="Azure Blob Storage"></a>Azure Blob Storage</h3><p>事前に <a href="https://azure.microsoft.com/ja-jp/products/storage/blobs" title="Azure Blob Storage">Azure Blob Storage</a> にコンテナーを作成しておきます。</p><p>今回は次のような設定で作成しました。</p><ul><li><p>ストレージ アカウント名：gorillabrs</p></li><li><p>Blob コンテナー名：images</p></li></ul><h4 id="Shared-Access-Signature-SAS"><a href="#Shared-Access-Signature-SAS" class="headerlink" title="Shared Access Signature (SAS)"></a>Shared Access Signature (SAS)</h4><p>今回は SAS を使って接続するため、事前に SASトークン を取得しておきます。</p><p><img src="image-822.png" loading="lazy"></p><p>「SAS と接続文字列を生成する」を押すと SASトークン が発行されます。</p><p><img src="image-823.png" loading="lazy"></p><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>クライアントがストレージ アカウントにアクセスできるように、CORSを構成します。</p><ul><li><p>許可されるオリジン： <a href="http://localhost:3000/">http://localhost:3000</a></p></li><li><p>許可されたメソッド： パッチを除くすべて。</p></li><li><p>許可されるヘッダー： *</p></li><li><p>公開されるヘッダー： *</p></li><li><p>最長有効期間： 86400</p></li></ul><p><img src="image-824.png" loading="lazy"></p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>クライアント側は <a href="https://ja.react.dev/" title="Reactフレームワーク">Reactフレームワーク</a> を使います。</p><p>これは私が使いなれているからだけで、どんなフレームワークを使っても問題ありません。</p><p>次のコマンドで React のプロジェクトを作成しました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app --template typescript myapp</span><br><span class="line">cd myapp</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p><img src="image-821.png" loading="lazy"></p><h4 id="Azure-Storage-Blob-client-library-for-JavaScript"><a href="#Azure-Storage-Blob-client-library-for-JavaScript" class="headerlink" title="Azure Storage Blob client library for JavaScript"></a>Azure Storage Blob client library for JavaScript</h4><p>今回は <a href="https://github.com/Azure/azure-sdk-for-js" title="Azure Storage Blob client library">Azure Storage Blob client library</a> を使います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @azure/storage-blob</span><br></pre></td></tr></table></figure><h2 id="ソース"><a href="#ソース" class="headerlink" title="ソース"></a>ソース</h2><p>次のソースを App.tsx にコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AnonymousCredential, ContainerClient &#125; from &#x27;@azure/storage-blob&#x27;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line"></span><br><span class="line">  const clickedFileUpload = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    const target = document.getElementById(&quot;fileupload&quot;) as HTMLInputElement;</span><br><span class="line">    if (target.files == null || target.files.length &lt;= 0) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const account = &quot;gorillabrs&quot;;</span><br><span class="line">    const accountSas = &quot;?sv=**********&quot;;</span><br><span class="line">    const containerName = &quot;images&quot;;</span><br><span class="line"></span><br><span class="line">    const containerClient = new ContainerClient(</span><br><span class="line">      `https://$&#123;account&#125;.blob.core.windows.net/$&#123;containerName&#125;$&#123;accountSas&#125;`,</span><br><span class="line">      new AnonymousCredential()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    const file = target.files[0];</span><br><span class="line"></span><br><span class="line">    // コンテナ用の blobClient を作成する。</span><br><span class="line">    const blobClient = containerClient.getBlockBlobClient(file.name);</span><br><span class="line"></span><br><span class="line">    // ブラウザから判断した mimetype を設定する。</span><br><span class="line">    const options = &#123; blobHTTPHeaders: &#123; blobContentType: file.type &#125; &#125;;</span><br><span class="line"></span><br><span class="line">    // ファイルアップロード</span><br><span class="line">    blobClient.uploadData(file, options).then(response =&gt; &#123;</span><br><span class="line">      console.log(&quot;response:&quot;, response);</span><br><span class="line">    &#125;).catch(error =&gt; &#123;</span><br><span class="line">      console.log(&quot;error:&quot;, error);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input type=&quot;file&quot; id=&quot;fileupload&quot; /&gt;</span><br><span class="line">      &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">      &lt;button type=&quot;button&quot; onClick=&#123;clickedFileUpload&#125;&gt;ファイルのアップロード&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>アップロードしたいファイルを選択し、ファイルアップロードボタンを押すと Blob Storage にファイルがアップロードされます。</p><p><img src="image-825.png" loading="lazy"></p><p><img src="image-826.png" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://learn.microsoft.com/ja-jp/azure/developer/javascript/tutorial/browser-file-upload-azure-storage-blob?tabs=typescript,user-delegated-sas">https://learn.microsoft.com/ja-jp/azure/developer/javascript/tutorial/browser-file-upload-azure-storage-blob?tabs=typescript%2Cuser-delegated-sas</a></p><h2 id="備考"><a href="#備考" class="headerlink" title="備考"></a>備考</h2><h3 id="Shared-Access-Signature-SAS-1"><a href="#Shared-Access-Signature-SAS-1" class="headerlink" title="Shared Access Signature (SAS)"></a>Shared Access Signature (SAS)</h3><p>Shared Access Signature (SAS)は、Microsoft Azureサービスに対するセキュアなアクセスを提供するための仕組みです。SASは、クライアントが特定のリソースに対する限定的なアクセス権を持つことを可能にします。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;クライアント側だけで全て完結させます。&lt;/p&gt;
&lt;h2 id=&quot;準備&quot;&gt;&lt;a href=&quot;#準備&quot; class=&quot;headerlink&quot; title=&quot;準備&quot;&gt;&lt;/a&gt;準備&lt;/h2&gt;&lt;h3 id=&quot;Azure-Blob-Storage&quot;&gt;&lt;a href=&quot;#Azure-Bl</summary>
      
    
    
    
    
    <category term="azure" scheme="https://noitaro.github.io/tags/azure/"/>
    
    <category term="react" scheme="https://noitaro.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React を使って SQLite からデータを取得する</title>
    <link href="https://noitaro.github.io/react-sqlite-select/"/>
    <id>https://noitaro.github.io/react-sqlite-select/</id>
    <published>2023-05-21T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.523Z</updated>
    
    <content type="html"><![CDATA[<p>ちょっとニッチな使い方をしてみたいと思います。</p><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p>ブラウザの JavaScript で SQLite の wasm版 を動かして、ネットワーク上の SQLite をダウンロード・SELECT実行をします。</p><p>探したところ、空のDBに新規でテーブルを作って、データを入れて、そのデータを取得するって記事がほとんどでした。</p><p>今回のポイントは、ネットワーク上の SQLite をダウンロードするってのがミソになるかと思っています。</p><p>DBは使いたいけど、バックエンドサーバはいらないって人に、うってつけなんじゃないでしょうか。</p><p>React はオマケですね。</p><p>GitHub Page にデプロイしても、DBが使えるのはいいですね。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li><p>Windows 11 Home 22H2</p></li><li><p>create-react-app 5.0.1</p></li></ul><p>事前に React のプロジェクトを作成しておきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app --template typescript my-react-app</span><br></pre></td></tr></table></figure><p>ネットワーク上に配置する「mydb.sqlite3」も作成しておきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Test(id TEXT PRIMARY KEY, name TEXT, create_at TEXT);</span><br><span class="line">INSERT INTO Test VALUES (&#x27;1&#x27;,&#x27;test&#x27;, DATETIME(&#x27;now&#x27;, &#x27;localtime&#x27;));</span><br><span class="line">INSERT INTO Test VALUES (&#x27;2&#x27;,&#x27;テスト&#x27;, DATETIME(&#x27;now&#x27;, &#x27;localtime&#x27;));</span><br><span class="line">INSERT INTO Test VALUES (&#x27;3&#x27;,&#x27;テスト3&#x27;, DATETIME(&#x27;now&#x27;, &#x27;localtime&#x27;));</span><br><span class="line">INSERT INTO Test VALUES (&#x27;4&#x27;,&#x27;テスト4&#x27;, DATETIME(&#x27;now&#x27;, &#x27;localtime&#x27;));</span><br></pre></td></tr></table></figure><p><img src="image-817.png" loading="lazy"></p><p>作ったら、プロジェクトフォルダーの「public」フォルダー内に置いておきます。このフォルダーにあるファイルは、無条件でウェブに配置されるためです。</p><p><img src="image-818.png" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="モジュール"><a href="#モジュール" class="headerlink" title="モジュール"></a>モジュール</h3><p>モジュール「<a href="https://github.com/tomayac/sqlite-wasm" title="SQLite Wasm">SQLite Wasm</a>」を使います。</p><p><a href="https://github.com/tomayac/sqlite-wasm">https://github.com/tomayac/sqlite-wasm</a></p><p>コマンドプロンプトで次のコマンドを実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @sqlite.org/sqlite-wasm</span><br></pre></td></tr></table></figure><p>Windows PowerShell の場合次のエラーが発生する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS D:\React\my-react-app&gt; npm install @sqlite.org/sqlite-wasm</span><br><span class="line">発生場所 行:1 文字:13</span><br><span class="line">+ npm install @sqlite.org/sqlite-wasm</span><br><span class="line">+             ~~~~~~~</span><br><span class="line">分配演算子 &#x27;@&#x27; を使用して式で変数を参照することはできません。コマンドの引数として使用できるのは &#x27;@sqlite&#x27; だけです。式</span><br><span class="line">で変数を参照するには、&#x27;$sqlite&#x27; を使用してください。</span><br><span class="line">    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException</span><br><span class="line">    + FullyQualifiedErrorId : SplattingNotPermitted</span><br></pre></td></tr></table></figure><p><img src="image-816.png" loading="lazy"></p><h3 id="mydb-sqlite3-をダウンロードしてデータ取得"><a href="#mydb-sqlite3-をダウンロードしてデータ取得" class="headerlink" title="mydb.sqlite3 をダウンロードしてデータ取得"></a>mydb.sqlite3 をダウンロードしてデータ取得</h3><p>次のコードを「App.tsx」に貼り付けます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import logo from &#x27;./logo.svg&#x27;;</span><br><span class="line">import &#x27;./App.css&#x27;;</span><br><span class="line">import sqlite3InitModule from &#x27;@sqlite.org/sqlite-wasm&#x27;;</span><br><span class="line"></span><br><span class="line">const log = (...args: any[]) =&gt; console.log(...args);</span><br><span class="line">const error = (...args: any[]) =&gt; console.error(...args);</span><br><span class="line"></span><br><span class="line">const start = function (sqlite3: any) &#123;</span><br><span class="line">  log(&#x27;Running SQLite3 version&#x27;, sqlite3.version.libVersion);</span><br><span class="line"></span><br><span class="line">  const readDatabase = (arrayBuffer: any) =&gt; &#123;</span><br><span class="line">    const bytes = new Uint8Array(arrayBuffer);</span><br><span class="line">    const p = sqlite3.wasm.allocFromTypedArray(bytes);</span><br><span class="line">    const db = new sqlite3.oo1.DB();</span><br><span class="line">    sqlite3.capi.sqlite3_deserialize(db.pointer, &quot;main&quot;, p, bytes.length, bytes.length, sqlite3.capi.SQLITE_DESERIALIZE_FREEONCLOSE | sqlite3.capi.SQLITE_DESERIALIZE_RESIZEABLE);</span><br><span class="line">    return db;</span><br><span class="line">  &#125;;</span><br><span class="line">  (async function () &#123;</span><br><span class="line">    const dataPromise = await fetch(&#x27;mydb.sqlite3&#x27;).then(res =&gt; res.arrayBuffer());</span><br><span class="line">    const u8array = new Uint8Array(dataPromise);</span><br><span class="line">    const db = readDatabase(u8array);</span><br><span class="line"></span><br><span class="line">    // Your SQLite code here.</span><br><span class="line">    db.exec(&#123;</span><br><span class="line">      sql: &#x27;SELECT * FROM Test ORDER BY id LIMIT 3&#x27;, callback: (row: any) =&gt; &#123;</span><br><span class="line">        log(row);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line"></span><br><span class="line">  const didLogRef = React.useRef(false);</span><br><span class="line">  React.useEffect(() =&gt; &#123;</span><br><span class="line">    if (didLogRef.current == false) &#123;</span><br><span class="line">      didLogRef.current = true;</span><br><span class="line"></span><br><span class="line">      log(&#x27;Loading and initializing SQLite3 module...&#x27;);</span><br><span class="line">      sqlite3InitModule(&#123; print: log, printErr: error, &#125;).then((sqlite3: any) =&gt; &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          log(&#x27;Done initializing. Running demo...&#x27;);</span><br><span class="line">          start(sqlite3);</span><br><span class="line">        &#125; catch (err: any) &#123;</span><br><span class="line">          error(err.name, err.message);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      &lt;header className=&quot;App-header&quot;&gt;</span><br><span class="line">        &lt;img src=&#123;logo&#125; className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          Edit &lt;code&gt;src/App.tsx&lt;/code&gt; and save to reload.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;a</span><br><span class="line">          className=&quot;App-link&quot;</span><br><span class="line">          href=&quot;https://reactjs.org&quot;</span><br><span class="line">          target=&quot;_blank&quot;</span><br><span class="line">          rel=&quot;noopener noreferrer&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          Learn React</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>4～32行目 と 36～51行目 が追加したコードです。</p><h3 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h3><p>開発者ツールを開いて画面更新をおこなうと、コンソールにSELECT結果が出力されます。</p><p><img src="image-819.png" loading="lazy"></p><p>ネットワークタブを見ると「mydb.sqlite3」をダウンロードしていることが分かるかと思います。</p><p><img src="image-820.png" loading="lazy"></p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><h3 id="デモ"><a href="#デモ" class="headerlink" title="デモ"></a>デモ</h3><p>デモページを公開しました。</p><p><a href="https://noitaro.github.io/react-sqlite-select-web/">https://noitaro.github.io/react-sqlite-select-web/</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/tomayac/sqlite-wasm">https://github.com/tomayac/sqlite-wasm</a></p><p><a href="https://javascript.plainenglish.io/sqlite-3-in-action-how-to-open-a-local-database-with-javascript-and-webassembly-d766d0743a79">https://javascript.plainenglish.io/sqlite-3-in-action-how-to-open-a-local-database-with-javascript-and-webassembly-d766d0743a79</a></p><p><a href="https://zenn.dev/knaka0209/books/96eca53ecdb2cd/viewer/d8ca93">https://zenn.dev/knaka0209/books/96eca53ecdb2cd/viewer/d8ca93</a></p><p><a href="https://qiita.com/kaikusakari/items/f30c97385e6b0118f4f0">https://qiita.com/kaikusakari/items/f30c97385e6b0118f4f0</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ちょっとニッチな使い方をしてみたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h2&gt;&lt;p&gt;ブラウザの JavaScript で SQLite の wasm版 を</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="typescript" scheme="https://noitaro.github.io/tags/typescript/"/>
    
    <category term="react" scheme="https://noitaro.github.io/tags/react/"/>
    
    <category term="github" scheme="https://noitaro.github.io/tags/github/"/>
    
    <category term="sql" scheme="https://noitaro.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>AI絵師になる</title>
    <link href="https://noitaro.github.io/ai-artist/"/>
    <id>https://noitaro.github.io/ai-artist/</id>
    <published>2023-05-08T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.635Z</updated>
    
    <content type="html"><![CDATA[<p>今流行りのAI絵師になるため「Stable Diffusion web UI」をローカル環境にインストールします。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li><p>Windows 11 Home 22H2</p></li><li><p>NVIDIA GeForce RTX 2060</p></li><li><p>Python 3.10.10</p></li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="Stable-Diffusion-web-UI"><a href="#Stable-Diffusion-web-UI" class="headerlink" title="Stable Diffusion web UI"></a>Stable Diffusion web UI</h3><p>Stable Diffusion web UI とは、Stable Diffusion をWebブラウザ上で簡単に操作できるようにしたツールです。</p><p><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/releases/tag/v1.0.0-pre" title="次のサイト">次のサイト</a>から「sd.webui.zip」をダウンロードし、展開しておきます。</p><p><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/releases/tag/v1.0.0-pre">https://github.com/AUTOMATIC1111/stable-diffusion-webui/releases/tag/v1.0.0-pre</a></p><p><img src="image-789.png" loading="lazy"></p><p>「webui」フォルダー内の「webui-user.bat」を実行すると、必要なモジュール等をダウンロードしてきます。</p><p><img src="image-814.png" loading="lazy"></p><p>初回実行時には、次のような警告が表示されます。</p><p><img src="image-787.png" loading="lazy"></p><p><img src="image-788.png" loading="lazy"></p><p>次のようにエラーなく終われば、初期化完了です。</p><p><img src="image-784-1024x892.png" loading="lazy"></p><h3 id="モデル"><a href="#モデル" class="headerlink" title="モデル"></a>モデル</h3><p>どんなイラストを出力させたいかに応じて、使うモデルが変わってきます。</p><p>今回はアニメ系のイラストを出力させたかったので「<a href="https://huggingface.co/Meina/MeinaMix" title="MeinaMix">MeinaMix</a>」を使いました。</p><p><a href="https://huggingface.co/Meina/MeinaMix">https://huggingface.co/Meina/MeinaMix</a></p><p>「Files」タブを押し、</p><p><img src="image-790.png" loading="lazy"></p><p>とりあえず現状で一番新しい「Meina V9 - baked VAE.safetensors」をダウンロードしました。</p><p><img src="image-791.png" loading="lazy"></p><p>保存場所は「D:\ai\sd.webui\webui\models\Stable-diffusion」フォルダーにします。</p><p><img src="image-792.png" loading="lazy"></p><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>「webui」フォルダー内の「webui-user.bat」を実行します。</p><p>起動に成功すると ローカルURL が表示されます。</p><p><img src="image-803-1024x367.png" loading="lazy"></p><p>Ctrlキーを押しながらクリックすると開くことができます。</p><p><img src="image-804.png" loading="lazy"></p><h3 id="RuntimeError-Cannot-add-middleware-after-an-application-has-started"><a href="#RuntimeError-Cannot-add-middleware-after-an-application-has-started" class="headerlink" title="RuntimeError: Cannot add middleware after an application has started"></a>RuntimeError: Cannot add middleware after an application has started</h3><p>次のエラーが出た場合の対処法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeError: Cannot add middleware after an application has started</span><br></pre></td></tr></table></figure><p><img src="image-794.png" loading="lazy"></p><h4 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h4><p>モジュールのバージョン違いによるエラーのため、少し修正が必要です。</p><p>「D:\ai\sd.webui\webui」フォルダー内で右クリックをしてターミナルを開きます。</p><p><img src="image-798.png" loading="lazy"></p><p>上記で開いたターミナルに次のコードをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\venv\Scripts\activate</span><br></pre></td></tr></table></figure><p><img src="image-799.png" loading="lazy"></p><p>そのまま続けて次のコードをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fastapi==0.90.1</span><br></pre></td></tr></table></figure><p><img src="image-800.png" loading="lazy"></p><h2 id="日本語化"><a href="#日本語化" class="headerlink" title="日本語化"></a>日本語化</h2><p>英語だと分からないので日本語化します。</p><p>「Extensions &gt; Available &gt; localization のチェックを外す &gt; Load from をクリック」</p><p><img src="image-805.png" loading="lazy"></p><p>Ctrlキー＋Fキーで「japanese」を検索し「Install」をクリック</p><p><img src="image-806.png" loading="lazy"></p><p>インストール後「Settings &gt; User Interface」をクリック</p><p><img src="image-807.png" loading="lazy"></p><p>一番下までスクロールし更新ボタンを押してから「ja_JP」を選択</p><p><img src="image-808.png" loading="lazy"></p><p>上に戻って「Apply settings &gt; Reload UI」をそれぞれクリック</p><p><img src="image-809.png" loading="lazy"></p><p>UI が日本語になりました。</p><p><img src="image-810.png" loading="lazy"></p><h2 id="プロンプト"><a href="#プロンプト" class="headerlink" title="プロンプト"></a>プロンプト</h2><p>画像を生成するには、プロンプトという文字列を入力する必要があります。</p><p><a href="https://majinai.art/ja/" title="次のサイト">次のサイト</a>から、好みのプロンプトをコピペします。</p><p><a href="https://majinai.art/ja/">https://majinai.art/ja/</a></p><p>今回は Web UI を使っているので、そちらをコピペします。</p><p>上がプロンプトで、下がネガティブプロンプトです。</p><p><img src="image-811.png" loading="lazy"></p><p>それぞれコピペして「生成」ボタンを押すと、イラストが出力されます。</p><p><img src="image-812.png" loading="lazy"></p><p>あとは好みに応じて、プロンプトを調整して完成です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今流行りのAI絵師になるため「Stable Diffusion web UI」をローカル環境にインストールします。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    
    <category term="ai-art" scheme="https://noitaro.github.io/tags/ai-art/"/>
    
  </entry>
  
  <entry>
    <title>【2023年版】GBAソフトを遊ぶ方法</title>
    <link href="https://noitaro.github.io/how-to-play-gba-for-2023/"/>
    <id>https://noitaro.github.io/how-to-play-gba-for-2023/</id>
    <published>2023-04-22T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.163Z</updated>
    
    <content type="html"><![CDATA[<p>ふと急に GBAソフトの「サモンナイト クラフトソード物語」が遊びたくなったので、メルカリで3作品のソフトを買ってしまいました。</p><p>ですが ゲームボーイアドバンス本体を持っていないので、何かしらの方法が必要なのでそれについて記事にしていきます。</p><p><img src="image-781.png" loading="lazy"></p><h2 id="GBAソフトを遊ぶ方法"><a href="#GBAソフトを遊ぶ方法" class="headerlink" title="GBAソフトを遊ぶ方法"></a>GBAソフトを遊ぶ方法</h2><p>2023年の現在、GBAソフトを遊ぶには次の方法があります。</p><ul><li><p>ゲームボーイアドバンス本体：GBA本体は現在新品で販売されていないため、中古で入手する必要があります。ヤフオクやメルカリ、中古ゲームショップなど。</p></li><li><p>ゲームボーイアドバンスエミュレーター：GBAエミュレーターを使えば、GBAソフトをコンピューター上でプレイすることができます。今回はこの方法を説明していきます。ちなみにエミュレーターは違法ではありません。</p></li><li><p>GBAソフトのリメイク：いくつかのGBAソフトは、ニンテンドー3DSやNintendo Switchなどのゲーム機にリメイクされています。リメイクされないかなぁ。</p></li><li><p>レトロゲームコンソール：GBAソフトをプレイできるレトロゲームコンソールを使う。</p></li></ul><h2 id="GBAエミュレーターで遊ぶ方法"><a href="#GBAエミュレーターで遊ぶ方法" class="headerlink" title="GBAエミュレーターで遊ぶ方法"></a>GBAエミュレーターで遊ぶ方法</h2><h3 id="GBAソフトからROMをダンプする"><a href="#GBAソフトからROMをダンプする" class="headerlink" title="GBAソフトからROMをダンプする"></a>GBAソフトからROMをダンプする</h3><p>自分が所有しているGBAソフトをROM化します。</p><p>ネットに上がってるROMをダウンロードすることは、違法なのでダメです。</p><p>今回は Amazon で「<a href="https://amzn.to/3LjlgyG" title="GBAダンパー V3">GBAダンパー V3</a>」を購入しました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3LjlgyG"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3LjlgyG"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: GAMEBANK-web.com 「GBAダンパー V3」【※USBケーブル別売り】/ ゲームボーイ(Game Boy) ゲームボーイカラー(GAMEBOY COLOR) ゲームボーイアドバンス(GAMEBOY ADVANCE) DUMPER レトロゲーム 吸い出しツール [2251] : ゲーム</div><div class="hbc-url">https://amzn.to/3LjlgyG</div></div></div></div></a></div></div><p><img src="image-759.png" loading="lazy"></p><p>また「<a href="https://amzn.to/3ADXuaF" title="USBケーブル（Type B）">USBケーブル（Type B）</a>」が付属していないので、別途購入しました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3ADXuaF"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3ADXuaF"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | UGREEN プリンターケーブル 1m USB2.0 Type B ケーブル 高耐久性 ナイロン編み Canon/Epson/Brother/HPなどのプリン,スキャナー,ピアノ,DAC に対応 そのほかUSB(Bタイプ)機器 | UGREEN | USBケーブル 通販</div><div class="hbc-url">https://amzn.to/3ADXuaF</div></div></div></div></a></div></div><p><img src="image-760.png" loading="lazy"></p><p>GBAダンパー V3 は、次の3種類のソフトが対象となります。</p><ul><li><p>ゲームボーイ</p></li><li><p>ゲームボーイカラー</p></li><li><p>ゲームボーイアドバンス</p></li></ul><p>ファミコンやスーファミ、ニンテンドー64等のソフトをダンプしたい場合は、別の製品を買う必要があります。もし「<a href="https://amzn.to/40B6ojn" title="レトロベースダンパー V3">レトロベースダンパー V3</a>」を購入した場合は、別売りの「<a href="https://amzn.to/41v3JJw" title="GBAプラグインアダプター">GBAプラグインアダプター</a>」を挟んでGBAソフトをダンプすることができます。アタッチメント方式なので、アダプターを変えればいろいろなソフトをダンプすることができます。</p><h4 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h4><p>GBAダンパー V3 をPCとUSBケーブルで接続しておきます。</p><p><img src="image-779.png" loading="lazy"></p><p>「<a href="http://www.gamebank.jp/dumper/index.php?mode=viewmain&l=1&no=34&no2=34&p=&page=0&dispno=34" title="マルチダンパークライアント">マルチダンパークライアント</a>」をダウンロードして展開しておきます。</p><p><img src="image-766.png" loading="lazy"></p><p>展開したら「MultiDumper_full_win_20230301.exe」を実行します。</p><p><img src="image-767.png" loading="lazy"></p><p>左メニューで「GBA」を選択し「Info」ボタンを押します。</p><p>「Info」を押してもゲームタイトルが表示されない場合、カートリッジを抜き差ししたら認識されるようになりました。</p><p><img src="image-770.png" loading="lazy"></p><p>フレームワークのアップデートが表示される場合、MISC の「Update」を押してアップデートしておきます。</p><p><img src="image-771.png" loading="lazy"></p><p>「Dump」ボタンを押すと、ROMをダンプすることができます。</p><p><img src="image-772.png" loading="lazy"></p><p>「Success!」が表示されればダンプ完了です。</p><p>また「<a href="http://www.gamebank.jp/dumper/index.php?mode=viewmain&l=1&no=31&no2=41&p=&page=0&dispno=31" title="ダイレクトアクセス機能">ダイレクトアクセス機能</a>」を使えば、コピペでROMをダンプすることもできます。</p><p>GBAダンパー V3 はダイレクトアクセスが可能なので、PCと接続しただけでエクスプローラーからROMをコピーすることができます。</p><p><img src="image-774.png" loading="lazy"></p><p>「<a href="http://mrchecker.web.fc2.com/" title="ROM Checker">ROM Checker</a>」を使うと、ダンプしたROMがホントに正常にダンプできたのか確認することができます。</p><p><img src="image-777.png" loading="lazy"></p><h3 id="GBAエミュレーター「VGBA」"><a href="#GBAエミュレーター「VGBA」" class="headerlink" title="GBAエミュレーター「VGBA」"></a>GBAエミュレーター「VGBA」</h3><p>GBAエミュレーターの「<a href="http://fms.komkon.org/VGBA/" title="VGBA">VGBA</a>」をダウンロードして展開しておきます。</p><p><img src="image-763.png" loading="lazy"></p><p>「VGBA.exe」を実行し、先ほどダンプしたROMを選択すると遊ぶことができます。</p><p><img src="image-764.png" loading="lazy"></p><p><img src="image-778.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ふと急に GBAソフトの「サモンナイト クラフトソード物語」が遊びたくなったので、メルカリで3作品のソフトを買ってしまいました。&lt;/p&gt;
&lt;p&gt;ですが ゲームボーイアドバンス本体を持っていないので、何かしらの方法が必要なのでそれについて記事にしていきます。&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="game" scheme="https://noitaro.github.io/tags/game/"/>
    
    <category term="gba" scheme="https://noitaro.github.io/tags/gba/"/>
    
  </entry>
  
  <entry>
    <title>【Tauri】OpenCVのビルド設定</title>
    <link href="https://noitaro.github.io/tauri-opencv/"/>
    <id>https://noitaro.github.io/tauri-opencv/</id>
    <published>2023-03-31T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.651Z</updated>
    
    <content type="html"><![CDATA[<p>Windows11 でOpenCVのビルドをしようとしたら、スゴく手こずったので備忘録。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 22H2</li></ul><p>事前に Tauri で 実行ができること。</p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="Chocolatey-をインストール"><a href="#Chocolatey-をインストール" class="headerlink" title="Chocolatey をインストール"></a>Chocolatey をインストール</h3><p>パッケージ管理ソフトの「<a href="https://chocolatey.org/" title="Chocolatey">Chocolatey</a>」をインストールします。</p><p>管理者権限で PowerShell を開き、次のコマンドを実行すると、Chocolatey がインストールされます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://community.chocolatey.org/install.ps1&#x27;))</span><br></pre></td></tr></table></figure><p><img src="image-32.png" alt="管理者として実行する" loading="lazy"></p><p><img src="image-741.png" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://community.chocolatey.org/install.ps1&#x27;))                                                                     Forcing web requests to allow TLS v1.2 (Required for requests to Chocolatey.org)</span><br><span class="line">Getting latest version of the Chocolatey package for download.</span><br><span class="line">Not using proxy.</span><br><span class="line">Getting Chocolatey from https://community.chocolatey.org/api/v2/package/chocolatey/1.3.1.</span><br><span class="line">Downloading https://community.chocolatey.org/api/v2/package/chocolatey/1.3.1 to C:\Users*****\AppData\Local\Temp\chocolatey\chocoInstall\chocolatey.zip</span><br><span class="line">Not using proxy.</span><br><span class="line">Extracting C:\Users*****\AppData\Local\Temp\chocolatey\chocoInstall\chocolatey.zip to C:\Users*****\AppData\Local\Temp\chocolatey\chocoInstall</span><br><span class="line">Installing Chocolatey on the local machine</span><br><span class="line">Creating ChocolateyInstall as an environment variable (targeting &#x27;Machine&#x27;)</span><br><span class="line">  Setting ChocolateyInstall to &#x27;C:\ProgramData\chocolatey&#x27;</span><br><span class="line">WARNING: It&#x27;s very likely you will need to close and reopen your shell</span><br><span class="line">  before you can use choco.</span><br><span class="line">Restricting write permissions to Administrators</span><br><span class="line">We are setting up the Chocolatey package repository.</span><br><span class="line">The packages themselves go to &#x27;C:\ProgramData\chocolatey\lib&#x27;</span><br><span class="line">  (i.e. C:\ProgramData\chocolatey\lib\yourPackageName).</span><br><span class="line">A shim file for the command line goes to &#x27;C:\ProgramData\chocolatey\bin&#x27;</span><br><span class="line">  and points to an executable in &#x27;C:\ProgramData\chocolatey\lib\yourPackageName&#x27;.</span><br><span class="line"></span><br><span class="line">Creating Chocolatey folders if they do not already exist.</span><br><span class="line"></span><br><span class="line">WARNING: You can safely ignore errors related to missing log files when</span><br><span class="line">  upgrading from a version of Chocolatey less than 0.9.9.</span><br><span class="line">  &#x27;Batch file could not be found&#x27; is also safe to ignore.</span><br><span class="line">  &#x27;The system cannot find the file specified&#x27; - also safe.</span><br><span class="line">chocolatey.nupkg file not installed in lib.</span><br><span class="line"> Attempting to locate it from bootstrapper.</span><br><span class="line">PATH environment variable does not have C:\ProgramData\chocolatey\bin in it. Adding...</span><br><span class="line">警告: Not setting tab completion: Profile file does not exist at</span><br><span class="line">&#x27;C:\Users*****\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1&#x27;.</span><br><span class="line">Chocolatey (choco.exe) is now ready.</span><br><span class="line">You can call choco from anywhere, command line or powershell by typing choco.</span><br><span class="line">Run choco /? for a list of functions.</span><br><span class="line">You may need to shut down and restart powershell and/or consoles</span><br><span class="line"> first prior to using choco.</span><br><span class="line">Ensuring Chocolatey commands are on the path</span><br><span class="line">Ensuring chocolatey.nupkg is in the lib folder</span><br></pre></td></tr></table></figure><h4 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h4><p>次のコマンドで正しくインストールできたか確認できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco -v</span><br></pre></td></tr></table></figure><p><img src="image-742.png" loading="lazy"></p><h3 id="OpenCV-パッケージのインストール"><a href="#OpenCV-パッケージのインストール" class="headerlink" title="OpenCV パッケージのインストール"></a>OpenCV パッケージのインストール</h3><p>次のコマンドで OpenCV のパッケージをインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install llvm opencv</span><br></pre></td></tr></table></figure><p>次の確認が表示されたら A を入力して進めます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Do you want to run the script?([Y]es/[A]ll - yes to all/[N]o/[P]rint): A</span><br></pre></td></tr></table></figure><p><img src="image-743.png" loading="lazy"></p><p>インストールが成功すると C:\tools に OpenCV ができます。</p><p><img src="image-744.png" loading="lazy"></p><h3 id="環境変数の設定"><a href="#環境変数の設定" class="headerlink" title="環境変数の設定"></a>環境変数の設定</h3><p>今インストールされた OpenCV をシステムの環境変数に設定します。</p><ul><li><p>OPENCV_INCLUDE_PATHS: C:\tools\opencv\build\include</p></li><li><p>OPENCV_LINK_LIBS: opencv_world460</p></li><li><p>OPENCV_LINK_PATHS: C:\tools\opencv\build\x64\vc15\lib</p></li></ul><p><img src="image-745.png" loading="lazy"></p><p>ちなみに opencv_world460 の 「460」は、C:\tools\opencv\build\x64\vc15\bin に入ってる DLL から推測して設定します。</p><p><img src="image-746.png" loading="lazy"></p><p>設定が終わったら、再起動をして完了です。</p><h2 id="確認-1"><a href="#確認-1" class="headerlink" title="確認"></a>確認</h2><p>次のコマンドで Tauri をデバッグ実行して、問題なく表示されるか確認します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run tauri dev</span><br></pre></td></tr></table></figure><h3 id="画面が表示されない"><a href="#画面が表示されない" class="headerlink" title="画面が表示されない"></a>画面が表示されない</h3><p>Tauri に OpenCV を入れてデバッグ実行したら、画面が表示されなくなった。</p><p>そんな場合は、デバッグ実行時に作られる EXEと同じ階層に「opencv_world460.dll」を入れると表示されるようになります。</p><p>「{プロジェクトルート}\src-tauri\target\debug」に「”C:\tools\opencv\build\x64\vc15\bin\opencv_world460.dll”」をコピー</p><p><img src="image-748.png" loading="lazy"></p><p><a href="https://github.com/twistedfall/opencv-rust/issues/118#issuecomment-619608278">https://github.com/twistedfall/opencv-rust/issues/118#issuecomment-619608278</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/twistedfall/opencv-rust">https://github.com/twistedfall/opencv-rust</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows11 でOpenCVのビルドをしようとしたら、スゴく手こずったので備忘録。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 H</summary>
      
    
    
    
    
    <category term="opencv" scheme="https://noitaro.github.io/tags/opencv/"/>
    
    <category term="rust" scheme="https://noitaro.github.io/tags/rust/"/>
    
    <category term="tauri" scheme="https://noitaro.github.io/tags/tauri/"/>
    
  </entry>
  
  <entry>
    <title>&#39;atlbase.h&#39;:No such file or directory エラーの対処法</title>
    <link href="https://noitaro.github.io/atlbase-no-such-file-or-directory-error/"/>
    <id>https://noitaro.github.io/atlbase-no-such-file-or-directory-error/</id>
    <published>2023-03-28T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="エラー内容"><a href="#エラー内容" class="headerlink" title="エラー内容"></a>エラー内容</h2><p>Windows11 で OpenCV をビルドしようとしてたら次のエラーが発生。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\src\vcpkg\buildtrees\llvm\src\org-14.0.6-07c830a6c0.clean\llvm\include\llvm\DebugInfo\PDB\DIA\DIASupport.h(25):</span><br><span class="line">fatal error C1083: include ファイルを開けません。&#x27;atlbase.h&#x27;:No such file or directory</span><br></pre></td></tr></table></figure><p>このエラーは、コンパイラが必要なファイルを見つけられないために発生する。</p><p>具体的には、”atlbase.h”というファイルが見つからないため、コンパイルに失敗。</p><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><h3 id="ビルド用-C-ATL-x86-および-x64"><a href="#ビルド用-C-ATL-x86-および-x64" class="headerlink" title="ビルド用 C++ ATL (x86 および x64)"></a>ビルド用 C++ ATL (x86 および x64)</h3><p>この問題を解決するためには、Visual Studio の C++開発ツール をインストールする必要がある。</p><p>これには、ATL（Active Template Library）が含まれています。</p><p>Visual Studio Installer を開いて、個別のコンポーネントタブを選択し、検索に「ATL」と入力。</p><p><img src="image-740-1024x512.png" loading="lazy"></p><p>とりあえず、最新の「ビルド用 C++ ATL (x86 および x64)」を入れたらエラーがなくなり、OpenCVがビルドできた。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;エラー内容&quot;&gt;&lt;a href=&quot;#エラー内容&quot; class=&quot;headerlink&quot; title=&quot;エラー内容&quot;&gt;&lt;/a&gt;エラー内容&lt;/h2&gt;&lt;p&gt;Windows11 で OpenCV をビルドしようとしてたら次のエラーが発生。&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
  </entry>
  
  <entry>
    <title>Windows11 + WSL2 + Rust + OpenCV</title>
    <link href="https://noitaro.github.io/windows11-wsl2-rust-opencv/"/>
    <id>https://noitaro.github.io/windows11-wsl2-rust-opencv/</id>
    <published>2023-03-28T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.831Z</updated>
    
    <content type="html"><![CDATA[<p>Rust で OpenCV のテンプレートマッチングをする方法</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li><p>Windows 11 Home 22H2</p></li><li><p>WSL2</p></li><li><p>Ubuntu</p></li><li><p>Visual Studio Code</p></li></ul><p>事前に WSL2 を有効にして、Ubuntu をインストールしておきます。</p><p><img src="image-707.png" loading="lazy"></p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>最初に Ubuntu のパッケージを最新化しておきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-に-Rust-をインストール"><a href="#Ubuntu-に-Rust-をインストール" class="headerlink" title="Ubuntu に Rust をインストール"></a>Ubuntu に Rust をインストール</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br><span class="line">sudo apt install rust-all</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-に-OpenCV-をインストール"><a href="#Ubuntu-に-OpenCV-をインストール" class="headerlink" title="Ubuntu に OpenCV をインストール"></a>Ubuntu に OpenCV をインストール</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libopencv-dev clang libclang-dev</span><br></pre></td></tr></table></figure><h3 id="Visual-Studio-Code-に-WSL用の拡張機能をインストール"><a href="#Visual-Studio-Code-に-WSL用の拡張機能をインストール" class="headerlink" title="Visual Studio Code に WSL用の拡張機能をインストール"></a>Visual Studio Code に WSL用の拡張機能をインストール</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl" title="WSL">WSL</a></p><p><img src="image-699.png" loading="lazy"></p><p>VSCode から WSL へ接続します。</p><p><img src="image-700.png" loading="lazy"></p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><h3 id="プロジェクトの作成"><a href="#プロジェクトの作成" class="headerlink" title="プロジェクトの作成"></a>プロジェクトの作成</h3><p>次のコマンドで Rustプロジェクトを作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new rust-opencv-1</span><br></pre></td></tr></table></figure><h3 id="依存関係"><a href="#依存関係" class="headerlink" title="依存関係"></a>依存関係</h3><p>OpenCV を依存関係に追加します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">opencv = &#123; version = &quot;0.78.0&quot; &#125;</span><br></pre></td></tr></table></figure><h3 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h3><p>次のコードをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">use opencv::&#123;imgproc, imgcodecs, core&#125;;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">  // テンプレートマッチングを実行するための画像とテンプレート画像を読み込みます。</span><br><span class="line">  let image = imgcodecs::imread(&quot;./image.png&quot;, imgcodecs::IMREAD_COLOR).unwrap();</span><br><span class="line">  let template = imgcodecs::imread(&quot;./template.png&quot;, imgcodecs::IMREAD_COLOR).unwrap();</span><br><span class="line"></span><br><span class="line">  // 画像のグレースケール化を行います。</span><br><span class="line">  let mut gray_image = core::Mat::default();</span><br><span class="line">  imgproc::cvt_color(&amp;image, &amp;mut gray_image, imgproc::COLOR_BGR2GRAY, 0).unwrap();</span><br><span class="line">  let mut gray_template = core::Mat::default();</span><br><span class="line">  imgproc::cvt_color(&amp;template, &amp;mut gray_template, imgproc::COLOR_BGR2GRAY, 0).unwrap();</span><br><span class="line"></span><br><span class="line">  // テンプレートマッチングを実行します。</span><br><span class="line">  let mut result = core::Mat::default();</span><br><span class="line">  imgproc::match_template(&amp;gray_image, &amp;gray_template, &amp;mut result, imgproc::TM_CCOEFF_NORMED, &amp;core::no_array()).unwrap();</span><br><span class="line"></span><br><span class="line">  // テンプレートマッチングの結果を取得します。</span><br><span class="line">  let mut max_val = 0.0;</span><br><span class="line">  let mut max_loc = core::Point::new(0, 0);</span><br><span class="line">  core::min_max_loc(&amp;result, None, Some(&amp;mut max_val), None, Some(&amp;mut max_loc), &amp;core::no_array()).unwrap();</span><br><span class="line">  println!(&quot;Max Location: &#123;&#125; &#123;:?&#125;&quot;, max_val, max_loc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure><p>テンプレートマッチングした座標が出力されれば成功です。</p><p><img src="image-739.png" loading="lazy"></p><h3 id="エラー1"><a href="#エラー1" class="headerlink" title="エラー1"></a>エラー1</h3><p>このエラーは、Rustプロジェクトの実行権限か所有権がないことを示しています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Permission denied (os error 13) at path &quot;/home/you/rust-opencv-1/********&quot;</span><br></pre></td></tr></table></figure><p>次のコマンドを実行して、ディレクトリの所有者を自分のユーザー名に変更する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R [ユーザー名] /home/you/rust-opencv-1</span><br></pre></td></tr></table></figure><p><img src="image-737.png" loading="lazy"></p><h3 id="エラー2"><a href="#エラー2" class="headerlink" title="エラー2"></a>エラー2</h3><p>このエラーは、OpenCVをビルドするための pkg-config がインストールされていないことを示しています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=== Detected probe priority based on environment vars: pkg_config: false, cmake: false, vcpkg: false</span><br><span class="line">=== Probing the OpenCV library in the following order: environment, pkg_config, cmake, vcpkg_cmake, vcpkg</span><br><span class="line">=== Can&#x27;t probe using: environment, continuing with other methods because: Some environment variables are missing</span><br><span class="line">=== Probing OpenCV library using pkg_config</span><br><span class="line">=== Can&#x27;t probe using: pkg_config, continuing with other methods because: Could not run `&quot;pkg-config&quot; &quot;--libs&quot; &quot;--cflags&quot; &quot;opencv4&quot;`</span><br><span class="line">The pkg-config command could not be found.</span><br></pre></td></tr></table></figure><p>次のコマンドを実行して、pkg-config をインストールする。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pkg-config</span><br></pre></td></tr></table></figure><p><img src="image-738.png" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">you@DESKTOP-INFS1IG:~/rust-opencv-1$ sudo apt-get install pkg-config</span><br><span class="line">[sudo] password for you: </span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  pkg-config</span><br><span class="line">0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 48.2 kB of archives.</span><br><span class="line">After this operation, 134 kB of additional disk space will be used.</span><br><span class="line">Get:1 http://archive.ubuntu.com/ubuntu jammy/main amd64 pkg-config amd64 0.29.2-1ubuntu3 [48.2 kB]</span><br><span class="line">Fetched 48.2 kB in 1s (40.3 kB/s)  </span><br><span class="line">Selecting previously unselected package pkg-config.</span><br><span class="line">(Reading database ... 36286 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../pkg-config_0.29.2-1ubuntu3_amd64.deb ...</span><br><span class="line">Unpacking pkg-config (0.29.2-1ubuntu3) ...</span><br><span class="line">Setting up pkg-config (0.29.2-1ubuntu3) ...</span><br><span class="line">Processing triggers for man-db (2.10.2-1) ...</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回のプロジェクトを GitHub に上げました。</p><p><a href="https://github.com/noitaro/rust-opencv-1">https://github.com/noitaro/rust-opencv-1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Rust で OpenCV のテンプレートマッチングをする方法&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows 11 Home 22H2&lt;/</summary>
      
    
    
    
    
    <category term="opencv" scheme="https://noitaro.github.io/tags/opencv/"/>
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="rust" scheme="https://noitaro.github.io/tags/rust/"/>
    
    <category term="wsl2" scheme="https://noitaro.github.io/tags/wsl2/"/>
    
  </entry>
  
  <entry>
    <title>【WPF】テキストブロックにコンソールログを出力する</title>
    <link href="https://noitaro.github.io/output-logs-to-textblock/"/>
    <id>https://noitaro.github.io/output-logs-to-textblock/</id>
    <published>2023-03-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.439Z</updated>
    
    <content type="html"><![CDATA[<p>C# の Console.WriteLine をした時に、テキストブロックに出力させる方法です。</p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="TextBlock-コントロールを追加"><a href="#TextBlock-コントロールを追加" class="headerlink" title="TextBlock コントロールを追加"></a>TextBlock コントロールを追加</h3><p>MainWindow.xaml ファイルを開き、Window 要素内に TextBlock コントロールを追加します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;WpfApp1.MainWindow&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        Title=&quot;MainWindow&quot; Height=&quot;350&quot; Width=&quot;525&quot;&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;TextBlock x:Name=&quot;outputTextBlock&quot; /&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure><h3 id="ControlWriter-クラスを作成"><a href="#ControlWriter-クラスを作成" class="headerlink" title="ControlWriter クラスを作成"></a>ControlWriter クラスを作成</h3><p>ControlWriter クラスは、System.IO.TextWriter クラスを継承し、Write メソッドをオーバーライドして TextBlock コントロールに出力します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">namespace WpfApp1</span><br><span class="line">&#123;</span><br><span class="line">    public class ControlWriter : System.IO.TextWriter</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly System.Windows.Controls.TextBlock _output;</span><br><span class="line"></span><br><span class="line">        public ControlWriter(System.Windows.Controls.TextBlock output)</span><br><span class="line">        &#123;</span><br><span class="line">            _output = output;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void Write(char value)</span><br><span class="line">        &#123;</span><br><span class="line">            _output.Dispatcher.Invoke(() =&gt; _output.Text += value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override System.Text.Encoding Encoding =&gt; System.Text.Encoding.UTF8;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TextBlock-コントロールを出力先に設定"><a href="#TextBlock-コントロールを出力先に設定" class="headerlink" title="TextBlock コントロールを出力先に設定"></a>TextBlock コントロールを出力先に設定</h3><p>MainWindow.xaml.cs ファイルを開き、以下のコードを追加して、コンソール出力を TextBlock コントロールに表示します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">using ConsoleApp1;</span><br><span class="line">using System;</span><br><span class="line">using System.Windows;</span><br><span class="line"></span><br><span class="line">namespace WpfApp1</span><br><span class="line">&#123;</span><br><span class="line">    public partial class MainWindow : Window</span><br><span class="line">    &#123;</span><br><span class="line">        public MainWindow()</span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line"></span><br><span class="line">            // コンソール出力を TextBlock に表示する</span><br><span class="line">            Console.SetOut(new ControlWriter(outputTextBlock));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h2><p>Console.WriteLine をすると、TextBlock コントロールにログが出力されるようになります。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C# の Console.WriteLine をした時に、テキストブロックに出力させる方法です。&lt;/p&gt;
&lt;h2 id=&quot;手順&quot;&gt;&lt;a href=&quot;#手順&quot; class=&quot;headerlink&quot; title=&quot;手順&quot;&gt;&lt;/a&gt;手順&lt;/h2&gt;&lt;h3 id=&quot;TextBlock</summary>
      
    
    
    
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="wpf" scheme="https://noitaro.github.io/tags/wpf/"/>
    
  </entry>
  
  <entry>
    <title>Windows の WSA に GooglePlay を入れる</title>
    <link href="https://noitaro.github.io/windows-googleplay/"/>
    <id>https://noitaro.github.io/windows-googleplay/</id>
    <published>2023-03-24T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.823Z</updated>
    
    <content type="html"><![CDATA[<p>Windows Subsystem for Android (WSA) とは、Microsoftが開発したWindows 11向けのAndroidサブシステムです。</p><p>これにより、Windows 11でAndroidアプリケーションを実行することができます。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li><p>Windows 11 Home 22H2</p></li><li><p>WSL2</p></li><li><p>Ubuntu</p></li></ul><p>事前に <a href="https://learn.microsoft.com/ja-jp/windows/wsl/install" title="WSL2">WSL2</a> を有効にし、Microsoft Store から <a href="https://www.microsoft.com/store/productId/9PDXGNCFSCZV" title="Ubuntu">Ubuntu</a> をインストールしておきます。</p><p><img src="image-707.png" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>今回は「<a href="https://github.com/LSPosed/MagiskOnWSALocal" title="MagiskOnWSALocal">MagiskOnWSALocal</a>」を使います。</p><p>MagiskOnWSALocal は、WSA に Magisk と Google Apps を導入するスクリプトです。</p><p>必要なファイル群は全て自動でダウンロードしてくれるので、数回ポチポチするだけでいい感じに仕上げてくれます。</p><p>コマンドは全て WSL上の Ubuntu で実行していきます。</p><h3 id="クローン"><a href="#クローン" class="headerlink" title="クローン"></a>クローン</h3><p>次のコマンドで、GitHub から「<a href="https://github.com/LSPosed/MagiskOnWSALocal" title="MagiskOnWSALocal">MagiskOnWSALocal</a>」リポジトリをクローンします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/LSPosed/MagiskOnWSALocal.git --depth 1</span><br></pre></td></tr></table></figure><p><img src="image-710.png" loading="lazy"></p><h3 id="カスタムWSAのビルド"><a href="#カスタムWSAのビルド" class="headerlink" title="カスタムWSAのビルド"></a>カスタムWSAのビルド</h3><p>次のフォルダーに移動して、スクリプトを実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ./MagiskOnWSALocal/scripts</span><br><span class="line">./run.sh</span><br></pre></td></tr></table></figure><p><img src="image-711.png" loading="lazy"></p><p>Ubuntu のパスワードを入力すると、必要なファイル群のダウンロードが開始されます。</p><p>しばらく待つと次のような画面が表示されるので、自分の環境にあった選択をしていきます。</p><ul><li><p>上下キーで移動</p></li><li><p>スペースキーでチェックを付ける</p></li><li><p>エンターキーで確定</p></li></ul><p>x64 を選択</p><p><img src="image-712.png" loading="lazy"></p><p>retail を選択</p><p><img src="image-713.png" loading="lazy"></p><p>なんとなく ルート権限がほしかったので、Yes を選択。アプリによっては起動できない場合もあるので、その時は No を選択した方がいいかも。</p><p><img src="image-714.png" loading="lazy"></p><p>ルートアプリの選択。今回は magisk を選択しました。</p><p><img src="image-715.png" loading="lazy"></p><p>Magiskのバージョンを選択。特にこだわりがないので stable を選択しました。</p><p><img src="image-716.png" loading="lazy"></p><p>絶対に Yes を選択。GApps をインストールしないと GooglePlay が入らないので絶対。</p><p><img src="image-717.png" loading="lazy"></p><p>インストールする GApps の種類を選択。今回は有名な「OpenGApps」を選択しました。</p><p><img src="image-719.png" loading="lazy"></p><p>Amazonアプリを残すか？ いらないので削除する方を選択しました。</p><p><img src="image-720.png" loading="lazy"></p><p>ビルドしたファイルを圧縮するか？ こだわりがなければ Yes を選択。</p><p><img src="image-721.png" loading="lazy"></p><p>圧縮フォーマット。好きのを選んでOK</p><p><img src="image-722.png" loading="lazy"></p><p>全ての設定が終わると、再度コンソール画面に戻ります。</p><p>コンソール画面にもどってパスワードを入力すると、ビルドが始まります。</p><p><img src="image-723.png" loading="lazy"></p><p>5分ほど時間がかかるので、お茶でも飲んで待ちます。</p><p><img src="image-724.png" loading="lazy"></p><p>ビルド完了</p><p><img src="image-725.png" loading="lazy"></p><h3 id="カスタムWSAのインストール"><a href="#カスタムWSAのインストール" class="headerlink" title="カスタムWSAのインストール"></a>カスタムWSAのインストール</h3><p>次のコマンドで、出力先フォルダーに移動し、エクスプローラーで Ubuntu のディレクトリを開きます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../output</span><br><span class="line">explorer.exe .</span><br></pre></td></tr></table></figure><p><img src="image-726.png" loading="lazy"></p><p>上記コマンドを実行すると、ビルドされたファイルが置かれたフォルダーが開きます。</p><p><img src="image-727.png" loading="lazy"></p><p>その圧縮ファイルを適当なところにコピーします。今回はCドライブに作業用フォルダーを作ってそこにコピーしました。</p><p>コピーしたファイルを展開し、中の「Run.bat」を実行します。</p><p><img src="image-731.png" loading="lazy"></p><p>インストール中に次のダイアログが出た場合は「続ける」ボタンを押す。</p><p><img src="image-734.png" loading="lazy"></p><p>正常にインストールが完了すると、Google Play ストアが表示されます。</p><p><img src="image-735.png" loading="lazy"></p><h4 id="起動しない場合は？"><a href="#起動しない場合は？" class="headerlink" title="起動しない場合は？"></a>起動しない場合は？</h4><p>ビルドの設定をいろいろ変えて挑戦するとよいです。</p><h4 id="インストール時にエラー"><a href="#インストール時にエラー" class="headerlink" title="インストール時にエラー"></a>インストール時にエラー</h4><p>インストール時にエラーが発生する場合は、インストール前に「Windows Subsystem for Android」をアンインストールしておくとよいです。</p><p><img src="image-733.png" loading="lazy"></p><h4 id="エラー-パスが長すぎます。"><a href="#エラー-パスが長すぎます。" class="headerlink" title="エラー: パスが長すぎます。"></a>エラー: パスが長すぎます。</h4><p>展開時にパスが長すぎっと怒られる場合は、圧縮ファイル名を短めのファイル名に変えるとよいです。</p><p><img src="image-729.png" loading="lazy"></p><p>そうすると、問題なく展開することができます。</p><p>またはデスクトップとか深い階層で作業するより、浅い階層（Cドライブ直下）等で作業するのもよいです。</p><p><img src="image-730.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows Subsystem for Android (WSA) とは、Microsoftが開発したWindows 11向けのAndroidサブシステムです。&lt;/p&gt;
&lt;p&gt;これにより、Windows 11でAndroidアプリケーションを実行することができます。&lt;/</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="windows" scheme="https://noitaro.github.io/tags/windows/"/>
    
    <category term="ubuntu" scheme="https://noitaro.github.io/tags/ubuntu/"/>
    
    <category term="wsa" scheme="https://noitaro.github.io/tags/wsa/"/>
    
    <category term="wsl2" scheme="https://noitaro.github.io/tags/wsl2/"/>
    
  </entry>
  
  <entry>
    <title>【Rust】画像を読み込む</title>
    <link href="https://noitaro.github.io/rust-image-open/"/>
    <id>https://noitaro.github.io/rust-image-open/</id>
    <published>2023-03-17T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Rust-プロジェクトを作成"><a href="#Rust-プロジェクトを作成" class="headerlink" title="Rust プロジェクトを作成"></a>Rust プロジェクトを作成</h2><p>次のコマンドで新しい Rust プロジェクトを作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new rust-project-1</span><br></pre></td></tr></table></figure><p><img src="image-683.png" loading="lazy"></p><p>VS Code のエクスプローラーで、src&gt;main.rs ファイルを開きます。</p><p><img src="image-684.png" loading="lazy"></p><p>とりあえず動くか確認します。</p><p>main関数の上の Run ボタンを押すと実行されて、下のターミナルに結果が表示されればOK。</p><p><img src="image-685.png" loading="lazy"></p><h2 id="画像を読み込む"><a href="#画像を読み込む" class="headerlink" title="画像を読み込む"></a>画像を読み込む</h2><h3 id="依存関係の追加"><a href="#依存関係の追加" class="headerlink" title="依存関係の追加"></a>依存関係の追加</h3><p>Rustで画像を読み込むには、imageライブラリを使用します。</p><p>まず、Cargo.tomlファイルに以下の行を追加して imageライブラリを依存関係に追加します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">image = &quot;0.24.5&quot;</span><br></pre></td></tr></table></figure><p><img src="image-686.png" loading="lazy"></p><p>また、次のコマンドで最新版のimageライブラリを追加することもできます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo add image</span><br></pre></td></tr></table></figure><p><img src="image-688.png" loading="lazy"></p><h3 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h3><p>以下のコードで、画像を読み込むことができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">use std::path::Path;</span><br><span class="line">use image::GenericImageView;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    // 画像ファイルのパスを定義</span><br><span class="line">    let image_path = Path::new(&quot;./image/FrWJHNxaYAQOG6I.jpg&quot;);</span><br><span class="line"></span><br><span class="line">    // 画像を読み込み、イメージオブジェクトを作成</span><br><span class="line">    let img = match image::open(image_path) &#123;</span><br><span class="line">        Ok(img) =&gt; img,</span><br><span class="line">        Err(e) =&gt; panic!(&quot;Failed to load image: &#123;&#125;&quot;, e),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 画像の幅と高さを取得</span><br><span class="line">    let (width, height) = img.dimensions();</span><br><span class="line">    println!(&quot;width: &#123;&#125;&quot;, width);</span><br><span class="line">    println!(&quot;height: &#123;&#125;&quot;, height);</span><br><span class="line"></span><br><span class="line">    // 画像のピクセルデータを取得</span><br><span class="line">    let pixels = img.into_rgb8().into_vec();</span><br><span class="line"></span><br><span class="line">    // 画像の処理</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    // ピクセルデータを元のフォーマットに戻す</span><br><span class="line">    let img = image::RgbImage::from_vec(width, height, pixels).unwrap();</span><br><span class="line"></span><br><span class="line">    // 画像を保存</span><br><span class="line">    img.save(&quot;output.jpg&quot;).unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると、ターミナルに画像サイズ、フォルダーに画像が出力されます。</p><p><img src="image-689.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Visual Studio Code で Rust を書くには <a href="https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer" title="rust-analyzer拡張機能">rust-analyzer拡張機能</a> がオススメです。</p><p>コード補完、構文の強調表示、形式の指定、デバッグなど便利に使うことができるようになります。</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>今回作成したプロジェクト一式</p><p><a href="https://github.com/noitaro/rust-image-open">https://github.com/noitaro/rust-image-open</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.rs/image/latest/image/">https://docs.rs/image/latest/image/</a></p><p><a href="https://learn.microsoft.com/ja-jp/windows/dev-environment/rust/setup">https://learn.microsoft.com/ja-jp/windows/dev-environment/rust/setup</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Rust-プロジェクトを作成&quot;&gt;&lt;a href=&quot;#Rust-プロジェクトを作成&quot; class=&quot;headerlink&quot; title=&quot;Rust プロジェクトを作成&quot;&gt;&lt;/a&gt;Rust プロジェクトを作成&lt;/h2&gt;&lt;p&gt;次のコマンドで新しい Rust プロジェクト</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="rust" scheme="https://noitaro.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>【Rust】フォルダ内のファイル一覧を取得する</title>
    <link href="https://noitaro.github.io/rust-read-dir/"/>
    <id>https://noitaro.github.io/rust-read-dir/</id>
    <published>2023-03-17T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.571Z</updated>
    
    <content type="html"><![CDATA[<p>備忘録</p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>標準ライブラリの std::fs と std::path を使用する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">use std::fs;</span><br><span class="line">use std::path::Path;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let path = Path::new(&quot;./&quot;);</span><br><span class="line">    let entries = fs::read_dir(path).unwrap();</span><br><span class="line"></span><br><span class="line">    for entry in entries &#123;</span><br><span class="line">        let entry = entry.unwrap();</span><br><span class="line">        let path = entry.path();</span><br><span class="line">        println!(&quot;&#123;&#125;&quot;, path.display());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行するとこのようにフォルダ内のファイルが取得できます。</p><p><img src="image-691.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;備忘録&lt;/p&gt;
&lt;h2 id=&quot;手順&quot;&gt;&lt;a href=&quot;#手順&quot; class=&quot;headerlink&quot; title=&quot;手順&quot;&gt;&lt;/a&gt;手順&lt;/h2&gt;&lt;p&gt;標準ライブラリの std::fs と std::path を使用する。&lt;/p&gt;
&lt;figure class=&quot;high</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="rust" scheme="https://noitaro.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>【Tauri】command my_custom_command1 not found</title>
    <link href="https://noitaro.github.io/tauri-command-my-custom-command1-not-found/"/>
    <id>https://noitaro.github.io/tauri-command-my-custom-command1-not-found/</id>
    <published>2023-03-14T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.647Z</updated>
    
    <content type="html"><![CDATA[<p>Tauri を使ってアプリを作っていたところ、躓いたことをメモする。</p><h2 id="command-my-custom-command1-not-found"><a href="#command-my-custom-command1-not-found" class="headerlink" title="command my_custom_command1 not found"></a>command my_custom_command1 not found</h2><p>フロントエンドから Rust を呼び出すときに、次のエラーがでた。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command my_custom_command1 not found</span><br></pre></td></tr></table></figure><p><img src="image-682.png" loading="lazy"></p><p>そのときのソースは次の通り。</p><h3 id="フロントエンド（TypeScript）"><a href="#フロントエンド（TypeScript）" class="headerlink" title="フロントエンド（TypeScript）"></a>フロントエンド（TypeScript）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; tauri &#125; from &#x27;@tauri-apps/api&#x27;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">  tauri.invoke(&#x27;my_custom_command1&#x27;);</span><br><span class="line">  tauri.invoke(&#x27;my_custom_command2&#x27;);</span><br><span class="line">  tauri.invoke(&#x27;my_custom_command3&#x27;);</span><br><span class="line">  tauri.invoke(&#x27;my_custom_command4&#x27;);</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#![cfg_attr(</span><br><span class="line">  all(not(debug_assertions), target_os = &quot;windows&quot;),</span><br><span class="line">  windows_subsystem = &quot;windows&quot;</span><br><span class="line">)]</span><br><span class="line"></span><br><span class="line">#[tauri::command]</span><br><span class="line">fn my_custom_command1() &#123;</span><br><span class="line">  println!(&quot;I was invoked from JS!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[tauri::command]</span><br><span class="line">fn my_custom_command2() &#123;</span><br><span class="line">  println!(&quot;I was invoked from JS!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[tauri::command]</span><br><span class="line">fn my_custom_command3() &#123;</span><br><span class="line">  println!(&quot;I was invoked from JS!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[tauri::command]</span><br><span class="line">fn my_custom_command4() &#123;</span><br><span class="line">  println!(&quot;I was invoked from JS!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">  tauri::Builder::default()</span><br><span class="line">    .invoke_handler(tauri::generate_handler![my_custom_command1])</span><br><span class="line">    .invoke_handler(tauri::generate_handler![my_custom_command2])</span><br><span class="line">    .invoke_handler(tauri::generate_handler![my_custom_command3])</span><br><span class="line">    .invoke_handler(tauri::generate_handler![my_custom_command4])</span><br><span class="line">    .run(tauri::generate_context!())</span><br><span class="line">    .expect(&quot;error while running tauri application&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h2><p>複数のコマンドを設定するときは、リストで設定する必要がある。</p><h3 id="NG"><a href="#NG" class="headerlink" title="NG"></a>NG</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">  tauri::Builder::default()</span><br><span class="line">    .invoke_handler(tauri::generate_handler![my_custom_command1])</span><br><span class="line">    .invoke_handler(tauri::generate_handler![my_custom_command2])</span><br><span class="line">    .invoke_handler(tauri::generate_handler![my_custom_command3])</span><br><span class="line">    .invoke_handler(tauri::generate_handler![my_custom_command4])</span><br><span class="line">    .run(tauri::generate_context!())</span><br><span class="line">    .expect(&quot;error while running tauri application&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OK"><a href="#OK" class="headerlink" title="OK"></a>OK</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">  tauri::Builder::default()</span><br><span class="line">    .invoke_handler(tauri::generate_handler![</span><br><span class="line">      my_custom_command1, </span><br><span class="line">      my_custom_command2, </span><br><span class="line">      my_custom_command3, </span><br><span class="line">      my_custom_command4</span><br><span class="line">    ])</span><br><span class="line">    .run(tauri::generate_context!())</span><br><span class="line">    .expect(&quot;error while running tauri application&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Tauri を使ってアプリを作っていたところ、躓いたことをメモする。&lt;/p&gt;
&lt;h2 id=&quot;command-my-custom-command1-not-found&quot;&gt;&lt;a href=&quot;#command-my-custom-command1-not-found&quot; clas</summary>
      
    
    
    
    
    <category term="tauri" scheme="https://noitaro.github.io/tags/tauri/"/>
    
  </entry>
  
  <entry>
    <title>ASPNET Core 6.0 React.js Docker</title>
    <link href="https://noitaro.github.io/aspnet-core-6-0-react-js-docker/"/>
    <id>https://noitaro.github.io/aspnet-core-6-0-react-js-docker/</id>
    <published>2023-02-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>ASP.NET Core 6.0</li></ul><h2 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h2><p>まず、次のプロジェクトテンプレートを選択してプロジェクトを作成します。</p><ul><li>React.js での ASPNET Core</li></ul><p><img src="image-670.png" loading="lazy"></p><p>この時「Dockerをサポートする」ボタンがないですが、気にせずすすめます。</p><p><img src="image-673.png" loading="lazy"></p><p><img src="image-672.png" loading="lazy"></p><h2 id="Docker-サポート"><a href="#Docker-サポート" class="headerlink" title="Docker サポート"></a>Docker サポート</h2><p>ソリューションエクスプローラーのプロジェクトを右クリックして「追加 &gt; Docker サポート」の順で選択します。</p><p><img src="image-675.png" loading="lazy"></p><p>ターゲットOS は Linux を選択。</p><p><img src="image-676.png" loading="lazy"></p><p>そうすると、プロジェクトに Dockerfile が追加されて Dockerコンテナーを使って実行することができるようになります。</p><p><img src="image-677.png" loading="lazy"></p><p><img src="image-678.png" loading="lazy"></p><h2 id="Azure-App-Service-コンテナー"><a href="#Azure-App-Service-コンテナー" class="headerlink" title="Azure App Service コンテナー"></a>Azure App Service コンテナー</h2><p>Dockerイメージ を App Service で公開しようとすると、エラーになります。</p><p><img src="image-679.png" loading="lazy"></p><p><img src="image-681.png" loading="lazy"></p><h3 id="エラー内容"><a href="#エラー内容" class="headerlink" title="エラー内容"></a>エラー内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#1 [internal] load build definition from Dockerfile</span><br><span class="line">#1 sha256:fd69111829751219d7edf42f89da53e7cf47d4908862709b9d18b215f1b3e44d</span><br><span class="line">#1 transferring dockerfile: 32B done</span><br><span class="line">#1 DONE 0.0s</span><br><span class="line"></span><br><span class="line">#2 [internal] load .dockerignore</span><br><span class="line">#2 sha256:c4f4e756dbbcf8381b629f512d507861c41054f75af040e6446b520831d278ed</span><br><span class="line">#2 transferring context: 35B done</span><br><span class="line">#2 DONE 0.0s</span><br><span class="line"></span><br><span class="line">#4 [internal] load metadata for mcr.microsoft.com/dotnet/aspnet:6.0</span><br><span class="line">#4 sha256:ac4494cbca04ddb415c76edcbcc7688784c2a6ea65dd656286c013738aa3b75f</span><br><span class="line">#4 DONE 0.0s</span><br><span class="line"></span><br><span class="line">#3 [internal] load metadata for mcr.microsoft.com/dotnet/sdk:6.0</span><br><span class="line">#3 sha256:9eb4f6c3944cfcbfe18b9f1a753c769fc35341309a8d4a21f8937f47e94c712b</span><br><span class="line">#3 DONE 0.2s</span><br><span class="line"></span><br><span class="line">#8 [build 1/7] FROM mcr.microsoft.com/dotnet/sdk:6.0@sha256:b40939dddbea23e939af225cab4b30df01afc47ce1e8beb1f7f249aaca8babcc</span><br><span class="line">#8 sha256:76e509d7e54fdb92072ab18138258abac6e86475066c51324cf45ba7f0804c47</span><br><span class="line">#8 DONE 0.0s</span><br><span class="line"></span><br><span class="line">#9 [build 2/7] WORKDIR /src</span><br><span class="line">#9 sha256:e494b4858ee07616e22a62c4454335ac4fdc9de8656bf169e1f841f1388c350b</span><br><span class="line">#9 CACHED</span><br><span class="line"></span><br><span class="line">#5 [base 1/2] FROM mcr.microsoft.com/dotnet/aspnet:6.0</span><br><span class="line">#5 sha256:50f1ddc10932c4a74c7af5704e931a9489c710faea4f2381fe2380827a900e00</span><br><span class="line">#5 DONE 0.0s</span><br><span class="line"></span><br><span class="line">#10 [internal] load build context</span><br><span class="line">#10 sha256:60e98d003d93ec84bc68bb7a902cb15e84db3225c2284bb93fc724b2c40d1b46</span><br><span class="line">#10 transferring context: 3.64MB 0.1s done</span><br><span class="line">#10 DONE 0.1s</span><br><span class="line"></span><br><span class="line">#11 [build 3/7] COPY [Project1/Project1.csproj, Project1/]</span><br><span class="line">#11 sha256:f644f41115f2f19a11358071476fe23ff6a951f87aef01810095b1dfdaaa4d4c</span><br><span class="line">#11 DONE 0.0s</span><br><span class="line"></span><br><span class="line">#12 [build 4/7] RUN dotnet restore &quot;Project1/Project1.csproj&quot;</span><br><span class="line">#12 sha256:f56db46d2dd393eaa0cb7bd229f8bfd4744138dbae97abf347b7858bf92ebec1</span><br><span class="line">#12 0.726   Determining projects to restore...</span><br><span class="line">#12 2.236   Restored /src/Project1/Project1.csproj (in 1.3 sec).</span><br><span class="line">#12 DONE 2.3s</span><br><span class="line"></span><br><span class="line">#13 [build 5/7] COPY . .</span><br><span class="line">#13 sha256:40714ec53492ca63cbb6ea1fb905956fa181d55cc309d0d0504764b390dad647</span><br><span class="line">#13 DONE 0.0s</span><br><span class="line"></span><br><span class="line">#14 [build 6/7] WORKDIR /src/Project1</span><br><span class="line">#14 sha256:a7cc8fd6690e5e9bc4963c0a98662622b6f9acf7be3ec00c2b72938ce557e01a</span><br><span class="line">#14 DONE 0.0s</span><br><span class="line"></span><br><span class="line">#15 [build 7/7] RUN dotnet build &quot;Project1.csproj&quot; -c Release -o /app/build</span><br><span class="line">#15 sha256:c7df99e63e997e3f58960e500af89c3205b6ab893173791a2b13740eed216e84</span><br><span class="line">#15 0.609 MSBuild version 17.3.2+561848881 for .NET</span><br><span class="line">#15 1.063   Determining projects to restore...</span><br><span class="line">#15 1.276   All projects are up-to-date for restore.</span><br><span class="line">#15 3.291   Project1 -&gt; /app/build/Project1.dll</span><br><span class="line">#15 3.299 </span><br><span class="line">#15 3.299 Build succeeded.</span><br><span class="line">#15 3.299     0 Warning(s)</span><br><span class="line">#15 3.299     0 Error(s)</span><br><span class="line">#15 3.299 </span><br><span class="line">#15 3.299 Time Elapsed 00:00:02.63</span><br><span class="line">#15 DONE 3.3s</span><br><span class="line"></span><br><span class="line">#16 [publish 1/1] RUN dotnet publish &quot;Project1.csproj&quot; -c Release -o /app/publish</span><br><span class="line">#16 sha256:8ab434fb4c2e6d0b30ae3e646de0c2547f78fe89ae0a803ed345f408427b2a9f</span><br><span class="line">#16 0.611 MSBuild version 17.3.2+561848881 for .NET</span><br><span class="line">#16 0.941   Determining projects to restore...</span><br><span class="line">#16 1.277   All projects are up-to-date for restore.</span><br><span class="line">#16 1.658   Project1 -&gt; /src/Project1/bin/Release/net6.0/Project1.dll</span><br><span class="line">#16 1.688   /bin/sh: 2: /tmp/MSBuildTemproot/tmp09e3171f7f36474ba081126554271511.exec.cmd: npm: not found</span><br><span class="line">#16 1.693 /src/Project1/Project1.csproj(42,5): error MSB3073: The command &quot;npm install&quot; exited with code 127.</span><br><span class="line">#16 ERROR: executor failed running [/bin/sh -c dotnet publish &quot;Project1.csproj&quot; -c Release -o /app/publish]: exit code: 1</span><br><span class="line">------</span><br><span class="line"> &gt; [publish 1/1] RUN dotnet publish &quot;Project1.csproj&quot; -c Release -o /app/publish:</span><br><span class="line">------</span><br><span class="line">executor failed running [/bin/sh -c dotnet publish &quot;Project1.csproj&quot; -c Release -o /app/publish]: exit code: 1</span><br><span class="line">2&gt;ビルドに失敗しました。詳細については、出力ウィンドウを確認してください。</span><br><span class="line">========== ビルド: 成功 1、失敗 0、最新の状態 0、スキップ 0 ==========</span><br><span class="line">========== 公開: 0 正常終了、1 失敗、0 スキップ ==========</span><br></pre></td></tr></table></figure><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>原因は DOTNETイメージ Nodejs が存在しないため「npm install」ができなかった。</p><p>Dockerfile に次の2行を追加すると、無事に発行することができるようになりました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.</span><br><span class="line"></span><br><span class="line">FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base</span><br><span class="line">WORKDIR /app</span><br><span class="line">EXPOSE 80</span><br><span class="line">EXPOSE 443</span><br><span class="line"></span><br><span class="line">FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build</span><br><span class="line">WORKDIR /src</span><br><span class="line"></span><br><span class="line">### 追加↓↓↓</span><br><span class="line">RUN curl -fsSL https://deb.nodesource.com/setup_19.x | bash -</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nodejs</span><br><span class="line">### 追加↑↑↑</span><br><span class="line"></span><br><span class="line">COPY [&quot;Project1/Project1.csproj&quot;, &quot;Project1/&quot;]</span><br><span class="line">RUN dotnet restore &quot;Project1/Project1.csproj&quot;</span><br><span class="line">COPY . .</span><br><span class="line">WORKDIR &quot;/src/Project1&quot;</span><br><span class="line">RUN dotnet build &quot;Project1.csproj&quot; -c Release -o /app/build</span><br><span class="line"></span><br><span class="line">FROM build AS publish</span><br><span class="line">RUN dotnet publish &quot;Project1.csproj&quot; -c Release -o /app/publish</span><br><span class="line"></span><br><span class="line">FROM base AS final</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY --from=publish /app/publish .</span><br><span class="line">ENTRYPOINT [&quot;dotnet&quot;, &quot;Project1.dll&quot;]</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><h3 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h3><p><a href="https://yokoken.hatenablog.com/entry/2020/01/15/102344">https://yokoken.hatenablog.com/entry/2020/01/15/102344</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ASP.NET Core 6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;プロジェクト作成&quot;&gt;&lt;a href=&quot;#プロジェクト作成</summary>
      
    
    
    
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="docker" scheme="https://noitaro.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>InstagramグラフAPI の呼び出し順</title>
    <link href="https://noitaro.github.io/instagram-graph-api/"/>
    <id>https://noitaro.github.io/instagram-graph-api/</id>
    <published>2023-02-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="呼び出し順"><a href="#呼び出し順" class="headerlink" title="呼び出し順"></a>呼び出し順</h2><h3 id="認証"><a href="#認証" class="headerlink" title="認証"></a>認証</h3><p>JavaScript で次のコードを呼んで、Instagram の認証ウィンドウで認証します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window.location.href = `https://api.instagram.com/oauth/authorize</span><br><span class="line">  ?client_id=$&#123;app-id&#125;</span><br><span class="line">  &amp;redirect_uri=$&#123;window.location.protocol&#125;//$&#123;window.location.host&#125;/</span><br><span class="line">  &amp;scope=user_profile,user_media</span><br><span class="line">  &amp;response_type=code`;</span><br></pre></td></tr></table></figure><p><img src="image-668.png" loading="lazy"></p><p>認証に成功すると、URLに認証コードが付与されて返ってきます。</p><p><img src="image-669.png" loading="lazy"></p><h3 id="アクセストークン"><a href="#アクセストークン" class="headerlink" title="アクセストークン"></a>アクセストークン</h3><p>認証コードを使って、アクセストークンを取得します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const searchParams = new URLSearchParams(window.location.search);</span><br><span class="line">const response = await axios.post(&quot;https://api.instagram.com/oauth/access_token&quot;, &#123;</span><br><span class="line">  client_id: &#123;app-id&#125;,</span><br><span class="line">  client_secret: &#123;app-secret&#125;,</span><br><span class="line">  grant_type: &#x27;authorization_code&#x27;,</span><br><span class="line">  redirect_uri: `$&#123;window.location.protocol&#125;//$&#123;window.location.host&#125;/`,</span><br><span class="line">  code: searchParams.get(&#x27;code&#x27;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>成功すると次のJSONが返ってきます。</p><ul><li>アクセストークン</li><li>ユーザーID</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;access_token&quot;: &quot;IGQVJ...&quot;,</span><br><span class="line">  &quot;user_id&quot;: 17841405793187218</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただしここで注意が必要です。</p><p>ここで返ってきたユーザーIDは使えません。</p><p>次の工程で改めてユーザーIDを取得して、そのユーザーを使っていくようにします。これに気がつくまで丸1日かかりました。</p><h3 id="ユーザー情報"><a href="#ユーザー情報" class="headerlink" title="ユーザー情報"></a>ユーザー情報</h3><p>アクセストークンを使って、ユーザーIDを取得します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const response = await axios.get(`https://graph.instagram.com/v16.0/me?fields=id,username&amp;access_token=$&#123;access_token&#125;`);</span><br></pre></td></tr></table></figure><p>成功すると次のJSONが返ってきます。</p><ul><li>ユーザーID</li><li>ユーザー名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;id&quot;: &quot;5846129734852319&quot;,</span><br><span class="line">   &quot;username&quot;: &quot;Emily.Nathan&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="InstagramグラフAPI"><a href="#InstagramグラフAPI" class="headerlink" title="InstagramグラフAPI"></a>InstagramグラフAPI</h3><p>これでやっと必要な情報がそろいました。</p><p>ユーザー情報で取得したユーザーIDとアクセストークンを使って、 InstagramグラフAPI が使えるようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const response1 = await axios.get(`https://graph.instagram.com/v16.0/$&#123;me.id&#125;?access_token=$&#123;access_token&#125;`);</span><br><span class="line">const response2 = await axios.get(`https://graph.instagram.com/v16.0/$&#123;me.id&#125;/media?access_token=$&#123;access_token&#125;`);</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><h3 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h3><p><a href="https://developers.facebook.com/docs/instagram">https://developers.facebook.com/docs/instagram</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;呼び出し順&quot;&gt;&lt;a href=&quot;#呼び出し順&quot; class=&quot;headerlink&quot; title=&quot;呼び出し順&quot;&gt;&lt;/a&gt;呼び出し順&lt;/h2&gt;&lt;h3 id=&quot;認証&quot;&gt;&lt;a href=&quot;#認証&quot; class=&quot;headerlink&quot; title=&quot;認証&quot;&gt;&lt;/a&gt;認</summary>
      
    
    
    
    
    <category term="instagram" scheme="https://noitaro.github.io/tags/instagram/"/>
    
  </entry>
  
  <entry>
    <title>OBS YouTube 配信</title>
    <link href="https://noitaro.github.io/obs-youtube-livestreaming/"/>
    <id>https://noitaro.github.io/obs-youtube-livestreaming/</id>
    <published>2023-02-03T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.435Z</updated>
    
    <content type="html"><![CDATA[<p>OBSで YouTube 配信をしようとしたらできなかった。</p><p>その対処方法です。</p><p><img src="image-653.png" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">配信開始に失敗しました。</span><br><span class="line">現在お使いのビデオカードドライバーはこのNVENCバージョンをサポートしていません。ドライバーを更新してください。</span><br></pre></td></tr></table></figure><h2 id="やったこと"><a href="#やったこと" class="headerlink" title="やったこと"></a>やったこと</h2><h3 id="ドライバーの最新化"><a href="#ドライバーの最新化" class="headerlink" title="ドライバーの最新化"></a>ドライバーの最新化</h3><p>メッセージにも書かれていた通り、GeForce Game Ready ドライバーを最新版に更新しました。</p><ul><li>【更新前】バージョン: 456.71、リリース日: 2020&#x2F;10&#x2F;07</li><li>【更新後】バージョン: 528.24、リリース日: 2023&#x2F;01&#x2F;24</li></ul><p><img src="image-660.png" loading="lazy"></p><p>更新後</p><p><img src="image-661.png" loading="lazy"></p><p>問題なく動くようになりました。</p><p><img src="image-662.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>どうしてこんな古いドライバーを使っていたかというと、ただ更新し忘れていただけでした。</p><p>機能追加とかされているので、普段から最新版のドライバーを使っていくようにしましょう。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OBSで YouTube 配信をしようとしたらできなかった。&lt;/p&gt;
&lt;p&gt;その対処方法です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image-653.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="obs" scheme="https://noitaro.github.io/tags/obs/"/>
    
    <category term="youtube" scheme="https://noitaro.github.io/tags/youtube/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Flask + Vite + React</title>
    <link href="https://noitaro.github.io/python-flask-vite-react/"/>
    <id>https://noitaro.github.io/python-flask-vite-react/</id>
    <published>2023-02-03T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.483Z</updated>
    
    <content type="html"><![CDATA[<p>Flask でWebアプリケーションを作成します。</p><p>クライアント側は Vite と React を使います。</p><h2 id="フォルダー構成"><a href="#フォルダー構成" class="headerlink" title="フォルダー構成"></a>フォルダー構成</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flask-vite-react</span><br><span class="line">┣ app</span><br><span class="line">┃ ┣ dist</span><br><span class="line">┃ ┣ node_modules</span><br><span class="line">┃ ┣ public</span><br><span class="line">┃ ┣ src</span><br><span class="line">┃ ┣ index.html</span><br><span class="line">┃ ┗ package.json</span><br><span class="line">┗ main.py</span><br></pre></td></tr></table></figure><p><img src="image-667.png" loading="lazy"></p><h2 id="サーバー側"><a href="#サーバー側" class="headerlink" title="サーバー側"></a>サーバー側</h2><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><h4 id="モジュール一覧"><a href="#モジュール一覧" class="headerlink" title="モジュール一覧"></a>モジュール一覧</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask</span><br></pre></td></tr></table></figure><h4 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, render_template, send_from_directory</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=&quot;./app/dist&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&#x27;index.html&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&lt;path:filename&gt;&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def resource(filename):</span><br><span class="line">    return send_from_directory(&quot;./app/dist&quot;, filename)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/assets/&lt;path:filename&gt;&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">def assets_resource(filename):</span><br><span class="line">    return send_from_directory(&quot;./app/dist/assets&quot;, filename)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;, port=80, debug=True)</span><br></pre></td></tr></table></figure><p>React を Vite でまとめると、JSファイルとCSSファイルが assetsフォルダーに出力されるため、assetsフォルダーのファイルを読み込むようにしています。</p><h2 id="クライアント側"><a href="#クライアント側" class="headerlink" title="クライアント側"></a>クライアント側</h2><p>クライアント側は appフォルダー内に作成していきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br><span class="line">cd app</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="image-663.png" loading="lazy"></p><p>ローカルで動くことを確認してから、ビルドします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="mailto:&#x76;&#x69;&#116;&#x65;&#x2d;&#x70;&#x72;&#111;&#x6a;&#x65;&#x63;&#116;&#64;&#x30;&#46;&#x30;&#x2e;&#x30;">&#x76;&#x69;&#116;&#x65;&#x2d;&#x70;&#x72;&#111;&#x6a;&#x65;&#x63;&#116;&#64;&#x30;&#46;&#x30;&#x2e;&#x30;</a> build<br>tsc &amp;&amp; vite build</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vite v4.1.1 building for production...</span><br><span class="line">✓ 34 modules transformed.</span><br><span class="line">dist/index.html                   0.46 kB</span><br><span class="line">dist/assets/react-35ef61ed.svg    4.13 kB</span><br><span class="line">dist/assets/index-d526a0c5.css    1.42 kB │ gzip:  0.74 kB</span><br><span class="line">dist/assets/index-64bab72d.js   143.55 kB │ gzip: 46.17 kB</span><br></pre></td></tr></table></figure><p>appフォルダー内に distフォルダーが作られてその中にビルドされたファイルが出力されます。</p><p><img src="image-664.png" loading="lazy"></p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>main.py を実行して 正しく表示されればOK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">python main.py</span><br><span class="line"> * Serving Flask app &#x27;main&#x27;</span><br><span class="line"> * Debug mode: on</span><br><span class="line"> * Running on all addresses (0.0.0.0)</span><br><span class="line"> * Running on http://127.0.0.1:80</span><br><span class="line"> * Running on http://192.168.0.9:80</span><br><span class="line">Press CTRL+C to quit</span><br><span class="line"> * Restarting with stat</span><br><span class="line">0.01s - Debugger warning: It seems that frozen modules are being used, which may</span><br><span class="line">0.00s - make the debugger miss breakpoints. Please pass -Xfrozen_modules=off</span><br><span class="line">0.00s - to python to disable frozen modules.</span><br><span class="line">0.00s - Note: Debugging will proceed. Set PYDEVD_DISABLE_FILE_VALIDATION=1 to disable this validation.</span><br><span class="line"> * Debugger is active!</span><br><span class="line"> * Debugger PIN: 134-274-126</span><br></pre></td></tr></table></figure><p><img src="image-665.png" loading="lazy"></p><p><img src="image-666.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Flask でWebアプリケーションを作成します。&lt;/p&gt;
&lt;p&gt;クライアント側は Vite と React を使います。&lt;/p&gt;
&lt;h2 id=&quot;フォルダー構成&quot;&gt;&lt;a href=&quot;#フォルダー構成&quot; class=&quot;headerlink&quot; title=&quot;フォルダー構成&quot;&gt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="react" scheme="https://noitaro.github.io/tags/react/"/>
    
    <category term="vite" scheme="https://noitaro.github.io/tags/vite/"/>
    
  </entry>
  
  <entry>
    <title>スピーカー買った</title>
    <link href="https://noitaro.github.io/speaker/"/>
    <id>https://noitaro.github.io/speaker/</id>
    <published>2023-01-09T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.623Z</updated>
    
    <content type="html"><![CDATA[<p>写真撮り忘れたんですが、スピーカー買いました。</p><p>音がクリアに聞こえるようになった気がします。</p><h2 id="何買ったの？"><a href="#何買ったの？" class="headerlink" title="何買ったの？"></a>何買ったの？</h2><h3 id="Edifier-P12"><a href="#Edifier-P12" class="headerlink" title="Edifier P12"></a>Edifier P12</h3><ul><li>壁掛けもできる</li></ul><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3irFlHy"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3irFlHy"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | Edifier P12 2ウェイブックシェルフスピーカー パッシブスピーカー (ペア)- デスクトップpcスピーカー 木製 - 壁掛けブラケット内蔵、ホーム、カラオケ、スタジオ、音楽用 (レシーバー/アンプは別売り) | Edifier | ブックシェルフスピーカー</div><div class="hbc-url">https://amzn.to/3irFlHy</div></div></div></div></a></div></div><h3 id="Nobsound-NS-01G-Pro"><a href="#Nobsound-NS-01G-Pro" class="headerlink" title="Nobsound NS-01G Pro"></a>Nobsound NS-01G Pro</h3><p>Edifier P12 はアンプが必要だったので購入</p><ul><li>Bluetooth 対応（スピーカーからスマホの音楽を流せれる）</li></ul><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3QrNDeM"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3QrNDeM"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | Nobsound New NS-01G Pro パワーアンプ bluetooth 5.0 100W アンプ スピーカー HiFi オーディオ 電源付き (アップグレード版) | Nobsound | パワーアンプ</div><div class="hbc-url">https://amzn.to/3QrNDeM</div></div></div></div></a></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写真撮り忘れたんですが、スピーカー買いました。&lt;/p&gt;
&lt;p&gt;音がクリアに聞こえるようになった気がします。&lt;/p&gt;
&lt;h2 id=&quot;何買ったの？&quot;&gt;&lt;a href=&quot;#何買ったの？&quot; class=&quot;headerlink&quot; title=&quot;何買ったの？&quot;&gt;&lt;/a&gt;何買ったの？&lt;</summary>
      
    
    
    
    
    <category term="gadget" scheme="https://noitaro.github.io/tags/gadget/"/>
    
    <category term="pc" scheme="https://noitaro.github.io/tags/pc/"/>
    
  </entry>
  
  <entry>
    <title>Cheat Engine のインストール手順</title>
    <link href="https://noitaro.github.io/cheat-engine-install/"/>
    <id>https://noitaro.github.io/cheat-engine-install/</id>
    <published>2023-01-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.835Z</updated>
    
    <content type="html"><![CDATA[<p>インストールに手こずったので、備忘録します。</p><h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><p><a href="https://www.cheatengine.org/" title="公式サイト">公式サイト</a>の「Download Cheat Engine」からダウンロード</p><p><img src="image-635.png" loading="lazy"></p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>インストールの手順を間違えると、不要なアプリがインストールされてしまいます。</p><p>適当にボタンを押さないことを推奨いたします。</p><p>まず、ダウンロードした実行ファイルを開き、</p><p><img src="image-636.png" loading="lazy"></p><p>インストール時の言語は「English」に変更、</p><p><img src="image-637.png" loading="lazy"></p><p>ここは「Next」を選択、</p><p><img src="image-638.png" loading="lazy"></p><p>ここは「Skip All」を選択。</p><p>間違えて「Accept」を選択してしまうと McAfee がインストールされてしまうので気をつけましょう。</p><p><img src="image-639.png" loading="lazy"></p><p>ちなみに翻訳してみると、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">By clicking &quot;Accept&quot; you agree to McAfee&#x27;s End User License Agreement and Privacy Policy and to the installation of McAfee WebAdvisor.</span><br><span class="line">「同意する」をクリックすると、McAfee のエンド ユーザー ライセンス契約とプライバシー ポリシー、および McAfee WebAdvisor のインストールに同意したことになります。</span><br><span class="line"></span><br><span class="line">Go To &quot;Add/Remove Programs&quot; to uninstall.</span><br><span class="line">「プログラムの追加と削除」に移動して、アンインストールします。</span><br></pre></td></tr></table></figure><p>間違って McAfee をインストールしてしまったら、アンインストールして下さいね。書いてありました。</p><h3 id="インストールできない"><a href="#インストールできない" class="headerlink" title="インストールできない"></a>インストールできない</h3><p>多分、ここで警告が表示されると思います。</p><p>こんなのや、</p><p><img src="image-641.png" loading="lazy"></p><p>こんなのが。</p><p><img src="image-642.png" loading="lazy"></p><p>Cheat Engine には、コンピューターウイルスも使っているメモリスキャナーが搭載されているので、このような警告が表示されます。</p><p>ですが Cheat Engine は、秘密裏にメモリーを書き換えないのでウイルスではありません。</p><h3 id="リアルタイム保護をオフ"><a href="#リアルタイム保護をオフ" class="headerlink" title="リアルタイム保護をオフ"></a>リアルタイム保護をオフ</h3><p>一時的にリアルタイム保護をオフにします。</p><p>「設定 &gt; プライバシーとセキュリティ &gt; Windows セキュリティを開く」の順で選択し、</p><p><img src="image-643.png" loading="lazy"></p><p>「ウイルスと脅威の防止 &gt; 設定の管理」を選択し、</p><p><img src="image-647.png" loading="lazy"></p><p>リアルタイム保護をオフにします。</p><p><img src="image-648.png" loading="lazy"></p><h3 id="再インストール"><a href="#再インストール" class="headerlink" title="再インストール"></a>再インストール</h3><p>今回のインストーラーはこれで止まってしまうので、タスクマネージャーから「タスクの終了」をして、</p><p><img src="image-646.png" loading="lazy"></p><p>再度インストーラーを実行します。</p><p>リアルタイム保護をオフにしてインストールすると、問題なくインストールすることができました。</p><p><img src="image-649.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;インストールに手こずったので、備忘録します。&lt;/p&gt;
&lt;h2 id=&quot;ダウンロード&quot;&gt;&lt;a href=&quot;#ダウンロード&quot; class=&quot;headerlink&quot; title=&quot;ダウンロード&quot;&gt;&lt;/a&gt;ダウンロード&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.che</summary>
      
    
    
    
    
    <category term="cheat" scheme="https://noitaro.github.io/tags/cheat/"/>
    
    <category term="game" scheme="https://noitaro.github.io/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>ストレージ交換</title>
    <link href="https://noitaro.github.io/m2-ssd-retrofit/"/>
    <id>https://noitaro.github.io/m2-ssd-retrofit/</id>
    <published>2023-01-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.255Z</updated>
    
    <content type="html"><![CDATA[<p>最近PCの容量がかつかつになってきたので、大容量のストレージに換装しました。</p><h2 id="買ったもの"><a href="#買ったもの" class="headerlink" title="買ったもの"></a>買ったもの</h2><p>Amazon ブラックフライデー（11&#x2F;25～12&#x2F;1）期間中に買っておきました。</p><p><img src="image-622.png" loading="lazy"></p><h3 id="Samsung-M-2-SSD-1TB"><a href="#Samsung-M-2-SSD-1TB" class="headerlink" title="Samsung M.2 SSD 1TB"></a>Samsung M.2 SSD 1TB</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3GF73J1"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3GF73J1"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: Samsung 980 1TB PCIe Gen 3.0 ×4 NVMe M.2 最大 3,500MB/秒 内蔵 SSD MZ-V8V1T0B/EC 国内正規保証品 : パソコン・周辺機器</div><div class="hbc-url">https://amzn.to/3GF73J1</div></div></div></div></a></div></div><h3 id="Western-Digital-SATA-SSD-1TB"><a href="#Western-Digital-SATA-SSD-1TB" class="headerlink" title="Western Digital SATA SSD 1TB"></a>Western Digital SATA SSD 1TB</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3jIXSPF"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3jIXSPF"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: Western Digital ウエスタンデジタル WD Blue SATA SSD 内蔵 1TB 2.5インチ (読取り最大 560MB/s 書込み最大 520MB/s) PC メーカー保証5年 WDS100T3B0A-EC SA510  【国内正規取扱代理店】 : 家電＆カメラ</div><div class="hbc-url">https://amzn.to/3jIXSPF</div></div></div></div></a></div></div><h2 id="Let’s-Go"><a href="#Let’s-Go" class="headerlink" title="Let’s Go!"></a>Let’s Go!</h2><p>特にトラブルもなく換装できました。</p><p><img src="image-624.png" loading="lazy"></p><h2 id="ベンチマーク"><a href="#ベンチマーク" class="headerlink" title="ベンチマーク"></a>ベンチマーク</h2><p>換装前</p><p><img src="WS001767-1.png" alt="CrystalDiskMark M.2 SSD の情報" loading="lazy"></p><p>換装後</p><p><img src="image-621.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>2020年に買った M.2 SSD より今回の方が性能いいですね。</p><p>この数年で M.2 SSD の性能が上がったのかもしれません。</p><p>今回は M.2 SSD にヒートシンクは付けませんでした。</p><p>特に何もしていない状態で 50℃ になっているので、ゲームとかをすると 70℃ になってしまうかと思います。</p><h3 id="換装前の-M-2-SSD-記事"><a href="#換装前の-M-2-SSD-記事" class="headerlink" title="換装前の M.2 SSD 記事"></a>換装前の M.2 SSD 記事</h3><p><a href="https://noitaro.github.io/m2-nvme-ssd/">https://noitaro.github.io/m2-nvme-ssd/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近PCの容量がかつかつになってきたので、大容量のストレージに換装しました。&lt;/p&gt;
&lt;h2 id=&quot;買ったもの&quot;&gt;&lt;a href=&quot;#買ったもの&quot; class=&quot;headerlink&quot; title=&quot;買ったもの&quot;&gt;&lt;/a&gt;買ったもの&lt;/h2&gt;&lt;p&gt;Amazon ブラックフ</summary>
      
    
    
    
    
    <category term="gadget" scheme="https://noitaro.github.io/tags/gadget/"/>
    
    <category term="pc" scheme="https://noitaro.github.io/tags/pc/"/>
    
  </entry>
  
  <entry>
    <title>YouTubeのコメント欄を非表示にする</title>
    <link href="https://noitaro.github.io/youtube-comment-hidden/"/>
    <id>https://noitaro.github.io/youtube-comment-hidden/</id>
    <published>2023-01-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.911Z</updated>
    
    <content type="html"><![CDATA[<p>YouTube でライブ配信された動画を見ていると、チャット欄が表示されることがあります。</p><p>つい気になって読んでしまうので、毎回非表示ボタンを押して閉じるんですが、毎回閉じるのが煩わしいので拡張機能で非表示にしちゃいます。</p><p><img src="image-626.png" loading="lazy"></p><h2 id="こんな感じ"><a href="#こんな感じ" class="headerlink" title="こんな感じ"></a>こんな感じ</h2><h2 id="使う拡張機能"><a href="#使う拡張機能" class="headerlink" title="使う拡張機能"></a>使う拡張機能</h2><h3 id="Adblock-Plus-free-ad-blocker"><a href="#Adblock-Plus-free-ad-blocker" class="headerlink" title="Adblock Plus - free ad blocker"></a>Adblock Plus - free ad blocker</h3><p><a href="https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb">https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb</a></p><p><img src="image-627.png" loading="lazy"></p><h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>AdblockPlus の設定画面を開き、</p><p><img src="image-628.png" loading="lazy"></p><p>詳細設定タブを選択し、</p><p><img src="image-629.png" loading="lazy"></p><p>下へスクロールし、マイフィルターリストに次の設定を追加します。</p><ul><li>youtube.com###chat</li></ul><p><img src="image-630.png" loading="lazy"></p><p>モザイクばかりで分かりにくいですが、画面上からチャット欄がなくなりました。</p><p><img src="image-631.png" loading="lazy"></p><h2 id="ついでに"><a href="#ついでに" class="headerlink" title="ついでに"></a>ついでに</h2><p>あと私はついでに、次の項目も非表示にしています。</p><h3 id="メンバーになるボタンを非表示"><a href="#メンバーになるボタンを非表示" class="headerlink" title="メンバーになるボタンを非表示"></a>メンバーになるボタンを非表示</h3><ul><li>youtube.com###sponsor-button</li></ul><h3 id="評価や共有、オフラインボタンを非表示"><a href="#評価や共有、オフラインボタンを非表示" class="headerlink" title="評価や共有、オフラインボタンを非表示"></a>評価や共有、オフラインボタンを非表示</h3><ul><li>youtube.com###actions</li></ul><p>上記を適用するとこんな感じにスッキリとした見た目になります。</p><p><img src="image-632.png" loading="lazy"></p><p><img src="image-634.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;YouTube でライブ配信された動画を見ていると、チャット欄が表示されることがあります。&lt;/p&gt;
&lt;p&gt;つい気になって読んでしまうので、毎回非表示ボタンを押して閉じるんですが、毎回閉じるのが煩わしいので拡張機能で非表示にしちゃいます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;i</summary>
      
    
    
    
    
    <category term="youtube" scheme="https://noitaro.github.io/tags/youtube/"/>
    
  </entry>
  
  <entry>
    <title>VRゴーグルを買った</title>
    <link href="https://noitaro.github.io/vr-goggles/"/>
    <id>https://noitaro.github.io/vr-goggles/</id>
    <published>2022-11-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.775Z</updated>
    
    <content type="html"><![CDATA[<p>VRゴーグル買っちゃいました報告です！</p><p>たぶん誰も興味ないと思うけど、記事のネタもないので何を買ったかまとめていきたいと思います。</p><h2 id="買ったもの"><a href="#買ったもの" class="headerlink" title="買ったもの"></a>買ったもの</h2><h3 id="Meta-Quest-2"><a href="#Meta-Quest-2" class="headerlink" title="Meta Quest 2"></a>Meta Quest 2</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3F2HIc8"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3F2HIc8"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | Meta Quest 2—完全ワイヤレスのオールインワンVRヘッドセット—64GB | その他のゲーム機種本体全般</div><div class="hbc-url">https://amzn.to/3F2HIc8</div></div></div></div></a></div></div><p>VRゴーグルです。私が買ったのは 64GBモデル で新品 44,980円 でした。</p><p>写真では Oculus Quest 2 となっているけど、名前が変わっただけ。中身は同じらしいです。</p><p><img src="image-616.png" alt="Meta Quest 2" loading="lazy"></p><p>メルカリで中古探してたんですが、やっぱ触れるものなら新品がいいなって思い、メルカリはやめました。</p><p><img src="image-617.png" alt="Meta Quest 2" loading="lazy"></p><p>これだけでトラッキングができるのスゴイですよね。コントローラー使わず、手を認識して操作することもできました。</p><p><img src="image-618.png" alt="Meta Quest 2" loading="lazy"></p><h3 id="Anker-USB-Type-C-ケーブル-PowerLine-3-0m"><a href="#Anker-USB-Type-C-ケーブル-PowerLine-3-0m" class="headerlink" title="Anker USB Type C ケーブル PowerLine 3.0m"></a>Anker USB Type C ケーブル PowerLine 3.0m</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3GJvarz"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3GJvarz"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: Anker USB Type C ケーブル PowerLine USB-C &amp; USB-A 3.0 ケーブル Oculus link/Xperia/Galaxy/LG/iPad Pro MacBook その他 Android Oculus Quest 等 USB-C機 器対応 3.0m ブラック : パソコン・周辺機器</div><div class="hbc-url">https://amzn.to/3GJvarz</div></div></div></div></a></div></div><p>Meta Quest 2 はスタンドアローンなのでPC不要なのですが、USBでPCと繋ぐこともできます。</p><p>PCと接続すると、VR空間にPCのデスクトップを表示することができます。これがすごく便利で、VR空間に大画面のディスプレイがドドンって表示されるので、動画やゲームが大迫力になります。</p><p>寝転がって楽な姿勢で動画視聴やゲームで遊べるのホントいい。</p><p>あとPCのグラボを使って、PCのVRゲームを遊べるようになります。Wi-Fi でも出来るんですが遅延が酷かったのでUSB接続の方がいいです。</p><h4 id="長い方がいいよ"><a href="#長い方がいいよ" class="headerlink" title="長い方がいいよ"></a>長い方がいいよ</h4><p>長いUSBケーブルをオススメします。最初 1.8m を買ったんですが、寝転がるとケーブルに余裕がなくなって身動きができなくなりました。なので 3.0m のUSBケーブルを買いなおしました。</p><h3 id="VRヘッドセット用防汚マスク"><a href="#VRヘッドセット用防汚マスク" class="headerlink" title="VRヘッドセット用防汚マスク"></a>VRヘッドセット用防汚マスク</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3sAylNb"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3sAylNb"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | 2 PCS PSVR2 マスク、VR マスク カバー、HTC Vive、PS、ギア、VRワークアウトのための調節可能なフェイスカバー ユニバーサル 汗バンド 洗える 整理整頓を保つ (Black+Grey) | YipuVR | VRゴーグル</div><div class="hbc-url">https://amzn.to/3sAylNb</div></div></div></div></a></div></div><p>VRゴーグルは顔にピッタリくっつけるので、どうしても顔に触れる部分が汚れてしまいます。</p><p>そのための防汚マスクを買いました。洗って何度でも使えるタイプなので、2つ買って交互に洗いながら使っています。</p><p>この防汚マスクをつけると、VRゴーグルの装着時に髪の毛とか巻き込まれなくなって装着が楽になりました。</p><p>あと、そこらへんに置いとくとパンティーに見えます。</p><h3 id="充電器と充電池"><a href="#充電器と充電池" class="headerlink" title="充電器と充電池"></a>充電器と充電池</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3icfl2f"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3icfl2f"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | パナソニック 単3形・単4形 USB入出力急速充電器 BQ-CC87L+【Amazon.co.jp限定】単3形充電池 4本パック BK-3MCC/4SA | パナソニック(Panasonic) | 充電式電池</div><div class="hbc-url">https://amzn.to/3icfl2f</div></div></div></div></a></div></div><p>コントローラーが単三電池で動くので、使い捨ての電池より充電池の方がいいかなって思い購入。</p><p><img src="image-620.png" alt="パナソニック エネループ" loading="lazy"></p><p>特筆することはないけど、次の機能がついてました。</p><ul><li>USBで充電できる。</li><li>充電池からUSB給電（モバイルバッテリー）になる。</li><li>LEDライト付き。</li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>全部で 53,250円 でした。</p><h3 id="SteamのVRゲームをするには"><a href="#SteamのVRゲームをするには" class="headerlink" title="SteamのVRゲームをするには"></a>SteamのVRゲームをするには</h3><p>SteamのVRゲームをするには、PC と Meta Quest 2 をUSBケーブルで繋いで、Oculusアプリの設定で「提供元不明」を有効にする必要がありました。</p><p><img src="image-619.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;VRゴーグル買っちゃいました報告です！&lt;/p&gt;
&lt;p&gt;たぶん誰も興味ないと思うけど、記事のネタもないので何を買ったかまとめていきたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;買ったもの&quot;&gt;&lt;a href=&quot;#買ったもの&quot; class=&quot;headerlink&quot; title=&quot;買っ</summary>
      
    
    
    
    
    <category term="vr" scheme="https://noitaro.github.io/tags/vr/"/>
    
    <category term="gadget" scheme="https://noitaro.github.io/tags/gadget/"/>
    
  </entry>
  
  <entry>
    <title>Godot ドットのアンチエイリアスを外す</title>
    <link href="https://noitaro.github.io/godot-disable-anti-aliasing/"/>
    <id>https://noitaro.github.io/godot-disable-anti-aliasing/</id>
    <published>2022-11-20T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.079Z</updated>
    
    <content type="html"><![CDATA[<p>Godot で2Dゲームを作る場合、設定を変えないとこのようにドット（ピクセル）がぼやけてしまいます。</p><p><img src="image-612.png" loading="lazy"></p><p>簡単に外せたので、その紹介です。</p><h2 id="バージョン-4-1-以降"><a href="#バージョン-4-1-以降" class="headerlink" title="バージョン 4.1 以降"></a>バージョン 4.1 以降</h2><p>バージョン 4.1 から設定方法が変わりました。<br><a href="https://docs.godotengine.org/en/stable/tutorials/assets_pipeline/importing_images.html#import-options">https://docs.godotengine.org/en/stable/tutorials/assets_pipeline/importing_images.html#import-options</a></p><h3 id="フィルターを-Nearest-に"><a href="#フィルターを-Nearest-に" class="headerlink" title="フィルターを Nearest に"></a>フィルターを Nearest に</h3><p>Sprite2D のインスペクターを開いて <code>Texture &gt; Filter</code> を <code>Nearest</code> に変更する。</p><p><img src="2023-07-25_131810.png" loading="lazy"></p><h2 id="バージョン-4-1-未満"><a href="#バージョン-4-1-未満" class="headerlink" title="バージョン 4.1 未満"></a>バージョン 4.1 未満</h2><h3 id="フィルターをオフに"><a href="#フィルターをオフに" class="headerlink" title="フィルターをオフに"></a>フィルターをオフに</h3><ol><li>左下のスプライト画像を選択</li><li>左上のインポートタブを選択</li><li>フィルターをオフ</li><li>再インポートを選択</li></ol><p><img src="image-613.png" loading="lazy"></p><p>このようにクッキリと表示されるようになります。</p><p><img src="image-614.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>「アンチエイリアス処理」を「アンチエイリアシング」と言うみたいです。紛らわしいですね。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Godot で2Dゲームを作る場合、設定を変えないとこのようにドット（ピクセル）がぼやけてしまいます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image-612.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;簡単に外せたので、その紹介です。&lt;/p&gt;
&lt;h2 id=&quot;バ</summary>
      
    
    
    
    
    <category term="godot" scheme="https://noitaro.github.io/tags/godot/"/>
    
  </entry>
  
  <entry>
    <title>【Godot】WEB形式で出力する</title>
    <link href="https://noitaro.github.io/godot-exporting-html5-web/"/>
    <id>https://noitaro.github.io/godot-exporting-html5-web/</id>
    <published>2022-11-08T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.083Z</updated>
    
    <content type="html"><![CDATA[<p>ゲームを作るんだったらマルチプラットフォームで動作させたくなるのが人というもの。</p><p>とりあえず一番手軽に遊んでもらえるWEB形式で出力してみたいと思います。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 22H2</li><li>Godot 3.5.1</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>左上メニューの「プロジェクト &gt; エクスポート」を選択。</p><p><img src="image-603.png" alt="プロジェクト &gt; エクスポート" loading="lazy"></p><h3 id="エクスポートができない場合"><a href="#エクスポートができない場合" class="headerlink" title="エクスポートができない場合"></a>エクスポートができない場合</h3><p>初回はエクスポートができません。右下の「エクスポートテンプレートの管理」からエクスポートに必要なファイルをダウンロードします。</p><p><img src="image-605.png" alt="エクスポートテンプレートの管理" loading="lazy"></p><p>「ダウンロードしてインストール」を選択。</p><p><img src="image-606.png" alt="ダウンロードしてインストールを選択" loading="lazy"></p><h3 id="エクスポート"><a href="#エクスポート" class="headerlink" title="エクスポート"></a>エクスポート</h3><p>「エクスポート先のパス」を設定します。</p><p><img src="image-607.png" alt="エクスポート先のパスを設定" loading="lazy"></p><p>私の場合は、エクスポート専用フォルダーを作って「index.html」で出力するように設定。</p><p><img src="image-608.png" alt="エクスポート専用フォルダーを作って出力" loading="lazy"></p><p>必要なファイルが全て出力される。</p><p><img src="image-609.png" alt="ファイル出力" loading="lazy"></p><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>「index.html」をダブルクリックしても動かず、WEBに配置するか、簡易サーバーを通す必要があります。</p><p>今回は <a href="https://azure.microsoft.com/ja-jp/products/visual-studio-code/">Visual Studio Code</a> の拡張機能「<a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a>」を使って動作確認しました。</p><p><img src="image-610.png" alt="動作確認" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><ul><li><a href="https://developer.mozilla.org/ja/docs/WebAssembly">WebAssembly</a> でソースコードとかリソースファイルをまとめてくれる。すごくありがたい。</li><li>起動時にスプラッシュ画面が表示されない。ものすごくありがたい。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ゲームを作るんだったらマルチプラットフォームで動作させたくなるのが人というもの。&lt;/p&gt;
&lt;p&gt;とりあえず一番手軽に遊んでもらえるWEB形式で出力してみたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="html" scheme="https://noitaro.github.io/tags/html/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
    <category term="godot" scheme="https://noitaro.github.io/tags/godot/"/>
    
  </entry>
  
  <entry>
    <title>ゲームエンジン Godot を試す</title>
    <link href="https://noitaro.github.io/godot/"/>
    <id>https://noitaro.github.io/godot/</id>
    <published>2022-11-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.083Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://unity.com/">Unity</a> や <a href="https://www.unrealengine.com/">Unreal Engine</a>、<a href="https://www.cocos.com/">Cocos Creator</a> に匹敵する ゲームエンジン <a href="https://godotengine.org/">Godot</a> を使ってみたいと思います。</p><h2 id="Godot-とは"><a href="#Godot-とは" class="headerlink" title="Godot とは"></a>Godot とは</h2><ul><li>無料</li><li>2D、3Dゲームの開発可能</li><li>ゲームエンジンの容量が少ない</li><li>ノード形式のデザイン思想</li><li>Pythonに似たスクリプト言語、および C#、C++ 等サポート</li><li>Windows、macOS、Linux、Android で開発可能</li><li>マルチプラットフォーム（Windows、macOS、Linux、iOS、Android、Nintendo Switch、PlayStation 4、HTML5、WebAssembly）</li></ul><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 22H2</li><li>Godot 3.5.1</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h3><p><a href="https://godotengine.org/">公式サイト</a> から Godot 3.5.1 をダウンロードします。</p><p><img src="image-582.png" alt="公式サイト" loading="lazy"></p><p><img src="image-583.png" alt="Godotダウンロード" loading="lazy"></p><p>C#言語で開発したい場合は、下の Mono version をダウンロードします。</p><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p>Godot はインストール不要で、ZIPを展開するだけで使えます。</p><p><img src="image-584.png" alt="ZIP展開" loading="lazy"></p><p>展開したフォルダ内にある「Godot_v3.5.1-stable_win64.exe」を実行するとゲーム開発画面が表示されます。</p><p><img src="image-585.png" alt="Godot_v3.5.1-stable_win64" loading="lazy"></p><h2 id="ゲーム開発"><a href="#ゲーム開発" class="headerlink" title="ゲーム開発"></a>ゲーム開発</h2><p>初回起動時にサンプルプロジェクトをダウンロードするか確認されたので「キャンセル」しました。</p><p><img src="image-586.png" alt="サンプルプロジェクトをダウンロード" loading="lazy"></p><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><p>右の「新規プロジェクト」でプロジェクトを作成します。</p><p><img src="image-587.png" alt="新規プロジェクト" loading="lazy"></p><p>次の設定をしてプロジェクトを作成しました。</p><ul><li>プロジェクト名：Godot_Project_1</li><li>プロジェクトパス：D:&#x2F;Godot_Project</li><li>レンダラー：OpenGLES 3.0</li></ul><p><img src="image-588.png" alt="プロジェクト作成" loading="lazy"></p><p>プロジェクトを開いた直後はこんな画面でした。</p><p>Unityと違ってだいぶシンプルですね。</p><p><img src="image-589.png" alt="Godot ゲーム開発画面" loading="lazy"></p><p>ゲーム開発画面</p><h3 id="ルートノード作成"><a href="#ルートノード作成" class="headerlink" title="ルートノード作成"></a>ルートノード作成</h3><p>シーンにルートノードを作成します。</p><p>今回は「2Dシーン」でノードを作成しました。</p><p><img src="image-590.png" alt="ルートノードを作成" loading="lazy"></p><p>一度、シーンを保存しておきます。</p><p><img src="image-591.png" alt="シーンを保存" loading="lazy"></p><p><img src="image-592.png" alt="Node2D.tscn" loading="lazy"></p><h3 id="スプライトノード追加"><a href="#スプライトノード追加" class="headerlink" title="スプライトノード追加"></a>スプライトノード追加</h3><p>とりあえず画像を表示させてみます。</p><p>ルートノードの下にスプライトノードを追加します。</p><p>ルートノードを右クリックし「子ノードを追加」を選択します。</p><p><img src="image-593.png" alt="子ノードを追加" loading="lazy"></p><p>検索に「Sprite」と入力すると絞り込むことができます。</p><p>Node2D内の「Sprite」を選択してノードを追加します。</p><p><img src="image-594.png" alt="Node2DのSpriteを選択" loading="lazy"></p><p>ファイルシステム内の画像をスプライトにドラッグし、</p><p><img src="image-596.png" alt="画像をスプライトにドラッグ" loading="lazy"></p><p>「Texture」を選択すると、</p><p><img src="image-597.png" alt="Textureを選択" loading="lazy"></p><p>スプライトノードに画像を追加することができます。</p><p><img src="image-598.png" alt="スプライトノードに画像が追加される" loading="lazy"></p><h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><p>右上の再生ボタンを押すと、デバッグ実行することができます。</p><p><img src="image-599.png" alt="右上の再生ボタンを押す" loading="lazy"></p><p>初回はメインシーンが設定されていないため確認ダイアログが表示されます。今のシーンの動作確認をしたいため「現在のもの」を選択します。</p><p><img src="image-600.png" alt="現在のものを選択" loading="lazy"></p><p>このようにゲーム画面が表示されます。</p><p><img src="image-601.png" alt="ゲーム画面" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><ul><li>プロジェクトを開くのも、開発中も実行時も、動作がとても軽やかでした。</li><li>今後、もう少し触ってみて何か作ってみる。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://unity.com/&quot;&gt;Unity&lt;/a&gt; や &lt;a href=&quot;https://www.unrealengine.com/&quot;&gt;Unreal Engine&lt;/a&gt;、&lt;a href=&quot;https://www.cocos.com/&quot;&gt;Cocos</summary>
      
    
    
    
    
    <category term="games" scheme="https://noitaro.github.io/tags/games/"/>
    
    <category term="godot" scheme="https://noitaro.github.io/tags/godot/"/>
    
  </entry>
  
  <entry>
    <title>NoxPlayer と Docker や WSL2 を共存させる</title>
    <link href="https://noitaro.github.io/noxplayer-hyper-v-fix/"/>
    <id>https://noitaro.github.io/noxplayer-hyper-v-fix/</id>
    <published>2022-10-23T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.435Z</updated>
    
    <content type="html"><![CDATA[<p>NoxPlayer は Hyper-V が有効になってると使えません。</p><p>ですが、公式サイトに Hyper-V対応バージョン のインストーラーがあるので、それをインストールすると、Docker や WSL2 と共存することができます。</p><p><img src="image-580.png" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>NoxPlayer 7.0.2.5002 (Win11向けHyper-V対応バージョン)</li></ul><h2 id="Hyper-V対応バージョン"><a href="#Hyper-V対応バージョン" class="headerlink" title="Hyper-V対応バージョン"></a>Hyper-V対応バージョン</h2><p>Hyper-V対応バージョンをインストールする。</p><p><a href="https://support.bignox.com/ja/else/hypervonbeta">NoxとHyperV共存させるには(Win11向けバージョンbeta版) | NoxPlayer　サポート</a></p><p><img src="2023-08-03_213235.png" loading="lazy"></p><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>内部的には VirtualBox で動かしてるみたいなので、通常版よりCPUとメモリの使用量が多くなります。</p><p><img src="image-581.png" loading="lazy"></p><p>余程のことがないなら、通常版を使った方がいいでしょう。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NoxPlayer は Hyper-V が有効になってると使えません。&lt;/p&gt;
&lt;p&gt;ですが、公式サイトに Hyper-V対応バージョン のインストーラーがあるので、それをインストールすると、Docker や WSL2 と共存することができます。&lt;/p&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    
    <category term="nox" scheme="https://noitaro.github.io/tags/nox/"/>
    
  </entry>
  
  <entry>
    <title>Huel 完全栄養食</title>
    <link href="https://noitaro.github.io/huel-complete-food/"/>
    <id>https://noitaro.github.io/huel-complete-food/</id>
    <published>2022-10-15T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.187Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://lit.link/moqsama">もきゅ様のおかん様</a> が Twitter で完全栄養食についてつぶやかれていて、何気なく読んでいたら <a href="https://jp.huel.com/">Huel</a> に興味がでてしまいました。</p><p><a href="https://twitter.com/moqsama/status/1580334465809018880?s=20&t=2ySeLKzvjUSUTICTJkRdtA">https://twitter.com/moqsama/status/1580334465809018880?s=20&amp;t=2ySeLKzvjUSUTICTJkRdtA</a></p><p>感化を受けやすい私はさっそく購入したので、簡単なレビューをしていこうと思います。文章を書くのが苦手なので、簡単な箇条書きになってしまいますが、ご了承ください。</p><h2 id="レビュー"><a href="#レビュー" class="headerlink" title="レビュー"></a>レビュー</h2><h3 id="【★★★★★】商品の到着が早い"><a href="#【★★★★★】商品の到着が早い" class="headerlink" title="【★★★★★】商品の到着が早い"></a>【★★★★★】商品の到着が早い</h3><ul><li>13日に注文して翌日の14日に届いたのでメチャクチャ早かった。</li><li>日本に代理店があるので到着が早い。</li></ul><p><img src="image-571.png" loading="lazy"></p><p><img src="image-572.png" loading="lazy"></p><p>初回はシェイカーと計量スプーンがついてくる。</p><p><img src="image-573.png" loading="lazy"></p><h3 id="【★★★★☆】美味しい"><a href="#【★★★★☆】美味しい" class="headerlink" title="【★★★★☆】美味しい"></a>【★★★★☆】美味しい</h3><ul><li>個人的にはまあまあ美味しいと感じた。</li><li>甘みがあって飲みやすい。</li><li>思ってたより粉っぽくなくて飲みやすい。</li><li>豆乳やココナッツミルクで溶かすと、クリーミーになってなお飲みやすい。</li><li>ぬるいと甘みが強くでてしまい飲めなかった。氷を入れるか溶かしたあと冷蔵庫で冷やすことをオススメ。公式も冷やして飲むことを推奨している。</li><li>甘いから主食にできない。</li><li>ためらわず味わわず一気に飲む方がよい。</li></ul><h3 id="【★★★☆☆】ダイエット食ではない"><a href="#【★★★☆☆】ダイエット食ではない" class="headerlink" title="【★★★☆☆】ダイエット食ではない"></a>【★★★☆☆】ダイエット食ではない</h3><ul><li>1カップ 200kcal と計算しやすい。</li><li>腹持ちは悪いが、小食の人なら満腹感が得られると思う。</li><li>たくさん飲めばその分カロリーを摂取してしまうので、空腹を我慢できる人じゃないとダイエット食にできない。</li><li>間食しないで食事を置き換えるなら、手軽で便利だと思う。</li><li>栄養がないカロリーだけの菓子パンやお菓子を食べるより、栄養がある Huel を食べたいい。</li></ul><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><ul><li>水に溶かして飲むだけなので時短になる。</li><li>完全ヴィーガン食。</li><li>食品ロスを減らせる。地球にやさしい。</li><li>グルテンフリーや低炭水化物バージョンもある。</li></ul><h2 id="アフィリエイトリンク"><a href="#アフィリエイトリンク" class="headerlink" title="アフィリエイトリンク"></a>アフィリエイトリンク</h2><h3 id="Amazon"><a href="#Amazon" class="headerlink" title="Amazon"></a>Amazon</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/44B2Csz"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/44B2Csz"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: HUEL 完全栄養食 Black Edition チョコレート味 1.53kg オリジナル賞味期限シール付属 忙しい時の食事 バランス栄養食 時短 ランチ たんぱく質 レーション 黒チョコ味 : 食品・飲料・お酒</div><div class="hbc-url">https://amzn.to/44B2Csz</div></div></div></div></a></div></div><h3 id="Huel-公式サイト"><a href="#Huel-公式サイト" class="headerlink" title="Huel 公式サイト"></a>Huel 公式サイト</h3><p>Huel公式サイトだと紹介キャンペーンがあります。まとめ買いするなら公式サイトの方が安い。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://huel.mention-me.com/m/ol/gu7dm-hang-jia-teng"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://huel.mention-me.com/m/ol/gu7dm-hang-jia-teng"></img><div class="hbc-site-name">huel.mention-me.com</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Huelでのオンラインショッピングで1600円OFFの特典をゲットしませんか？</div><div class="hbc-url">https://huel.mention-me.com/m/ol/gu7dm-hang-jia-teng</div></div></div></div></a></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://lit.link/moqsama&quot;&gt;もきゅ様のおかん様&lt;/a&gt; が Twitter で完全栄養食についてつぶやかれていて、何気なく読んでいたら &lt;a href=&quot;https://jp.huel.com/&quot;&gt;Huel&lt;/a&gt; に興味がでてしま</summary>
      
    
    
    
    
    <category term="complete-food" scheme="https://noitaro.github.io/tags/complete-food/"/>
    
  </entry>
  
  <entry>
    <title>象印 スチーム式加湿器</title>
    <link href="https://noitaro.github.io/zojirushi-ee-rq35-wa/"/>
    <id>https://noitaro.github.io/zojirushi-ee-rq35-wa/</id>
    <published>2022-10-15T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.919Z</updated>
    
    <content type="html"><![CDATA[<p>急に冷え込んできて乾燥がひどかったので象印のスチーム式加湿器を買いました。</p><p><a href="https://www.zojirushi.co.jp/syohin/humidifier/eerq/">スチーム式加湿器／EE-RQ35</a></p><p><a href="https://www.zojirushi.co.jp/syohin/humidifier/eerq/">https://www.zojirushi.co.jp/syohin/humidifier/eerq/</a></p><h2 id="何でコレにしたの？"><a href="#何でコレにしたの？" class="headerlink" title="何でコレにしたの？"></a>何でコレにしたの？</h2><ul><li>ポットみたいに蓋がガバッと開けれてお手入れが簡単だった。</li><li>スチーム式だから部屋が暖かくなる。</li></ul><h2 id="使ってみた感想"><a href="#使ってみた感想" class="headerlink" title="使ってみた感想"></a>使ってみた感想</h2><ul><li>うるさい。</li><li>加湿性能は最高に満足。</li><li>数時間で入れてた水が無くなった。長時間放置するなら大容量タイプを買った方がいい。</li><li>けっこう大きい。ポット並み。</li></ul><p><img src="image-577.png" loading="lazy"></p><h2 id="アフィリエイトリンク"><a href="#アフィリエイトリンク" class="headerlink" title="アフィリエイトリンク"></a>アフィリエイトリンク</h2><h3 id="Amazon"><a href="#Amazon" class="headerlink" title="Amazon"></a>Amazon</h3><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3T4egat"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3T4egat"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: 象印 加湿器 2.2L 木造和室6畳・プレハブ洋室10畳対応 スチーム式 蒸気式 フィルター不要 お手入れ簡単 自動加湿2段階 入タイマー&amp;切タイマー搭載 ホワイト EE-RQ35-WA : ホーム＆キッチン</div><div class="hbc-url">https://amzn.to/3T4egat</div></div></div></div></a></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;急に冷え込んできて乾燥がひどかったので象印のスチーム式加湿器を買いました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zojirushi.co.jp/syohin/humidifier/eerq/&quot;&gt;スチーム式加湿器／EE-RQ35&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
      
    
    
    
    
    <category term="gadget" scheme="https://noitaro.github.io/tags/gadget/"/>
    
  </entry>
  
  <entry>
    <title>error TS1259: Module &#39;&quot;stream&quot;&#39; can only be default-imported using the &#39;esModuleInterop&#39; flag</title>
    <link href="https://noitaro.github.io/esmoduleinterop-flag/"/>
    <id>https://noitaro.github.io/esmoduleinterop-flag/</id>
    <published>2022-10-14T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.039Z</updated>
    
    <content type="html"><![CDATA[<p>の解決方法</p><p>「tsconfig.json」に次の項目を追加する。</p><ul><li>esModuleInterop: true</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class="line">    &quot;noImplicitReturns&quot;: true,</span><br><span class="line">    &quot;noUnusedLocals&quot;: true,</span><br><span class="line">    &quot;outDir&quot;: &quot;lib&quot;,</span><br><span class="line">    &quot;sourceMap&quot;: true,</span><br><span class="line">    &quot;strict&quot;: true,</span><br><span class="line">    &quot;target&quot;: &quot;es2017&quot;,</span><br><span class="line">    &quot;esModuleInterop&quot;: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;compileOnSave&quot;: true,</span><br><span class="line">  &quot;include&quot;: [</span><br><span class="line">    &quot;src&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;の解決方法&lt;/p&gt;
&lt;p&gt;「tsconfig.json」に次の項目を追加する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;esModuleInterop: true&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    
    <category term="typescript" scheme="https://noitaro.github.io/tags/typescript/"/>
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】常にカメラを見るスプライト</title>
    <link href="https://noitaro.github.io/unity-bill-board/"/>
    <id>https://noitaro.github.io/unity-bill-board/</id>
    <published>2022-10-12T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.695Z</updated>
    
    <content type="html"><![CDATA[<p>ゲーム業界ではこのことを「ビルボード」と言うみたいです。知りませんでした。</p><p><img src="Animation-5.gif" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Unity 2021.3.11f1</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="スクリプトの作成"><a href="#スクリプトの作成" class="headerlink" title="スクリプトの作成"></a>スクリプトの作成</h3><p>常にカメラを見るスクリプトを作ります。</p><p>Assetsフォルダー内に C#スクリプト を作成し、次のコードをコピペ。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class BillBoard : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        var c = Camera.main.transform.position;</span><br><span class="line">        var p = transform.position;</span><br><span class="line">        c.x = p.x;</span><br><span class="line">        transform.LookAt(2 * p - c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="アタッチ"><a href="#アタッチ" class="headerlink" title="アタッチ"></a>アタッチ</h3><p>今回は自キャラに設定するため、1つ空オブジェクトを挟む必要がありました。</p><p>親オブジェクトを移動用にして、子供オブジェクトをカメラ向く用です。</p><h4 id="親オブジェクト"><a href="#親オブジェクト" class="headerlink" title="親オブジェクト"></a>親オブジェクト</h4><p><img src="image-568.png" loading="lazy"></p><h4 id="子供オブジェクト"><a href="#子供オブジェクト" class="headerlink" title="子供オブジェクト"></a>子供オブジェクト</h4><p><img src="image-569.png" loading="lazy"></p><h3 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h3><p>自キャラのスプライトが傾いて、ゲーム画面からは常にカメラの方を向いています。</p><p><img src="Animation-5.gif" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://nn-hokuson.hatenablog.com/entry/2017/03/24/211211">【Unity】ビルボードで常にカメラの方に向く木を作る - おもちゃラボ</a></li><li><a href="https://teratail.com/questions/182226">LookAt()にy軸180°を追加したい - teratail.com</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ゲーム業界ではこのことを「ビルボード」と言うみたいです。知りませんでした。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;Animation-5.gif&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="unity" scheme="https://noitaro.github.io/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】JoyStickでスプライト移動</title>
    <link href="https://noitaro.github.io/unity-joystick-sprite-move/"/>
    <id>https://noitaro.github.io/unity-joystick-sprite-move/</id>
    <published>2022-10-11T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.699Z</updated>
    
    <content type="html"><![CDATA[<p>前回スプライトが表示できたので、今回はスプライト移動を実装していきます。</p><p><img src="Animation-2.gif" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Unity 2021.3.11f1</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="アセットのインポート"><a href="#アセットのインポート" class="headerlink" title="アセットのインポート"></a>アセットのインポート</h3><p>アセットは「<a href="https://assetstore.unity.com/packages/tools/input-management/joystick-pack-107631">Joystick Pack</a>」を使います。</p><p><a href="https://assetstore.unity.com/packages/tools/input-management/joystick-pack-107631">https://assetstore.unity.com/packages/tools/input-management/joystick-pack-107631</a></p><p>上記リンクを開いてアセットを Unity に追加します。</p><p><img src="image-541.png" loading="lazy"></p><p><img src="image-542.png" loading="lazy"></p><p><img src="image-543.png" loading="lazy"></p><p>プロジェクトの Assets フォルダーに「Joystick Pack」が追加されます。</p><p><img src="image-544.png" loading="lazy"></p><h3 id="Floating-Joystick-の配置"><a href="#Floating-Joystick-の配置" class="headerlink" title="Floating Joystick の配置"></a>Floating Joystick の配置</h3><p>初めに「キャンバスグループ」を配置し、</p><p><img src="image-546.png" loading="lazy"></p><p>その中に「Floating Joystick」をドラッグで配置します。</p><p><img src="image-547.png" loading="lazy"></p><h3 id="スクリプトの作成"><a href="#スクリプトの作成" class="headerlink" title="スクリプトの作成"></a>スクリプトの作成</h3><p>Assetsフォルダー内に C#スクリプト を作成し、次のコードをコピペします。</p><p><img src="image-548.png" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class PlayerScript : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public FloatingJoystick inputMove;</span><br><span class="line"></span><br><span class="line">    [Header(&quot;移動速度&quot;)]</span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float moveSpeed = 1.0f;</span><br><span class="line"></span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        this.transform.position += this.transform.forward * inputMove.Vertical * moveSpeed * Time.deltaTime;</span><br><span class="line">        this.transform.position += this.transform.right * inputMove.Horizontal * moveSpeed * Time.deltaTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-549.png" loading="lazy"></p><h3 id="アタッチ"><a href="#アタッチ" class="headerlink" title="アタッチ"></a>アタッチ</h3><p>Unityオブジェクト と C#スクリプト を紐づけします。</p><p>キャラクタースプライトにコンポーネント「PlayerScript」を追加します。</p><p><img src="image-550.png" loading="lazy"></p><p>PlayerScript の「InputMove」にヒエラルキーの「Floating Joystick」をドラッグします。</p><p><img src="image-551.png" loading="lazy"></p><h3 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h3><p>実行して確認します。</p><p><img src="Animation-2.gif" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://qiita.com/Wadadada/items/28dcf832d0bcfee6625b">【Unity】 JoyStickで移動と視点変更を実装 - Qiita</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前回スプライトが表示できたので、今回はスプライト移動を実装していきます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;Animation-2.gif&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    
    <category term="unity" scheme="https://noitaro.github.io/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】スプライトに影をつける</title>
    <link href="https://noitaro.github.io/unity-urp-lit-shader-graph/"/>
    <id>https://noitaro.github.io/unity-urp-lit-shader-graph/</id>
    <published>2022-10-11T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.703Z</updated>
    
    <content type="html"><![CDATA[<p>2Dスプライトに影をつけていきます。</p><p><img src="Animation-4.gif" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Unity 2021.3.11f1</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="プロジェクトの作成"><a href="#プロジェクトの作成" class="headerlink" title="プロジェクトの作成"></a>プロジェクトの作成</h3><p>URP対応の 3Dプロジェクトを作成します。</p><p><img src="image-553.png" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="シェーダーグラフ-の追加"><a href="#シェーダーグラフ-の追加" class="headerlink" title="シェーダーグラフ の追加"></a>シェーダーグラフ の追加</h3><p>プロジェクトの Assets で右クリックし「作成 &gt; シェーダーグラフ &gt; URP &gt; Lit シェーダーグラフ」で追加します。</p><p><img src="image-554.png" loading="lazy"></p><p><img src="image-555.png" loading="lazy"></p><h3 id="シェーダーグラフ-の設定"><a href="#シェーダーグラフ-の設定" class="headerlink" title="シェーダーグラフ の設定"></a>シェーダーグラフ の設定</h3><p><a href="https://www.matatabi-ux.com/entry/2022/02/24/100000">参考サイト</a> を見ながらみようみまねで設定しました。</p><p><img src="image-557.png" loading="lazy"></p><h4 id="Texture2D"><a href="#Texture2D" class="headerlink" title="Texture2D"></a>Texture2D</h4><p>Reference は「_MainTex」にすること。変更を忘れるとテクスチャーが表示されなくなる。</p><p><img src="image-558.png" loading="lazy"></p><h4 id="グラフ設定"><a href="#グラフ設定" class="headerlink" title="グラフ設定"></a>グラフ設定</h4><p>「Alpha Clipping」にチェックを入れないと Fragment に Alpha が設定できなかった。</p><p><img src="image-560.png" loading="lazy"></p><h3 id="マテリアルの作成"><a href="#マテリアルの作成" class="headerlink" title="マテリアルの作成"></a>マテリアルの作成</h3><p>今作ったシェーダーグラフを選択した状態で右クリックし「作成 &gt; マテリアル」でマテリアルを作成します。</p><p><img src="image-562.png" loading="lazy"></p><h3 id="スプライトの設定"><a href="#スプライトの設定" class="headerlink" title="スプライトの設定"></a>スプライトの設定</h3><p>影をつけたいスプライトのマテリアルに設定します。</p><p><img src="image-563.png" loading="lazy"></p><h4 id="影の描画設定"><a href="#影の描画設定" class="headerlink" title="影の描画設定"></a>影の描画設定</h4><p>Inspector をデバッグにして、</p><p><img src="image-564.png" loading="lazy"></p><p>「Cast Shadows」をオンに「Receive Shadows」にチェックを入れます。</p><p><img src="image-565.png" loading="lazy"></p><h3 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h3><p>スプライトに影がついているのが確認できます。</p><p><img src="Animation-4.gif" loading="lazy"></p><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="影はつくけど、テクスチャーが反映されない"><a href="#影はつくけど、テクスチャーが反映されない" class="headerlink" title="影はつくけど、テクスチャーが反映されない"></a>影はつくけど、テクスチャーが反映されない</h3><p>こんな感じになっちゃったときは、シェーダーグラフの設定を見直してみてください。</p><p><img src="image-567.png" loading="lazy"></p><p>Texture2D の Reference が「_MainTex」になっていないとテクスチャーが表示されません。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.matatabi-ux.com/entry/2022/02/24/100000">Unity URP でスプライトに影をつける - しっぽを追いかけて</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2Dスプライトに影をつけていきます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;Animation-4.gif&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/</summary>
      
    
    
    
    
    <category term="unity" scheme="https://noitaro.github.io/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】スプライトエディターウィンドウが登録されていません。</title>
    <link href="https://noitaro.github.io/unity-2d-sprite-editor/"/>
    <id>https://noitaro.github.io/unity-2d-sprite-editor/</id>
    <published>2022-10-09T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.687Z</updated>
    
    <content type="html"><![CDATA[<p>Unityの3Dプロジェクトでスプライトエディターが起動しなかった。</p><p><img src="image-519.png" alt="スプライトエディターウィンドウが登録されていません。" loading="lazy"></p><p>どうやって起動させるか調べたので共有していきます。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Unity 2021.3.11f1</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>ウィンドウ &gt; パッケージマネージャー を選択。</p><p><img src="image-520.png" alt="パッケージマネージャーを選択" loading="lazy"></p><p>パッケージを「Unityレジストリ」に変更。</p><p><img src="image-521.png" alt="Unityレジストリ" loading="lazy"></p><p>「2D Sprite」を検索し「2D Sprite」をインストール。</p><p><img src="image-522.png" alt="2D Spriteをインストール" loading="lazy"></p><p>スプライトエディターが起動するようになります。</p><p><img src="image-523.png" alt="2Dスプライトエディター" loading="lazy"></p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>2Dプロジェクトだと普通に起動するのに…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Unityの3Dプロジェクトでスプライトエディターが起動しなかった。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image-519.png&quot; alt=&quot;スプライトエディターウィンドウが登録されていません。&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;どうやって起動させるか調べた</summary>
      
    
    
    
    
    <category term="unity" scheme="https://noitaro.github.io/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】パラパラ漫画風アニメーション</title>
    <link href="https://noitaro.github.io/unity-animator-controller/"/>
    <id>https://noitaro.github.io/unity-animator-controller/</id>
    <published>2022-10-09T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.691Z</updated>
    
    <content type="html"><![CDATA[<p>2Dスプライトを使って、パラパラ漫画風アニメーションを実装します。</p><p>ドット絵のキャラクターを歩かせるには、1コマ1コマ画像を切り替えて、歩いてる風にみせる必要があります。</p><p>Unity を使うと簡単に実装できます。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Unity 2021.3.11f1</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="2Dプロジェクトの作成"><a href="#2Dプロジェクトの作成" class="headerlink" title="2Dプロジェクトの作成"></a>2Dプロジェクトの作成</h3><p>今後、2Dゲームを作っていきたいので 2Dプロジェクト を新規作成して作業していきます。3Dプロジェクトでも同じことができるので好きな方で作ってください。</p><p><img src="image-524.png" loading="lazy"></p><h3 id="スプライト設定"><a href="#スプライト設定" class="headerlink" title="スプライト設定"></a>スプライト設定</h3><p>プロジェクトの Assets フォルダーにキャラクター画像を追加します。</p><p><img src="image-525.png" loading="lazy"></p><p>今回使った画像は <a href="https://silsec.sakura.ne.jp/WolfRPGEditor/WolfEditorWiki/">こちら</a> からお借りしました。</p><p><img src="image-526.png" loading="lazy"></p><p>Assetsに追加したキャラクター画像を選択し、インスペクター(Inspector)で次の設定をします。</p><ul><li>テクスチャタイプ：スプライト(2DとUI)</li><li>スプライトモード：複数</li></ul><p><img src="image-527.png" loading="lazy"></p><p>上記を変更してから「Sprite Editor」ボタンを押します。</p><h4 id="スプライトエディター"><a href="#スプライトエディター" class="headerlink" title="スプライトエディター"></a>スプライトエディター</h4><p>キャラクター画像に合わせてスライス設定をしていきます。</p><p><img src="image-528.png" loading="lazy"></p><p>スライスタイプを「Grid By Cell Count」に変更し、キャラクター画像に合う行列設定をします。</p><p>うまくできたら「スライス」ボタンを押してスライス確定をし「適応」ボタンで、キャラクター画像へ適応させます。</p><p>設定が完了すると、Assetsの画像が分割されます。</p><p><img src="image-529.png" loading="lazy"></p><h3 id="アニメーション設定"><a href="#アニメーション設定" class="headerlink" title="アニメーション設定"></a>アニメーション設定</h3><p>続いて分割したスプライトを使って、アニメーションを作っていきます。</p><p>アニメーションにしたいスプライトを選択し、左の ヒエラルキー(Hierarchy) にドラッグします。</p><p><img src="image-531.png" loading="lazy"></p><p>今回は、右向き4枚の分割スプライトを選択しました。</p><p>アニメーションの保存ダイアログが表示されるので、アニメーション名を決めて保存します。</p><p><img src="image-532.png" loading="lazy"></p><p>Assets に アニメーションクリップ(Animation Clip) と アニメーターコントローラー(Animator Controller) が保存されます。</p><p><img src="image-537.png" loading="lazy"></p><h4 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h4><p>スクショだと分からないですが、メチャ早く走ってます。</p><p><img src="image-536.png" loading="lazy"></p><h4 id="遅くする"><a href="#遅くする" class="headerlink" title="遅くする"></a>遅くする</h4><p>アニメーションを遅くします。</p><p>アニメーターコントローラー(Animator Controller) を選択し、Animation1 の速度を「0.5」に変更するとアニメーションが遅くなります。</p><p><img src="image-539.png" loading="lazy"></p><p>程よい</p><p><img src="Animation-1.gif" loading="lazy"></p><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="ドット絵がぼやけるんだけど？"><a href="#ドット絵がぼやけるんだけど？" class="headerlink" title="ドット絵がぼやけるんだけど？"></a>ドット絵がぼやけるんだけど？</h3><p><img src="image-534.png" loading="lazy"></p><p>画像のインスペクターから次の設定を変更します。</p><ul><li>フィルターモード：ポイント</li></ul><p><img src="image-533.png" loading="lazy"></p><p>ぼやけなくなります。</p><p><img src="image-535.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2Dスプライトを使って、パラパラ漫画風アニメーションを実装します。&lt;/p&gt;
&lt;p&gt;ドット絵のキャラクターを歩かせるには、1コマ1コマ画像を切り替えて、歩いてる風にみせる必要があります。&lt;/p&gt;
&lt;p&gt;Unity を使うと簡単に実装できます。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;</summary>
      
    
    
    
    
    <category term="unity" scheme="https://noitaro.github.io/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>デバイスセキュリティ メモリ整合性をオンにする</title>
    <link href="https://noitaro.github.io/device-security-memory-consistency/"/>
    <id>https://noitaro.github.io/device-security-memory-consistency/</id>
    <published>2022-10-05T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.983Z</updated>
    
    <content type="html"><![CDATA[<p>気がついたらデバイスセキュリティに警告アイコンがついてました。</p><p>なので、どうやって消すか調べてみました。</p><p>注意：不用意にドライバーを削除すると Windows が起動しなくなる可能性があるので、自己責任でお願いします。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li></ul><h2 id="手順１"><a href="#手順１" class="headerlink" title="手順１"></a>手順１</h2><p>まず「設定に移動」して「メモリ整合性」のチェックをオンにしてみる。</p><p><img src="image-507.png" alt="メモリ整合性" loading="lazy"></p><p>普通ならこれでいいんですが、私の場合非互換ドライバーがインストールされているみたいでオンにすることができませんでした。</p><p><img src="image-508.png" alt="メモリ整合性を有効にできません" loading="lazy"></p><p><img src="image-509.png" alt="互換性のないドライバーを消してから再スキャン" loading="lazy"></p><h2 id="手順２"><a href="#手順２" class="headerlink" title="手順２"></a>手順２</h2><h3 id="互換性のないドライバーを確認する"><a href="#互換性のないドライバーを確認する" class="headerlink" title="互換性のないドライバーを確認する"></a>互換性のないドライバーを確認する</h3><p>互換性のないドライバーが確認できます。</p><p><img src="image-510.png" alt="互換性のないドライバーを確認" loading="lazy"></p><p>でもここから削除できません。</p><h3 id="じゃあどこから削除できるの？"><a href="#じゃあどこから削除できるの？" class="headerlink" title="じゃあどこから削除できるの？"></a>じゃあどこから削除できるの？</h3><p>デバイスマネージャーから消せます。</p><p>デバイスマネージャーは、左下のウインドウボタンを右クリックして、出てきたメニューの中にある。</p><p><img src="image-512.png" alt="デバイスマネージャーを開く" loading="lazy"></p><p>デバイスマネージャーの「表示」を選択し、次の2点を有効にします。</p><ul><li>デバイス（ドライバー別）</li><li>非表示のデバイスの表示</li></ul><p><img src="image-513.png" alt="デバイスマネージャーの表示設定" loading="lazy"></p><p>これで準備完了。あとは互換性のないドライバーを削除していくだけ。</p><p>デバイスセキュリティ画面で公開名を調べて、</p><p><img src="image-514.png" alt="ドライバーの公開名確認" loading="lazy"></p><p>デバイスマネージャーから同じ名前のドライバーを探します。</p><p><img src="image-515.png" alt="デバイスマネージャーから同じ名前のドライバーを探す" loading="lazy"></p><p>今回は「oem21.inf」でした。</p><p>見つかったら右クリックからドライバーを削除します。</p><p><img src="image-516.png" alt="ドライバーの削除" loading="lazy"></p><p>互換性のないドライバーを全て削除できたら、再スキャンして互換性がないドライバーが残ってないか確認します。</p><p><img src="image-517.png" alt="再スキャン" loading="lazy"></p><p>互換性がないドライバーが無ければメモリ整合性をオンにすることができます。</p><p>再起動後、デバイスセキュリティの警告アイコンが消えていればOK</p><p><img src="image-518.png" alt="デバイスセキュリティの警告アイコンが消える" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;気がついたらデバイスセキュリティに警告アイコンがついてました。&lt;/p&gt;
&lt;p&gt;なので、どうやって消すか調べてみました。&lt;/p&gt;
&lt;p&gt;注意：不用意にドライバーを削除すると Windows が起動しなくなる可能性があるので、自己責任でお願いします。&lt;/p&gt;
&lt;h2 id=&quot;環</summary>
      
    
    
    
    
    <category term="windows" scheme="https://noitaro.github.io/tags/windows/"/>
    
    <category term="security" scheme="https://noitaro.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>自分語り 覚えていることをつらつらと</title>
    <link href="https://noitaro.github.io/about-me/"/>
    <id>https://noitaro.github.io/about-me/</id>
    <published>2022-10-01T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="年表"><a href="#年表" class="headerlink" title="年表"></a>年表</h2><h3 id="1987年（昭和62年）0歳"><a href="#1987年（昭和62年）0歳" class="headerlink" title="1987年（昭和62年）0歳"></a>1987年（昭和62年）0歳</h3><p>このころは特になし。何か思い出したら追記する。</p><h3 id="1990年（平成2年）3歳"><a href="#1990年（平成2年）3歳" class="headerlink" title="1990年（平成2年）3歳~"></a>1990年（平成2年）3歳~</h3><p>確かこの時期は幼稚園に通っていた記憶がある。</p><p>当時は団地に住んでいて幼稚園バスで送り迎えされていた。同じ団地から10人ぐらい幼児を乗せて、園まで運ばれていた。バスに乗る前は「先生おはようございます。お母さん行ってきます。」、帰ってきたときは「先生さようなら。お母さんただいま。」なんて事も言っていたと思う。</p><p>四角い蓋つきの給食を残していたことや、園にあるプールで遊んだこと、お遊戯会とか断片的な記憶があるぐらい。</p><p>同じ幼稚園に通っている子とよく公園で遊んでいた。名前は思い出せないが小学校に上がる直前に引っ越していった女の子がいた気がする。隣の学区になってしまい同じ小学校じゃなくなって、寂しい記憶が残ってる。</p><p>今では考えられないが、当時は母親から家のカギを渡されていて、バスを降りても母親は居ず自分で家まで帰ってた。今だったら保護者が迎えにきていないのに、園児をバスから降ろすことはないと思う。何回か、寝過ごして気づかれることなく園まで戻されてた気もする。</p><h3 id="1994年（平成6年）7歳"><a href="#1994年（平成6年）7歳" class="headerlink" title="1994年（平成6年）7歳~"></a>1994年（平成6年）7歳~</h3><p>小学校入学</p><p>あんまり語ることがない。</p><p>3年生か4年生のときに、サッカーの授業中ドリブルに失敗して転んで足の骨を折った。骨が折れる音が聞こえた。保健室のおばちゃんにおぶわれて近くのクリニックに運ばれた。</p><p>5年生のときに長距離陸上の大会に出た。本番は自己ベストだったけど散々な結果だった気がする。</p><p>休み時間や体育のときのドッチボールは、いつもよけて最後の方まで無駄に残ってた。</p><p>他にも休み時間にカービィや迷路を書いてた気がする。字が上手な女の子に、新品のノートに名前を書いてもらったこともあった。</p><p>初めて買ってもらったゲームは「星のカービィ2」で、ステージ3のカインで星のしずくが取れなくて、悔しい思いをした。水の中でコピー能力を捨てて、ブロックをすぐに壊して捨てたコピー能力を戻すってことがなかなかできなかった。ちなみに「星のカービィ2」の発売日は1995年。</p><p>「星のカービィスーパーデラックス」は友達のうちで遊ばせてもらった。</p><p>ポケモンは「赤」→「金」→「サファイア」の順で遊んだ。それ以降はやってない。「ポケモン青」はコロコロコミックの応募者全員サービスで買った。数千円分の切手を買ってきて送った気がする。数年後、中古ショップに青版が並んでるのを見たときは複雑な気分だった。</p><p>アニメ「地獄先生ぬ～べぇ～」のOPや、アニメ「ポケットモンスター」のOPは歌えるしCDも持ってた気がする。ちなみにアニメ「地獄先生ぬ～べぇ～」は1996年から、アニメ「ポケットモンスター」は1997年から放送されたみたい。1話のホウオウやポリゴン事件はリアタイで見た。イマクニの「ポケモン言えるかな？」も頑張って覚えたし「おはスタ」も毎朝見てから学校に行ってた。土曜日の朝はアニメ「星のカービィ」を見てた。</p><p>小学時代の3、4年生のときに、土曜日が完全に休みになるようになった。それまでは隔週土曜日の午前だけ授業があった。土曜日の帰りは班で一斉下校だった気がする。土曜日の昼に帰ったら「進め!クリフハンガー冒険隊」とか見てた。</p><p>夏休みは午前はアニメの再放送、午後は「キッズ･ウォー」や「大好き!五つ子」を見てた。その後、友達のうちで「スマブラ64」や「チョロQ64 2」で遊んでた。スマブラ64の隠れキャラは4体で、チョロQは全てのパーツを集めると「Hレーザー」と言う最強の武器が手に入った気がする。</p><p>よく遊びに行ってた友達は、学年が1つ下で男2人女2人の4人兄弟だった。あと、同じ階に同学年の女の子がいて、この子のうちに友達と2人で「スーパーマリオ64」を遊びに行った。クリアできないステージがあるからクリアしてほしいって話だった気がする。</p><h3 id="2000年（平成12年）13歳"><a href="#2000年（平成12年）13歳" class="headerlink" title="2000年（平成12年）13歳~"></a>2000年（平成12年）13歳~</h3><p>中学校入学</p><p>ここからオタクの方へと歩みを進めることとなる。</p><p>私のオタクの扉を開いたのは「ぴたテン」だった。中1のときにできた友達にマンガのぴたテンを借りて読んだのが切っ掛け。美紗さんやコタロー君、紫亜さんとの日常がすごくうらやましく感じた。当時、美紗さん役の田村ゆかりと新谷良子がパーソナリティを務めるラジオが放送されていて、MDに録音しその友達と一緒に聞いていた。そのラジオのテーマソング「ぴたぴたエンジェル」のCDも買った。</p><p>友達と名古屋のゲーマーズに行って、ぴたテンのカードも買った。友達は「ギャラクシーエンジェル」のミルフィーユ・桜葉や「シスタープリンセス」の四葉が推しだった気がする。当時は「推し」って言葉は無かったけど。</p><p>中3のときに彼女ができた。当時はラインもスマホも無くて、ガラケーが主流。自分はプリペイド式のガラケーを持ってたと思う。その子とアドレスを交換して毎日メール交換をしてた。ある時「航が好き」とメールで告白された。今までにないほど心臓がドキドキするのを感じた。当時の私はシャイで恥ずかしがりやだったので、手をつなぐことができなかった。今でもすごく後悔している。休みの日に彼女のうちへ行って、録画してあった「キッズ･ウォー」を一緒にみた。見てるときに背中にもたれかかってくれて、すごく緊張してた。彼女のうちから帰るときに抱きつかれて上目遣いで見つめられたが何も返すことができなかった。ホント当時の自分を殴りつけてでも「もっと彼女を好いてあげろ」と今でも後悔している。彼女からハム太郎の模写をもらったときは正直「？？？」が頭に浮かんだ。</p><p>彼女は毎日下駄箱に手紙を入れてくれていた。キレイに折られた紙に、ふだん話すような内容が元気よく書かれてた。あんまり会話をしなかったオレに気を使ってだったと思う。もっと彼氏らしくしてあてたらホントよかったと後悔している。その手紙は別れてから全て捨ててしまった。</p><p>彼女とは高校に入ってから自然消滅した。別々の高校だった。彼女は複雑な家庭で、夜間定時制の高校に編入したらしい。</p><p>中学に上がってからPCを買ってもらった。Windows98だった。電気屋で10万ぐらいだったと思う。NECでブラウン管ディスプレー、メモリーも数百MBだった。3.5インチのCD-ROMドライブと2.5インチのフロッピーディスクドライブが付いてた。PCを買った当時はネットに繋がってなくて、「Windows100%」の雑誌を買ってゲームやツールをPCに入れて遊んでた。「クターのアスレチック」や「クターのタビペロ」で遊んでた気がする。</p><p>しばらくして、YahooBBのモデルを無料配布してたから、それを機にADSLを契約してもらった。</p><p>ネットに繋がったPCで「ラグナロクオンライン」や「リネージュ」で遊んだ。</p><p>ラグナロクオンラインではBOTやエミュ鯖にも手を出した。BOTの方は砂漠で蟻を狩ってドロップしたカードをRMTしてた。エミュ鯖の方は自分でエミュ鯖を立てたり、ロマリア鯖に行って「俺TUEEE」して遊んでた。</p><p>「キャラメ」のチャットもしてた。ある手順でチャットルームに入ると、ロックされたチャットルームにも入れることを発見したが、いつの間にか対策されていた。</p><h3 id="2003年（平成15年）16歳"><a href="#2003年（平成15年）16歳" class="headerlink" title="2003年（平成15年）16歳~"></a>2003年（平成15年）16歳~</h3><p>高校入学</p><p>自転車で40分、山を3個ぐらい超えた高校に入学した。</p><p>学力は常に赤点。進学や卒業できるかギリギリだったが何とか卒業できた。</p><p>入学当時は弓道部に入ったが数ヶ月でやめて帰宅部に。</p><p>この時はPSPの「モンスターハンター2G」が流行ってた気がする。</p><p>高3の時に彼女ができた。昼の弁当を男友達と食べてて、その男友達から「紹介したい子がいる」って言われてメールアドレスを交換したのが切っ掛け。この子もメールで告白してきたが、中学時代も同じシュティエーションだったことを思い出し「直接言ってほしい」と返信した。次の日の放課後、二人っきりの教室で告白された。彼女のうちは高校から徒歩1分のところだったから、学校帰りにどっか遊びに行くとかは無かった。</p><p>2005年に「愛・地球博」が開催されて、彼女と一緒に行った。内容は覚えていない。彼女がバスケ部だったから一緒にバスケの試合を観にも行った。普段ストレートパーマをしていたのに、わざわざ髪を巻いてもらった覚えがする。</p><p>この時もシャイで恥ずかしがりやの人見知りだったオレは、手をつなぐことができなかった。中学時代から一切成長していない。現在進行形で。</p><p>これが不満だったのか、ある日の夜、彼女と通話をしていたら、急に彼女の後輩が出てきて「手つながないんですか？」と言ってきた。拗らせ過ぎている私は、逆ギレして彼女とは別れてしまった。</p><p>今考えても、理不尽な自分に腹が立つ。</p><h3 id="2005年（平成17年）18歳"><a href="#2005年（平成17年）18歳" class="headerlink" title="2005年（平成17年）18歳~"></a>2005年（平成17年）18歳~</h3><p>高校卒業後</p><p>なんとか高校を卒業した私は、工場に入社した。半年でやめた。その後ニート。</p><p>コンビニの夜勤バイトをしたり、親戚の農業を手伝ったりした。</p><p>富士山の山頂で御来光を眺めた。</p><h3 id="2007年（平成19年）20歳"><a href="#2007年（平成19年）20歳" class="headerlink" title="2007年（平成19年）20歳~"></a>2007年（平成19年）20歳~</h3><p>成人式は一応出席したが、式典後帰宅。</p><p>2009年にソフトバンクからiPhone3GSが発売されて、スマホデビュー。当時はスマホ持ってる人がほとんどいなかったので、恥ずかしかった記憶がある。</p><p>2009年の「劇場版 マクロスF」は、ネットで知り合った人と映画館で見た。進展無し。</p><p>その人の影響で専門学校に行くことを決意。</p><h3 id="2011年（平成23年）24歳"><a href="#2011年（平成23年）24歳" class="headerlink" title="2011年（平成23年）24歳~"></a>2011年（平成23年）24歳~</h3><p>ゲームプログラミングの専門学校に入学</p><p>C言語、DirectXを使ってゲーム開発を勉強。ゲーム会社のインターンも経験した。</p><p>当時Unityは使ってないし存在も知らなかった。処女作はオセロとテトリスを組み合わせたゲームを作った。グラフィックを担当した人が最強過ぎて、いいモノができた。次の作品は3Dを取り入れたが、技術不足で断念した。</p><h3 id="2013年（平成25年）26歳"><a href="#2013年（平成25年）26歳" class="headerlink" title="2013年（平成25年）26歳~"></a>2013年（平成25年）26歳~</h3><p>システム会社に就職</p><p>VB.NET の Forms で業務システムの開発。</p><p>ASP.NET でWEBでの業務システムの開発。</p><p>.NET Core でWEBシステム開発。</p><p>2017年大久野島に一人で行く。うさぎに癒される。</p><p>2017年うさぎ飼育開始。ちなみに「卯年生まれ」、どうぶつ占いは「おおかみ」</p><p>2020年に新型コロナが流行してテレワークへ。ヒゲ脱毛やジムで自分磨き開始。見た目よくしても意味なしと悟る。</p><h3 id="2022年（令和4年）35歳"><a href="#2022年（令和4年）35歳" class="headerlink" title="2022年（令和4年）35歳~"></a>2022年（令和4年）35歳~</h3><p>転職</p><p>業種は同じシステム開発</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;年表&quot;&gt;&lt;a href=&quot;#年表&quot; class=&quot;headerlink&quot; title=&quot;年表&quot;&gt;&lt;/a&gt;年表&lt;/h2&gt;&lt;h3 id=&quot;1987年（昭和62年）0歳&quot;&gt;&lt;a href=&quot;#1987年（昭和62年）0歳&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="random-notes" scheme="https://noitaro.github.io/tags/random-notes/"/>
    
  </entry>
  
  <entry>
    <title>切り抜き動画の作成</title>
    <link href="https://noitaro.github.io/create-clipping-video/"/>
    <id>https://noitaro.github.io/create-clipping-video/</id>
    <published>2022-09-25T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.975Z</updated>
    
    <content type="html"><![CDATA[<p>最近ホロライブにハマってしまい、常に配信を流している状態までになってしまいました。</p><p><a href="https://twitter.com/so_noita/status/1535989024552550402?s=20&t=8aF76r39TFJB9wqaMGnHVg">https://twitter.com/so_noita/status/1535989024552550402?s=20&amp;t=8aF76r39TFJB9wqaMGnHVg</a></p><p>さすがに過去の動画を全て追って見続けるのは不可能なので切り抜き動画も見てるんですが、自分も作ってみたいっという欲に駆られて作ってみることにしました。</p><p>今さら～？って感じですが、とりあえずやってみるがモットーの私なので、自分がやった手順をまとめていこうと思います。</p><p>もちろん全て無料。最初から Adobe の <a href="https://www.adobe.com/jp/products/premiere.html">Premiere Pro</a> なんて投資できませんのでね。切り抜き動画作成にハマったら買う。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>私が使ってるツール</p><h3 id="yt-dlp"><a href="#yt-dlp" class="headerlink" title="yt-dlp"></a>yt-dlp</h3><p>YouTube の動画をダウンロードするコマンドラインツール</p><p><a href="https://github.com/yt-dlp/yt-dlp">https://github.com/yt-dlp/yt-dlp</a></p><p>「yt-dlp.exe」を適当なフォルダーにダウンロードして使います。</p><p><img src="image-492.png" alt="yt-dlpダウンロード" loading="lazy"></p><p>とりあえず適当なフォルダーにダウンロード。</p><p><img src="image-493.png" loading="lazy"></p><h3 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h3><p>yt-dlp.exe が動画の変換や音声の抽出をするために使います。あと、私が動画を分割するため必須</p><p><a href="https://ffmpeg.org/">https://ffmpeg.org/</a></p><p><a href="https://www.gyan.dev/ffmpeg/builds/#release-builds">こちら</a> から release builds の「ffmpeg-release-essentials.zip」をダウンロードし、</p><p><img src="image-494.png" alt="FFmpegダウンロード" loading="lazy"></p><p>展開後 binフォルダー内の「ffmpeg.exe」を yt-dlp.exe と同じフォルダーにコピペしておきます。</p><p><img src="image-495.png" loading="lazy"></p><h3 id="Shotcut"><a href="#Shotcut" class="headerlink" title="Shotcut"></a>Shotcut</h3><p>動画編集ソフト</p><p>無料、ウォーターマーク（透かし）も無し、オープンソースで開発しているため、マルウェア・スパイウェア・アドウェアが入らない。インストール不要。</p><p><a href="https://shotcut.org/">https://shotcut.org/</a></p><p>「Windows portable zip」からダウンロードすると、インストール不要で展開するだけで使えます。オススメ。</p><p><img src="image-496.png" alt="Shotcutダウンロード" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="YouTube動画をダウンロード"><a href="#YouTube動画をダウンロード" class="headerlink" title="YouTube動画をダウンロード"></a>YouTube動画をダウンロード</h3><p>切り抜きしたいYouTube動画をダウンロードします。</p><p>「yt-dlp.exe」が置いてあるフォルダーでコマンドプロンプトを開き、次のコマンドで動画をダウンロードすることができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp https://www.youtube.com/watch?v=***********</span><br></pre></td></tr></table></figure><p><img src="image-499.png" alt="yt-dlp YouTube動画ダウンロード" loading="lazy"></p><p>うまくいくとこのように webm型式 のYouTube動画がダウンロードできます。</p><p><img src="image-500.png" loading="lazy"></p><p>ちなみに、オプションでいろいろな型式の動画をダウンロードできます。</p><h4 id="サムネイル付き動画"><a href="#サムネイル付き動画" class="headerlink" title="サムネイル付き動画"></a>サムネイル付き動画</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp --embed-thumbnail https://www.youtube.com/watch?v=***********</span><br></pre></td></tr></table></figure><h4 id="音声のみ"><a href="#音声のみ" class="headerlink" title="音声のみ"></a>音声のみ</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp -x https://www.youtube.com/watch?v=***********</span><br></pre></td></tr></table></figure><h3 id="動画の分割"><a href="#動画の分割" class="headerlink" title="動画の分割"></a>動画の分割</h3><p>3時間や4時間の動画を Shotcut で開くと、重くて作業できなかったので、その前に動画の分割をします。</p><p>今回は1つの動画を10分毎に分割して作業をしやすくします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.webm -map 0 -c copy -f segment -segment_time 600 -reset_timestamps 1 output_%03d.webm</span><br></pre></td></tr></table></figure><p>「input.webm」が読み込む動画のファイル名、「600」が分割時の1動画の秒数、600秒なので10分ってことですね。</p><p><img src="image-501.png" alt="ffmpeg 動画分割" loading="lazy"></p><h3 id="切り抜きの作成"><a href="#切り抜きの作成" class="headerlink" title="切り抜きの作成"></a>切り抜きの作成</h3><p>Shotcut で切り抜きを作成していきます。</p><p>使い方は割愛、プロキシだけは設定しておいた方がいいと思います。</p><p><img src="image-502.png" alt="Shotcut プロキシ設定" loading="lazy"></p><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="コマンドプロンプトを開くには？"><a href="#コマンドプロンプトを開くには？" class="headerlink" title="コマンドプロンプトを開くには？"></a>コマンドプロンプトを開くには？</h3><p>コマンドプロンプトはどこで開いてもいいってわけではないです。</p><p>指定のフォルダーで開くには、エクスプローラーのアドレスバーに「cmd」と入力してエンターキーを押すと開くことができます。</p><p><img src="image-497.png" loading="lazy"></p><p>このように、エクスプローラーと同じフォルダーでコマンドプロンプトが開きます。</p><p><img src="image-498.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近ホロライブにハマってしまい、常に配信を流している状態までになってしまいました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/so_noita/status/1535989024552550402?s=20&amp;t=8aF76r39TFJB9wqa</summary>
      
    
    
    
    
    <category term="youtube" scheme="https://noitaro.github.io/tags/youtube/"/>
    
  </entry>
  
  <entry>
    <title>【Python】スクレイピング エラー</title>
    <link href="https://noitaro.github.io/selenium-4-3-0/"/>
    <id>https://noitaro.github.io/selenium-4-3-0/</id>
    <published>2022-09-18T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.615Z</updated>
    
    <content type="html"><![CDATA[<p>久しぶりに Selenium のスクレイピングをしようと思ったら、エラーで動かなくなったのでその対処法。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Python 3.10.1</li><li>Selenium 4.4.3</li></ul><h2 id="エラー"><a href="#エラー" class="headerlink" title="エラー"></a>エラー</h2><p>XPath を指定してエレメントを取得しようとしたら、次のエラーが発生。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;WebDriver&#x27; object has no attribute &#x27;find_element_by_xpath&#x27;</span><br></pre></td></tr></table></figure><p><img src="image-490.png" loading="lazy"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Selenium 4.3.0 で削除されていた。</p><p><a href="https://github.com/SeleniumHQ/selenium/blob/trunk/py/CHANGES#L24">https://github.com/SeleniumHQ/selenium/blob/trunk/py/CHANGES#L24</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Deprecated find_element_by_* and find_elements_by_* are now removed</span><br><span class="line">SeleniumHQ/selenium: A browser automation framework and ecosystem.</span><br></pre></td></tr></table></figure><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>Selenium 4.3.0 以降は次のコードを使う。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver # pip install selenium</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=&quot;./chromedriver_105.0.5195.19.exe&quot;)</span><br><span class="line">driver.implicitly_wait(20)</span><br><span class="line"></span><br><span class="line">driver.get(&quot;https://www.yahoo.co.jp/&quot;)</span><br><span class="line"></span><br><span class="line">driver.find_element(By.XPATH, &#x27;//*[@id=&quot;ContentWrapper&quot;]/header/section[1]/div/form/fieldset/span/input&#x27;)</span><br><span class="line"> </span><br><span class="line">driver.close()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;久しぶりに Selenium のスクレイピングをしようと思ったら、エラーで動かなくなったのでその対処法。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Wind</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="scraping" scheme="https://noitaro.github.io/tags/scraping/"/>
    
    <category term="selenium" scheme="https://noitaro.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>Vuetify テーブル並び替え</title>
    <link href="https://noitaro.github.io/simple-tables-draggable/"/>
    <id>https://noitaro.github.io/simple-tables-draggable/</id>
    <published>2022-09-11T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.615Z</updated>
    
    <content type="html"><![CDATA[<p>Vuetify の <a href="https://vuetifyjs.com/ja/components/simple-tables/">v-simple-tabl</a>e で、マウスドラッグによる行の並び替え方法。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Vue 2.6.14</li><li>Vuetify 2.6.0</li></ul><h2 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;v-container&gt;</span><br><span class="line">    &lt;v-row&gt;</span><br><span class="line">      &lt;v-col cols=&quot;auto&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;my-parts&quot;&gt;</span><br><span class="line">          &lt;v-simple-table&gt;</span><br><span class="line">            &lt;template v-slot:default&gt;</span><br><span class="line">              &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                  &lt;th class=&quot;text-left&quot;&gt;Name&lt;/th&gt;</span><br><span class="line">                  &lt;th class=&quot;text-left&quot;&gt;Calories&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">              &lt;/thead&gt;</span><br><span class="line">              &lt;transition-group name=&quot;fruits-list&quot; tag=&quot;tbody&quot;&gt;</span><br><span class="line">                &lt;tr</span><br><span class="line">                  v-for=&quot;(item, index) in desserts&quot;</span><br><span class="line">                  :key=&quot;item.name&quot;</span><br><span class="line">                  draggable</span><br><span class="line">                  @dragstart=&quot;dragList($event, index)&quot;</span><br><span class="line">                  @drop=&quot;dropList($event, index)&quot;</span><br><span class="line">                  @dragover.prevent</span><br><span class="line">                  @dragenter.prevent</span><br><span class="line">                &gt;</span><br><span class="line">                  &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;&#123;&#123; item.calories &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">              &lt;/transition-group&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/v-simple-table&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/v-col&gt;</span><br><span class="line">    &lt;/v-row&gt;</span><br><span class="line">  &lt;/v-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;HelloWorld&quot;,</span><br><span class="line"></span><br><span class="line">  data: () =&gt; (&#123;</span><br><span class="line">    desserts: [</span><br><span class="line">      &#123; name: &quot;Frozen Yogurt&quot;, calories: 159 &#125;,</span><br><span class="line">      &#123; name: &quot;Ice cream sandwich&quot;, calories: 237 &#125;,</span><br><span class="line">      &#123; name: &quot;Eclair&quot;, calories: 262 &#125;,</span><br><span class="line">      &#123; name: &quot;Cupcake&quot;, calories: 305 &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;),</span><br><span class="line">  methods: &#123;</span><br><span class="line">    dragList(event, dragIndex) &#123;</span><br><span class="line">      event.dataTransfer.effectAllowed = &quot;move&quot;;</span><br><span class="line">      event.dataTransfer.dropEffect = &quot;move&quot;;</span><br><span class="line">      event.dataTransfer.setData(&quot;drag-index&quot;, dragIndex);</span><br><span class="line">    &#125;,</span><br><span class="line">    dropList(event, dropIndex) &#123;</span><br><span class="line">      const dragIndex = event.dataTransfer.getData(&quot;drag-index&quot;);</span><br><span class="line">      const deleteList = this.desserts.splice(dragIndex, 1);</span><br><span class="line">      this.desserts.splice(dropIndex, 0, deleteList[0]);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.fruits-list-move &#123;</span><br><span class="line">  transition: transform 0.3s;</span><br><span class="line">&#125;</span><br><span class="line">.my-parts td &#123;</span><br><span class="line">  border-left: thin solid rgba(0, 0, 0, 0.12);</span><br><span class="line">&#125;</span><br><span class="line">.my-parts td:last-child &#123;</span><br><span class="line">  border-right: thin solid rgba(0, 0, 0, 0.12);</span><br><span class="line">&#125;</span><br><span class="line">.my-parts tr:last-child td &#123;</span><br><span class="line">  border-bottom: thin solid rgba(0, 0, 0, 0.12);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p><img src="simple-tables-draggable.gif" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vuetify の &lt;a href=&quot;https://vuetifyjs.com/ja/components/simple-tables/&quot;&gt;v-simple-tabl&lt;/a&gt;e で、マウスドラッグによる行の並び替え方法。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="vue" scheme="https://noitaro.github.io/tags/vue/"/>
    
    <category term="vuetify" scheme="https://noitaro.github.io/tags/vuetify/"/>
    
  </entry>
  
  <entry>
    <title>Tauri を試す</title>
    <link href="https://noitaro.github.io/tauri/"/>
    <id>https://noitaro.github.io/tauri/</id>
    <published>2022-09-03T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.651Z</updated>
    
    <content type="html"><![CDATA[<p>Tauri とは、Web技術でデスクトップアプリを作成できるフレームワークです。同じようなフレームワークとして Electron がありますが、Electron よりもファイルサイズやメモリ使用量が小さい点が特徴です。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li><p>Windows 11 Home 21H2</p></li><li><p>rustc 1.63.0 (4b91a6ea7 2022-08-08)</p></li><li><p>node.js v16.13.1</p></li></ul><h3 id="Microsoft-Visual-Studio-C-build-tools"><a href="#Microsoft-Visual-Studio-C-build-tools" class="headerlink" title="Microsoft Visual Studio C++ build tools"></a>Microsoft Visual Studio C++ build tools</h3><p>アプリをビルドするには <a href="https://www.rust-lang.org/ja">Rust</a> が必要なため、Microsoft Visual Studio の「C++ build tools」をインストールします。</p><p>C++ デスクトップ開発 にチェックを入れて、有効化させます。</p><p><img src="image-479.png" loading="lazy"></p><h3 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h3><p><a href="https://www.rust-lang.org/ja/tools/install">公式サイト</a> からインストーラーをダウンロードして、インストールしておきます。</p><p>rustup-init.exe</p><p><img src="image-480.png" loading="lazy"></p><p>インストーラーを実行して「ENTER」キーを押すと、Rust がインストールされます。</p><p><img src="image-481.png" loading="lazy"></p><p>次のコマンドでインストールされているか確認できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustc --version</span><br></pre></td></tr></table></figure><p><img src="image-482.png" loading="lazy"></p><p>また WSL2 が有効になっている場合、次のコマンドで Rust をインストールすることができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="Tauri-プロジェクト作成"><a href="#Tauri-プロジェクト作成" class="headerlink" title="Tauri プロジェクト作成"></a>Tauri プロジェクト作成</h3><p>今回は npm を使って Tauri プロジェクト を作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create tauri-app</span><br></pre></td></tr></table></figure><p><img src="image-483.png" loading="lazy"></p><h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><p>次のコマンドを実行すると、Rust がビルドされて Tauri が実行されます。</p><p>初回は Rust を全てビルドするため時間がかかります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd .\tauri-app\</span><br><span class="line">npm install</span><br><span class="line">npm run tauri dev</span><br></pre></td></tr></table></figure><p><img src="image-484.png" loading="lazy"></p><h3 id="EXE作成"><a href="#EXE作成" class="headerlink" title="EXE作成"></a>EXE作成</h3><p>次のコマンドでプロジェクトをパッケージ化できます。</p><p>初回は Rust を全てビルドするため時間がかかります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run tauri build</span><br></pre></td></tr></table></figure><p>プロジェクトフォルダー内にEXEファイルが作成されます。</p><p>「.&#x2F;tauri-app&#x2F;src-tauri\target&#x2F;release&#x2F;tauri-app.exe」</p><p><img src="image-487.png" loading="lazy"></p><h4 id="エラー"><a href="#エラー" class="headerlink" title="エラー"></a>エラー</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error You must change the bundle identifier in `tauri.conf.json &gt; tauri &gt; bundle &gt; identifier`. The default value `com.tauri.dev` is not allowed as it must be unique across applications.</span><br></pre></td></tr></table></figure><p><img src="image-485.png" loading="lazy"></p><p>src-tauri &gt; tauri.conf.json の 32行目 identifier を変更しないとエラーになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;identifier&quot;: &quot;com.tauri.dev&quot;,</span><br><span class="line">↓</span><br><span class="line">&quot;identifier&quot;: &quot;com.tauri.example&quot;,</span><br></pre></td></tr></table></figure><p><img src="image-486.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><ul><li><p>インストーラーも作れる。</p></li><li><p>実行がメチャクチャ早い。</p></li><li><p>EXEファイルのみで動く、しかも6MB！！</p></li></ul><p>Electron だと EXE 以外にもファイルたくさんいるが、Tauri だとEXE1つシンプルで非常によい。</p><p>Electron については <a href="https://noitaro.github.io/electron-exe/">過去記事</a> をご覧ください。</p><p><a href="https://noitaro.github.io/electron-exe/">https://noitaro.github.io/electron-exe/</a></p><h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><p><a href="https://tauri.app/v1/guides/getting-started/prerequisites">https://tauri.app/v1/guides/getting-started/prerequisites</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Tauri とは、Web技術でデスクトップアプリを作成できるフレームワークです。同じようなフレームワークとして Electron がありますが、Electron よりもファイルサイズやメモリ使用量が小さい点が特徴です。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
    <category term="tauri" scheme="https://noitaro.github.io/tags/tauri/"/>
    
  </entry>
  
  <entry>
    <title>Vuetify テキストフィールドにフォーカスしたとき全選択</title>
    <link href="https://noitaro.github.io/vuetify-text-field-focused/"/>
    <id>https://noitaro.github.io/vuetify-text-field-focused/</id>
    <published>2022-08-27T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.783Z</updated>
    
    <content type="html"><![CDATA[<p>Vuetify の <a href="https://vuetifyjs.com/ja/components/text-fields/">v-text-field</a> にフォーカスしたとき、入力済み文字を全選択状態にする方法。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Vue 2.6.14</li><li>Vuetify 2.6.0</li></ul><h2 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;v-container&gt;</span><br><span class="line">    &lt;v-row&gt;</span><br><span class="line">      &lt;v-col cols=&quot;2&quot;&gt;</span><br><span class="line">        &lt;v-text-field</span><br><span class="line">          v-model=&quot;title&quot;</span><br><span class="line">          label=&quot;Regular&quot;</span><br><span class="line">          @focus=&quot;textFieldFocused&quot;</span><br><span class="line">        &gt;&lt;/v-text-field&gt;</span><br><span class="line">      &lt;/v-col&gt;</span><br><span class="line">    &lt;/v-row&gt;</span><br><span class="line">  &lt;/v-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;HelloWorld&quot;,</span><br><span class="line"></span><br><span class="line">  data: () =&gt; (&#123;</span><br><span class="line">    title: &quot;Preliminary report&quot;,</span><br><span class="line">  &#125;),</span><br><span class="line">  methods: &#123;</span><br><span class="line">    textFieldFocused(focusEvent) &#123;</span><br><span class="line">      focusEvent.target.select();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>テキストフィールドをマウスクリックしたら、文字が全選択されるようになります。</p><p><img src="image-477.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vuetify の &lt;a href=&quot;https://vuetifyjs.com/ja/components/text-fields/&quot;&gt;v-text-field&lt;/a&gt; にフォーカスしたとき、入力済み文字を全選択状態にする方法。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="vue" scheme="https://noitaro.github.io/tags/vue/"/>
    
    <category term="vuetify" scheme="https://noitaro.github.io/tags/vuetify/"/>
    
  </entry>
  
  <entry>
    <title>【C#】Trello カード操作いろいろ</title>
    <link href="https://noitaro.github.io/trello-card/"/>
    <id>https://noitaro.github.io/trello-card/</id>
    <published>2022-08-13T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.679Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/cdmdotnet/Manatee.Trello">Manatee.Trello</a> ライブラリを使っていろいろな操作をしていきます。</p><p>もち備忘録です！</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Visual Studio Community 2022</li><li>.NET 6.0</li><li>Manatee.Trello 4.4.2</li></ul><p><img src="image-446.png" loading="lazy"></p><h2 id="認証トークン取得"><a href="#認証トークン取得" class="headerlink" title="認証トークン取得"></a>認証トークン取得</h2><p>カードを作成するには、APIキーと認証トークンが必要です。</p><p><a href="https://trello.com/app-key">次のページ</a> からAPIキーと認証トークンを取得。</p><p><img src="image-447.png" loading="lazy"></p><h3 id="APIキー"><a href="#APIキー" class="headerlink" title="APIキー"></a>APIキー</h3><p><img src="image-448.png" loading="lazy"></p><h3 id="認証トークン"><a href="#認証トークン" class="headerlink" title="認証トークン"></a>認証トークン</h3><p>そのままトークンリンクから認証トークンを作成します。</p><p><img src="image-449.png" loading="lazy"></p><p><img src="image-450.png" loading="lazy"></p><h2 id="カード作成"><a href="#カード作成" class="headerlink" title="カード作成"></a>カード作成</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using Manatee.Trello;</span><br><span class="line"></span><br><span class="line">TrelloAuthorization.Default.AppKey = &quot;[your application key]&quot;;</span><br><span class="line">TrelloAuthorization.Default.UserToken = &quot;[your user token]&quot;;</span><br><span class="line"></span><br><span class="line">ITrelloFactory factory = new TrelloFactory();</span><br><span class="line"></span><br><span class="line">var list = factory.List(&quot;[your list id]&quot;);</span><br><span class="line"></span><br><span class="line">var card = await list.Cards.Add(&quot;カード名&quot;);</span><br><span class="line">card.Description = &quot;カード説明文&quot;;</span><br><span class="line"></span><br><span class="line">await TrelloProcessor.Flush();</span><br></pre></td></tr></table></figure><p><img src="image-454.png" loading="lazy"></p><h3 id="リストIDの調べ方"><a href="#リストIDの調べ方" class="headerlink" title="リストIDの調べ方"></a>リストIDの調べ方</h3><p>URLに「.json」と入力するとJSON型式で表示されるので、リスト名で検索する。</p><p><img src="image-459.png" loading="lazy"></p><h2 id="リスト移動"><a href="#リスト移動" class="headerlink" title="リスト移動"></a>リスト移動</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using Manatee.Trello;</span><br><span class="line"></span><br><span class="line">TrelloAuthorization.Default.AppKey = &quot;[your application key]&quot;;</span><br><span class="line">TrelloAuthorization.Default.UserToken = &quot;[your user token]&quot;;</span><br><span class="line"></span><br><span class="line">ITrelloFactory factory = new TrelloFactory();</span><br><span class="line"></span><br><span class="line">var card = factory.Card(&quot;[your card id]&quot;);</span><br><span class="line"></span><br><span class="line">var list = factory.List(&quot;[your list id]&quot;); // 移動先リスト</span><br><span class="line">card.List = list;</span><br><span class="line"></span><br><span class="line">await TrelloProcessor.Flush();</span><br></pre></td></tr></table></figure><p><img src="image-453.png" loading="lazy"></p><h3 id="カードIDの調べ方"><a href="#カードIDの調べ方" class="headerlink" title="カードIDの調べ方"></a>カードIDの調べ方</h3><p>ライブラリを使っている場合は、URLのIDで指定できます。</p><p><img src="image-456.png" loading="lazy"></p><p>リストIDを調べたときと同じように「.json」を指定して調べることもできます。カードの場合は先頭のIDがカードIDになります。</p><p><img src="image-460.png" loading="lazy"></p><h2 id="リマインダー設定"><a href="#リマインダー設定" class="headerlink" title="リマインダー設定"></a>リマインダー設定</h2><p>ライブラリが非対応でした。</p><p><a href="https://developer.atlassian.com/cloud/trello/rest/api-group-cards/">公式リファレンス</a> にも載っていなかったので、自己責任でお願いします。</p><ul><li>start -&gt; 開始日</li><li>due -&gt; 期限</li><li>dueReminder -&gt; リマインダー</li></ul><p>リマインダーの値は次を設定してください。</p><ul><li>“-1”:なし</li><li>“0”:期限になったとき</li><li>“5”:5分前</li><li>“10”:10分前</li><li>“15”:15分前</li><li>“60”:1時間前</li><li>“120”:2時間前</li><li>“1440”:1日前</li><li>“2880”:2日前</li></ul><p>上記以外も設定できますが、カードのリマインダー設定には表示されません。一応設定はできてるみたい。</p><p><img src="image-462.png" loading="lazy"></p><h3 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.Net.Http.Headers;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Text.Json;</span><br><span class="line"></span><br><span class="line">var parameters = new Dictionary&lt;string, string&gt;()</span><br><span class="line">&#123;</span><br><span class="line">    &#123; &quot;key&quot;, &quot;APIKey&quot; &#125;,</span><br><span class="line">    &#123; &quot;token&quot;, &quot;APIToken&quot; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var queryString = await new FormUrlEncodedContent(parameters).ReadAsStringAsync();</span><br><span class="line"></span><br><span class="line">var httpRequestMessage = new HttpRequestMessage(HttpMethod.Put,</span><br><span class="line">    $&quot;https://api.trello.com/1/cards/&#123;cardId&#125;?&#123;queryString&#125;&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    Headers = &#123; &#123; HeaderNames.Accept, &quot;application/json&quot; &#125;, &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var payload = new Dictionary&lt;string, string&gt;()</span><br><span class="line">&#123;</span><br><span class="line">    &#123; &quot;start&quot;, &quot;2022-08-15T00:00:00+09:00&quot; &#125;, // 開始日</span><br><span class="line">    &#123; &quot;due&quot;, &quot;2022-08-16T00:00:00+09:00&quot; &#125;, // 期限</span><br><span class="line">    &#123; &quot;dueReminder&quot;, &quot;2880&quot; &#125;, // リマインダー &quot;-1&quot;:なし、&quot;0&quot;:期限になったとき、&quot;5&quot;:5分前、&quot;10&quot;:10分前、&quot;15&quot;:15分前、&quot;60&quot;:1時間前、&quot;120&quot;:2時間前、&quot;1440&quot;:1日前、&quot;2880&quot;:2日前</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">httpRequestMessage.Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, &quot;application/json&quot;);</span><br><span class="line"></span><br><span class="line">var httpClient = new HttpClient();</span><br><span class="line">await httpClient.SendAsync(httpRequestMessage);</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;https://api.trello.com/1/cards/&#123;cardId&#125;&quot;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">   &quot;Accept&quot;: &quot;application/json&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query = &#123;</span><br><span class="line">   &#x27;start&#x27;: &quot;2022-08-15T00:00:00+09:00&quot;, # 開始日</span><br><span class="line">   &#x27;due&#x27;: &quot;2022-08-16T00:00:00+09:00&quot;, # 期限</span><br><span class="line">   &#x27;dueReminder&#x27;: &quot;2880&quot;, # リマインダー &quot;-1&quot;:なし、&quot;0&quot;:期限になったとき、&quot;5&quot;:5分前、&quot;10&quot;:10分前、&quot;15&quot;:15分前、&quot;60&quot;:1時間前、&quot;120&quot;:2時間前、&quot;1440&quot;:1日前、&quot;2880&quot;:2日前</span><br><span class="line">   &#x27;key&#x27;: &#x27;APIKey&#x27;,</span><br><span class="line">   &#x27;token&#x27;: &#x27;APIToken&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.request(</span><br><span class="line">   &quot;PUT&quot;,</span><br><span class="line">   url,</span><br><span class="line">   headers=headers,</span><br><span class="line">   params=query</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/cdmdotnet/Manatee.Trello&quot;&gt;Manatee.Trello&lt;/a&gt; ライブラリを使っていろいろな操作をしていきます。&lt;/p&gt;
&lt;p&gt;もち備忘録です！&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="asp-net" scheme="https://noitaro.github.io/tags/asp-net/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
  </entry>
  
  <entry>
    <title>【C#】Google スプレッドシートのセル操作</title>
    <link href="https://noitaro.github.io/google-spreadsheet/"/>
    <id>https://noitaro.github.io/google-spreadsheet/</id>
    <published>2022-08-07T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.111Z</updated>
    
    <content type="html"><![CDATA[<p>忘れないよう備忘録です。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Visual Studio Community 2022</li><li>.NET 6.0</li><li>Google.Apis.Sheets.v4 1.57.0.2727</li></ul><p>今回はトップレベルステートメントを使わないでやってみます。6.0 からの新機能！</p><p><img src="image-415.png" alt="最上位レベルのステートメントを使用しない" loading="lazy"></p><p>チェックを外すとMainメソッドがなくなります。</p><p><img src="image-416.png" alt="Mainメソッド無し" loading="lazy"></p><h3 id="NuGet"><a href="#NuGet" class="headerlink" title="NuGet"></a>NuGet</h3><p>Google.Apis.Sheets.v4 1.57.0.2727</p><p><img src="image-417.png" alt="Google.Apis.Sheets.v4" loading="lazy"></p><h3 id="Google-スプレッドシート"><a href="#Google-スプレッドシート" class="headerlink" title="Google スプレッドシート"></a>Google スプレッドシート</h3><p>分かりやすいように、つぎのようなデータを準備しました。</p><p><img src="image-435.png" alt="Google スプレッドシート" loading="lazy"></p><p>後に出てくる「spreadsheetId」はURL部にあるのをコピペします。</p><p><img src="image-436.png" alt="spreadsheetId" loading="lazy"></p><h2 id="Google-Cloud-Platform"><a href="#Google-Cloud-Platform" class="headerlink" title="Google Cloud Platform"></a>Google Cloud Platform</h2><p>Google スプレッドシート を操作するためには認証情報が必要です。今回はJSONファイルを .NETプロジェクトに読み込ませます。</p><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><p><a href="https://console.cloud.google.com/">GCPコンソール</a> を開いて新しいプロジェクトを作成します。</p><p><img src="image-418.png" alt="プロジェクト作成" loading="lazy"></p><h3 id="ライブラリ追加"><a href="#ライブラリ追加" class="headerlink" title="ライブラリ追加"></a>ライブラリ追加</h3><p>「APIとサービス」&gt;「ライブラリ」を選択し、次の2つのライブラリを有効化します。</p><p><img src="image-419.png" alt="ライブラリを選択" loading="lazy"></p><h4 id="Google-Drive-API"><a href="#Google-Drive-API" class="headerlink" title="Google Drive API"></a>Google Drive API</h4><p><img src="image-420.png" alt="Google Drive API" loading="lazy"></p><h4 id="Google-Sheets-API"><a href="#Google-Sheets-API" class="headerlink" title="Google Sheets API"></a>Google Sheets API</h4><p><img src="image-421.png" alt="Google Sheets API" loading="lazy"></p><h3 id="サービスアカウント作成"><a href="#サービスアカウント作成" class="headerlink" title="サービスアカウント作成"></a>サービスアカウント作成</h3><p>「APIとサービス」&gt;「認証情報」を選択し、サービスアカウントを作成します。</p><p><img src="image-422.png" alt="認証情報を選択" loading="lazy"></p><p>「CREATE CREDENTIALS」&gt;「サービスアカウント」を選択し、</p><p><img src="image-423.png" alt="サービスアカウントを選択" loading="lazy"></p><p>適当なサービスアカウントIDを入力して、サービスアカウントを作成します。</p><p><img src="image-425.png" alt="サービスアカウントIDを入力" loading="lazy"></p><h3 id="認証情報作成"><a href="#認証情報作成" class="headerlink" title="認証情報作成"></a>認証情報作成</h3><p>「認証情報」画面に戻ったら、今作ったサービスアカウントを選択し、</p><p><img src="image-426.png" alt="サービスアカウントを選択" loading="lazy"></p><p>キータブの「新しい鍵を作成」で認証情報を作成します。</p><p><img src="image-427.png" alt="新しい鍵を作成" loading="lazy"></p><p>JSON型式で作成します。</p><p><img src="image-428.png" alt="JSON型式" loading="lazy"></p><p>.NETプロジェクトフォルダー内に、JSON型式の認証ファイルを保存します。</p><p><img src="image-429.png" alt="JSON型式の認証ファイルを保存" loading="lazy"></p><h2 id="NETプロジェクトの設定"><a href="#NETプロジェクトの設定" class="headerlink" title=".NETプロジェクトの設定"></a>.NETプロジェクトの設定</h2><p>認証ファイルを.NETプロジェクトで読み込むように設定します。</p><p>ソリューションエクスプローラーから、認証ファイルのプロパティを選択し、</p><p><img src="image-430.png" alt="ソリューションエクスプローラー &gt; プロパティ" loading="lazy"></p><p>プロパティの「出力ディレクトリにコピー」を「新しい場合はコピーする」に変更。</p><p><img src="image-431.png" alt="新しい場合はコピーする" loading="lazy"></p><h2 id="取得"><a href="#取得" class="headerlink" title="取得"></a>取得</h2><h3 id="単一セルの取得"><a href="#単一セルの取得" class="headerlink" title="単一セルの取得"></a>単一セルの取得</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using Google.Apis.Auth.OAuth2;</span><br><span class="line">using Google.Apis.Services;</span><br><span class="line">using Google.Apis.Sheets.v4;</span><br><span class="line"></span><br><span class="line">using var fileStream = new FileStream(&quot;./disco-technique-358701-49da36e0a747.json&quot;, FileMode.Open, FileAccess.Read);</span><br><span class="line">var googleCredential = GoogleCredential.FromStream(fileStream).CreateScoped(SheetsService.Scope.Spreadsheets);</span><br><span class="line">var sheetsService = new SheetsService(new BaseClientService.Initializer() &#123; HttpClientInitializer = googleCredential &#125;);</span><br><span class="line"></span><br><span class="line">var spreadsheetId = &quot;1xYoHhSbH9IO9fwmMZykAaez0h4l5zPaommA7mOYLtj4&quot;;</span><br><span class="line">var range = &quot;シート1!B2&quot;;</span><br><span class="line"></span><br><span class="line">var request = sheetsService.Spreadsheets.Values.Get(spreadsheetId, range);</span><br><span class="line">var response = request.Execute();</span><br><span class="line">var values = response.Values;</span><br><span class="line"></span><br><span class="line">foreach (var item in values)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(string.Join(&quot;, &quot;, item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 取得結果</span><br><span class="line">// b2</span><br></pre></td></tr></table></figure><p><img src="image-437.png" loading="lazy"></p><h3 id="範囲セルの取得"><a href="#範囲セルの取得" class="headerlink" title="範囲セルの取得"></a>範囲セルの取得</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">using Google.Apis.Auth.OAuth2;</span><br><span class="line">using Google.Apis.Services;</span><br><span class="line">using Google.Apis.Sheets.v4;</span><br><span class="line"></span><br><span class="line">using var fileStream = new FileStream(&quot;./disco-technique-358701-49da36e0a747.json&quot;, FileMode.Open, FileAccess.Read);</span><br><span class="line">var googleCredential = GoogleCredential.FromStream(fileStream).CreateScoped(SheetsService.Scope.Spreadsheets);</span><br><span class="line">var sheetsService = new SheetsService(new BaseClientService.Initializer() &#123; HttpClientInitializer = googleCredential &#125;);</span><br><span class="line"></span><br><span class="line">var spreadsheetId = &quot;1xYoHhSbH9IO9fwmMZykAaez0h4l5zPaommA7mOYLtj4&quot;;</span><br><span class="line">var range = &quot;シート1!B2:E4&quot;;</span><br><span class="line"></span><br><span class="line">var request = sheetsService.Spreadsheets.Values.Get(spreadsheetId, range);</span><br><span class="line">var response = request.Execute();</span><br><span class="line">var values = response.Values;</span><br><span class="line"></span><br><span class="line">foreach (var item in values)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(string.Join(&quot;, &quot;, item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 取得結果</span><br><span class="line">// b2, c2, d2, e2</span><br><span class="line">// b3, c3, d3, e3</span><br><span class="line">// b4, c4, d4, e4</span><br></pre></td></tr></table></figure><p><img src="image-438.png" loading="lazy"></p><h3 id="複数セルの同時取得-ROWS"><a href="#複数セルの同時取得-ROWS" class="headerlink" title="複数セルの同時取得 (ROWS)"></a>複数セルの同時取得 (ROWS)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">using Google.Apis.Auth.OAuth2;</span><br><span class="line">using Google.Apis.Services;</span><br><span class="line">using Google.Apis.Sheets.v4;</span><br><span class="line">using Google.Apis.Util;</span><br><span class="line"></span><br><span class="line">using var fileStream = new FileStream(&quot;./disco-technique-358701-49da36e0a747.json&quot;, FileMode.Open, FileAccess.Read);</span><br><span class="line">var googleCredential = GoogleCredential.FromStream(fileStream).CreateScoped(SheetsService.Scope.Spreadsheets);</span><br><span class="line">var sheetsService = new SheetsService(new BaseClientService.Initializer() &#123; HttpClientInitializer = googleCredential &#125;);</span><br><span class="line"></span><br><span class="line">var spreadsheetId = &quot;1xYoHhSbH9IO9fwmMZykAaez0h4l5zPaommA7mOYLtj4&quot;;</span><br><span class="line"></span><br><span class="line">var request = sheetsService.Spreadsheets.Values.BatchGet(spreadsheetId);</span><br><span class="line">request.Ranges = new Repeatable&lt;string&gt;(new[] &#123; &quot;シート1!B2&quot;, &quot;シート1!B4:C4&quot;, &quot;シート1!B6:D6&quot; &#125;);</span><br><span class="line">request.MajorDimension = SpreadsheetsResource.ValuesResource.BatchGetRequest.MajorDimensionEnum.ROWS;</span><br><span class="line"></span><br><span class="line">var response = request.Execute();</span><br><span class="line">var valueRanges = response.ValueRanges;</span><br><span class="line"></span><br><span class="line">foreach (var valueRange in valueRanges)</span><br><span class="line">&#123;</span><br><span class="line">    foreach (var item in valueRange.Values)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(string.Join(&quot;, &quot;, item));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 取得結果</span><br><span class="line">// b2</span><br><span class="line">// b4, c4</span><br><span class="line">// b6, c6, d6</span><br></pre></td></tr></table></figure><p><img src="image-441.png" loading="lazy"></p><h3 id="複数セルの同時取得-COLUMNS"><a href="#複数セルの同時取得-COLUMNS" class="headerlink" title="複数セルの同時取得 (COLUMNS)"></a>複数セルの同時取得 (COLUMNS)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">using Google.Apis.Auth.OAuth2;</span><br><span class="line">using Google.Apis.Services;</span><br><span class="line">using Google.Apis.Sheets.v4;</span><br><span class="line">using Google.Apis.Util;</span><br><span class="line"></span><br><span class="line">using var fileStream = new FileStream(&quot;./disco-technique-358701-49da36e0a747.json&quot;, FileMode.Open, FileAccess.Read);</span><br><span class="line">var googleCredential = GoogleCredential.FromStream(fileStream).CreateScoped(SheetsService.Scope.Spreadsheets);</span><br><span class="line">var sheetsService = new SheetsService(new BaseClientService.Initializer() &#123; HttpClientInitializer = googleCredential &#125;);</span><br><span class="line"></span><br><span class="line">var spreadsheetId = &quot;1xYoHhSbH9IO9fwmMZykAaez0h4l5zPaommA7mOYLtj4&quot;;</span><br><span class="line"></span><br><span class="line">var request = sheetsService.Spreadsheets.Values.BatchGet(spreadsheetId);</span><br><span class="line">request.Ranges = new Repeatable&lt;string&gt;(new[] &#123; &quot;シート1!B2&quot;, &quot;シート1!D2:D3&quot;, &quot;シート1!F2:F4&quot; &#125;);</span><br><span class="line">request.MajorDimension = SpreadsheetsResource.ValuesResource.BatchGetRequest.MajorDimensionEnum.COLUMNS;</span><br><span class="line"></span><br><span class="line">var response = request.Execute();</span><br><span class="line">var valueRanges = response.ValueRanges;</span><br><span class="line"></span><br><span class="line">foreach (var valueRange in valueRanges)</span><br><span class="line">&#123;</span><br><span class="line">    foreach (var item in valueRange.Values)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(string.Join(&quot;, &quot;, item));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 取得結果</span><br><span class="line">// b2</span><br><span class="line">// d2, d3</span><br><span class="line">// f2, f3, f4</span><br></pre></td></tr></table></figure><p><img src="image-442.png" loading="lazy"></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="単一セルの更新"><a href="#単一セルの更新" class="headerlink" title="単一セルの更新"></a>単一セルの更新</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using Google.Apis.Auth.OAuth2;</span><br><span class="line">using Google.Apis.Services;</span><br><span class="line">using Google.Apis.Sheets.v4;</span><br><span class="line">using Google.Apis.Sheets.v4.Data;</span><br><span class="line"></span><br><span class="line">using var fileStream = new FileStream(&quot;./disco-technique-358701-49da36e0a747.json&quot;, FileMode.Open, FileAccess.Read);</span><br><span class="line">var googleCredential = GoogleCredential.FromStream(fileStream).CreateScoped(SheetsService.Scope.Spreadsheets);</span><br><span class="line">var sheetsService = new SheetsService(new BaseClientService.Initializer() &#123; HttpClientInitializer = googleCredential &#125;);</span><br><span class="line"></span><br><span class="line">var spreadsheetId = &quot;1xYoHhSbH9IO9fwmMZykAaez0h4l5zPaommA7mOYLtj4&quot;;</span><br><span class="line"></span><br><span class="line">var body = new ValueRange() &#123; Values = new List&lt;IList&lt;object&gt;&gt;() &#123; new List&lt;object&gt;() &#123; &quot;new_b2&quot; &#125; &#125; &#125;;</span><br><span class="line">var request = sheetsService.Spreadsheets.Values.Update(body, spreadsheetId, &quot;シート1!B2&quot;);</span><br><span class="line">request.ValueInputOption = SpreadsheetsResource.ValuesResource.UpdateRequest.ValueInputOptionEnum.USERENTERED;</span><br><span class="line">request.Execute();</span><br></pre></td></tr></table></figure><p><img src="image-444.png" loading="lazy"></p><h3 id="範囲セルの更新"><a href="#範囲セルの更新" class="headerlink" title="範囲セルの更新"></a>範囲セルの更新</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using Google.Apis.Auth.OAuth2;</span><br><span class="line">using Google.Apis.Services;</span><br><span class="line">using Google.Apis.Sheets.v4;</span><br><span class="line">using Google.Apis.Sheets.v4.Data;</span><br><span class="line"></span><br><span class="line">using var fileStream = new FileStream(&quot;./disco-technique-358701-49da36e0a747.json&quot;, FileMode.Open, FileAccess.Read);</span><br><span class="line">var googleCredential = GoogleCredential.FromStream(fileStream).CreateScoped(SheetsService.Scope.Spreadsheets);</span><br><span class="line">var sheetsService = new SheetsService(new BaseClientService.Initializer() &#123; HttpClientInitializer = googleCredential &#125;);</span><br><span class="line"></span><br><span class="line">var spreadsheetId = &quot;1xYoHhSbH9IO9fwmMZykAaez0h4l5zPaommA7mOYLtj4&quot;;</span><br><span class="line"></span><br><span class="line">var body = new ValueRange();</span><br><span class="line">body.Values = new List&lt;IList&lt;object&gt;&gt;()</span><br><span class="line">&#123;</span><br><span class="line">    new List&lt;object&gt;() &#123; &quot;new_b2&quot;, &quot;new_c2&quot;, &quot;new_d2&quot;, &quot;new_e2&quot; &#125;,</span><br><span class="line">    new List&lt;object&gt;() &#123; &quot;new_b3&quot;, &quot;new_c3&quot;, &quot;new_d3&quot;, &quot;new_e3&quot; &#125;,</span><br><span class="line">    new List&lt;object&gt;() &#123; &quot;new_b4&quot;, &quot;new_c4&quot;, &quot;new_d4&quot;, &quot;new_e4&quot; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var request = sheetsService.Spreadsheets.Values.Update(body, spreadsheetId, &quot;シート1!B2:E4&quot;);</span><br><span class="line">request.ValueInputOption = SpreadsheetsResource.ValuesResource.UpdateRequest.ValueInputOptionEnum.USERENTERED;</span><br><span class="line">request.Execute();</span><br></pre></td></tr></table></figure><p><img src="image-443.png" loading="lazy"></p><h3 id="複数セルの同時更新-ROWS"><a href="#複数セルの同時更新-ROWS" class="headerlink" title="複数セルの同時更新 (ROWS)"></a>複数セルの同時更新 (ROWS)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using Google.Apis.Auth.OAuth2;</span><br><span class="line">using Google.Apis.Services;</span><br><span class="line">using Google.Apis.Sheets.v4;</span><br><span class="line">using Google.Apis.Sheets.v4.Data;</span><br><span class="line"></span><br><span class="line">using var fileStream = new FileStream(&quot;./disco-technique-358701-49da36e0a747.json&quot;, FileMode.Open, FileAccess.Read);</span><br><span class="line">var googleCredential = GoogleCredential.FromStream(fileStream).CreateScoped(SheetsService.Scope.Spreadsheets);</span><br><span class="line">var sheetsService = new SheetsService(new BaseClientService.Initializer() &#123; HttpClientInitializer = googleCredential &#125;);</span><br><span class="line"></span><br><span class="line">var spreadsheetId = &quot;1xYoHhSbH9IO9fwmMZykAaez0h4l5zPaommA7mOYLtj4&quot;;</span><br><span class="line"></span><br><span class="line">var valueRanges = new List&lt;ValueRange&gt;();</span><br><span class="line">valueRanges.Add(new ValueRange() &#123; MajorDimension = &quot;ROWS&quot;, Range = &quot;シート1!B2&quot;, Values = new List&lt;IList&lt;object&gt;&gt;() &#123; new List&lt;object&gt;() &#123; &quot;new_b2&quot; &#125; &#125;, &#125;);</span><br><span class="line">valueRanges.Add(new ValueRange() &#123; MajorDimension = &quot;ROWS&quot;, Range = &quot;シート1!B4:C4&quot;, Values = new List&lt;IList&lt;object&gt;&gt;() &#123; new List&lt;object&gt;() &#123; &quot;new_b4&quot;, &quot;new_c4&quot; &#125; &#125;, &#125;);</span><br><span class="line">valueRanges.Add(new ValueRange() &#123; MajorDimension = &quot;ROWS&quot;, Range = &quot;シート1!B6:D6&quot;, Values = new List&lt;IList&lt;object&gt;&gt;() &#123; new List&lt;object&gt;() &#123; &quot;new_b6&quot;, &quot;new_c6&quot;, &quot;new_d6&quot; &#125; &#125;, &#125;);</span><br><span class="line"></span><br><span class="line">var body = new BatchUpdateValuesRequest() &#123; Data = valueRanges, ValueInputOption = &quot;USER_ENTERED&quot; &#125;;</span><br><span class="line">var request = sheetsService.Spreadsheets.Values.BatchUpdate(body, spreadsheetId);</span><br><span class="line">request.Execute();</span><br></pre></td></tr></table></figure><p><img src="image-439.png" loading="lazy"></p><h3 id="複数セルの同時更新-COLUMNS"><a href="#複数セルの同時更新-COLUMNS" class="headerlink" title="複数セルの同時更新 (COLUMNS)"></a>複数セルの同時更新 (COLUMNS)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using Google.Apis.Auth.OAuth2;</span><br><span class="line">using Google.Apis.Services;</span><br><span class="line">using Google.Apis.Sheets.v4;</span><br><span class="line">using Google.Apis.Sheets.v4.Data;</span><br><span class="line"></span><br><span class="line">using var fileStream = new FileStream(&quot;./disco-technique-358701-49da36e0a747.json&quot;, FileMode.Open, FileAccess.Read);</span><br><span class="line">var googleCredential = GoogleCredential.FromStream(fileStream).CreateScoped(SheetsService.Scope.Spreadsheets);</span><br><span class="line">var sheetsService = new SheetsService(new BaseClientService.Initializer() &#123; HttpClientInitializer = googleCredential &#125;);</span><br><span class="line"></span><br><span class="line">var spreadsheetId = &quot;1xYoHhSbH9IO9fwmMZykAaez0h4l5zPaommA7mOYLtj4&quot;;</span><br><span class="line"></span><br><span class="line">var valueRanges = new List&lt;ValueRange&gt;();</span><br><span class="line">valueRanges.Add(new ValueRange() &#123; MajorDimension = &quot;COLUMNS&quot;, Range = &quot;シート1!B2&quot;, Values = new List&lt;IList&lt;object&gt;&gt;() &#123; new List&lt;object&gt;() &#123; &quot;new_b2&quot; &#125; &#125;, &#125;);</span><br><span class="line">valueRanges.Add(new ValueRange() &#123; MajorDimension = &quot;COLUMNS&quot;, Range = &quot;シート1!D2:D3&quot;, Values = new List&lt;IList&lt;object&gt;&gt;() &#123; new List&lt;object&gt;() &#123; &quot;new_d2&quot;, &quot;new_d3&quot; &#125; &#125;, &#125;);</span><br><span class="line">valueRanges.Add(new ValueRange() &#123; MajorDimension = &quot;COLUMNS&quot;, Range = &quot;シート1!F2:F4&quot;, Values = new List&lt;IList&lt;object&gt;&gt;() &#123; new List&lt;object&gt;() &#123; &quot;new_f2&quot;, &quot;new_f3&quot;, &quot;new_f4&quot; &#125; &#125;, &#125;);</span><br><span class="line"></span><br><span class="line">var body = new BatchUpdateValuesRequest() &#123; Data = valueRanges, ValueInputOption = &quot;USER_ENTERED&quot; &#125;;</span><br><span class="line">var request = sheetsService.Spreadsheets.Values.BatchUpdate(body, spreadsheetId);</span><br><span class="line">request.Execute();</span><br></pre></td></tr></table></figure><p><img src="image-440.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>複数セルの同時取得や複数セルの同時更新で処理を作っておけば、単一セルでも範囲セルでも使えます。上位互換！</p><h3 id="困った点"><a href="#困った点" class="headerlink" title="困った点"></a>困った点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Google.GoogleApiException: &#x27;The service sheets has thrown an exception. HttpStatusCode is Forbidden. The caller does not have permission&#x27;</span><br></pre></td></tr></table></figure><p><img src="image-432.png" alt="GoogleApiException" loading="lazy"></p><p>Google スプレッドシート にアクセス権限が設定されていないためでした。</p><p>スプレッドシート の ファイル &gt; 共有 &gt; 他のユーザーと共有</p><p><img src="image-433.png" alt="ファイル &gt; 共有 &gt; 他のユーザーと共有" loading="lazy"></p><p>ユーザー追加でサービスアカウントのアドレスをコピペして、アクセス権限を編集者にして共有。</p><p><img src="image-434.png" alt="アクセス権限を編集者にして共有" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;忘れないよう備忘録です。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 21H2&lt;/li&gt;
&lt;li&gt;Visual Studio </summary>
      
    
    
    
    
    <category term="google" scheme="https://noitaro.github.io/tags/google/"/>
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="gcp" scheme="https://noitaro.github.io/tags/gcp/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NETCoreIdentityなしでCookie認証を使用する</title>
    <link href="https://noitaro.github.io/use-cookie-authentication/"/>
    <id>https://noitaro.github.io/use-cookie-authentication/</id>
    <published>2022-07-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.755Z</updated>
    
    <content type="html"><![CDATA[<p>公式サイトを見ながら試したのですが、なかなかに手こずったので、自分なりにやったことをまとめました。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Visual Studio Community 2022</li><li>フレームワーク: .NET 6.0</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><p>今回は「ASP.NET Core Web アプリ」で作業していきます。</p><p><img src="image-397.png" alt="プロジェクトの作成" loading="lazy"></p><p>プロジェクト名や保存場所等はお好みで変えてください。今回は「WebApplication1」で説明していきます。</p><p><img src="image-398.png" alt="プロジェクトの構成" loading="lazy"></p><ul><li>フレームワークは「.NET 6.0」を選択。</li><li>認証なし、これからCookie認証を入れてくので余分なコードが無い方が楽。</li><li>Dockerにチェック入れましたが、どっちでもいいです。Docker使わなくても問題なし。</li><li>一番下の「Do not use top-level statements」にチェック入れました。これは .NET 6.0 からの機能で、Main メソッドが隠蔽されるので、チェックを入れて隠蔽されない状態で始めていきます。</li></ul><p><img src="image-399.png" alt="追加情報の設定" loading="lazy"></p><h3 id="RazorPages-削除"><a href="#RazorPages-削除" class="headerlink" title="RazorPages 削除"></a>RazorPages 削除</h3><p>Razorページは使わないので削除。CSHTML嫌い。</p><p><img src="image-400.png" alt="Razorページの削除" loading="lazy"></p><p>「Program.cs」内からも RazorPages処理を削除。</p><ul><li>builder.Services.AddRazorPages();</li><li>app.MapRazorPages();</li></ul><p><img src="image-401.png" alt="RazorPages処理の削除" loading="lazy"></p><h3 id="Cookie認証の作成"><a href="#Cookie認証の作成" class="headerlink" title="Cookie認証の作成"></a>Cookie認証の作成</h3><p>Cookie認証するためのAPIを作成します。</p><p>「Controllers」フォルダーを作り、その中に「AccountController.cs」を作成します。</p><p><img src="image-402.png" alt="Controllerの作成" loading="lazy"></p><p>「AccountController.cs」に次のソースをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Authentication;</span><br><span class="line">using Microsoft.AspNetCore.Authentication.Cookies;</span><br><span class="line">using Microsoft.AspNetCore.Authorization;</span><br><span class="line">using Microsoft.AspNetCore.Mvc;</span><br><span class="line">using System.Security.Claims;</span><br><span class="line"></span><br><span class="line">namespace WebApplication1.Controllers</span><br><span class="line">&#123;</span><br><span class="line">    [AllowAnonymous]</span><br><span class="line">    [ApiController]</span><br><span class="line">    [Route(&quot;api/[controller]/[action]&quot;)]</span><br><span class="line">    public class AccountController : ControllerBase</span><br><span class="line">    &#123;</span><br><span class="line">        [HttpGet]</span><br><span class="line">        public ActionResult&lt;string&gt; GetUser()</span><br><span class="line">        &#123;</span><br><span class="line">            var claims = HttpContext.User.Claims;</span><br><span class="line">            var userId = claims?.FirstOrDefault(x =&gt; x.Type.Equals(ClaimTypes.Name))?.Value;</span><br><span class="line">            return Ok(userId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [HttpGet]</span><br><span class="line">        public async Task&lt;ActionResult&gt; Login([FromQuery] string userId)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!userId.Equals(&quot;abc&quot;))</span><br><span class="line">            &#123;</span><br><span class="line">                return Unauthorized();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var claims = new List&lt;Claim&gt;() &#123; new Claim(ClaimTypes.Name, userId) &#125;;</span><br><span class="line">            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);</span><br><span class="line">            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity));</span><br><span class="line">            return Ok();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [HttpGet]</span><br><span class="line">        public async Task&lt;ActionResult&gt; Logout()</span><br><span class="line">        &#123;</span><br><span class="line">            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);</span><br><span class="line">            return Ok();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WEBページの作成"><a href="#WEBページの作成" class="headerlink" title="WEBページの作成"></a>WEBページの作成</h3><p>「wwwroot」フォルダーに「index.html」を作成し、</p><p><img src="image-403.png" alt="静的サイトの作成" loading="lazy"></p><p>「index.html」に次のコードをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;ja&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=&quot;login&quot;&gt;ログイン&lt;/button&gt;</span><br><span class="line">    &lt;button id=&quot;getUser&quot;&gt;ユーザー情報取得&lt;/button&gt;</span><br><span class="line">    &lt;button id=&quot;logout&quot;&gt;ログアウト&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = function() &#123;</span><br><span class="line">            document.getElementById(&#x27;login&#x27;).onclick = function() &#123;</span><br><span class="line">                login();</span><br><span class="line">            &#125;;</span><br><span class="line">            document.getElementById(&#x27;getUser&#x27;).onclick = function() &#123;</span><br><span class="line">                getUser();</span><br><span class="line">            &#125;;</span><br><span class="line">            document.getElementById(&#x27;logout&#x27;).onclick = function() &#123;</span><br><span class="line">                logout();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        function login() &#123;</span><br><span class="line">            let xhr = new XMLHttpRequest;</span><br><span class="line">            xhr.open(&#x27;get&#x27;, `/api/Account/Login?userId=abc`, true);</span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line">        function getUser() &#123;</span><br><span class="line">            let xhr = new XMLHttpRequest;</span><br><span class="line">            xhr.onreadystatechange = function () &#123;</span><br><span class="line">                if (this.readyState == 4 &amp;&amp; this.status == 200) &#123;</span><br><span class="line">                    alert(this.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            xhr.open(&#x27;get&#x27;, &quot;/api/Account/GetUser&quot;, true);</span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line">        function logout() &#123;</span><br><span class="line">            let xhr = new XMLHttpRequest;</span><br><span class="line">            xhr.open(&#x27;get&#x27;, &quot;/api/Account/Logout&quot;, true);</span><br><span class="line">            xhr.send();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="Program-cs-修正"><a href="#Program-cs-修正" class="headerlink" title="Program.cs 修正"></a>Program.cs 修正</h3><p>最後に「Program.cs」を修正します。</p><ul><li>Cookie認証を有効化</li><li>APIコントローラーを有効化</li><li>静的サイトを有効化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.AspNetCore.Authentication.Cookies;</span><br><span class="line"></span><br><span class="line">namespace WebApplication1</span><br><span class="line">&#123;</span><br><span class="line">    public class Program</span><br><span class="line">    &#123;</span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var builder = WebApplication.CreateBuilder(args);</span><br><span class="line">            builder.Services.AddControllers();</span><br><span class="line">            builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie();</span><br><span class="line">            builder.Services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class="line"></span><br><span class="line">            var app = builder.Build();</span><br><span class="line">            if (!app.Environment.IsDevelopment()) &#123;</span><br><span class="line">                app.UseExceptionHandler(&quot;/Error&quot;);</span><br><span class="line">                app.UseHsts();</span><br><span class="line">            &#125;</span><br><span class="line">            app.UseHttpsRedirection();</span><br><span class="line">            app.UseDefaultFiles();</span><br><span class="line">            app.UseStaticFiles();</span><br><span class="line">            app.UseRouting();</span><br><span class="line">            app.UseAuthentication();</span><br><span class="line">            app.UseAuthorization();</span><br><span class="line">            app.MapControllers();</span><br><span class="line">            app.Run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで準備完了</p><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>まず、Cookieが無いことを確認します。開発者ツールの「アプリケーション」タブを開き、左ツリーから Cookie を選択すると現在の Cookie が確認できます。</p><p>この状態で「ユーザー情報取得」ボタンを押しても何も返ってきません。</p><p><img src="image-404.png" alt="Cookie認証されていないことの確認" loading="lazy"></p><p>続いて、ログインボタンを押して、Cookie認証をします。Cookie が保存されたのが分かります。</p><p><img src="image-405.png" alt="Cookie認証したCookieの確認" loading="lazy"></p><p>Cookie認証をしたあと、ユーザー情報取得ボタンを押すと、認証したユーザーIDが表示されます。</p><p><img src="image-406.png" alt="認証したユーザーIDが取得できること" loading="lazy"></p><p>最後にログアウトをすると Cookie が削除され、ユーザー情報取得もできなくなります。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回のソースを <a href="https://github.com/noitaro/use-cookie-authentication">GitHub</a> に置きました。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?view=aspnetcore-6.0">Use cookie authentication without ASP.NET Core Identity</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;公式サイトを見ながら試したのですが、なかなかに手こずったので、自分なりにやったことをまとめました。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows</summary>
      
    
    
    
    
    <category term="asp-net" scheme="https://noitaro.github.io/tags/asp-net/"/>
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="html" scheme="https://noitaro.github.io/tags/html/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>アプリでスクリーンショットして画像保存</title>
    <link href="https://noitaro.github.io/app-screenshot-image-save/"/>
    <id>https://noitaro.github.io/app-screenshot-image-save/</id>
    <published>2022-07-17T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.715Z</updated>
    
    <content type="html"><![CDATA[<p>アプリでアンドロイド端末のスクリーンショットを撮影して、画像保存するまでを紹介します。</p><p>よくあるサンプルだと、アプリを開いてるときのみスクリーンショットしているため、アプリを閉じるとスクリーンショットできないのがほとんどでした。</p><p>今回紹介するアプリは、フォアグラウンドサービスでスクリーンショットを撮影するので、アプリを閉じてもスクリーンショットしてくれます。</p><p>あと、最新のSDKバージョン (API30 (Android 11 (R))) に対応したソースで書いてあります。</p><p>実行するとこのようにアプリを閉じてもスクリーンショットが保存されていきます。</p><p><img src="image-390.png" alt="保存されたスクリーンショットの確認" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Android Studio Bumblebee | 2021.1.1 Patch 1</li><li>API 30、Android 11 (R)</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><p>今回は Empty Activity を使います。</p><p><img src="image-388.png" alt="プロジェクトの作成" loading="lazy"></p><p>設定は下記の通りです。</p><ul><li>Language: Java</li><li>Minimum SDK: API 30、Android 11 (R)</li></ul><p><img src="image-389.png" alt="プロジェクトの設定" loading="lazy"></p><h3 id="ソース"><a href="#ソース" class="headerlink" title="ソース"></a>ソース</h3><p>完成品は <a href="https://github.com/noitaro/app-screenshot-image-save">こちら</a> に置いておきます。</p><h4 id="activity-main-xml"><a href="#activity-main-xml" class="headerlink" title="activity_main.xml"></a>activity_main.xml</h4><p>画面を作ります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=&quot;@+id/editTextNumber&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginStart=&quot;4dp&quot;</span><br><span class="line">        android:layout_marginTop=&quot;4dp&quot;</span><br><span class="line">        android:ems=&quot;10&quot;</span><br><span class="line">        android:inputType=&quot;number&quot;</span><br><span class="line">        android:text=&quot;10&quot;</span><br><span class="line">        app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/textView&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginStart=&quot;4dp&quot;</span><br><span class="line">        android:layout_marginTop=&quot;28dp&quot;</span><br><span class="line">        android:text=&quot;回&quot;</span><br><span class="line">        app:layout_constraintStart_toEndOf=&quot;@+id/editTextNumber&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id=&quot;@+id/editTextNumber2&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginStart=&quot;4dp&quot;</span><br><span class="line">        android:layout_marginTop=&quot;4dp&quot;</span><br><span class="line">        android:ems=&quot;10&quot;</span><br><span class="line">        android:inputType=&quot;number&quot;</span><br><span class="line">        android:text=&quot;1&quot;</span><br><span class="line">        app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toBottomOf=&quot;@+id/editTextNumber&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/textView2&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginStart=&quot;4dp&quot;</span><br><span class="line">        android:layout_marginTop=&quot;32dp&quot;</span><br><span class="line">        android:text=&quot;秒毎&quot;</span><br><span class="line">        app:layout_constraintStart_toEndOf=&quot;@+id/editTextNumber2&quot;</span><br><span class="line">        app:layout_constraintTop_toBottomOf=&quot;@+id/textView&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginStart=&quot;4dp&quot;</span><br><span class="line">        android:layout_marginTop=&quot;8dp&quot;</span><br><span class="line">        android:text=&quot;実行&quot;</span><br><span class="line">        app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toBottomOf=&quot;@+id/editTextNumber2&quot;</span><br><span class="line">        android:onClick=&quot;screenshot&quot;/&gt;</span><br><span class="line">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><p><img src="image-391.png" alt="画面の作成" loading="lazy"></p><h4 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h4><p>実行ボタンを押したとき、フォアグラウンドで動く CaptureService を作りサービス実行させます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void screenshot(View view) &#123;</span><br><span class="line">        MediaProjectionManager mediaProjectionManager = (MediaProjectionManager) this.getSystemService(Context.MEDIA_PROJECTION_SERVICE);</span><br><span class="line">        activityResultLauncher.launch(mediaProjectionManager.createScreenCaptureIntent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ActivityResultLauncher&lt;Intent&gt; activityResultLauncher =</span><br><span class="line">        registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -&gt; &#123;</span><br><span class="line">            if (result.getResultCode() == Activity.RESULT_OK) &#123;</span><br><span class="line"></span><br><span class="line">                EditText editText1 = findViewById(R.id.editTextNumber);</span><br><span class="line">                int maxCount = Integer.parseInt(editText1.getText().toString());</span><br><span class="line">                EditText editText2 = findViewById(R.id.editTextNumber2);</span><br><span class="line">                int waitSeconds = Integer.parseInt(editText2.getText().toString());</span><br><span class="line"></span><br><span class="line">                Intent intent = new Intent(getApplication(), CaptureService.class);</span><br><span class="line">                intent.putExtra(&quot;ResultCode&quot;, result.getResultCode());</span><br><span class="line">                intent.putExtra(&quot;ResultData&quot;, result.getData());</span><br><span class="line">                intent.putExtra(&quot;MaxCount&quot;, maxCount);</span><br><span class="line">                intent.putExtra(&quot;WaitSeconds&quot;, waitSeconds);</span><br><span class="line">                startForegroundService(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CaptureService-java"><a href="#CaptureService-java" class="headerlink" title="CaptureService.java"></a>CaptureService.java</h4><p>フォアグラウンドサービスを実行するために、ステータスバーに通知を登録します。これをしないと例外が発生してしまいます。</p><p>続いて、スクリーンショットを撮影できるようにするため、メディアの設定をしています。</p><p>最後に別スレッドで定期的にスクリーンショット撮影し画像保存するようにしています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">public class CaptureService extends Service &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        Toast.makeText(this, &quot;service starting&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">        NotificationChannel channel = new NotificationChannel(&quot;channelId&quot;, &quot;channelName&quot;, NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">        manager.createNotificationChannel(channel);</span><br><span class="line"></span><br><span class="line">        Notification notification = new Notification.Builder(this, &quot;channelId&quot;)</span><br><span class="line">            .setContentTitle(&quot;notification_title&quot;)</span><br><span class="line">            .setContentText(&quot;notification_message&quot;)</span><br><span class="line">            .build();</span><br><span class="line">        startForeground(1, notification);</span><br><span class="line"></span><br><span class="line">        DisplayMetrics metrics = getResources().getDisplayMetrics();</span><br><span class="line">        int width = metrics.widthPixels;</span><br><span class="line">        int height = metrics.heightPixels;</span><br><span class="line">        int density = metrics.densityDpi;</span><br><span class="line"></span><br><span class="line">        int resultCode = intent.getIntExtra(&quot;ResultCode&quot;, 0);</span><br><span class="line">        Intent resultData = intent.getParcelableExtra(&quot;ResultData&quot;);</span><br><span class="line">        int maxCount = intent.getIntExtra(&quot;MaxCount&quot;, 0);</span><br><span class="line">        int waitSeconds = intent.getIntExtra(&quot;WaitSeconds&quot;, 0);</span><br><span class="line"></span><br><span class="line">        MediaProjectionManager mediaProjectionManager = (MediaProjectionManager) this.getSystemService(Context.MEDIA_PROJECTION_SERVICE);</span><br><span class="line">        MediaProjection mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, resultData);</span><br><span class="line">        ImageReader imageReader = ImageReader.newInstance(width, height, PixelFormat.RGBA_8888, 2);</span><br><span class="line">        VirtualDisplay virtualDisplay = mediaProjection.createVirtualDisplay(&quot;ScreenCapture&quot;, width, height, density,</span><br><span class="line">            DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR, imageReader.getSurface(), null, null);</span><br><span class="line"></span><br><span class="line">        Thread thread = new Thread(() -&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (int i = 0; i &lt; maxCount; i++) &#123;</span><br><span class="line">                    Image image = imageReader.acquireLatestImage();</span><br><span class="line">                    // 画面に変更がない場合、NULL</span><br><span class="line">                    if (image != null) &#123;</span><br><span class="line"></span><br><span class="line">                        // Image -&gt; Bitmap</span><br><span class="line">                        Image.Plane[] planes = image.getPlanes();</span><br><span class="line">                        ByteBuffer buffer = planes[0].getBuffer();</span><br><span class="line">                        int pixelStride = planes[0].getPixelStride();</span><br><span class="line">                        int rowStride = planes[0].getRowStride();</span><br><span class="line">                        int rowPadding = rowStride - pixelStride * width;</span><br><span class="line">                        Bitmap bitmap = Bitmap.createBitmap(width + rowPadding / pixelStride, height, Bitmap.Config.ARGB_8888);</span><br><span class="line">                        bitmap.copyPixelsFromBuffer(buffer);</span><br><span class="line">                        image.close();</span><br><span class="line"></span><br><span class="line">                        File file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES).getPath() + &quot;/image_&quot; + System.currentTimeMillis() + &quot;.png&quot;);</span><br><span class="line">                        FileOutputStream outStream = new FileOutputStream(file);</span><br><span class="line">                        bitmap.compress(Bitmap.CompressFormat.PNG, 100, outStream);</span><br><span class="line">                        outStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Log.d(&quot;CaptureService&quot;, &quot;onStartCommand: &quot; + i);</span><br><span class="line">                    Thread.sleep(waitSeconds * 1000);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                Log.e(&quot;CaptureService&quot;, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stopSelf();</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        return super.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        Toast.makeText(this, &quot;service done&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h4><p>マニフェストにパーミッションとサービスを宣言します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    package=&quot;com.example.myapplication&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup=&quot;true&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:label=&quot;@string/app_name&quot;</span><br><span class="line">        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</span><br><span class="line">        android:supportsRtl=&quot;true&quot;</span><br><span class="line">        android:theme=&quot;@style/Theme.MyApplication&quot;&gt;</span><br><span class="line">        &lt;service android:name=&quot;.CaptureService&quot;</span><br><span class="line">            android:enabled=&quot;true&quot;</span><br><span class="line">            android:exported=&quot;false&quot;</span><br><span class="line">            android:foregroundServiceType=&quot;mediaProjection&quot; /&gt;</span><br><span class="line">        &lt;activity</span><br><span class="line">            android:name=&quot;.MainActivity&quot;</span><br><span class="line">            android:exported=&quot;true&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line"></span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><p>実行するとピクチャフォルダにスクリーンショットが保存されていきます。</p><p><img src="image-393.png" alt="ピクチャフォルダにスクリーンショットが保存される" loading="lazy"></p><h3 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h3><p>確認のしかたは次の通りです。</p><p>Filesアプリを開き、</p><p><img src="image-392.png" alt="Filesアプリを開く" loading="lazy"></p><p>左メニューからアンドロイド端末を選択し、</p><p><img src="image-394.png" alt="左メニューからアンドロイド端末の選択" loading="lazy"></p><p>Picturesフォルダーを選択し、</p><p><img src="image-395.png" alt="Picturesフォルダーの選択" loading="lazy"></p><p>保存されたスクリーンショットが確認できます。</p><p><img src="image-390.png" alt="保存されたスクリーンショットの確認" loading="lazy"></p><h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><ul><li><a href="https://developer.android.com/guide/components/services">サービスの概要 | Android デベロッパー | Android Developers</a></li><li><a href="https://developer.android.com/training/data-storage/use-cases">Android ストレージのユースケースとおすすめの方法 | Android デベロッパー | Android Developers</a></li><li><a href="https://techbooster.org/android/application/17026/">Android 5.0 アプリからスクリーンショットを撮影する | TechBooster</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;アプリでアンドロイド端末のスクリーンショットを撮影して、画像保存するまでを紹介します。&lt;/p&gt;
&lt;p&gt;よくあるサンプルだと、アプリを開いてるときのみスクリーンショットしているため、アプリを閉じるとスクリーンショットできないのがほとんどでした。&lt;/p&gt;
&lt;p&gt;今回紹介するアプ</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="android-studio" scheme="https://noitaro.github.io/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>オーディオテクニカ ATH-CKR70TW</title>
    <link href="https://noitaro.github.io/audio-technica-ath-ckr70tw/"/>
    <id>https://noitaro.github.io/audio-technica-ath-ckr70tw/</id>
    <published>2022-07-10T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.759Z</updated>
    
    <content type="html"><![CDATA[<p>完全ワイヤレスイヤホンを買い換えたのでレビュー</p><p><img src="image-385.png" alt="オーディオテクニカ ATH-CKR70TW" loading="lazy"></p><h2 id="何から何に買い換えたの？"><a href="#何から何に買い換えたの？" class="headerlink" title="何から何に買い換えたの？"></a>何から何に買い換えたの？</h2><h3 id="前"><a href="#前" class="headerlink" title="前"></a>前</h3><p><a href="https://amzn.to/3yUrpLu">オーディオテクニカ ATH-CKS5TW</a></p><p><img src="image-383.png" alt="オーディオテクニカ ATH-CKS5TW" loading="lazy"></p><h4 id="スペック"><a href="#スペック" class="headerlink" title="スペック"></a>スペック</h4><ul><li>充電時間　約2時間、ケース：約3.5時間</li><li>連続使用可能時間　最大約15時間、最大約45時間(充電ケース併用時)</li><li>質量　ヘッドホン：約8g、充電ケース：約60g</li></ul><h3 id="後"><a href="#後" class="headerlink" title="後"></a>後</h3><p><a href="https://amzn.to/3nR8Pxx">オーディオテクニカ ATH-CKR70TW</a></p><p><img src="image-384.png" alt="オーディオテクニカ ATH-CKR70TW" loading="lazy"></p><h4 id="スペック-1"><a href="#スペック-1" class="headerlink" title="スペック"></a>スペック</h4><ul><li>充電時間　約1.5時間、充電ケース：約2時間</li><li>連続使用可能時間　最大約7時間、最大約20時間(充電ケース併用時)</li><li>質量　ヘッドホン：約5g、充電ケース：約43g</li></ul><h2 id="何で買い換えたの？"><a href="#何で買い換えたの？" class="headerlink" title="何で買い換えたの？"></a>何で買い換えたの？</h2><p>見た目がダサかった。買い替え以前のイヤホンは耳からポッコリ飛び出してて、見た目ダサい。</p><p>ケースが大きかった。私はカバン持たない派なので、ズボンのポケットに入れて持ち歩くんだが、ケースが大きくてジャマ。</p><p><img src="image-386.png" alt="オーディオテクニカ ATH-CKR70TW" loading="lazy"></p><h2 id="買い換えた感想は？"><a href="#買い換えた感想は？" class="headerlink" title="買い換えた感想は？"></a>買い換えた感想は？</h2><p>大満足。値段は2倍ぐらい高かったが、それだけする理由も納得できた。</p><p>音は同じ感じがする。と言っても、音の違いが分かる方じゃないから、当てにしない方がいいかも。</p><p>ケースも小さくなって、持ち運びも楽。</p><p>マイクやノイキャンが搭載された。買い換える前も買い換えた後も、使ったことが無い。</p><p>装着検知も搭載された。耳から外せば音楽が止まるのはいい感じ。でもケースに入れれば、買い替え前も止まってたから、あんまり意味ないかな。</p><p>高級感がある。</p><p><img src="image-387.png" alt="オーディオテクニカ ATH-CKR70TW" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;完全ワイヤレスイヤホンを買い換えたのでレビュー&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image-385.png&quot; alt=&quot;オーディオテクニカ ATH-CKR70TW&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;何から何に買い換えたの？&quot;&gt;&lt;a href=&quot;#何</summary>
      
    
    
    
    
    <category term="earphone" scheme="https://noitaro.github.io/tags/earphone/"/>
    
    <category term="gadget" scheme="https://noitaro.github.io/tags/gadget/"/>
    
  </entry>
  
  <entry>
    <title>Android に OpenCV を入れるとデバッグができない</title>
    <link href="https://noitaro.github.io/android-app-debug/"/>
    <id>https://noitaro.github.io/android-app-debug/</id>
    <published>2022-06-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.651Z</updated>
    
    <content type="html"><![CDATA[<p>デバッグタイプを Java Only に変更したら、デバッグできるようになった。</p><h2 id="現象"><a href="#現象" class="headerlink" title="現象"></a>現象</h2><p>デバッグを開始するとデバッグ対象が2つあって、左の app をデバッグしたい。app-java はデバッグしたくない。</p><p><img src="image-378.png" loading="lazy"></p><h2 id="設定変更"><a href="#設定変更" class="headerlink" title="設定変更"></a>設定変更</h2><p>Java のみをデバッグするように設定を変更します。</p><p>[Run] &gt; [Edit Configurations] をクリックし、</p><p><img src="image-379.png" loading="lazy"></p><p>[Debugger] の [Debug type] を Java Only に変更</p><p><img src="image-381.png" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.android.com/studio/debug?hl=ja#debug-types">アプリのデバッグ | Android デベロッパー | Android Developers</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;デバッグタイプを Java Only に変更したら、デバッグできるようになった。&lt;/p&gt;
&lt;h2 id=&quot;現象&quot;&gt;&lt;a href=&quot;#現象&quot; class=&quot;headerlink&quot; title=&quot;現象&quot;&gt;&lt;/a&gt;現象&lt;/h2&gt;&lt;p&gt;デバッグを開始するとデバッグ対象が2つあって</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="android-studio" scheme="https://noitaro.github.io/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>Vuetify v-data-table のフッターに合計行を追加する</title>
    <link href="https://noitaro.github.io/vuetify-v-data-table-footer-total-row/"/>
    <id>https://noitaro.github.io/vuetify-v-data-table-footer-total-row/</id>
    <published>2022-06-25T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.787Z</updated>
    
    <content type="html"><![CDATA[<p>合計行がないので、無理やり追加します。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>vue.js 2.6.14</li><li>vuetify 2.6.0</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>Vuetify のインストールは <a href="https://vuetifyjs.com/ja/getting-started/installation/">公式</a> を参考にしてください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;v-container&gt;</span><br><span class="line">    &lt;v-row class=&quot;text-center&quot;&gt;</span><br><span class="line">      &lt;v-col cols=&quot;12&quot;&gt;</span><br><span class="line">        &lt;v-data-table :headers=&quot;headers&quot; :items=&quot;desserts&quot; :items-per-page=&quot;5&quot; class=&quot;elevation-1&quot; id=&quot;table&quot;&gt;</span><br><span class="line">          &lt;template slot=&quot;body.append&quot;&gt;</span><br><span class="line">            &lt;tr&gt;&lt;!-- 合計行を表示するため --&gt;&lt;/tr&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/v-data-table&gt;</span><br><span class="line">      &lt;/v-col&gt;</span><br><span class="line">    &lt;/v-row&gt;</span><br><span class="line">  &lt;/v-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      headers: [</span><br><span class="line">        &#123; text: &quot;Dessert (100g serving)&quot;, value: &quot;name&quot; &#125;,</span><br><span class="line">        &#123; text: &quot;Calories&quot;, value: &quot;calories&quot; &#125;,</span><br><span class="line">        &#123; text: &quot;Fat (g)&quot;, value: &quot;fat&quot; &#125;,</span><br><span class="line">        &#123; text: &quot;Carbs (g)&quot;, value: &quot;carbs&quot; &#125;,</span><br><span class="line">        &#123; text: &quot;Protein (g)&quot;, value: &quot;protein&quot; &#125;,</span><br><span class="line">        &#123; text: &quot;Iron (%)&quot;, value: &quot;iron&quot; &#125;</span><br><span class="line">      ],</span><br><span class="line">      desserts: [</span><br><span class="line">        &#123; name: &quot;Frozen Yogurt&quot;, calories: 159, fat: 6.0, carbs: 24, protein: 4.0, iron: &quot;1%&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;Ice cream sandwich&quot;, calories: 237, fat: 9.0, carbs: 37, protein: 4.3, iron: &quot;1%&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;Eclair&quot;, calories: 262, fat: 16.0, carbs: 23, protein: 6.0, iron: &quot;7%&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;Cupcake&quot;, calories: 305, fat: 3.7, carbs: 67, protein: 4.3, iron: &quot;8%&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;Gingerbread&quot;, calories: 356, fat: 16.0, carbs: 49, protein: 3.9, iron: &quot;16%&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;Jelly bean&quot;, calories: 375, fat: 0.0, carbs: 94, protein: 0.0, iron: &quot;0%&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;Lollipop&quot;, calories: 392, fat: 0.2, carbs: 98, protein: 0, iron: &quot;2%&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;Honeycomb&quot;, calories: 408, fat: 3.2, carbs: 87, protein: 6.5, iron: &quot;45%&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;Donut&quot;, calories: 452, fat: 25.0, carbs: 51, protein: 4.9, iron: &quot;22%&quot; &#125;,</span><br><span class="line">        &#123; name: &quot;KitKat&quot;, calories: 518, fat: 26.0, carbs: 65, protein: 7, iron: &quot;6%&quot; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    let sumCalories = 0;</span><br><span class="line">    let sumFat = 0;</span><br><span class="line">    let sumCarbs = 0;</span><br><span class="line">    let sumProtein = 0;</span><br><span class="line"></span><br><span class="line">    this.desserts.forEach((element) =&gt; &#123;</span><br><span class="line">      sumCalories = sumCalories + element.calories;</span><br><span class="line">      sumFat = sumFat + element.fat;</span><br><span class="line">      sumCarbs = sumCarbs + element.carbs;</span><br><span class="line">      sumProtein = sumProtein + element.protein;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    const tbody = document.querySelector(&quot;#table &gt; div &gt; table &gt; tbody&quot;);</span><br><span class="line">    const newRow = tbody.insertRow();</span><br><span class="line"></span><br><span class="line">    const totalNameCell = newRow.insertCell();</span><br><span class="line">    totalNameCell.classList.add(&quot;text-start&quot;);</span><br><span class="line">    totalNameCell.appendChild(document.createTextNode(&quot;合計&quot;));</span><br><span class="line"></span><br><span class="line">    const totalCaloriesCell = newRow.insertCell();</span><br><span class="line">    totalCaloriesCell.classList.add(&quot;text-start&quot;);</span><br><span class="line">    totalCaloriesCell.appendChild(document.createTextNode(sumCalories));</span><br><span class="line"></span><br><span class="line">    const totalFatCell = newRow.insertCell();</span><br><span class="line">    totalFatCell.classList.add(&quot;text-start&quot;);</span><br><span class="line">    totalFatCell.appendChild(document.createTextNode(Math.floor(sumFat)));</span><br><span class="line"></span><br><span class="line">    const totalCarbsCell = newRow.insertCell();</span><br><span class="line">    totalCarbsCell.classList.add(&quot;text-start&quot;);</span><br><span class="line">    totalCarbsCell.appendChild(document.createTextNode(sumCarbs));</span><br><span class="line"></span><br><span class="line">    const totalProteinCell = newRow.insertCell();</span><br><span class="line">    totalProteinCell.classList.add(&quot;text-start&quot;);</span><br><span class="line">    totalProteinCell.appendChild(document.createTextNode(sumProtein));</span><br><span class="line"></span><br><span class="line">    const totalIronCell = newRow.insertCell();</span><br><span class="line">    totalIronCell.classList.add(&quot;text-start&quot;);</span><br><span class="line">    totalIronCell.appendChild(document.createTextNode(&quot;&quot;));</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>実行すると、合計行が表示されます。</p><p><img src="image-376.png" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://vuetifyjs.com/ja/components/data-tables/">データテーブル・コンポーネント — Vuetify</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;合計行がないので、無理やり追加します。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vue.js 2.6.14&lt;/li&gt;
&lt;li&gt;vuetify 2.6.0&lt;</summary>
      
    
    
    
    
    <category term="vue" scheme="https://noitaro.github.io/tags/vue/"/>
    
    <category term="vuetify" scheme="https://noitaro.github.io/tags/vuetify/"/>
    
  </entry>
  
  <entry>
    <title>Android フラグメント間でデータを共有する</title>
    <link href="https://noitaro.github.io/android-share-fragments/"/>
    <id>https://noitaro.github.io/android-share-fragments/</id>
    <published>2022-06-19T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.683Z</updated>
    
    <content type="html"><![CDATA[<p>ViewModel を共有して、フラグメント間でデータを使いまわしていきます。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Android Studio Bumblebee | 2021.1.1 Patch 1</li><li>言語：Java</li><li>SDKバージョン：API 30 Android 11.0 (R)</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><p>今回は Navigation Drawer Activity のテンプレートを使っていきます。最初から Fragment と ViewModel があるので、動作確認が簡単です。</p><p><img src="image-369.png" alt="Navigation Drawer Activity" loading="lazy"></p><p><img src="image-370.png" alt="Java API 30 Android 11.0 (R)" loading="lazy"></p><h3 id="ViewModel共有"><a href="#ViewModel共有" class="headerlink" title="ViewModel共有"></a>ViewModel共有</h3><p>MainActivity と 各Fragment で ViewModel を共有するように設定していきます。</p><h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        MainViewModel viewModel = new ViewModelProvider(this).get(MainViewModel.class);</span><br><span class="line"></span><br><span class="line">        /*** 省略 ***/</span><br><span class="line">    &#125;</span><br><span class="line">    /*** 省略 ***/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class HomeFragment extends Fragment &#123;</span><br><span class="line"></span><br><span class="line">    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</span><br><span class="line"></span><br><span class="line">        MainViewModel viewModel = new ViewModelProvider(requireActivity()).get(MainViewModel.class);</span><br><span class="line"></span><br><span class="line">        /*** 省略 ***/</span><br><span class="line">    &#125;</span><br><span class="line">    /*** 省略 ***/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="データ共有"><a href="#データ共有" class="headerlink" title="データ共有"></a>データ共有</h3><p>ViewModel内のデータを、各Fragmentで参照する設定にします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">final TextView textView = binding.textHome;</span><br><span class="line">textView.setText(viewModel.Text);</span><br></pre></td></tr></table></figure><h3 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h3><p>各Fragmentで同じ値が表示される。</p><p><img src="image-372.png" alt="Home" loading="lazy"></p><p><img src="image-373.png" alt="Gallery" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.android.com/guide/fragments/communicate?hl=ja#fragments">フラグメントと通信する | Android デベロッパー | Android Developers</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ViewModel を共有して、フラグメント間でデータを使いまわしていきます。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 2</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="android-studio" scheme="https://noitaro.github.io/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>child_process で起動したプロセスに KEY を送信する</title>
    <link href="https://noitaro.github.io/child-process-key-send/"/>
    <id>https://noitaro.github.io/child-process-key-send/</id>
    <published>2022-06-19T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.839Z</updated>
    
    <content type="html"><![CDATA[<p>解決するまで丸一日かかった。もう疲れた備忘録です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const spawn = require(&#x27;child_process&#x27;).spawn;</span><br><span class="line">let adbShell = spawn(&#x27;adb&#x27;, [&#x27;shell&#x27;], &#123;shell: true&#125;);</span><br><span class="line">adbShell.stdin.write(&#x27;nohup sh -c \&quot;CLASSPATH=com.example.myapplication /system/bin/app_process /system/bin com.example.myapplication.HttpServer\&quot; &gt; /dev/null 2&gt;&amp;1 &amp;\n&#x27;);</span><br></pre></td></tr></table></figure><p>adbコンソールからAndroidのシェルに入り、バックグラウンドプロセスを起動するコマンドです。</p><p>重要なのは、adbShell.stdin.writeの最後に改行を入れること！！！</p><p>改行入れないと実行されないんですね。当たり前って言えばそーなんだけど、ホントこれに気付くまで時間かかった。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;解決するまで丸一日かかった。もう疲れた備忘録です。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="electron" scheme="https://noitaro.github.io/tags/electron/"/>
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Android 11 内部ストレージにZIP展開</title>
    <link href="https://noitaro.github.io/android-11-action-open-document/"/>
    <id>https://noitaro.github.io/android-11-action-open-document/</id>
    <published>2022-06-12T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.647Z</updated>
    
    <content type="html"><![CDATA[<p>Android 11 にアップデートしたら、ストレージアクセスが複雑になった。</p><p>ZIP展開して内部ストレージに保存する方法を記載します。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>SDK Version API 30: Android 11.0 (R)</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><p>Empty Activity で試す。</p><p><img src="image-361.png" alt="Empty Activity" loading="lazy"></p><p>API 30: Android 11.0 (R) を選択</p><p><img src="image-362.png" alt="API 30: Android 11.0 (R)" loading="lazy"></p><h3 id="ボタン設定"><a href="#ボタン設定" class="headerlink" title="ボタン設定"></a>ボタン設定</h3><p>イベント発火用のボタンを付ける。</p><p><img src="image-363.png" alt="ボタン" loading="lazy"></p><p>onClickイベントを設定する。</p><p><img src="image-364.png" alt="onClickイベント" loading="lazy"></p><h3 id="クリックイベント"><a href="#クリックイベント" class="headerlink" title="クリックイベント"></a>クリックイベント</h3><p>MainActivity.java に クリックイベント を設定する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void btnClick(View view) &#123;</span><br><span class="line">    Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);</span><br><span class="line">    intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">    intent.setType(&quot;application/zip&quot;);</span><br><span class="line">    intent.putExtra(Intent.EXTRA_MIME_TYPES, new String[] &#123;&quot;application/zip&quot;&#125;);</span><br><span class="line">    resultLauncher.launch(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ZIP展開"><a href="#ZIP展開" class="headerlink" title="ZIP展開"></a>ZIP展開</h3><p>ZIP展開して内部ストレージに保存する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">ActivityResultLauncher resultLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -&gt; &#123;</span><br><span class="line">    if (result.getResultCode() == Activity.RESULT_OK) &#123;</span><br><span class="line">        Intent resultData = result.getData();</span><br><span class="line">        if (resultData != null) &#123;</span><br><span class="line">            Uri uri = resultData.getData();</span><br><span class="line">            try &#123;</span><br><span class="line">                InputStream stream = this.getContentResolver().openInputStream(uri);</span><br><span class="line">                ZipInputStream is = new ZipInputStream(stream);</span><br><span class="line">                while (true) &#123;</span><br><span class="line">                    ZipEntry zipEntry = is.getNextEntry();</span><br><span class="line">                    if (zipEntry == null) &#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    FileOutputStream os = this.openFileOutput(zipEntry.getName(), this.MODE_PRIVATE);</span><br><span class="line">                    byte[] buffer = new byte[1024];</span><br><span class="line">                    int length = 0;</span><br><span class="line">                    while ((length = is.read(buffer)) &gt; 0) &#123;</span><br><span class="line">                        os.write(buffer, 0, length);</span><br><span class="line">                    &#125;</span><br><span class="line">                    os.close();</span><br><span class="line">                    is.closeEntry();</span><br><span class="line">                &#125;</span><br><span class="line">                is.close();</span><br><span class="line">                stream.close();</span><br><span class="line">            &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>ボタンを押してZIPファイルを選択する。</p><p><img src="image-366.png" alt="ボタン" loading="lazy"></p><p>「&#x2F;data&#x2F;data&#x2F;com.example.myapplication&#x2F;files」にZIPが展開される。</p><p><img src="image-367.png" alt="com.example.myapplication" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.android.google.cn/training/data-storage/app-specific?hl=ja">アプリ固有のファイルにアクセスする | Android デベロッパー | Android Developers</a></li><li><a href="https://developer.android.com/about/versions/11/privacy/storage">Android 11 でのストレージに関する更新 | Android デベロッパー | Android Developers</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android 11 にアップデートしたら、ストレージアクセスが複雑になった。&lt;/p&gt;
&lt;p&gt;ZIP展開して内部ストレージに保存する方法を記載します。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="android-studio" scheme="https://noitaro.github.io/tags/android-studio/"/>
    
    <category term="java" scheme="https://noitaro.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlowで独自物体検出モデルを作成</title>
    <link href="https://noitaro.github.io/tensorflow-object-detection/"/>
    <id>https://noitaro.github.io/tensorflow-object-detection/</id>
    <published>2022-06-04T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.671Z</updated>
    
    <content type="html"><![CDATA[<p>TensorFlowで独自の物体検出 (Object detection) モデルを作ります。</p><p>出来上がるまで1ヶ月ほど掛かりました。ホントエラーの連続で大変だった。</p><p>今回はポケGOのポケストップを検出するモデルを作って行きます。</p><p>最終目標はAndroidで動かすこと！</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Docker 20.10.12</li><li>TensorFlow 1.15.2</li><li>Python 3.6.9</li><li>LabelImg 1.8.1</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="作業用フォルダー作成"><a href="#作業用フォルダー作成" class="headerlink" title="作業用フォルダー作成"></a>作業用フォルダー作成</h3><p>機械学習させるうえで、たくさんのファイルが必要になります。</p><p>手に負えなくなる前にファイルを振り分けていきます。</p><p>今回は「📂pokego」という作業用フォルダーを作成し、必要なフォルダーを数個作成しました。</p><h4 id="ここまでのフォルダー構成"><a href="#ここまでのフォルダー構成" class="headerlink" title="ここまでのフォルダー構成"></a>ここまでのフォルダー構成</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">📂pokego</span><br><span class="line"> ┣📂Data</span><br><span class="line"> ┃ ┗📂JPEGImages</span><br><span class="line"> ┣📂OutputModel</span><br><span class="line"> ┣📂SaveModel</span><br><span class="line"> ┗📂VOC2012</span><br><span class="line">   ┣📂Annotations</span><br><span class="line">   ┗📂ImageSets</span><br><span class="line">     ┗📂Main</span><br></pre></td></tr></table></figure><h3 id="Dockerコンテナの作成"><a href="#Dockerコンテナの作成" class="headerlink" title="Dockerコンテナの作成"></a>Dockerコンテナの作成</h3><p><a href="https://github.com/tensorflow/models/tree/master/research/object_detection/dockerfiles/tf1">公式のDockerfile</a>で試したところ、ライブラリが足りなかったりビルドエラーで思うように使えなかったので、<a href="https://github.com/noitaro/tensorflow-object-detection/blob/main/Dockerfile">修正済みDockerfile</a> でDockerコンテナを作成します。</p><p><img src="image-331.png" alt="Dockerfile" loading="lazy"></p><p>「📂pokego」と同じ階層に保存したら、次のコマンドでDockerイメージ作成と、Dockerコンテナ作成をします。</p><h4 id="Dockerイメージ作成"><a href="#Dockerイメージ作成" class="headerlink" title="Dockerイメージ作成"></a>Dockerイメージ作成</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Dockerイメージ作成</span><br><span class="line">docker build -f Dockerfile -t od-1_15_2_gpu .</span><br></pre></td></tr></table></figure><p><img src="image-332.png" alt="Dockerイメージ作成コマンド" loading="lazy"></p><h4 id="Dockerコンテナ作成"><a href="#Dockerコンテナ作成" class="headerlink" title="Dockerコンテナ作成"></a>Dockerコンテナ作成</h4><p>バインドマウントするパスは各自で変更してください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Dockerコンテナ作成</span><br><span class="line">docker run -v D:\tensorflow\pokego:/home/tensorflow/models/research/pokego -p 10000:6006 -it od-1_15_2_gpu</span><br></pre></td></tr></table></figure><p><img src="image-338.png" alt="Dockerコンテナ作成コマンド" loading="lazy"></p><h5 id="引数説明"><a href="#引数説明" class="headerlink" title="引数説明"></a>引数説明</h5><ul><li>-v：ローカルの「📂pokego」フォルダーをバインドマウントして、Dockerコンテナ内から使えるようにしています。</li><li>-p：後のTensorBoardで学習状況を確認するため、Dockerコンテナにポート番号を割り当てています。</li></ul><h4 id="ここまでのフォルダー構成-1"><a href="#ここまでのフォルダー構成-1" class="headerlink" title="ここまでのフォルダー構成"></a>ここまでのフォルダー構成</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">📂pokego</span><br><span class="line"> ┣📂Data</span><br><span class="line"> ┃ ┗📂JPEGImages</span><br><span class="line"> ┣📂OutputModel</span><br><span class="line"> ┣📂SaveModel</span><br><span class="line"> ┣📂VOC2012</span><br><span class="line"> ┃ ┣📂Annotations</span><br><span class="line"> ┃ ┗📂ImageSets</span><br><span class="line"> ┃   ┗📂Main</span><br><span class="line"> ┗📄Dockerfile ←🆕</span><br></pre></td></tr></table></figure><h3 id="学習データの作成"><a href="#学習データの作成" class="headerlink" title="学習データの作成"></a>学習データの作成</h3><p>今回は「<a href="https://github.com/tzutalin/labelImg">LabelImg</a>」を使いました。PASCAL VOC型式で出力して TFRecord型式に変換する必要があります。</p><p><img src="image-329.png" alt="ラベリング（アノテーション）" loading="lazy"></p><p>使い方は <a href="https://noitaro.github.io/labelimg-annotation/">昔記事</a> にしたので割愛。注意する点は PASCAL VOC型式で保存すること。</p><p>他にもTFRecord型式で出力できる「<a href="https://github.com/microsoft/VoTT">VoTT</a>」も試したのですが、モデル学習の過程でエラーが出て進めなかったです。</p><p>ラベリング中は適当なフォルダーに保存していって、終わったらまとめて指定フォルダーに移動させると楽です。</p><h4 id="指定フォルダーに移動"><a href="#指定フォルダーに移動" class="headerlink" title="指定フォルダーに移動"></a>指定フォルダーに移動</h4><ul><li>画像データ：📂pokego &gt;📂Data &gt;📂JPEGImages</li><li>VOCデータ：📂pokego &gt;📂VOC2012 &gt;📂Annotations</li></ul><h4 id="VOCデータの修正"><a href="#VOCデータの修正" class="headerlink" title="VOCデータの修正"></a>VOCデータの修正</h4><p>VOCデータを一括置換で修正します。</p><ul><li>folderの値を「Data」に置換</li><li>pathの値からパス情報を削除</li></ul><p><img src="image-340.png" alt="VOCデータ修正" loading="lazy"></p><h3 id="学習データの振り分け"><a href="#学習データの振り分け" class="headerlink" title="学習データの振り分け"></a>学習データの振り分け</h3><p>訓練データ (train_data)と検証データ (validation_data)に振り分けていきます。</p><p>訓練80%、検証20%がよくある比率らしいので、そんな感じにします。</p><p>「📂pokego &gt;📂VOC2012 &gt;📂ImageSets &gt;📂Main」に「📄aeroplane_train.txt」というテキストファイルを作り、学習データの80%分の画像ファイル名を振り分けます。</p><p><img src="image-334.png" alt="学習データリスト" loading="lazy"></p><p>同様に「📄aeroplane_val.txt」も作り、残りの20%分のファイル名を振り分けます。</p><p><img src="image-335.png" alt="検証データリスト" loading="lazy"></p><h3 id="TensorFlow用ラベルリストの作成"><a href="#TensorFlow用ラベルリストの作成" class="headerlink" title="TensorFlow用ラベルリストの作成"></a>TensorFlow用ラベルリストの作成</h3><p>ラベリングした時に名付けたラベル名をリストにしたファイルを作成します。</p><p>「📂pokego」フォルダー内に「📄tf_label_map.pbtxt」というテキストファイルを作り、次のようにラベル名を入力していきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item &#123;</span><br><span class="line"> id: 1</span><br><span class="line"> name: &#x27;Ace&#x27;</span><br><span class="line">&#125;</span><br><span class="line">item &#123;</span><br><span class="line"> id: 2</span><br><span class="line"> name: &#x27;Seven&#x27;</span><br><span class="line">&#125;</span><br><span class="line">item &#123;</span><br><span class="line"> id: 3</span><br><span class="line"> name: &#x27;King&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回は1つしかラベルしていないので次のようになりました。</p><p><img src="image-337.png" alt="TensorFlow用ラベルリスト" loading="lazy"></p><h4 id="ここまでのフォルダー構成-2"><a href="#ここまでのフォルダー構成-2" class="headerlink" title="ここまでのフォルダー構成"></a>ここまでのフォルダー構成</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">📂pokego</span><br><span class="line">┣📂Data</span><br><span class="line">┃ ┗📂JPEGImages</span><br><span class="line">┃   ┣📄image_0001.jpg ←🆕</span><br><span class="line">┃   ┣📄image_0002.jpg ←🆕</span><br><span class="line">┃   ┃・・・</span><br><span class="line">┃   ┗📄image_0038.jpg ←🆕</span><br><span class="line">┣📂OutputModel</span><br><span class="line">┣📂SaveModel</span><br><span class="line">┣📂VOC2012</span><br><span class="line">┃ ┣📂Annotations</span><br><span class="line">┃ ┃ ┣📄image_0001.xml ←🆕</span><br><span class="line">┃ ┃ ┣📄image_0002.xml ←🆕</span><br><span class="line">┃ ┃ ┃・・・</span><br><span class="line">┃ ┃ ┗📄image_0038.xml ←🆕</span><br><span class="line">┃ ┗📂ImageSets</span><br><span class="line">┃   ┗📂Main</span><br><span class="line">┃     ┣📄aeroplane_train.txt ←🆕</span><br><span class="line">┃     ┗📄aeroplane_val.txt ←🆕</span><br><span class="line">┣📄Dockerfile</span><br><span class="line">┗📄tf_label_map.pbtxt ←🆕</span><br></pre></td></tr></table></figure><h3 id="TFRecord型式に変換"><a href="#TFRecord型式に変換" class="headerlink" title="TFRecord型式に変換"></a>TFRecord型式に変換</h3><p>TensorFlow で機械学習するには、ラベリングした学習データをTFRecord型式に変換する必要があります。</p><p>Dockerのターミナルに次のコマンドを入力すると、「📂pokego」フォルダー内に変換されたファイルが作られます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 訓練データの変換</span><br><span class="line">python object_detection/dataset_tools/create_pascal_tf_record.py \</span><br><span class="line">--label_map_path=./pokego/tf_label_map.pbtxt \</span><br><span class="line">--data_dir=./pokego --year=VOC2012 --set=train \</span><br><span class="line">--output_path=./pokego/pascal_train.record</span><br><span class="line"></span><br><span class="line"># 検証データの変換</span><br><span class="line">python object_detection/dataset_tools/create_pascal_tf_record.py \</span><br><span class="line">--label_map_path=./pokego/tf_label_map.pbtxt \</span><br><span class="line">--data_dir=./pokego --year=VOC2012 --set=val \</span><br><span class="line">--output_path=./pokego/pascal_val.record</span><br></pre></td></tr></table></figure><p><img src="image-341.png" alt="TFRecord型式に変換するコマンド" loading="lazy"></p><h4 id="変換されたファイル"><a href="#変換されたファイル" class="headerlink" title="変換されたファイル"></a>変換されたファイル</h4><ul><li>pascal_train.record</li><li>pascal_val.record</li></ul><p><img src="image-342.png" alt="TFRecord型式に変換" loading="lazy"></p><h4 id="ここまでのフォルダー構成-3"><a href="#ここまでのフォルダー構成-3" class="headerlink" title="ここまでのフォルダー構成"></a>ここまでのフォルダー構成</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">📂pokego</span><br><span class="line">┣📂Data</span><br><span class="line">┃ ┗📂JPEGImages</span><br><span class="line">┃   ┣📄image_0001.jpg</span><br><span class="line">┃   ┣📄image_0002.jpg</span><br><span class="line">┃   ┃・・・</span><br><span class="line">┃   ┗📄image_0038.jpg</span><br><span class="line">┣📂OutputModel</span><br><span class="line">┣📂SaveModel</span><br><span class="line">┣📂VOC2012</span><br><span class="line">┃ ┣📂Annotations</span><br><span class="line">┃ ┃ ┣📄image_0001.xml</span><br><span class="line">┃ ┃ ┣📄image_0002.xml</span><br><span class="line">┃ ┃ ┃・・・</span><br><span class="line">┃ ┃ ┗📄image_0038.xml</span><br><span class="line">┃ ┗📂ImageSets</span><br><span class="line">┃   ┗📂Main</span><br><span class="line">┃     ┣📄aeroplane_train.txt</span><br><span class="line">┃     ┗📄aeroplane_val.txt</span><br><span class="line">┣📄Dockerfile</span><br><span class="line">┣📄pascal_train.record ←🆕</span><br><span class="line">┣📄pascal_val.record ←🆕</span><br><span class="line">┗📄tf_label_map.pbtxt</span><br></pre></td></tr></table></figure><h3 id="パイプラインデータの作成"><a href="#パイプラインデータの作成" class="headerlink" title="パイプラインデータの作成"></a>パイプラインデータの作成</h3><p>機械学習を始めるときに必要なデータをまとめて記載したパイプラインデータを作成します。</p><p>今回はひな形を少し修正して、機械学習させていきます。</p><p><a href="https://github.com/tensorflow/models/blob/master/research/object_detection/samples/configs/ssd_mobilenet_v1_coco.config">公式GitHub</a> から「📄ssd_mobilenet_v1_coco.config」をダウンロードして、次の箇所を修正します。</p><ul><li>9行目：num_classes: 1（学習するラベル数と同じにする）</li><li>141行目：batch_size: 4（GPUに自信があれば大きくてもよい 2,4,8,16,32…）</li><li>156行目：fine_tune_checkpoint: “”（空に）</li><li>162行目：num_steps: 10000（学習してみて足りなければ増やせばよい）</li><li>175行目：input_path: “.&#x2F;pokego&#x2F;pascal_train.record”</li><li>177行目：label_map_path: “.&#x2F;pokego&#x2F;tf_label_map.pbtxt”</li><li>189行目：input_path: “.&#x2F;pokego&#x2F;pascal_val.record”</li><li>191行目：label_map_path: “.&#x2F;pokego&#x2F;tf_label_map.pbtxt”</li></ul><p>今回はホントにまっさらな状態から学習させました。途中からだとうまく学習できなかったためです。</p><h4 id="ここまでのフォルダー構成-4"><a href="#ここまでのフォルダー構成-4" class="headerlink" title="ここまでのフォルダー構成"></a>ここまでのフォルダー構成</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">📂pokego</span><br><span class="line">┣📂Data</span><br><span class="line">┃ ┗📂JPEGImages</span><br><span class="line">┃   ┣📄image_0001.jpg</span><br><span class="line">┃   ┣📄image_0002.jpg</span><br><span class="line">┃   ┃・・・</span><br><span class="line">┃   ┗📄image_0038.jpg</span><br><span class="line">┣📂OutputModel</span><br><span class="line">┣📂SaveModel</span><br><span class="line">┣📂VOC2012</span><br><span class="line">┃ ┣📂Annotations</span><br><span class="line">┃ ┃ ┣📄image_0001.xml</span><br><span class="line">┃ ┃ ┣📄image_0002.xml</span><br><span class="line">┃ ┃ ┃・・・</span><br><span class="line">┃ ┃ ┗📄image_0038.xml</span><br><span class="line">┃ ┗📂ImageSets</span><br><span class="line">┃   ┗📂Main</span><br><span class="line">┃     ┣📄aeroplane_train.txt</span><br><span class="line">┃     ┗📄aeroplane_val.txt</span><br><span class="line">┣📄Dockerfile</span><br><span class="line">┣📄pascal_train.record</span><br><span class="line">┣📄pascal_val.record</span><br><span class="line">┣📄ssd_mobilenet_v1_coco.config ←🆕</span><br><span class="line">┗📄tf_label_map.pbtxt</span><br></pre></td></tr></table></figure><h2 id="独自モデルの学習"><a href="#独自モデルの学習" class="headerlink" title="独自モデルの学習"></a>独自モデルの学習</h2><p>これで準備完了です。</p><p>次のコマンドをDockerコンソールにコピペすると学習が始まります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python object_detection/model_main.py \</span><br><span class="line">--pipeline_config_path=&quot;./pokego/ssd_mobilenet_v1_coco.config&quot; \</span><br><span class="line">--model_dir=&quot;./pokego/SaveModel&quot; \</span><br><span class="line">--alsologtostderr</span><br></pre></td></tr></table></figure><p><img src="image-343.png" alt="学習開始のコマンド" loading="lazy"></p><p>学習が始まると次のログが流れます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INFO:tensorflow:Saving checkpoints for 0 into ./pokego/SaveModel/model.ckpt.</span><br><span class="line">I0601 12:18:31.965519 140684566607680 basic_session_run_hooks.py:606] Saving checkpoints for 0 into ./pokego/SaveModel/model.ckpt.</span><br><span class="line">INFO:tensorflow:loss = 15.334896, step = 1</span><br><span class="line">I0601 12:18:39.144777 140684566607680 basic_session_run_hooks.py:262] loss = 15.334896, step = 1</span><br><span class="line">INFO:tensorflow:global_step/sec: 2.3923</span><br><span class="line">I0601 12:19:20.944656 140684566607680 basic_session_run_hooks.py:692] global_step/sec: 2.3923</span><br><span class="line">INFO:tensorflow:loss = 8.772529, step = 101 (41.801 sec)</span><br><span class="line">I0601 12:19:20.945703 140684566607680 basic_session_run_hooks.py:260] loss = 8.772529, step = 101 (41.801 sec)</span><br><span class="line">INFO:tensorflow:global_step/sec: 2.542</span><br><span class="line">I0601 12:20:00.283499 140684566607680 basic_session_run_hooks.py:692] global_step/sec: 2.542</span><br><span class="line">INFO:tensorflow:loss = 6.0293255, step = 201 (39.339 sec)</span><br><span class="line">I0601 12:20:00.284253 140684566607680 basic_session_run_hooks.py:260] loss = 6.0293255, step = 201 (39.339 sec)</span><br><span class="line">INFO:tensorflow:global_step/sec: 2.16601</span><br><span class="line">I0601 12:20:46.451487 140684566607680 basic_session_run_hooks.py:692] global_step/sec: 2.16601</span><br><span class="line">INFO:tensorflow:loss = 5.0683546, step = 301 (46.169 sec)</span><br><span class="line">I0601 12:20:46.453217 140684566607680 basic_session_run_hooks.py:260] loss = 5.0683546, step = 301 (46.169 sec)</span><br></pre></td></tr></table></figure><p><img src="image-344.png" alt="学習中ログの確認" loading="lazy"></p><p>このように100ステップ毎にログが出力され、ロスが徐々に下がっていれば正常に学習が進んでいる証拠です。</p><h3 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h3><p>ある程度学習が進むと、定期的に検証処理が入り、「📂SaveModel」フォルダーに「📄model.ckpt」ファイルが作成されていきます。</p><p><img src="image-345.png" alt="学習結果ファイル" loading="lazy"></p><p>学習を中断させたいときは「Ctrl+C」で中断させることができます。最初と同じコマンドで再実行することもできます。</p><h4 id="ここまでのフォルダー構成-5"><a href="#ここまでのフォルダー構成-5" class="headerlink" title="ここまでのフォルダー構成"></a>ここまでのフォルダー構成</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">📂pokego</span><br><span class="line">┣📂Data</span><br><span class="line">┃ ┗📂JPEGImages</span><br><span class="line">┃   ┣📄image_0001.jpg</span><br><span class="line">┃   ┣📄image_0002.jpg</span><br><span class="line">┃   ┃・・・</span><br><span class="line">┃   ┗📄image_0038.jpg</span><br><span class="line">┣📂OutputModel</span><br><span class="line">┣📂SaveModel</span><br><span class="line">┃ ┣📂eval_0 ←🆕</span><br><span class="line">┃ ┣📄checkpoint ←🆕</span><br><span class="line">┃ ┣📄graph.pbtxt ←🆕</span><br><span class="line">┃ ┣📄model.ckpt-0.data-00000-of-00001 ←🆕</span><br><span class="line">┃ ┣📄model.ckpt-0.index ←🆕</span><br><span class="line">┃ ┣📄model.ckpt-0.meta ←🆕</span><br><span class="line">┃ ┣📄model.ckpt-1436.data-00000-of-00001 ←🆕</span><br><span class="line">┃ ┣📄model.ckpt-1436.index ←🆕</span><br><span class="line">┃ ┗📄model.ckpt-1436.meta ←🆕</span><br><span class="line">┣📂VOC2012</span><br><span class="line">┃ ┣📂Annotations</span><br><span class="line">┃ ┃ ┣📄image_0001.xml</span><br><span class="line">┃ ┃ ┣📄image_0002.xml</span><br><span class="line">┃ ┃ ┃・・・</span><br><span class="line">┃ ┃ ┗📄image_0038.xml</span><br><span class="line">┃ ┗📂ImageSets</span><br><span class="line">┃   ┗📂Main</span><br><span class="line">┃     ┣📄aeroplane_train.txt</span><br><span class="line">┃     ┗📄aeroplane_val.txt</span><br><span class="line">┣📄Dockerfile</span><br><span class="line">┣📄pascal_train.record</span><br><span class="line">┣📄pascal_val.record</span><br><span class="line">┣📄ssd_mobilenet_v1_coco.config</span><br><span class="line">┗📄tf_label_map.pbtxt</span><br></pre></td></tr></table></figure><p>後は、気が済むまで学習させて下さい。</p><h2 id="学習結果の確認"><a href="#学習結果の確認" class="headerlink" title="学習結果の確認"></a>学習結果の確認</h2><p>どれぐらい学習したのか確認したくなると思います。</p><p>次のコマンドをDockerコンソールに入力すると、tensorboard で確認することができるようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensorboard --port 6006 --logdir=&quot;./pokego/SaveModel&quot;</span><br></pre></td></tr></table></figure><p><img src="image-352.png" alt="TensorBoard起動コマンド" loading="lazy"></p><p>TensorBoard を起動させると <a href="http://localhost:10000/">http://localhost:10000</a> このURLから見ることができます。</p><p><img src="image-354.png" alt="TensorBoard" loading="lazy"></p><h2 id="TFLite型式に変換"><a href="#TFLite型式に変換" class="headerlink" title="TFLite型式に変換"></a>TFLite型式に変換</h2><p>Androidで物体検出（object etection）を実行させるには、学習モデルをTFLite型式に変換する必要があります。</p><h3 id="中間データに変換"><a href="#中間データに変換" class="headerlink" title="中間データに変換"></a>中間データに変換</h3><p>次のコマンドで中間データに変換します。</p><p>trained_checkpoint_prefix の「model.ckpt-1436」は保存されてる学習済みデータの中で一番大きい数値のモデルを使ってください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python object_detection/export_tflite_ssd_graph.py \</span><br><span class="line">--pipeline_config_path=&quot;./pokego/ssd_mobilenet_v1_coco.config&quot; \</span><br><span class="line">--trained_checkpoint_prefix=&quot;./pokego/SaveModel/model.ckpt-1436&quot; \</span><br><span class="line">--output_directory=&quot;./pokego/OutputModel&quot; \</span><br><span class="line">--add_postprocessing_op=true</span><br></pre></td></tr></table></figure><p>このコマンドを実行すると「📂OutputModel」フォルダーに2つのファイルができあがります。</p><ul><li>📄tflite_graph.pb</li><li>📄tflite_graph.pbtxt</li></ul><p><img src="image-348.png" alt="中間データ変換" loading="lazy"></p><h3 id="TFLite型式に変換-1"><a href="#TFLite型式に変換-1" class="headerlink" title="TFLite型式に変換"></a>TFLite型式に変換</h3><p>そのまま続けてTFLite型式に変換します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tflite_convert \</span><br><span class="line">--output_file=&quot;./pokego/OutputModel/pokego.tflite&quot; \</span><br><span class="line">--graph_def_file=&quot;./pokego/OutputModel/tflite_graph.pb&quot; \</span><br><span class="line">--inference_type=QUANTIZED_UINT8 \</span><br><span class="line">--input_arrays=normalized_input_image_tensor \</span><br><span class="line">--input_shapes=1,300,300,3 \</span><br><span class="line">--output_arrays=&#x27;TFLite_Detection_PostProcess&#x27;,&#x27;TFLite_Detection_PostProcess:1&#x27;,&#x27;TFLite_Detection_PostProcess:2&#x27;,&#x27;TFLite_Detection_PostProcess:3&#x27; \</span><br><span class="line">--default_ranges_min=0 \</span><br><span class="line">--default_ranges_max=6 \</span><br><span class="line">--mean_values=128 \</span><br><span class="line">--std_dev_values=128 \</span><br><span class="line">--allow_custom_ops</span><br></pre></td></tr></table></figure><p>TFLite型式のファイルが出来上がります。</p><p><img src="image-349.png" alt="TFLite型式のファイル作成" loading="lazy"></p><h3 id="メタデータの挿入"><a href="#メタデータの挿入" class="headerlink" title="メタデータの挿入"></a>メタデータの挿入</h3><p>最後にAndroidアプリで動かせるようにするため、メタデータを挿入します。</p><h4 id="メタデータ用ラベルリスト作成"><a href="#メタデータ用ラベルリスト作成" class="headerlink" title="メタデータ用ラベルリスト作成"></a>メタデータ用ラベルリスト作成</h4><p>まず「📂pokego」フォルダーに「labels.txt」というテキストファイルを作成し、ラベルリストを作成します。</p><p>こっちのラベルリストは1行に1ラベルずつ記載していきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ace</span><br><span class="line">Seven</span><br><span class="line">King</span><br></pre></td></tr></table></figure><p>私の場合は1ラベルしかないので、次のようになりました。</p><p><img src="image-355.png" alt="ラベル一覧作成" loading="lazy"></p><h4 id="メタデータ挿入準備"><a href="#メタデータ挿入準備" class="headerlink" title="メタデータ挿入準備"></a>メタデータ挿入準備</h4><p>次に「📂pokego」フォルダーに「📄object_detector_Metadata_Writer.py」というPythonファイルを作成して、次のコードをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from tflite_support.metadata_writers import object_detector</span><br><span class="line">from tflite_support.metadata_writers import writer_utils</span><br><span class="line"></span><br><span class="line">ObjectDetectorWriter = object_detector.MetadataWriter</span><br><span class="line">_MODEL_PATH = &quot;./pokego/OutputModel/pokego.tflite&quot;</span><br><span class="line">_LABEL_FILE = &quot;./pokego/labels.txt&quot;</span><br><span class="line">_SAVE_TO_PATH = &quot;./pokego/OutputModel/pokego_metadata.tflite&quot;</span><br><span class="line">_INPUT_NORM_MEAN = 127.5</span><br><span class="line">_INPUT_NORM_STD = 127.5</span><br><span class="line"></span><br><span class="line">writer = ObjectDetectorWriter.create_for_inference(writer_utils.load_file(_MODEL_PATH), [_INPUT_NORM_MEAN], [_INPUT_NORM_STD], [_LABEL_FILE])</span><br><span class="line">writer_utils.save_file(writer.populate(), _SAVE_TO_PATH)</span><br></pre></td></tr></table></figure><p>次のコマンドをDockerコンソールで実行すると「📄pokego.tflite」にメタデータが挿入されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ./pokego/object_detector_Metadata_Writer.py</span><br></pre></td></tr></table></figure><p>「📄pokego_metadata.tflite」が作成されれば完成です。</p><p><img src="image-351.png" alt="メタデータ挿入済み" loading="lazy"></p><h4 id="最終フォルダー構成"><a href="#最終フォルダー構成" class="headerlink" title="最終フォルダー構成"></a>最終フォルダー構成</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">📂pokego</span><br><span class="line">┣📂Data</span><br><span class="line">┃ ┗📂JPEGImages</span><br><span class="line">┃   ┣📄image_0001.jpg</span><br><span class="line">┃   ┣📄image_0002.jpg</span><br><span class="line">┃   ┃・・・</span><br><span class="line">┃   ┗📄image_0038.jpg</span><br><span class="line">┣📂OutputModel</span><br><span class="line">┃ ┣📄pokego.tflite ←🆕</span><br><span class="line">┃ ┣📄pokego_metadata.tflite ←🆕👑</span><br><span class="line">┃ ┣📄tflite_graph.pb ←🆕</span><br><span class="line">┃ ┗📄tflite_graph.pbtxt ←🆕</span><br><span class="line">┣📂SaveModel</span><br><span class="line">┃ ┣📂eval_0</span><br><span class="line">┃ ┣📄checkpoint</span><br><span class="line">┃ ┣📄graph.pbtxt</span><br><span class="line">┃ ┣📄model.ckpt-0.data-00000-of-00001</span><br><span class="line">┃ ┣📄model.ckpt-0.index</span><br><span class="line">┃ ┣📄model.ckpt-0.meta</span><br><span class="line">┃ ┣📄model.ckpt-1436.data-00000-of-00001</span><br><span class="line">┃ ┣📄model.ckpt-1436.index</span><br><span class="line">┃ ┗📄model.ckpt-1436.meta</span><br><span class="line">┣📂VOC2012</span><br><span class="line">┃ ┣📂Annotations</span><br><span class="line">┃ ┃ ┣📄image_0001.xml</span><br><span class="line">┃ ┃ ┣📄image_0002.xml</span><br><span class="line">┃ ┃ ┃・・・</span><br><span class="line">┃ ┃ ┗📄image_0038.xml</span><br><span class="line">┃ ┗📂ImageSets</span><br><span class="line">┃   ┗📂Main</span><br><span class="line">┃     ┣📄aeroplane_train.txt</span><br><span class="line">┃     ┗📄aeroplane_val.txt</span><br><span class="line">┣📄Dockerfile</span><br><span class="line">┣📄labels.txt ←🆕</span><br><span class="line">┣📄object_detector_Metadata_Writer.py ←🆕</span><br><span class="line">┣📄pascal_train.record</span><br><span class="line">┣📄pascal_val.record</span><br><span class="line">┣📄ssd_mobilenet_v1_coco.config</span><br><span class="line">┗📄tf_label_map.pbtxt</span><br></pre></td></tr></table></figure><h2 id="Androidで物体検出"><a href="#Androidで物体検出" class="headerlink" title="Androidで物体検出"></a>Androidで物体検出</h2><p>ホントこれがやりたかった。</p><p><a href="https://noitaro.github.io/tensorflow-android-object-detection/">前回記事</a> の物体検出アプリに今回学習したモデルを入れて、動作確認します。</p><p>assetsフォルダーにメタデータ挿入済みモデルとメタデータ用ラベルリストをコピペし、</p><ul><li>📄labels.txt</li><li>📄pokego_metadata.tflite</li></ul><p><img src="image-356.png" alt="assetsフォルダー" loading="lazy"></p><p>「📄DetectorActivity.java」の設定を修正します。</p><ul><li>TF_OD_API_MODEL_FILE &#x3D; “pokego_metadata.tflite”;</li><li>TF_OD_API_LABELS_FILE &#x3D; “labels.txt”;</li></ul><p><img src="image-357.png" alt="DetectorActivity.java" loading="lazy"></p><h3 id="確認-1"><a href="#確認-1" class="headerlink" title="確認"></a>確認</h3><p>実機で確認します。</p><p><img src="image-359.png" alt="ポケストップ物体検出" loading="lazy"></p><p>左上バグってますが、正しくポケストップが物体検出されています。</p><p>テストなのでカメラで動作確認しましたが、今後の予定として、実機の画面に映ったポケストップを検出させて自動化できるアプリを考えています。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Dockerいいですね。簡単に環境が作れました。</p><p>いろんなサイトを見て回ってやっとたどり着いた私なりの手順になります。Dockerイメージさえあれば、どんなPCでも機械学習ができるので、よければ参考にしてみて下さい。</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>今回作ったファイルを GitHub で公開します。学習用画像とラベリングデータを用意すればすぐに機械学習が始められると思います。</p><p><a href="https://github.com/noitaro/tensorflow-object-detection">https://github.com/noitaro/tensorflow-object-detection</a></p><h3 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h3><ul><li><a href="https://github.com/tzutalin/labelImg">LabelImg</a></li><li><a href="https://techzizou.com/training-an-ssd-model-for-a-custom-object-using-tensorflow-2-x/">Training a model for custom object detection (TF 2.x) on Google Colab</a></li><li><a href="https://qiita.com/IchiLab/items/fd99bcd92670607f8f9b">【初心者向け】Tensorflow Object Detection API を使ってみた - Qiita</a></li><li><a href="https://www.tensorflow.org/lite/convert/cmdline">コンバータのコマンドラインリファレンス | TensorFlow Lite</a></li><li><a href="https://www.tensorflow.org/lite/models/convert/metadata_writer_tutorial">TensorFlow Lite Metadata Writer API</a></li><li><a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_on_mobile_tensorflowlite.md">Running on mobile with TensorFlow Lite</a></li><li><a href="https://github.com/tensorflow/models">TensorFlow Model Garden</a></li><li><a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf1_training_and_evaluation.md">Training and Evaluation with TensorFlow 1</a></li><li><a href="https://www.tensorflow.org/lite/examples/object_detection/overview">Object detection | TensorFlow Lite</a></li><li><a href="https://www.tensorflow.org/lite/inference_with_metadata/task_library/object_detector">Integrate object detectors | TensorFlow Lite</a></li><li><a href="https://www.tensorflow.org/lite/models/convert/metadata">TensorFlowLiteモデルへのメタデータの追加 | TensorFlow Lite</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TensorFlowで独自の物体検出 (Object detection) モデルを作ります。&lt;/p&gt;
&lt;p&gt;出来上がるまで1ヶ月ほど掛かりました。ホントエラーの連続で大変だった。&lt;/p&gt;
&lt;p&gt;今回はポケGOのポケストップを検出するモデルを作って行きます。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="android-studio" scheme="https://noitaro.github.io/tags/android-studio/"/>
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="docker" scheme="https://noitaro.github.io/tags/docker/"/>
    
    <category term="tensorflow" scheme="https://noitaro.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>バインドマウントを用いたコンテナーの起動</title>
    <link href="https://noitaro.github.io/docker-bind-mounts/"/>
    <id>https://noitaro.github.io/docker-bind-mounts/</id>
    <published>2022-05-22T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.987Z</updated>
    
    <content type="html"><![CDATA[<p>次の方法を用いて、Dockerコンテナ内からローカルファイルにアクセスすることができます。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home</li><li>Docker Desktop</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>適当なイメージを用意します。今回は公式のPythonイメージを使ってみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull python</span><br></pre></td></tr></table></figure><p><img src="image-324.png" loading="lazy"></p><p>まず普通にコンテナを実行して、ファイル一覧を見てみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it python /bin/bash</span><br></pre></td></tr></table></figure><p><img src="image-325.png" loading="lazy"></p><p>バインドマウントしてないので、何も変わり無いファイル構成をしています。</p><h3 id="バインドマウント"><a href="#バインドマウント" class="headerlink" title="バインドマウント"></a>バインドマウント</h3><p>続いてローカルフォルダーをバインドマウントして、コンテナー起動してみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v D:\tensorflow\source:/source -it python /bin/bash</span><br></pre></td></tr></table></figure><p><img src="image-326.png" loading="lazy"></p><p>指定したフォルダーが追加されていることが分かります。</p><p>もちろん、そのままマウントされたディレクトリに入って、中のファイルを実行することもできます。</p><p><img src="image-327.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>これでまた、Dockerが使いやすくなったと思います。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://matsuand.github.io/docs.docker.jp.onthefly/storage/bind-mounts/">https://matsuand.github.io/docs.docker.jp.onthefly/storage/bind-mounts/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;次の方法を用いて、Dockerコンテナ内からローカルファイルにアクセスすることができます。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 </summary>
      
    
    
    
    
    <category term="docker" scheme="https://noitaro.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>public key is not available の対処法</title>
    <link href="https://noitaro.github.io/public-key-is-not-available/"/>
    <id>https://noitaro.github.io/public-key-is-not-available/</id>
    <published>2022-05-09T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.463Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2.md">TensorFlow 2によるオブジェクト検出API</a> を試すため、Dockerビルドをしたところエラーに悩まされた。</p><h2 id="エラー内容"><a href="#エラー内容" class="headerlink" title="エラー内容"></a>エラー内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">PS D:\tensorflow\models&gt; docker build -f research/object_detection/dockerfiles/tf2/Dockerfile -t od .</span><br><span class="line">[+] Building 33.5s (7/16)</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                                               0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 1.39kB                                                                             0.0s</span><br><span class="line"> =&gt; [internal] load .dockerignore                                                                                  0.0s</span><br><span class="line"> =&gt; =&gt; transferring context: 2B                                                                                    0.0s</span><br><span class="line"> =&gt; [internal] load metadata for docker.io/tensorflow/tensorflow:2.2.0-gpu                                         2.6s</span><br><span class="line"> =&gt; [auth] tensorflow/tensorflow:pull token for registry-1.docker.io                                               0.0s</span><br><span class="line"> =&gt; CACHED [ 1/11] FROM docker.io/tensorflow/tensorflow:2.2.0-gpu@sha256:3f8f06cdfbc09c54568f191bbc54419b348ecc08  0.0s</span><br><span class="line"> =&gt; [internal] load build context                                                                                  0.2s</span><br><span class="line"> =&gt; =&gt; transferring context: 252.57kB                                                                              0.2s</span><br><span class="line"> =&gt; ERROR [ 2/11] RUN apt-get update &amp;&amp; apt-get install -y     git     gpg-agent     python3-cairocffi     proto  30.8s</span><br><span class="line">------</span><br><span class="line"> &gt; [ 2/11] RUN apt-get update &amp;&amp; apt-get install -y     git     gpg-agent     python3-cairocffi     protobuf-compiler     python3-pil     python3-lxml     python3-tk     wget:</span><br><span class="line">#6 0.556 Get:1 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease [1575 B]</span><br><span class="line">#6 0.633 Err:1 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease</span><br><span class="line">#6 0.633   The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY A4B469963BF863CC</span><br><span class="line">#6 0.691 Ign:2 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  InRelease</span><br><span class="line">#6 0.705 Get:3 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release [564 B]</span><br><span class="line">#6 0.720 Get:4 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release.gpg [833 B]</span><br><span class="line">#6 0.789 Get:5 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Packages [73.8 kB]</span><br><span class="line">#6 1.019 Get:6 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]</span><br><span class="line">#6 1.188 Hit:7 http://archive.ubuntu.com/ubuntu bionic InRelease</span><br><span class="line">#6 1.440 Get:8 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]</span><br><span class="line">#6 1.765 Get:9 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [2734 kB]</span><br><span class="line">#6 2.385 Get:10 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]</span><br><span class="line">#6 2.912 Get:11 http://archive.ubuntu.com/ubuntu bionic-updates/restricted amd64 Packages [942 kB]</span><br><span class="line">#6 6.617 Get:12 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [3168 kB]</span><br><span class="line">#6 9.909 Get:13 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [1498 kB]</span><br><span class="line">#6 14.79 Get:14 http://security.ubuntu.com/ubuntu bionic-security/restricted amd64 Packages [909 kB]</span><br><span class="line">#6 17.70 Get:15 http://security.ubuntu.com/ubuntu bionic-security/multiverse amd64 Packages [21.1 kB]</span><br><span class="line">#6 20.45 Get:16 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [2272 kB]</span><br><span class="line">#6 29.86 Get:17 http://archive.ubuntu.com/ubuntu bionic-updates/multiverse amd64 Packages [29.8 kB]</span><br><span class="line">#6 29.98 Get:18 http://archive.ubuntu.com/ubuntu bionic-backports/main amd64 Packages [12.2 kB]</span><br><span class="line">#6 30.02 Get:19 http://archive.ubuntu.com/ubuntu bionic-backports/universe amd64 Packages [12.9 kB]</span><br><span class="line">#6 30.08 Reading package lists...</span><br><span class="line">#6 30.82 W: GPG error: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease: The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY A4B469963BF863CC</span><br><span class="line">#6 30.82 E: The repository &#x27;https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease&#x27; is no longer signed.</span><br><span class="line">------</span><br><span class="line">executor failed running [/bin/bash -c apt-get update &amp;&amp; apt-get install -y     git     gpg-agent     python3-cairocffi     protobuf-compiler     python3-pil     python3-lxml     python3-tk     wget]: exit code: 100</span><br></pre></td></tr></table></figure><p><img src="image-321.png" loading="lazy"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><a href="https://developer.nvidia.com/blog/updating-the-cuda-linux-gpg-repository-key/">CUDA Linux GPG リポジトリの鍵の更新</a> があったため。</p><h2 id="対処法"><a href="#対処法" class="headerlink" title="対処法"></a>対処法</h2><p>Dockerfile に 次のコードを追加することでDockerビルドが出来るようになった。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-key del 3bf863cc</span><br><span class="line">RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub</span><br></pre></td></tr></table></figure><p><img src="image-322.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2.md&quot;&gt;TensorFlow 2によるオブジェクト検出API&lt;/a&gt; を試すため、Do</summary>
      
    
    
    
    
    <category term="docker" scheme="https://noitaro.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>【WPF】log4net でログファイル出力</title>
    <link href="https://noitaro.github.io/log4net/"/>
    <id>https://noitaro.github.io/log4net/</id>
    <published>2022-05-03T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.243Z</updated>
    
    <content type="html"><![CDATA[<p>を紹介するんですが、残念なお知らせです。</p><p>ホントは、Visual Studio のデバッグ実行で、出力ウインドウにログを出したかったんですが出来ませんでした。代替案としてログファイル出力の紹介となります。</p><p>供養記事ですね。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2</li><li>Visual Studio Community 2019</li><li>netcoreapp3.1</li><li>log4net 2.0.14</li></ul><h2 id="設定手順"><a href="#設定手順" class="headerlink" title="設定手順"></a>設定手順</h2><h3 id="NuGet-パッケージインストール"><a href="#NuGet-パッケージインストール" class="headerlink" title="NuGet パッケージインストール"></a>NuGet パッケージインストール</h3><p>NuGet で log4net のパッケージをインストールします。</p><p><img src="image-311.png" loading="lazy"></p><h3 id="アプリケーション構成ファイル追加"><a href="#アプリケーション構成ファイル追加" class="headerlink" title="アプリケーション構成ファイル追加"></a>アプリケーション構成ファイル追加</h3><p>ファイル名は「log4net.config」で新規ファイルを作ります。</p><p><img src="image-312.png" loading="lazy"></p><p>次の設定をコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;log4net&gt;</span><br><span class="line">    &lt;appender name=&quot;LogToFile&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&gt;</span><br><span class="line">      &lt;appendToFile value=&quot;true&quot; /&gt;</span><br><span class="line">      &lt;StaticLogFileName value=&quot;false&quot; /&gt;</span><br><span class="line">      &lt;rollingStyle value=&quot;Date&quot; /&gt;</span><br><span class="line">      &lt;file value=&quot;.\log\trace-&quot; /&gt;</span><br><span class="line">      &lt;DatePattern value=&#x27;yyyyMMdd&quot;.log&quot;&#x27; /&gt;</span><br><span class="line">      &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;</span><br><span class="line">        &lt;ConversionPattern value=&quot;%date [%level] %message%n&quot; /&gt;</span><br><span class="line">      &lt;/layout&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;appender name=&quot;LogToConsole&quot; type=&quot;log4net.Appender.ConsoleAppender&quot;&gt;</span><br><span class="line">      &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;</span><br><span class="line">        &lt;ConversionPattern value=&quot;%date [%level] %message%n&quot; /&gt;</span><br><span class="line">      &lt;/layout&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root&gt;</span><br><span class="line">      &lt;level value=&quot;ALL&quot; /&gt;</span><br><span class="line">      &lt;appender-ref ref=&quot;LogToFile&quot; /&gt;</span><br><span class="line">      &lt;appender-ref ref=&quot;LogToConsole&quot; /&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">  &lt;/log4net&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>一応コンソールに出力する設定も入ってますが、WPFアプリだと機能しませんでした。</p><p>何か方法があれば教えてほしいです。</p><h3 id="AssemblyInfo-cs"><a href="#AssemblyInfo-cs" class="headerlink" title="AssemblyInfo.cs"></a>AssemblyInfo.cs</h3><p>AssemblyInfo.cs に次の設定をコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[assembly: log4net.Config.XmlConfigurator(Watch = true, ConfigFile = &quot;log4net.config&quot;)]</span><br></pre></td></tr></table></figure><p><img src="image-313.png" loading="lazy"></p><h2 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h2><p>クラスの先頭に次の1行を入れると、log4netが使えるようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static readonly ILog logger = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);</span><br></pre></td></tr></table></figure><p><img src="image-314.png" loading="lazy"></p><p>次のメソッドでログ出力できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logger.Debug(&quot;Debug Log&quot;);</span><br><span class="line">logger.Info(&quot;Info Log&quot;);</span><br><span class="line">logger.Warn(&quot;Warn Log&quot;);</span><br><span class="line">logger.Error(&quot;Error Log&quot;);</span><br></pre></td></tr></table></figure><p><img src="image-315.png" loading="lazy"></p><p>実行するとlogフォルダが作られてその中に出力されます。</p><p><img src="image-316.png" loading="lazy"></p><p><img src="image-317.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>ホントはこの出力ウインドウに出したかったんですよね…</p><p><img src="image-319.png" loading="lazy"></p><p>どうやったら出せるんだろ。なぞです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;を紹介するんですが、残念なお知らせです。&lt;/p&gt;
&lt;p&gt;ホントは、Visual Studio のデバッグ実行で、出力ウインドウにログを出したかったんですが出来ませんでした。代替案としてログファイル出力の紹介となります。&lt;/p&gt;
&lt;p&gt;供養記事ですね。&lt;/p&gt;
&lt;h2 id=</summary>
      
    
    
    
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="wpf" scheme="https://noitaro.github.io/tags/wpf/"/>
    
  </entry>
  
  <entry>
    <title>Android で Luaスクリプト実行</title>
    <link href="https://noitaro.github.io/android-lua-scripting/"/>
    <id>https://noitaro.github.io/android-lua-scripting/</id>
    <published>2022-04-23T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 22000.613</li><li>Android Studio Bumblebee | 2021.1.1 Patch 1</li><li>API 26: Android 8.0 (Oreo)</li><li>luaj-3.0.1</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>Empty Activity で新規プロジェクトを作成しておきます。</p><p><img src="image-297.png" alt="新規プロジェクト作成" loading="lazy"></p><p><img src="image-301.png" alt="新規プロジェクト作成" loading="lazy"></p><h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><p><a href="http://www.luaj.org/luaj/3.0/README.html#8">次のページ</a> から「luaj-3.0.1.zip」をダウンロードして展開しておきます。</p><p><img src="image-298.png" alt="「luaj-3.0.1.zip」ダウンロード" loading="lazy"></p><p><img src="image-299.png" alt="展開" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="AndroidプロジェクトにLuaを導入"><a href="#AndroidプロジェクトにLuaを導入" class="headerlink" title="AndroidプロジェクトにLuaを導入"></a>AndroidプロジェクトにLuaを導入</h3><p>展開した luaj-3.0.1フォルダーの「lib」フォルダー内に「luaj-jse-3.0.1.jar」があるので、これを Androidプロジェクト の「app &gt; libs」フォルダーにコピペします。</p><p><img src="image-300.png" alt="luaj-jse-3.0.1.jar コピー" loading="lazy"></p><p>フォルダーにコピペすると、Android Studio の方に Luajライブラリ が表示されます。</p><p><img src="image-302.png" alt="libs" loading="lazy"></p><p>そのまま「luaj-jse-3.0.1.jar」を右クリックし「Add As Library」を選択し、Lua を導入します。</p><p><img src="image-303.png" alt="Add As Library" loading="lazy"></p><h3 id="Android-から-Lua実行"><a href="#Android-から-Lua実行" class="headerlink" title="Android から Lua実行"></a>Android から Lua実行</h3><h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4><p>次のコードをコピペしてアプリを実行すると Lua が実行されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        String myScript = &quot;print(\&quot;Hello Lua !!\&quot;)&quot;;</span><br><span class="line">        Globals globals = JsePlatform.standardGlobals();</span><br><span class="line">        LuaValue chunk = globals.load(myScript);</span><br><span class="line">        chunk.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-304.png" alt="Android から Lua実行" loading="lazy"></p><h4 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h4><p>アプリを実行すると Lua がログを出力します。</p><p><img src="image-305.png" alt="ログ出力" loading="lazy"></p><h3 id="Lua-から-Androidのメソッド実行"><a href="#Lua-から-Androidのメソッド実行" class="headerlink" title="Lua から Androidのメソッド実行"></a>Lua から Androidのメソッド実行</h3><h4 id="MyLua2Java"><a href="#MyLua2Java" class="headerlink" title="MyLua2Java"></a>MyLua2Java</h4><p>Lua から呼ばれるクラスを作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class MyLua2Java extends LibFunction &#123;</span><br><span class="line">    private Context _context = null;</span><br><span class="line"></span><br><span class="line">    public MyLua2Java(Context context) &#123;</span><br><span class="line">        _context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LuaValue call(LuaValue modname, LuaValue env) &#123;</span><br><span class="line">        LuaValue library = tableOf();</span><br><span class="line">        library.set(&quot;toast&quot;, new toast());</span><br><span class="line">        env.set(&quot;MyLua2Java&quot;, library);</span><br><span class="line">        return library;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class toast extends OneArgFunction &#123;</span><br><span class="line">        public LuaValue call(LuaValue x) &#123;</span><br><span class="line">            Toast.makeText(_context , x.toString(), Toast.LENGTH_LONG).show();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-306.png" alt="Lua から Androidのメソッド実行" loading="lazy"></p><h4 id="MainActivity-1"><a href="#MainActivity-1" class="headerlink" title="MainActivity"></a>MainActivity</h4><p>次のように修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        String myScript = &quot;MyLua2Java.toast(\&quot;Hello Lua !!\&quot;)&quot;;</span><br><span class="line">        Globals globals = JsePlatform.standardGlobals();</span><br><span class="line">        globals.load(new MyLua2Java(this));</span><br><span class="line">        LuaValue chunk = globals.load(myScript);</span><br><span class="line">        chunk.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-307.png" alt="Lua から Androidのメソッド実行" loading="lazy"></p><h4 id="実行-1"><a href="#実行-1" class="headerlink" title="実行"></a>実行</h4><p>アプリを実行すると Lua が Javaに作ったトーストを使います。</p><p><img src="image-309.png" alt="Luaがトーストを使う" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 21H2 22000.613&lt;/li&gt;
&lt;li&gt;Android Studio Bumblebee</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="android-studio" scheme="https://noitaro.github.io/tags/android-studio/"/>
    
    <category term="lua" scheme="https://noitaro.github.io/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>【Python】JSONファイルをBASE64エンコード</title>
    <link href="https://noitaro.github.io/python-json-base64-encode/"/>
    <id>https://noitaro.github.io/python-json-base64-encode/</id>
    <published>2022-04-10T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.487Z</updated>
    
    <content type="html"><![CDATA[<p>JSONファイルをBASE64にエンコードして保存したり読み込んだりします。</p><p>暗号化までとはいきませんが、技術者じゃないと読めない形にできるので、少し重宝するかもしれません。</p><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">data = &#123;&#x27;name&#x27;: &#x27;noita&#x27;, &#x27;website&#x27;: &#x27;https://noitaro.github.io&#x27;&#125;</span><br><span class="line"></span><br><span class="line"># BASE64で保存</span><br><span class="line">with open(&#x27;./sample.json&#x27;, mode=&#x27;wb&#x27;) as f:</span><br><span class="line">    data = json.dumps(data)</span><br><span class="line">    data = data.encode(&#x27;utf-8&#x27;)</span><br><span class="line">    data = base64.b64encode(data)</span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure><h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><p>mode に w を設定した場合、ファイルが存在しないときは新規作成し、ファイルが存在するときは上書き保存します。</p><p>mode に b を設定した場合、バイナリファイルとして読み書きします。</p><h3 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h3><p>上記を実行すると sample.json というファイルが作成されます。テキストエディターで開くと BASE64 にエンコードされた文字列が保存されているのが確認できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJuYW1lIjogIm5vaXRhIiwgIndlYnNpdGUiOiAiaHR0cHM6Ly9ub2l0YWxvZy50b2t5byJ9</span><br></pre></td></tr></table></figure><p><img src="image-294.png" loading="lazy"></p><p>BASE64 で保存されているので、次のサイト等でデコードすることもできます。</p><p><a href="https://tool-taro.com/base64_decode/">https://tool-taro.com/base64_decode/</a></p><h2 id="読み込み"><a href="#読み込み" class="headerlink" title="読み込み"></a>読み込み</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"># BASE64を読み込み</span><br><span class="line">with open(&#x27;./sample.json&#x27;, mode=&#x27;rb&#x27;) as f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    data = base64.b64decode(data)</span><br><span class="line">    data = data.decode(&#x27;utf-8&#x27;)</span><br><span class="line">    data = json.loads(data)</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><h3 id="mode-1"><a href="#mode-1" class="headerlink" title="mode"></a>mode</h3><p>mode に r を設定した場合、読み込みモードでファイルを開きます。省略してもOK。</p><p>b は保存時と同じで、バイナリファイルとして扱うようになります。</p><h3 id="確認-1"><a href="#確認-1" class="headerlink" title="確認"></a>確認</h3><p>実行してみると、正しく復元できていることが分かります。</p><p><img src="image-295.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JSONファイルをBASE64にエンコードして保存したり読み込んだりします。&lt;/p&gt;
&lt;p&gt;暗号化までとはいきませんが、技術者じゃないと読めない形にできるので、少し重宝するかもしれません。&lt;/p&gt;
&lt;h2 id=&quot;保存&quot;&gt;&lt;a href=&quot;#保存&quot; class=&quot;heade</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Cloud Functions ローカル環境で開発 デプロイ</title>
    <link href="https://noitaro.github.io/python-cloud-functions/"/>
    <id>https://noitaro.github.io/python-cloud-functions/</id>
    <published>2022-04-02T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.467Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cloud.google.com/functions/docs/concepts/overview?hl=ja">Cloud Functions</a> と <a href="https://firebase.google.com/docs/functions?hl=ja">Firebase Functions</a> って別物だったんですね。知りませんでした。</p><p>今回、Python で Functions を作りたかったので、Cloud Functions を使います。</p><p>Firebase Functions は JavaScript しか対応していませんでした。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 22000.556</li><li>Python 3.10.1</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="Google-Cloud-SDK"><a href="#Google-Cloud-SDK" class="headerlink" title="Google Cloud SDK"></a>Google Cloud SDK</h3><p>Cloud Functions の開発には「<a href="https://cloud.google.com/sdk?hl=ja">Google Cloud SDK</a>」のコマンドが必要なのでインストールします。</p><p>次のURL から Google Cloud CLI インストーラー をダウンロードします。</p><p><a href="https://cloud.google.com/sdk/docs/install-sdk?hl=ja">https://cloud.google.com/sdk/docs/install-sdk?hl=ja</a></p><p><img src="image-252.png" alt="Google Cloud CLI インストーラー" loading="lazy"></p><p>ダウンロードした「GoogleCloudSDKInstaller.exe」をインストールすると開発に必要なコマンドが使えるようになります。</p><p><img src="image-253.png" alt="GoogleCloudSDKInstaller.exe" loading="lazy"></p><h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><p><img src="image-255.png" alt="Google Cloud CLI Setup" loading="lazy"></p><p>Google Cloud CLI Setup</p><p>「All users」を選択すると「Program Files」にインストールされます。お好みでどうぞ。</p><p><img src="image-258.png" alt="Google Cloud CLI Setup" loading="lazy"></p><p><img src="image-259.png" alt="Google Cloud CLI Setup" loading="lazy"></p><p><img src="image-260.png" alt="Google Cloud CLI Setup" loading="lazy"></p><p>インストール完了</p><p><img src="image-261.png" alt="Google Cloud CLI Setup" loading="lazy"></p><p><img src="image-263.png" alt="Google Cloud CLI Setup" loading="lazy"></p><h4 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h4><p>次のコマンドで初回設定することができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud init</span><br></pre></td></tr></table></figure><p><img src="image-264.png" alt="gcloud init" loading="lazy"></p><p>Google にログインして初回設定をしていきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You must log in to continue. Would you like to log in (Y/n)?</span><br></pre></td></tr></table></figure><p>ブラウザからGoogleにログインして連携させます。</p><p><img src="image-265.png" alt="This account has no projects." loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This account has no projects.</span><br><span class="line">Would you like to create one? (Y/n)?</span><br></pre></td></tr></table></figure><p>プロジェクトが無い場合は、ここからプロジェクトの作成に入ります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter a Project ID. Note that a Project ID CANNOT be changed later.</span><br><span class="line">Project IDs must be 6-30 characters (lowercase ASCII, digits, or hyphens) in length and start with a lowercase letter.</span><br></pre></td></tr></table></figure><p>これで初回設定は完了です。</p><h2 id="作成"><a href="#作成" class="headerlink" title="作成"></a>作成</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Cloud Functions の HTTP関数 を使って、WebAPI を作成します。</p><p>まず、次のコマンドで必要なパッケージをインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br><span class="line">pip install functions-framework</span><br></pre></td></tr></table></figure><p>次に、新規「main.py」ファイルを作成し、次のコードをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import escape</span><br><span class="line">import functions_framework</span><br><span class="line"></span><br><span class="line">@functions_framework.http</span><br><span class="line">def hello_http(request):</span><br><span class="line">    request_json = request.get_json(silent=True)</span><br><span class="line"></span><br><span class="line">    if request_json and &#x27;name&#x27; in request_json:</span><br><span class="line">        name = request_json[&#x27;name&#x27;]</span><br><span class="line">    else:</span><br><span class="line">        name = &#x27;World&#x27;</span><br><span class="line">    return &#x27;Hello &#123;&#125;!&#x27;.format(escape(name))</span><br></pre></td></tr></table></figure><p><img src="image-254.png" alt="main.py" loading="lazy"></p><h3 id="デバッグ実行"><a href="#デバッグ実行" class="headerlink" title="デバッグ実行"></a>デバッグ実行</h3><p>正しく動くかデバッグ実行してみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">functions_framework --target=hello_http</span><br></pre></td></tr></table></figure><p><img src="image-266.png" alt="functions_framework --target=hello_http" loading="lazy"></p><p>実行すると URL が表示されるので、ブラウザからアクセスします。</p><p><img src="image-267.png" alt="ブラウザからアクセス" loading="lazy"></p><p>curlコマンドを使って、POSTデータを投げることもできます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://192.168.0.8:8080 -H &quot;Content-Type:application/json&quot;  -d &quot;&#123;\&quot;name\&quot;:\&quot;Noita\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="image-268.png" alt="curl -X POST http://192.168.0.8:8080 -H &quot;Content-Type:application/json&quot;  -d &quot;{\&quot;name\&quot;:\&quot;Noita\&quot;}&quot;" loading="lazy"></p><p>Windowsの場合、JSONをダブルクォートでくくって、なおかつ、ダブルクォートをエンマークでエスケープさせる必要があります。これ気が付くまで結構時間がかかりました。</p><h3 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h3><p>動作確認ができたら実際にデプロイしてみます。</p><p>次のコマンドで Cloud Functions にデプロイすることができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud functions deploy hello_http --runtime python39 --trigger-http --allow-unauthenticated --project toriaezu-project</span><br></pre></td></tr></table></figure><p><img src="image-269.png" alt="gcloud functions deploy hello_http --runtime python39 --trigger-http --allow-unauthenticated --project toriaezu-project" loading="lazy"></p><p>初回デプロイ時は Cloud Functions が無効になっているので「Y」を入力して有効にさせます。</p><p>デプロイに成功した場合、<a href="https://console.cloud.google.com/functions/list">コンソール</a> で確認することができます。</p><p><img src="image-272.png" alt="デプロイ成功" loading="lazy"></p><h4 id="デプロイエラー"><a href="#デプロイエラー" class="headerlink" title="デプロイエラー"></a>デプロイエラー</h4><p>もし、エラーがでた場合は <a href="https://console.cloud.google.com/functions/list">コンソール</a> にアクセスして原因を探ってください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: (gcloud.functions.deploy) OperationError: code=9, message=Failed to initialize region (action ID: 785d4b576734d0df): Cloud storage operation for gcf-sources-20938452933-us-central1 failed as the billing account is not available</span><br></pre></td></tr></table></figure><p><img src="image-270.png" alt="ERROR: (gcloud.functions.deploy) OperationError: code=9, message=Failed to initialize region (action ID: 785d4b576734d0df): Cloud storage operation for gcf-sources-20938452933-us-central1 failed as the billing account is not available" loading="lazy"></p><p>今回のエラーは請求情報を登録していなかったため、発生していました。</p><p><img src="image-271.png" alt="請求情報登録" loading="lazy"></p><h3 id="関数テスト"><a href="#関数テスト" class="headerlink" title="関数テスト"></a>関数テスト</h3><p>デプロイされた WebAPI を実際に叩いて動作確認します。</p><p>右の操作をクリックして「関数テスト」を選択します。</p><p><img src="image-273.png" alt="関数テスト" loading="lazy"></p><p>トリガータブをクリックすると、デプロイされたURLが分かります。</p><p><img src="image-274.png" alt="デプロイされたURL" loading="lazy"></p><p>ブラウザで開くと、デバッグ実行した時と同じ結果が表示されます。</p><p><img src="image-275.png" alt="ブラウザで開く" loading="lazy"></p><p>POSTも同様に確認してみてください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cloud.google.com/functions/docs/concepts/overview?hl=ja&quot;&gt;Cloud Functions&lt;/a&gt; と &lt;a href=&quot;https://firebase.google.com/docs</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="google" scheme="https://noitaro.github.io/tags/google/"/>
    
    <category term="functions" scheme="https://noitaro.github.io/tags/functions/"/>
    
  </entry>
  
  <entry>
    <title>【TensorFlow】Androidで機械学習した物体を検出をする</title>
    <link href="https://noitaro.github.io/tensorflow-android-object-detection/"/>
    <id>https://noitaro.github.io/tensorflow-android-object-detection/</id>
    <published>2022-04-02T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.655Z</updated>
    
    <content type="html"><![CDATA[<p>Android のカメラを使って、機械学習した物体を検出させます。</p><p>今回はサンプルを動かせるようにして、次回は自分で機械学習させたモデルで試してみたいと思います。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 22000.556</li><li>Android Studio Bumblebee | 2021.1.1 Patch 1</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>サンプルプロジェクトをダウンロード、展開しておきます。</p><p><a href="https://github.com/tensorflow/examples">こちら</a> からサンプルプロジェクトをダウンロード。</p><p><img src="image-276.png" alt="ダウンロード" loading="lazy"></p><p>ダウンロードできたら展開しておきます。</p><p><img src="image-277.png" alt="展開" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="プロジェクトの読み込み"><a href="#プロジェクトの読み込み" class="headerlink" title="プロジェクトの読み込み"></a>プロジェクトの読み込み</h3><p>Android Studio でプロジェクトを読み込みます。</p><p><img src="image-278.png" alt="プロジェクト読み込み" loading="lazy"></p><p>いろいろサンプルがありますが、今回使うサンプルは「object_detection」になります。</p><p>展開したフォルダーから次のフォルダーを辿って Androidプロジェクト を選択し開きます。</p><p>「.\examples-master\lite\examples\object_detection\android」</p><p><img src="image-280.png" alt="object_detection" loading="lazy"></p><p>プロジェクトを開いた直後はいろいろダウンロードや設定が入るので、右下が落ち着くまでしばらく待ちます。</p><p><img src="image-281.png" alt="右下が落ち着くまでしばらく待つ" loading="lazy"></p><h3 id="APKビルド"><a href="#APKビルド" class="headerlink" title="APKビルド"></a>APKビルド</h3><p>右下が落ち着いたら、APKビルドをします。</p><p>Buildメニューから「Build Bundle &#x2F; APK &gt; Build APK」と選択していくと APKビルドができます。</p><p><img src="image-282.png" alt="Build APK" loading="lazy"></p><h3 id="ビルドエラー"><a href="#ビルドエラー" class="headerlink" title="ビルドエラー"></a>ビルドエラー</h3><p>今回一番手こずったのは、この部分になります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Errors while building APK. You can find the errors in the &#x27;Messages&#x27; view.</span><br></pre></td></tr></table></figure><p><img src="image-283.png" alt="Errors while building APK. You can find the errors in the &#39;Messages&#39; view." loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.</span><br></pre></td></tr></table></figure><p><img src="image-284.png" alt="Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0." loading="lazy"></p><p>エラーを読むと「Gradle 8.0 との互換性がないから無理」って言っていますね。</p><p>つまり Gradle 8.0 では使えない関数が使われているってことになります。</p><p>もう少し上にスクロールすると、エラーとなった関数が表示されています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Execution failed for task &#x27;:lib_task_api:compileDebugJavaWithJavac&#x27;.</span><br><span class="line">Failed to calculate the value of task &#x27;:lib_task_api:compileDebugJavaWithJavac&#x27; property &#x27;options.generatedSourceOutputDirectory&#x27;.</span><br><span class="line">Querying the mapped value of map(java.io.File property(org.gradle.api.file.Directory, fixed(class org.gradle.api.internal.file.DefaultFilePropertyFactory$FixedDirectory, D:\android\examples-master\lite\examples\object_detection\android\lib_task_api\build\generated\ap_generated_sources\debug\out)) org.gradle.api.internal.file.DefaultFilePropertyFactory$ToFileTransformer@6f3ff1b9) before task &#x27;:lib_task_api:compileDebugJavaWithJavac&#x27; has completed is not supported</span><br></pre></td></tr></table></figure><p><img src="image-285.png" alt="Execution failed for task &#39;:lib_task_api:compileDebugJavaWithJavac&#39;." loading="lazy"></p><p>今回は「:lib_task_api:compileDebugJavaWithJavac」が原因でビルドできなかったみたいです。</p><h4 id="Gradleバージョン確認"><a href="#Gradleバージョン確認" class="headerlink" title="Gradleバージョン確認"></a>Gradleバージョン確認</h4><p>プロジェクトが使ってるGradleバージョンを確認します。</p><p>Fileメニューの「Project Structure」をクリックするとGradleバージョンを確認することができます。</p><p><img src="image-286.png" alt="Project Structure" loading="lazy"></p><p>今回は Gradle 7.4 が使われていました。</p><p><img src="image-287.png" alt="Gradle 7.4" loading="lazy"></p><p>Gradleバージョン 8.0 はまだリリースされていないので、今回はプラグインバージョンを最新まで上げて対応することにしました。</p><p>アルファ版やベータ版は使いたくないため、今最新の「7.1.2」に変更します。</p><p><img src="image-288.png" alt="プラグインバージョン" loading="lazy"></p><p>再度ビルドをすると、エラーも出ずにビルドできるようになります。</p><p><img src="image-289.png" alt="ビルド" loading="lazy"></p><h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><p>USBで端末をつなぐと、実機で動作確認することができます。</p><p><img src="image-290.png" alt="再生ボタン" loading="lazy"></p><p>カメラでいろいろなものを表示させると、リアルタイムで何か表示されます。</p><p><img src="image-291.png" alt="マウス" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>object_detectionのプロジェクト内に、ラズパイ用のプロジェクトもあったので、いつか挑戦してみたいです。</p><h3 id="追記"><a href="#追記" class="headerlink" title="追記"></a>追記</h3><p>物体検出モデル作成の記事を書きました。興味がある方、ぜひご覧ください。</p><p><a href="https://noitaro.github.io/tensorflow-object-detection/">https://noitaro.github.io/tensorflow-object-detection/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android のカメラを使って、機械学習した物体を検出させます。&lt;/p&gt;
&lt;p&gt;今回はサンプルを動かせるようにして、次回は自分で機械学習させたモデルで試してみたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="android-studio" scheme="https://noitaro.github.io/tags/android-studio/"/>
    
    <category term="tensorflow" scheme="https://noitaro.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Firebase で オウム返しする LINE BOT を作る</title>
    <link href="https://noitaro.github.io/line-bot/"/>
    <id>https://noitaro.github.io/line-bot/</id>
    <published>2022-03-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.227Z</updated>
    
    <content type="html"><![CDATA[<p>LINE にメッセージを送ると、同じメッセージが返ってくる LINE BOT を作ります。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 22000.556</li><li>node.js v16.13.1</li><li>firebase-tools 10.5.0</li></ul><h2 id="作成方法"><a href="#作成方法" class="headerlink" title="作成方法"></a>作成方法</h2><h3 id="チャネルの作成"><a href="#チャネルの作成" class="headerlink" title="チャネルの作成"></a>チャネルの作成</h3><p>LINE の BOT を作るには LINE が提供している Messaging API を使う必要があります。</p><p>Messaging API を使うためにチャネルが必要なので、まずチャネルの作成を行います。</p><p>チャネルの作成方法は <a href="https://developers.line.biz/ja/docs/messaging-api/getting-started/" title="公式">公式</a> が詳しく説明しているので、そちらを参考にして進めるとよいです。</p><p><a href="https://developers.line.biz/ja/docs/messaging-api/getting-started/">https://developers.line.biz/ja/docs/messaging-api/getting-started/</a></p><p>できたらチャネルの「Messaging API設定」タブを開いて、QRコードから友達登録をしておきます。</p><p><img src="image-236.png" alt="Messaging API設定" loading="lazy"></p><p><img src="image-237.png" alt="LINE BOT" loading="lazy"></p><h3 id="チャネルアクセストークンの発行"><a href="#チャネルアクセストークンの発行" class="headerlink" title="チャネルアクセストークンの発行"></a>チャネルアクセストークンの発行</h3><p>そのまま下にスクロールして、チャネルアクセストークンも発行しておきます。</p><p>発行したトークンを使うことで、メッセージが送れるようになります。</p><p><img src="image-242.png" alt="チャネルアクセストークン発行" loading="lazy"></p><h3 id="Firebase-でアプリケーションの作成"><a href="#Firebase-でアプリケーションの作成" class="headerlink" title="Firebase でアプリケーションの作成"></a>Firebase でアプリケーションの作成</h3><p><a href="https://console.firebase.google.com/?hl=ja">Firebaseコンソール</a> からプロジェクトを作成します。</p><p>アナリティクスは使わないので OFF にしておきます。</p><p>Functions タブに移動して Functions を有効にします。</p><p><img src="image-239.png" alt="Functions 有効" loading="lazy"></p><p>Functions を使うにはプロジェクトをアップグレードさせる必要があるので、アップグレードさせます。</p><p><img src="image-240.png" alt="アップグレード" loading="lazy"></p><p>Functions の詳しい記事は前にも書いているので、そちらも参考にしてみて下さい。</p><p><a href="https://noitaro.github.io/google-cloud-functions-javascript-call/">https://noitaro.github.io/google-cloud-functions-javascript-call/</a></p><h3 id="オウム返しプログラム"><a href="#オウム返しプログラム" class="headerlink" title="オウム返しプログラム"></a>オウム返しプログラム</h3><p>まず、次のコマンドで Firebaseコマンドラインツール をインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g firebase-tools</span><br></pre></td></tr></table></figure><p>次にプロジェクトを作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase init</span><br></pre></td></tr></table></figure><p>どのような構成にするか聞かれるので Functions にチェックを入れてプロジェクト作成をします。</p><p><img src="image-241.png" alt="Functions にチェックを入れてプロジェクト作成" loading="lazy"></p><p>「functions\index.js」を開いて、次のコードに変更します。</p><p>チャネルアクセストークンの部分は、ご自分のトークンを使ってください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">const functions = require(&#x27;firebase-functions&#x27;);</span><br><span class="line">const https = require(&#x27;https&#x27;);</span><br><span class="line"></span><br><span class="line">const channelAccessToken = &#x27;チャネルアクセストークン&#x27;;</span><br><span class="line"></span><br><span class="line">exports.helloWorld = functions.https.onRequest((request, response) =&gt; &#123;</span><br><span class="line">    if (request.method == &#x27;POST&#x27;) &#123;</span><br><span class="line"></span><br><span class="line">        const url = &#x27;https://api.line.me/v2/bot/message/reply&#x27;;</span><br><span class="line">        const options = &#123;</span><br><span class="line">            method: &#x27;POST&#x27;,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,</span><br><span class="line">                &#x27;Authorization&#x27;: `Bearer $&#123;channelAccessToken&#125;`</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        request.body[&#x27;events&#x27;].forEach(event =&gt; &#123;</span><br><span class="line"></span><br><span class="line">            const data = JSON.stringify(&#123;</span><br><span class="line">                replyToken: event[&#x27;replyToken&#x27;],</span><br><span class="line">                messages: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &#x27;type&#x27;: &#x27;text&#x27;,</span><br><span class="line">                        &#x27;text&#x27;: event[&#x27;message&#x27;][&#x27;text&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            const line = https.request(url, options);</span><br><span class="line">            line.write(data);</span><br><span class="line">            line.end();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="image-246.png" alt="functions index.js" loading="lazy"></p><h3 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h3><p>次のコマンドで Firebase に Functions をデプロイすることができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase deploy --only functions</span><br></pre></td></tr></table></figure><p>デプロイが成功するとトリガーURLが発行されるので、コピーして</p><p><img src="image-243.png" alt="トリガーURL" loading="lazy"></p><p>LINE BOT の Webhook URL に登録します。</p><p><img src="image-244.png" alt="Webhook URL 登録" loading="lazy"></p><p>そのまま下にある Webhookの利用を有効にすると、オウム返しボットが完成します。</p><p><img src="image-245.png" alt="Webhookの利用" loading="lazy"></p><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>試しにメッセージを送ると、同じメッセージが返ってくると思います。</p><p><img src="image-247.png" alt="LINE BOT" loading="lazy"></p><h4 id="なんか変なメッセージが返ってくる場合"><a href="#なんか変なメッセージが返ってくる場合" class="headerlink" title="なんか変なメッセージが返ってくる場合"></a>なんか変なメッセージが返ってくる場合</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">メッセージありがとうございます！</span><br><span class="line">申し訳ありませんが、このアカウントでは個別のお問い合わせを受け付けておりません。</span><br><span class="line">次の配信までお待ちください(content)</span><br></pre></td></tr></table></figure><p>これを消すには、応答メッセージをオフに設定するとなくなります。</p><p><img src="image-248.png" alt="応答メッセージオフ" loading="lazy"></p><p><img src="image-249.png" alt="LINE BOT" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;LINE にメッセージを送ると、同じメッセージが返ってくる LINE BOT を作ります。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 </summary>
      
    
    
    
    
    <category term="firebase" scheme="https://noitaro.github.io/tags/firebase/"/>
    
    <category term="bot" scheme="https://noitaro.github.io/tags/bot/"/>
    
    <category term="functions" scheme="https://noitaro.github.io/tags/functions/"/>
    
    <category term="webhook" scheme="https://noitaro.github.io/tags/webhook/"/>
    
  </entry>
  
  <entry>
    <title>【Angular】ngx-translate で多言語対応</title>
    <link href="https://noitaro.github.io/angular-ngx-translate/"/>
    <id>https://noitaro.github.io/angular-ngx-translate/</id>
    <published>2022-03-12T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.699Z</updated>
    
    <content type="html"><![CDATA[<p>メモです。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 22000.556</li><li>Angular CLI: 13.2.6</li><li>Node: 16.13.1</li><li>Package Manager: npm 8.3.0</li><li>@ngx-translate&#x2F;core 14.0.0</li><li>@ngx-translate&#x2F;http-loader 7.0.0</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>お試しということで、<a href="https://angular.jp/start" title="サンプルアプリ">サンプルアプリ</a> に ローカライゼーション を実装していきます。</p><p><img src="image-217.png" alt="toh-pt6" loading="lazy"></p><p>まず ZIP をダウンロードして、展開して、デバッグ実行ができる状態まで進めておきます。</p><p><img src="image-224.png" alt="Tour of Heroes" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p>次のコマンドで npmモジュール をインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @ngx-translate/core --save</span><br><span class="line">npm install @ngx-translate/http-loader --save</span><br></pre></td></tr></table></figure><h3 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h3><p>「src\app\app.module.ts」を次のように修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; BrowserModule &#125; from &#x27;@angular/platform-browser&#x27;;</span><br><span class="line">import &#123; FormsModule &#125; from &#x27;@angular/forms&#x27;;</span><br><span class="line">import &#123; HttpClient, HttpClientModule &#125; from &#x27;@angular/common/http&#x27;;</span><br><span class="line">import &#123; HttpClientInMemoryWebApiModule &#125; from &#x27;angular-in-memory-web-api&#x27;;</span><br><span class="line">import &#123; InMemoryDataService &#125; from &#x27;./in-memory-data.service&#x27;;</span><br><span class="line">import &#123; AppRoutingModule &#125; from &#x27;./app-routing.module&#x27;;</span><br><span class="line">import &#123; AppComponent &#125; from &#x27;./app.component&#x27;;</span><br><span class="line">import &#123; DashboardComponent &#125; from &#x27;./dashboard/dashboard.component&#x27;;</span><br><span class="line">import &#123; HeroDetailComponent &#125; from &#x27;./hero-detail/hero-detail.component&#x27;;</span><br><span class="line">import &#123; HeroesComponent &#125; from &#x27;./heroes/heroes.component&#x27;;</span><br><span class="line">import &#123; HeroSearchComponent &#125; from &#x27;./hero-search/hero-search.component&#x27;;</span><br><span class="line">import &#123; MessagesComponent &#125; from &#x27;./messages/messages.component&#x27;;</span><br><span class="line">import &#123; TranslateHttpLoader &#125; from &#x27;@ngx-translate/http-loader&#x27;;</span><br><span class="line">import &#123; TranslateLoader, TranslateModule, TranslateService &#125; from &#x27;@ngx-translate/core&#x27;;</span><br><span class="line"></span><br><span class="line">export function createTranslateLoader(http: HttpClient) &#123;</span><br><span class="line">  return new TranslateHttpLoader(http, &#x27;./assets/i18n/&#x27;, &#x27;.json&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    AppRoutingModule,</span><br><span class="line">    HttpClientModule,</span><br><span class="line">    TranslateModule.forRoot(&#123;</span><br><span class="line">      loader: &#123;</span><br><span class="line">        provide: TranslateLoader,</span><br><span class="line">        useFactory: createTranslateLoader,</span><br><span class="line">        deps: [HttpClient]</span><br><span class="line">      &#125;,</span><br><span class="line">      defaultLanguage: &#x27;en&#x27;</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    // HttpClientInMemoryWebApiModule.forRoot(</span><br><span class="line">    //   InMemoryDataService, &#123; dataEncapsulation: false &#125;</span><br><span class="line">    // )</span><br><span class="line">  ],</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    DashboardComponent,</span><br><span class="line">    HeroesComponent,</span><br><span class="line">    HeroDetailComponent,</span><br><span class="line">    MessagesComponent,</span><br><span class="line">    HeroSearchComponent</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export class AppModule &#123;</span><br><span class="line">  constructor(translate: TranslateService) &#123;</span><br><span class="line">    translate.use(&#x27;ja&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-227.png" alt="app.module.ts" loading="lazy"></p><h4 id="翻訳の設定"><a href="#翻訳の設定" class="headerlink" title="翻訳の設定"></a>翻訳の設定</h4><p>後は翻訳の設定を書いていくだけです。</p><p>「src\assets\i18n\」に、読み込む翻訳JSONを作成します。</p><p>今回は「ja.json」と「en.json」をそれぞれ作りました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Dashboard&quot;: &quot;ダッシュボード&quot;,</span><br><span class="line">    &quot;Heroes&quot;: &quot;ヒーローズ&quot;,</span><br><span class="line">    &quot;Tour of Heroes&quot;: &quot;ツアー・オブ・ヒーローズ&quot;,</span><br><span class="line">    &quot;Top Heroes&quot;: &quot;上位ヒーローズ&quot;,</span><br><span class="line">    &quot;Hero Search&quot;: &quot;ヒーロー検索&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-220.png" alt="ja.json" loading="lazy"></p><p>HTML内に翻訳を埋め込む場合は、次ように修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;nav&gt;</span><br><span class="line">  &lt;a routerLink=&quot;/dashboard&quot; translate&gt;&#123;&#123;&#x27;Dashboard&#x27;&#125;&#125;&lt;/a&gt;</span><br><span class="line">  &lt;a routerLink=&quot;/heroes&quot; translate&gt;&#123;&#123;&#x27;Heroes&#x27;&#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;/nav&gt;</span><br><span class="line">&lt;router-outlet&gt;&lt;/router-outlet&gt;</span><br><span class="line">&lt;app-messages&gt;&lt;/app-messages&gt;</span><br></pre></td></tr></table></figure><p><img src="image-221.png" alt="app.component.html" loading="lazy"></p><p>TSから翻訳する場合は、次のように修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Component &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; TranslateService &#125; from &#x27;@ngx-translate/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;app-root&#x27;,</span><br><span class="line">  templateUrl: &#x27;./app.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./app.component.css&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line">  title: string = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">  constructor(private translate: TranslateService) &#123;</span><br><span class="line">    this.translate.get(&#x27;Tour of Heroes&#x27;).subscribe((res: string) =&gt; &#123;</span><br><span class="line">      this.title = res;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-222.png" alt="app.component.ts" loading="lazy"></p><h3 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h3><p>上記修正をすると、次のように表示されます。</p><p><img src="image-223.png" alt="ツアー・オブ・ヒーローズ" loading="lazy"></p><h2 id="キャッシュバスティング"><a href="#キャッシュバスティング" class="headerlink" title="キャッシュバスティング"></a>キャッシュバスティング</h2><p>翻訳JSONをキャッシュバスティングに対応させます。</p><p>「src\app\app.module.ts」を次のように修正することで、ページを開くと新たな翻訳JSONを取得するようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export function createTranslateLoader(http: HttpClient) &#123;</span><br><span class="line">  return new TranslateHttpLoader(http, &#x27;./assets/i18n/&#x27;, &#x27;.json&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">↓↓↓</span><br><span class="line">export function createTranslateLoader(http: HttpClient) &#123;</span><br><span class="line">  return new TranslateHttpLoader(http, &#x27;./assets/i18n/&#x27;, &#x27;.json?cb=&#x27; + new Date().getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-232.png" alt="&#39;./assets/i18n/&#39;, &#39;.json?cb=&#39; + new Date().getTime()" loading="lazy"></p><p>実行してみるとこんな感じに、毎回取得しているのが分かると思います。</p><p><img src="image-233.png" alt="キャッシュバスティング" loading="lazy"></p><p>理想を言えばビルドやデプロイ毎で、キャッシュバスティングされればいいのですが、Angular にはその機能がないようです。</p><p>今後のアップデートに期待します。</p><h2 id="躓いた点"><a href="#躓いた点" class="headerlink" title="躓いた点"></a>躓いた点</h2><h3 id="assets-i18n-en-json-404-Not-Found"><a href="#assets-i18n-en-json-404-Not-Found" class="headerlink" title=".&#x2F;assets&#x2F;i18n&#x2F;en.json 404 Not Found"></a>.&#x2F;assets&#x2F;i18n&#x2F;en.json 404 Not Found</h3><p>次のエラーが出て、翻訳JSONが取得できなかった。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR &#123;body: &#123;…&#125;, url: &#x27;./assets/i18n/en.json&#x27;, headers: HttpHeaders, status: 404, statusText: &#x27;Not Found&#x27;&#125;</span><br></pre></td></tr></table></figure><p><img src="image-225.png" alt="ERROR {body: {…}, url: &#39;./assets/i18n/en.json&#39;, headers: HttpHeaders, status: 404, statusText: &#39;Not Found&#39;}" loading="lazy"></p><h4 id="解決"><a href="#解決" class="headerlink" title="解決"></a>解決</h4><p>「src\app\app.module.ts」内で HttpClientInMemoryWebApiModule が読み込まれているとエラーになるみたいなので、コメントアウトしました。</p><p><img src="image-226.png" alt="HttpClientInMemoryWebApiModule をコメントアウト" loading="lazy"></p><h3 id="Invalid-version-“15-2-15-3”"><a href="#Invalid-version-“15-2-15-3”" class="headerlink" title="Invalid version: “15.2-15.3”"></a>Invalid version: “15.2-15.3”</h3><p>次のエラーが出て、build ができなかった。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Angular\toh-pt6&gt; npm run build</span><br><span class="line"></span><br><span class="line">&gt; angular.io-example@0.0.0 build</span><br><span class="line">&gt; ng build</span><br><span class="line"></span><br><span class="line">⠙ Generating browser application bundles (phase: setup)...Processing legacy &quot;View Engine&quot; libraries:</span><br><span class="line">- angular-in-memory-web-api [module/esm5] (git+https://github.com/angular/in-memory-web-api.git)</span><br><span class="line">Encourage the library authors to publish an Ivy distribution.</span><br><span class="line">✔ Browser application bundle generation complete.</span><br><span class="line">An unhandled exception occurred: Transform failed with 1 error:</span><br><span class="line">error: Invalid version: &quot;15.2-15.3&quot;</span><br><span class="line">See &quot;C:\Users*****\AppData\Local\Temp\ng-jJmYje\angular-errors.log&quot; for further details.</span><br></pre></td></tr></table></figure><p><img src="image-230.png" alt="error: Invalid version: &quot;15.2-15.3&quot;" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[error] HookWebpackError: Transform failed with 1 error:</span><br><span class="line">error: Invalid version: &quot;15.2-15.3&quot;</span><br><span class="line">    at makeWebpackError (D:\Angular\toh-pt6\node_modules\webpack\lib\HookWebpackError.js:48:9)</span><br><span class="line">    at D:\Angular\toh-pt6\node_modules\webpack\lib\Compilation.js:3055:12</span><br><span class="line">    at eval (eval at create (D:\Angular\toh-pt6\node_modules\tapable\lib\HookCodeFactory.js:33:10), &lt;anonymous&gt;:98:1)</span><br><span class="line">    at processTicksAndRejections (node:internal/process/task_queues:96:5)</span><br><span class="line">-- inner error --</span><br><span class="line">Error: Transform failed with 1 error:</span><br><span class="line">error: Invalid version: &quot;15.2-15.3&quot;</span><br><span class="line">    at failureErrorWithLog (D:\Angular\toh-pt6\node_modules\esbuild\lib\main.js:1557:15)</span><br><span class="line">    at D:\Angular\toh-pt6\node_modules\esbuild\lib\main.js:1346:29</span><br><span class="line">    at D:\Angular\toh-pt6\node_modules\esbuild\lib\main.js:637:9</span><br><span class="line">    at handleIncomingPacket (D:\Angular\toh-pt6\node_modules\esbuild\lib\main.js:734:9)</span><br><span class="line">    at Socket.readFromStdout (D:\Angular\toh-pt6\node_modules\esbuild\lib\main.js:604:7)</span><br><span class="line">    at Socket.emit (node:events:390:28)</span><br><span class="line">    at addChunk (node:internal/streams/readable:315:12)</span><br><span class="line">    at readableAddChunk (node:internal/streams/readable:289:9)</span><br><span class="line">    at Socket.Readable.push (node:internal/streams/readable:228:10)</span><br><span class="line">    at Pipe.onStreamRead (node:internal/stream_base_commons:199:23)</span><br></pre></td></tr></table></figure><h3 id="解決-1"><a href="#解決-1" class="headerlink" title="解決"></a>解決</h3><p>「@angular-devkit&#x2F;build-angular」を 13.2.6 にアップデートしたらビルドできた。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update @angular-devkit/build-angular@13.2.6</span><br></pre></td></tr></table></figure><p><img src="image-231.png" alt="npm run build" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/ngx-translate/core">https://github.com/ngx-translate/core</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;メモです。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 21H2 22000.556&lt;/li&gt;
&lt;li&gt;Angular CLI</summary>
      
    
    
    
    
    <category term="angular" scheme="https://noitaro.github.io/tags/angular/"/>
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow の環境構築</title>
    <link href="https://noitaro.github.io/tensorflow-install/"/>
    <id>https://noitaro.github.io/tensorflow-install/</id>
    <published>2022-03-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.659Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.tensorflow.org/install" title="公式サイト">公式サイト</a> の手順通りにやったものです。</p><p>公式サイトより詳しくないのでご了承ください。自分の覚書みたいなものです。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 21H2 19044.1526</li><li>Python 3.9.6</li><li>pip 21.1.3</li><li>TensorFlow 2.8.0</li><li>CUDA 11.2</li><li>cuDNN SDK 8.1.0</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="Microsoft-Visual-C-再頒布可能パッケージ"><a href="#Microsoft-Visual-C-再頒布可能パッケージ" class="headerlink" title="Microsoft Visual C++ 再頒布可能パッケージ"></a>Microsoft Visual C++ 再頒布可能パッケージ</h3><p><a href="https://docs.microsoft.com/ja-JP/cpp/windows/latest-supported-vc-redist?view=msvc-170">このパッケージ</a>に含まれる msvcp140_1.dll が必要のためインストールする。</p><p>うちのPCは 64ビットOS なので、アーキテクチャX64 の実行ファイルをダウンロードしてインストールした。</p><p><img src="image-192.png" alt="Microsoft Visual C++ 再頒布可能パッケージ ダウンロード" loading="lazy"></p><p><img src="image-193.png" alt="Microsoft Visual C++ 2015-2022 Redistributable (x64) - 14.31.31103" loading="lazy"></p><p>Microsoft Visual C++ 2015-2022 Redistributable (x64) - 14.31.31103</p><h3 id="ロングパスの有効化"><a href="#ロングパスの有効化" class="headerlink" title="ロングパスの有効化"></a>ロングパスの有効化</h3><p>Windows だと 256文字以上のフォルダ名＋ファイル名の場合エラーとなるため、ロングパスを有効にさせます。</p><p>スタートメニューに「regedit」と入力し、レジストリエディッターを起動させます。</p><p><img src="image-194.png" alt="レジストリエディッター起動" loading="lazy"></p><p>レジストリエディター で「HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem」に移動します。</p><p>「FileSystem」フォルダ内に「LongPathsEnabled」が無い場合は追加します。</p><p>右クリックメニューから「新規 -&gt; DWORD (32ビット) 値」を選択し、新しく追加します。</p><p><img src="image-195.png" alt="DWORD (32ビット) 値" loading="lazy"></p><ul><li>キー: LongPathsEnabled</li><li>値: 1</li></ul><p><img src="image-196.png" alt="LongPathsEnabled" loading="lazy"></p><h4 id="設定後"><a href="#設定後" class="headerlink" title="設定後"></a>設定後</h4><p><img src="image-197.png" alt="LongPathsEnabled" loading="lazy"></p><h2 id="TensorFlow-のインストール"><a href="#TensorFlow-のインストール" class="headerlink" title="TensorFlow のインストール"></a>TensorFlow のインストール</h2><p>次のコマンドで TensorFlow がインストールできます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade tensorflow</span><br></pre></td></tr></table></figure><p><img src="image-198.png" alt="TensorFlowインストール" loading="lazy"></p><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>次のコマンドで TensorFlow のインストールに成功したか確認することができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span><br></pre></td></tr></table></figure><p><img src="image-199.png" alt="TensorFlow実行" loading="lazy"></p><p>GPUを使うためのDLLが無いのでエラーになってますが、動いてはいそうです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;python -c &quot;import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span><br><span class="line">2022-03-06 16:59:24.092377: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library &#x27;cudart64_110.dll&#x27;; dlerror: cudart64_110.dll not found</span><br><span class="line">2022-03-06 16:59:24.092624: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.</span><br><span class="line">2022-03-06 16:59:27.917585: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library &#x27;cudart64_110.dll&#x27;; dlerror: cudart64_110.dll not found</span><br><span class="line">2022-03-06 16:59:27.918185: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library &#x27;cublas64_11.dll&#x27;; dlerror: cublas64_11.dll not found</span><br><span class="line">2022-03-06 16:59:27.919028: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library &#x27;cublasLt64_11.dll&#x27;; dlerror: cublasLt64_11.dll not found</span><br><span class="line">2022-03-06 16:59:27.919546: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library &#x27;cufft64_10.dll&#x27;; dlerror: cufft64_10.dll not found</span><br><span class="line">2022-03-06 16:59:27.920028: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library &#x27;curand64_10.dll&#x27;; dlerror: curand64_10.dll not found</span><br><span class="line">2022-03-06 16:59:27.920502: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library &#x27;cusolver64_11.dll&#x27;; dlerror: cusolver64_11.dll not found</span><br><span class="line">2022-03-06 16:59:27.920977: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library &#x27;cusparse64_11.dll&#x27;; dlerror: cusparse64_11.dll not found</span><br><span class="line">2022-03-06 16:59:27.921440: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library &#x27;cudnn64_8.dll&#x27;; dlerror: cudnn64_8.dll not found</span><br><span class="line">2022-03-06 16:59:27.921521: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1850] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.</span><br><span class="line">Skipping registering GPU devices...</span><br><span class="line">2022-03-06 16:59:27.922366: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX AVX2</span><br><span class="line">To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.</span><br><span class="line">tf.Tensor(93.55823, shape=(), dtype=float32)</span><br></pre></td></tr></table></figure><h2 id="GPU-サポート"><a href="#GPU-サポート" class="headerlink" title="GPU サポート"></a>GPU サポート</h2><p>CPUだけでも機械学習できますが、GPUを使えるようにします。</p><p>GPU サポートの設定方法も <a href="https://www.tensorflow.org/install/gpu" title="公式サイト">公式サイト</a> を参考にしました。</p><h3 id="NVIDIA-GPU-ドライバー-v450-80-02-以降"><a href="#NVIDIA-GPU-ドライバー-v450-80-02-以降" class="headerlink" title="NVIDIA GPU ドライバー v450.80.02 以降"></a>NVIDIA GPU ドライバー v450.80.02 以降</h3><p>使ってるグラボ用の <a href="https://www.nvidia.com/download/index.aspx" title="GPUドライバー">GPUドライバー</a> をダウンロードしてインストールします。</p><p><img src="image-201.png" alt="NVIDIA GPU ドライバー" loading="lazy"></p><p>v450.80.02 以降でないと正常に動作しないらしいです。</p><p>今回は「NVIDIAグラフィックスドライバー」にチェックを入れてインストールしました。</p><p><img src="image-203.png" alt="NVIDIAグラフィックスドライバー" loading="lazy"></p><h3 id="CUDA-11-2"><a href="#CUDA-11-2" class="headerlink" title="CUDA 11.2"></a>CUDA 11.2</h3><p>TensorFlow 2.8.0 は CUDA 11.2 に対応しています。</p><p><a href="https://developer.nvidia.com/cuda-toolkit-archive" title="CUDA Toolkit Archive">CUDA Toolkit Archive</a> よりダウンロードできます。</p><p><img src="image-204.png" alt="CUDA 11.2" loading="lazy"></p><p>ダウンロードが出来たので実行したところ、インストールできませんでした。</p><p>You already have a newer version of the NVIDIA Frameview SDK installed.</p><p><img src="image-205.png" alt="You already have a newer version of the NVIDIA Frameview SDK installed." loading="lazy"></p><p>Frameview というアプリが既にインストールされていたので、一度アンインストールして再度実行したところ、無事にインストールすることができました。</p><p><img src="image-206.png" alt="Frameview アンインストール" loading="lazy"></p><p>カスタムインストールを選択して、CUDA のみをインストールしました。</p><p><img src="image-207.png" alt="CUDA のみインストール" loading="lazy"></p><h3 id="cuDNN-SDK-8-1-0"><a href="#cuDNN-SDK-8-1-0" class="headerlink" title="cuDNN SDK 8.1.0"></a>cuDNN SDK 8.1.0</h3><p><a href="https://developer.nvidia.com/rdp/cudnn-archive" title="cuDNN Archive">cuDNN Archive</a> から cuDNN SDK v8.1.0 をダウンロードします。</p><p>CUDA 11.2 対応版をダウンロードします。cuDNN v8.1.1 でも問題ありませんでした。</p><p><img src="image-208.png" alt="cuDNN SDK 8.1.0" loading="lazy"></p><p>x64 が無かったので「cuDNN Library for Windows (x86)」をダウンロードして、</p><p><img src="image-210.png" alt="cuDNN Library for Windows (x86)" loading="lazy"></p><p>Cドライブの直下に新規フォルダー「tools」を作って、そこに展開して置いておきます。</p><p><img src="image-211.png" alt="toolsに展開" loading="lazy"></p><h3 id="環境変数"><a href="#環境変数" class="headerlink" title="環境変数"></a>環境変数</h3><p>最後に今インストールしたディレクトリを、環境変数に登録します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2\bin</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2\extras\CUPTI\lib64</span><br><span class="line">C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2\include</span><br><span class="line">C:\tools\cuda\bin</span><br></pre></td></tr></table></figure><p><img src="image-212.png" alt="環境変数設定" loading="lazy"></p><h3 id="動作確認-1"><a href="#動作確認-1" class="headerlink" title="動作確認"></a>動作確認</h3><p>動作確認をします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span><br></pre></td></tr></table></figure><p><img src="image-213.png" alt="tensorflow実行" loading="lazy"></p><p>正常に GPU が認識されているので、問題なさそうです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;python -c &quot;import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span><br><span class="line">2022-03-06 19:34:12.714818: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1900] Ignoring visible gpu device (device: 0, name: NVIDIA GeForce GTX 760, pci bus id: 0000:01:00.0, compute capability: 3.0) with Cuda compute capability 3.0. The minimum required Cuda capability is 3.5.</span><br><span class="line">2022-03-06 19:34:12.718506: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX AVX2</span><br><span class="line">To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.</span><br><span class="line">tf.Tensor(392.52243, shape=(), dtype=float32)</span><br></pre></td></tr></table></figure><h2 id="今回のオチ"><a href="#今回のオチ" class="headerlink" title="今回のオチ"></a>今回のオチ</h2><p>よく読んでみると NVIDIA GeForce GTX 760 は計算能力が低いから使わないって書いてありますね。</p><p>せっかく設定したのに、無駄に終わりました。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/install&quot; title=&quot;公式サイト&quot;&gt;公式サイト&lt;/a&gt; の手順通りにやったものです。&lt;/p&gt;
&lt;p&gt;公式サイトより詳しくないのでご了承ください。自分の覚書みたいなものです。&lt;/p&gt;
&lt;h2 i</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="tensorflow" scheme="https://noitaro.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Vue を使ったWebアプリを Heroku で公開</title>
    <link href="https://noitaro.github.io/vue-to-heroku/"/>
    <id>https://noitaro.github.io/vue-to-heroku/</id>
    <published>2022-03-05T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 22000.527</li><li>Heroku CLI 7.53.0</li><li>Node.js v16.13.1</li><li>npm 8.3.0</li><li>git version 2.34.1.windows.1</li><li>vue cli 4.5.15</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="Heroku-CLI"><a href="#Heroku-CLI" class="headerlink" title="Heroku CLI"></a>Heroku CLI</h3><p>Heroku にアプリをデプロイするには、Heroku CLI が必要です。</p><p>Windows の場合は、インストーラーでしかインストールできないので、<a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up" title="公式サイト">公式サイト</a> からダウンロードしてインストールしておきます。</p><p><img src="image-172.png" alt="Heroku CLI ダウンロード" loading="lazy"></p><p>設定は特に気にせず、そのままインストールしました。</p><p><img src="image-173.png" alt="Heroku CLI インストール" loading="lazy"></p><p>インストールが終わったら「Close」で終了します。</p><p><img src="image-174.png" alt="Heroku CLI インストール" loading="lazy"></p><p>インストールが終わるとコマンドプロンプトから herokuコマンド が使えるようになります。</p><h4 id="HerokuCLIにログイン"><a href="#HerokuCLIにログイン" class="headerlink" title="HerokuCLIにログイン"></a>HerokuCLIにログイン</h4><p>Heroku を使うために、事前にログインしておきます。</p><p>適当なディレクトリでコマンドプロンプトを開いて、次のコマンドを入力し Heroku にログインします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku login</span><br></pre></td></tr></table></figure><p><img src="image-175.png" alt="heroku login" loading="lazy"></p><p>エンターキーを押すとブラウザが立ち上がり Heroku へのログインを要求されます。</p><p><img src="image-176.png" alt="Herokuログイン" loading="lazy"></p><p>Heroku へのログインに成功すると、コマンドプロンプトの方に反映されます。</p><p><img src="image-177.png" alt="Herokuログイン" loading="lazy"></p><p>これで HerokuCLI の準備が完了しました。</p><h3 id="Vueプロジェクトの作成"><a href="#Vueプロジェクトの作成" class="headerlink" title="Vueプロジェクトの作成"></a>Vueプロジェクトの作成</h3><p>今回は Vueプロジェクト をデプロイしたいので、軽く作成しちゃいます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vueheroku</span><br><span class="line">cd vueheroku</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="image-178.png" alt="npm run dev" loading="lazy"></p><p>ついでに一度、ビルドもしておきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><img src="image-184.png" alt="npm run build" loading="lazy"></p><h3 id="Vueプロジェクトの設定"><a href="#Vueプロジェクトの設定" class="headerlink" title="Vueプロジェクトの設定"></a>Vueプロジェクトの設定</h3><p>このまま Heroku にデプロイしても動かないので、サーバーを追加します。</p><h4 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>プロジェクトの直下に「server.js」を作成して、次のコードをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var path = require(&#x27;path&#x27;);</span><br><span class="line">var serveStatic = require(&#x27;serve-static&#x27;);</span><br><span class="line">app = express();</span><br><span class="line">app.use(serveStatic(__dirname + &#x27;/dist&#x27;));</span><br><span class="line">var port = process.env.PORT || 5000;</span><br><span class="line">app.listen(port);</span><br><span class="line">console.log(&#x27;server started &#x27; + port);</span><br></pre></td></tr></table></figure><p><img src="image-183.png" alt="server.js" loading="lazy"></p><p>続いて「package.json」も修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;npm run dev&quot;,</span><br><span class="line">↓↓↓</span><br><span class="line">&quot;start&quot;: &quot;node server.js&quot;,</span><br></pre></td></tr></table></figure><p><img src="image-186.png" alt="package.json" loading="lazy"></p><h3 id="Gitリポジトリの作成"><a href="#Gitリポジトリの作成" class="headerlink" title="Gitリポジトリの作成"></a>Gitリポジトリの作成</h3><p>Heruku にデプロイするには、ソースを Git にプッシュする必要があります。</p><p>次のコマンドで Gitリポジトリ を作成して、プッシュできる状態にします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/noitaro/vueheroku.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p><img src="image-180.png" alt="git push -u origin main" loading="lazy"></p><p>「.gitignore」から「&#x2F;dist&#x2F;」を削除して、distフォルダも Git管理できるようにします。</p><p><img src="image-187.png" alt=".gitignore" loading="lazy"></p><h2 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h2><p>Webアプリを Heroku にデプロイして公開します。</p><h3 id="Herokuアプリ-の作成"><a href="#Herokuアプリ-の作成" class="headerlink" title="Herokuアプリ の作成"></a>Herokuアプリ の作成</h3><p>次のコマンドで Heroku にアプリを作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku create</span><br></pre></td></tr></table></figure><p><img src="image-179.png" alt="heroku create" loading="lazy"></p><p>このように、Heroku の方にアプリが作成されます。</p><p><img src="image-181.png" alt="Herokuアプリ" loading="lazy"></p><h3 id="デプロイ-1"><a href="#デプロイ-1" class="headerlink" title="デプロイ"></a>デプロイ</h3><p>次のコマンドで Git にコードをプッシュし、Heroku にデプロイします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push heroku main</span><br></pre></td></tr></table></figure><p><img src="image-182.png" alt="git push heroku main" loading="lazy"></p><p>次のコマンドで Heroku にデプロイされたWebアプリを、ブラウザで開くことができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku open</span><br></pre></td></tr></table></figure><p><img src="image-189.png" alt="heroku open" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 21H2 22000.527&lt;/li&gt;
&lt;li&gt;Heroku CLI 7.53.0&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
    <category term="vue" scheme="https://noitaro.github.io/tags/vue/"/>
    
    <category term="heroku" scheme="https://noitaro.github.io/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>プラグインを使わずに WordPress をバックアップする</title>
    <link href="https://noitaro.github.io/wordpress-backup/"/>
    <id>https://noitaro.github.io/wordpress-backup/</id>
    <published>2022-02-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.835Z</updated>
    
    <content type="html"><![CDATA[<p>SSHでサーバーにログインして、WordPressのファイルとDBをバックアップします。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 22000.527</li><li><a href="https://mixhost.jp/" title="mixhost">mixhost</a></li><li>TeraTerm v4.106</li></ul><h2 id="SSH接続"><a href="#SSH接続" class="headerlink" title="SSH接続"></a>SSH接続</h2><p>SSHでサーバーに接続できるようにします。</p><h3 id="秘密キーの作成"><a href="#秘密キーの作成" class="headerlink" title="秘密キーの作成"></a>秘密キーの作成</h3><p>まず、<a href="https://mixhost.jp/" title="mixhost">mixhost</a> の cPanel にログインし「SSHアクセス」を選択します。</p><p><img src="image-151.png" alt="SSHアクセス" loading="lazy"></p><p>SSHキーの管理を選択し「新しいキーの作成」を選択します。</p><p><img src="image-152.png" alt="新しいキーの作成" loading="lazy"></p><p>パスワードを決めて「キーの生成」を押します。</p><p><img src="image-153.png" alt="キーの生成" loading="lazy"></p><p>キーの生成が完了したら一度前の画面に戻り、今作った秘密キーを表示させて</p><p><img src="image-154.png" alt="秘密キーの表示" loading="lazy"></p><p>「キーのダウンロード」でPCに保存しておきます。</p><p><img src="image-155.png" alt="キーのダウンロード" loading="lazy"></p><p>さらに公開キーの「管理」を選択し、</p><p><img src="image-157.png" alt="公開キー" loading="lazy"></p><p>「Authorize」をクリックして認証させます。</p><p><img src="image-158.png" alt="Authorize" loading="lazy"></p><p>これで mixhost の設定は完了です。</p><p><img src="image-159.png" alt="キー認証" loading="lazy"></p><h3 id="TeraTermでSSH接続"><a href="#TeraTermでSSH接続" class="headerlink" title="TeraTermでSSH接続"></a>TeraTermでSSH接続</h3><p>Windows から SSH接続をするには <a href="https://forest.watch.impress.co.jp/library/software/utf8teraterm/" title="TeraTerm">TeraTerm</a> を使います。</p><p>事前に「TeraTerm ポータブル版」をダウンロードして展開しておきましょう。ポータブル版はインストールしないで使えるのでオススメ。</p><p>「ttermpro.exe」で TeraTerm を起動させ、</p><p><img src="image-156.png" alt="ttermpro" loading="lazy"></p><p>接続情報のホスト名に、初期のドメイン名を入力し「OK」ボタンで次に進みます。</p><p><img src="image-160.png" alt="New connection" loading="lazy"></p><p>セキュリティーワーニングが出たら「Continue」を押します。</p><p><img src="image-161.png" alt="SECURITY WARNING" loading="lazy"></p><p>mixhostのユーザー名、SSHのパスワード、ダウンロードした秘密キーファイルを設定するとSSHで接続することができます。</p><p><img src="image-162.png" alt="SSH Authentication" loading="lazy"></p><h2 id="WordPress-バックアップ"><a href="#WordPress-バックアップ" class="headerlink" title="WordPress バックアップ"></a>WordPress バックアップ</h2><p>WordPress をバックアップするにはファイルとDBの2種類のデータをバックアップする必要があります。</p><h3 id="ファイル"><a href="#ファイル" class="headerlink" title="ファイル"></a>ファイル</h3><p>ファイルの方は、public_htmlディレクトリを全てバックアップすればOKです。</p><p>tarコマンドでファイルのアーカイブ化をします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar cvzf public_html_backup_202202261637.tar.gz ./public_html/</span><br></pre></td></tr></table></figure><p>アーカイブ化が完了すると「public_html_backup_202202261637.tar.gz」ファイルが出来上がるので、これをダウンロードして保存しておけばOKです。</p><p><img src="image-163.png" alt="public_html_backup_202202261637.tar.gz" loading="lazy"></p><p>ファイルをダウンロードするために、ファイルのフルパスを調べます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readlink -f public_html_backup_202202261637.tar.gz</span><br></pre></td></tr></table></figure><p><img src="image-164.png" alt="readlink" loading="lazy"></p><p>サーバーからファイルをダウンロードするには、メニューの「File &gt; SSH SCP」を選択し、</p><p><img src="image-166.png" alt="SSH SCP を選択" loading="lazy"></p><p>Fromにダウンロードするファイルのフルパスを設定、Toに保存先を設定して「Receive」をクリックするとダウンロードできます。</p><p><img src="image-167.png" alt="Secure File Copy" loading="lazy"></p><h3 id="データベース"><a href="#データベース" class="headerlink" title="データベース"></a>データベース</h3><p>続いて、データベースのバックアップをします。</p><h4 id="WordPress-のデータベース情報を調べる"><a href="#WordPress-のデータベース情報を調べる" class="headerlink" title="WordPress のデータベース情報を調べる"></a>WordPress のデータベース情報を調べる</h4><p>まず、データベースに繋ぐため WordPress が使っているデータベースの接続情報を調べます。</p><p>public_htmlディレクトリ内の「wp-config.php」を VIコマンドやCATコマンドで開いて、次の項目の値をメモしておきます。</p><ul><li>DB_NAME</li><li>DB_USER</li><li>DB_PASSWORD</li></ul><p><img src="image-168.png" alt="wp-config.php" loading="lazy"></p><h4 id="バックアップ"><a href="#バックアップ" class="headerlink" title="バックアップ"></a>バックアップ</h4><p>次のコマンドでDBをバックアップすることが出来ます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u[ユーザー名] -p[パスワード] [データベース名] &gt; [出力ファイル名]</span><br></pre></td></tr></table></figure><p><img src="image-169.png" alt="mysqldump" loading="lazy"></p><p>バックアップできたら、先ほどと同じ手順でファイルをダウンロードして完了です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SSHでサーバーにログインして、WordPressのファイルとDBをバックアップします。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 H</summary>
      
    
    
    
    
    <category term="wordpress" scheme="https://noitaro.github.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>GCP の VMインスタンスが開始できない時</title>
    <link href="https://noitaro.github.io/gcp-vm-instance-unstart/"/>
    <id>https://noitaro.github.io/gcp-vm-instance-unstart/</id>
    <published>2022-02-22T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>私の場合は、サービスアカウントが消されてて開始できませんでした。</p><p><img src="image-146.png" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance-1 を開始できませんでした: Operation type [start] failed with message &quot;The resource &#x27;873275048551-compute@developer.gserviceaccount.com&#x27; of type &#x27;serviceAccount&#x27; was not found.&quot;</span><br></pre></td></tr></table></figure><p><img src="image-147.png" loading="lazy"></p><h2 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h2><p>VMインスタンスの編集で、サービスアカウントを再設定したら問題なく開始することができました。</p><p><img src="image-150.png" loading="lazy"></p><p><img src="image-149.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;私の場合は、サービスアカウントが消されてて開始できませんでした。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image-146.png&quot; loadi</summary>
      
    
    
    
    
    <category term="gcp" scheme="https://noitaro.github.io/tags/gcp/"/>
    
  </entry>
  
  <entry>
    <title>C#製の静的サイトジェネレータ「Statiq」を試す。</title>
    <link href="https://noitaro.github.io/statiq/"/>
    <id>https://noitaro.github.io/statiq/</id>
    <published>2022-02-19T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.627Z</updated>
    
    <content type="html"><![CDATA[<p>C#で動作する静的サイトジェネレーターがあるとのことだったので試してみました。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 22000.493</li><li>.NET Core 5.0.405</li><li>Statiq.Web 1.0.0-beta.44</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="NET-Core-5-0"><a href="#NET-Core-5-0" class="headerlink" title=".NET Core 5.0"></a>.NET Core 5.0</h3><p>.NET Core 5.0 Framework を使うので未インストールの場合は、事前にインストールしておきます。</p><p><a href="https://dotnet.microsoft.com/en-us/download" title="こちら">こちら</a> から「.NET Core SDK 5.0」をダウンロードしてインストールします。</p><p><img src="image-133.png" alt=".NET Core SDK 5.0 ダウンロード" loading="lazy"></p><h4 id="インストールしてあるか調べる方法"><a href="#インストールしてあるか調べる方法" class="headerlink" title="インストールしてあるか調べる方法"></a>インストールしてあるか調べる方法</h4><p>次のコマンドを使うと .NET Core のインストール状態が分かります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --list-sdks</span><br></pre></td></tr></table></figure><p>私の場合は 5.0 と 6.0 がインストールしてありました。</p><p><img src="image-135.png" alt=".NET Core インストール状態" loading="lazy"></p><h2 id="Statiq"><a href="#Statiq" class="headerlink" title="Statiq"></a>Statiq</h2><h3 id="コンソールアプリの作成"><a href="#コンソールアプリの作成" class="headerlink" title="コンソールアプリの作成"></a>コンソールアプリの作成</h3><p>Statiq を使うため、.NETCoreコンソールアプリを作成します。</p><p>適当なフォルダでコマンドプロンプトを開き、</p><p><img src="image-125.png" alt="コマンドプロンプト起動" loading="lazy"></p><p>次のコマンドを使ってコンソールアプリを作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -o MyGenerator --framework net5.0</span><br></pre></td></tr></table></figure><p><img src="image-134.png" alt="コンソールアプリ作成" loading="lazy"></p><h3 id="Statiq-のインストール"><a href="#Statiq-のインストール" class="headerlink" title="Statiq のインストール"></a>Statiq のインストール</h3><p>今作ったコンソールアプリに Statiq をインストールします。</p><p>まず、コマンドプロンプトのディレクトリを今作ったコンソールアプリに移動して、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd .\MyGenerator\</span><br></pre></td></tr></table></figure><p><img src="image-127.png" alt="ディレクトリー移動" loading="lazy"></p><p>移動できたら次のコマンドをコピペして 最新のStatiqパッケージ をインストールします。</p><p>最新バージョンは <a href="https://www.nuget.org/packages/Statiq.Web" title="こちら">こちら</a> から確認できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Statiq.Web --version 1.0.0-beta.44</span><br></pre></td></tr></table></figure><h3 id="Statiq-の設定"><a href="#Statiq-の設定" class="headerlink" title="Statiq の設定"></a>Statiq の設定</h3><p>Statiqパッケージがインストールできたら、Statiqを使うように処理を修正します。</p><p>「Program.cs」を開いて次のようにコードを修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">using Statiq.App;</span><br><span class="line">using Statiq.Web;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace MyGenerator</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static async Task&lt;int&gt; Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            return await Bootstrapper</span><br><span class="line">                .Factory</span><br><span class="line">                .CreateWeb(args)</span><br><span class="line">                .RunAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-144.png" alt="Statiqの設定" loading="lazy"></p><h3 id="記事の追加"><a href="#記事の追加" class="headerlink" title="記事の追加"></a>記事の追加</h3><p>ブログの記事が無いと動作確認ができないので、ひとまず簡単な記事を追加します。</p><p>プロジェクトフォルダ内にフォルダ名「input」というフォルダを作り、</p><p><img src="image-136.png" alt="inputフォルダ作成" loading="lazy"></p><p>inputフォルダ内にフォルダ名「posts」というフォルダを作ります。</p><p><img src="image-137.png" alt="postsフォルダ作成" loading="lazy"></p><p>さらにpostsフォルダ内に記事の素となる、マークダウンファイル「example.md」というテキストファイルを作ります。</p><p><img src="image-138.png" alt="マークダウンファイル作成" loading="lazy"></p><p>今作った example.md をテキストエディターで開いて、次の内容をコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Title: This Is An Example Post</span><br><span class="line">Lead: Yay for examples!</span><br><span class="line">Published: 12/13/2014</span><br><span class="line">Tags:</span><br><span class="line">  - Examples</span><br><span class="line">  - Code</span><br><span class="line">---</span><br><span class="line">This is my example blog post content.</span><br></pre></td></tr></table></figure><p><img src="image-139.png" alt="マークダウン記事作成" loading="lazy"></p><h3 id="テーマの適用"><a href="#テーマの適用" class="headerlink" title="テーマの適用"></a>テーマの適用</h3><p>このままだとまだブログの体裁をなしていないので、<a href="https://github.com/statiqdev/CleanBlog" title="こちら">こちら</a> から最小構成のブログテーマをダウンロードして適用させます。</p><p>まずプロジェクトフォルダに「theme」フォルダを作り、</p><p><img src="image-140.png" alt="themeフォルダ作成" loading="lazy"></p><p><a href="https://github.com/statiqdev/CleanBlog" title="CleanBlogテーマ">CleanBlogテーマ</a> をダウンロードして、今作ったthemeフォルダに展開します。</p><p><img src="image-130.png" alt="テーマをダウンロード" loading="lazy"></p><p>展開したらこんな感じになりました。</p><p><img src="image-132.png" alt="テーマの展開" loading="lazy"></p><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>最後に動作確認をします。</p><p>次のコマンドを実行すると「<a href="http://localhost:5080/">http://localhost:5080/</a>」で動作確認ができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run -- preview</span><br></pre></td></tr></table></figure><p><img src="image-141.png" alt="dotnet run" loading="lazy"></p><p><img src="image-142.png" alt="My Blog" loading="lazy"></p><h2 id="今後"><a href="#今後" class="headerlink" title="今後"></a>今後</h2><p>とりあえず静的サイトジェネレーターが動くところまで確認できました。</p><p>今後は、デプロイや機能追加について調べていこうと思います。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.statiq.dev/framework/">https://www.statiq.dev/framework/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C#で動作する静的サイトジェネレーターがあるとのことだったので試してみました。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 2</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
  </entry>
  
  <entry>
    <title>【Windows11】コントロールパネルの開き方</title>
    <link href="https://noitaro.github.io/windows11-control-panel/"/>
    <id>https://noitaro.github.io/windows11-control-panel/</id>
    <published>2022-02-19T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 22000.493</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>適当に Windows11 のエクスプローラーを開き、アドレスバーの右矢印をクリック。</p><p><img src="image-121.png" loading="lazy"></p><p>ドロップダウンリスト内に、コントロールパネルがあるのでクリック。</p><p><img src="image-145.png" loading="lazy"></p><p>Windows11 でコントロールパネルを開くことができます。</p><p><img src="image-123.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 21H2 22000.493&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;手順&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="windows" scheme="https://noitaro.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>うさぎの紹介</title>
    <link href="https://noitaro.github.io/warakko-kamakura/"/>
    <id>https://noitaro.github.io/warakko-kamakura/</id>
    <published>2022-02-12T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.791Z</updated>
    
    <content type="html"><![CDATA[<p>ちょっと今回は脱線して、ウチのうさぎさんについてです。</p><p>技術ブログに技術系以外を載せるのはSEO的にアウトなんですが、ネタが無いからしょーがない。</p><h2 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h2><p>ウチにはペットのうさぎが居ます。</p><ul><li>名前：なこ</li><li>種類：ネザーランドドワーフ</li><li>性別：メス</li><li>生年月日：2017年3月13日</li></ul><p><img src="IMG_1917.png" loading="lazy"></p><p>SNSで見るうさぎと比べると臆病者で抱っことかも苦手らしく、基本的には寄ってきて構ってほしそうな時のみ構って上げる感じです。</p><p>部屋んぽは、朝と夜に合計3時間ぐらい。帰りたくないときは延長あり。牧草は食べ放題。おやつは部屋んぽの時のみ。出来るだけ快適に過ごしてもらえるように、日々努力している次第であります！</p><p>他のうさぎさんと比べると、庶民的な暮らしをしている方かな。</p><p>お世話係はテレワーク中なので、24時間365日、目の届くところにいます。足ダンとかされるとお世話係がビックリするので、緊急時以外は控えて頂けますよう重々お願い申し上げております。</p><h2 id="わらっこのかまくらハウス"><a href="#わらっこのかまくらハウス" class="headerlink" title="わらっこのかまくらハウス"></a>わらっこのかまくらハウス</h2><p>自己紹介はこのくらいにして <a href="https://amzn.to/3BgIajy">わらっこのかまくらハウス</a> を買ったので、なこさんにレビューして頂きます。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3BgIajy"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3BgIajy"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | わらっこ倶楽部　かまくらハウス　Ｍ | カワイ | 飼育ケージ内装 通販</div><div class="hbc-url">https://amzn.to/3BgIajy</div></div></div></div></a></div></div><p>実物はこんな感じ。</p><p>既に何日か使ってもらって少しボロボロになってますが、もの凄く肉厚で頑丈なかまくらです。</p><p><img src="PXL_20220212_091713633.png" loading="lazy"></p><p>前に布製のかまくらハウスをプレゼントしたときは、かじり過ぎて繊維を食べてしまったのでスグに没収したんですが、わら製のかまくらハウスならどれだけ食べても問題ないので、安心です。</p><p>布製のときはホント冷や汗が出ました。口から紐垂らして、引っ張ると結構長いのを飲み込んでましたからね。その一件以来、布製のかまくらは即没収＆即ゴミ箱行き。</p><p>入ってる姿は可愛かったんですが……</p><h3 id="Mサイズ"><a href="#Mサイズ" class="headerlink" title="Mサイズ"></a>Mサイズ</h3><p>今回はMサイズですが、ウチの子にはちょっと窮屈な感じです。</p><p>一般的なネザーランドドワーフだとちょうどいいですが、1.2kgぐらいの子には、もう一回り大きいのをオススメします。</p><p><img src="PXL_20220208_231407308.png" loading="lazy"></p><p>一度だけ中に入って顔を出してくれたのですが、すぐ飛び出してしまって写真撮れなかったです。またそのうち機嫌がよければ、入ってくれると思います。</p><p>このへっぴり腰が可愛い。</p><p><img src="PXL_20220208_231422101.png" loading="lazy"></p><p>入口の拡張工事に余念がありません。</p><p>あと外壁に窓を作りたいらしく、毎日少しづつモグモグしています。</p><p><img src="PXL_20220202_100024798.png" loading="lazy"></p><p>見られていると仕事に集中できないみたいなので、お世話係は身を潜めて、影から観察しています。とても可愛い。</p><p><img src="PXL_20220202_100027716.png" loading="lazy"></p><p>現場からは以上です！！</p><p>そのうち気が向いたら、リフォームされたかまくらハウスをお伝えできたらなっと思います。</p><h2 id="他のレビュー"><a href="#他のレビュー" class="headerlink" title="他のレビュー"></a>他のレビュー</h2><p>他になこさんにレビューしてもらったモノです。</p><p><a href="https://noitaro.github.io/mini-corn/">https://noitaro.github.io/mini-corn/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ちょっと今回は脱線して、ウチのうさぎさんについてです。&lt;/p&gt;
&lt;p&gt;技術ブログに技術系以外を載せるのはSEO的にアウトなんですが、ネタが無いからしょーがない。&lt;/p&gt;
&lt;h2 id=&quot;自己紹介&quot;&gt;&lt;a href=&quot;#自己紹介&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="rabbit" scheme="https://noitaro.github.io/tags/rabbit/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloud Functions でAPIを公開して JavaScript から呼び出す</title>
    <link href="https://noitaro.github.io/google-cloud-functions-javascript-call/"/>
    <id>https://noitaro.github.io/google-cloud-functions-javascript-call/</id>
    <published>2022-02-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.091Z</updated>
    
    <content type="html"><![CDATA[<p>ちょっと手こずったので、忘れないうちに備忘録しときます。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 22000.434</li><li>Node.js v16.13.1</li></ul><h2 id="Cloud-Functions-の準備"><a href="#Cloud-Functions-の準備" class="headerlink" title="Cloud Functions の準備"></a>Cloud Functions の準備</h2><p>Google Firebase の Cloud Functions を使ってAPIを公開するため、まず Firebase にプロジェクトを作成します。</p><p>無料枠を使うと 200万回の呼び出しまでできます。ソレを超えると有料ですが、バズらない限り超えないと思うので、実質無料で使い放題ですね。</p><p>Google の無料枠については <a href="https://cloud.google.com/free" title="こちら">こちら</a> にまとめられていました。ごく稀に変更されるので、たまに気がついたら再確認するとよいです。</p><h3 id="Firebase-プロジェクトの作成"><a href="#Firebase-プロジェクトの作成" class="headerlink" title="Firebase プロジェクトの作成"></a>Firebase プロジェクトの作成</h3><p>まず <a href="https://console.firebase.google.com/" title="Firebaseコンソール">Firebaseコンソール</a> にアクセスしてプロジェクトを作成します。</p><p><img src="image-94.png" alt="Firebase プロジェクトの作成" loading="lazy"></p><p>適当なプロジェクト名を入力し、</p><p><img src="image-95.png" alt="プロジェクト名を入力" loading="lazy"></p><p>アナリティクスは無効にしておきます。オススメされてるが使わないのです。</p><p><img src="image-96.png" alt="アナリティクス無効" loading="lazy"></p><p>しばらく待つとプロジェクトが完成します。</p><p><img src="image-97.png" alt="プロジェクト完成" loading="lazy"></p><h3 id="Cloud-Functions-を有効化"><a href="#Cloud-Functions-を有効化" class="headerlink" title="Cloud Functions を有効化"></a>Cloud Functions を有効化</h3><p>続いて Cloud Functions を有効化します。</p><p>Sparkプランだと Functions が使えないので、Blazeプラン(従量制) にアップグレードをします。アップグレードしても、すぐに請求されることも無いのでご安心を。ですが200万回呼び出しをしたら請求されます。</p><h4 id="Blazeプランにアップグレード"><a href="#Blazeプランにアップグレード" class="headerlink" title="Blazeプランにアップグレード"></a>Blazeプランにアップグレード</h4><p>左メニューの「Functions」を選択しプロジェクトをアップグレードします。</p><p><img src="image-98.png" alt="プロジェクトをアップグレード" loading="lazy"></p><p>課金情報がない場合は、ここで請求先アカウントの作成に入ります。</p><p><img src="image-99.png" alt="請求先アカウントの作成" loading="lazy"></p><p>課金情報を作ったら、Blazeプラン(従量制) にアップグレードできます。</p><p><img src="image-100.png" alt="Blazeプラン(従量制) にアップグレード" loading="lazy"></p><h2 id="APIの作成"><a href="#APIの作成" class="headerlink" title="APIの作成"></a>APIの作成</h2><p>Firebase にプロジェクトが出来たら、APIの作成に入ります。</p><p>まず作業用のフォルダーを作成して、右クリックメニューから Windowsターミナル を開きます。</p><p><img src="image-101.png" alt="Windowsターミナル" loading="lazy"></p><h3 id="Firebaseコマンドラインツールのインストール"><a href="#Firebaseコマンドラインツールのインストール" class="headerlink" title="Firebaseコマンドラインツールのインストール"></a>Firebaseコマンドラインツールのインストール</h3><p>はじめに、次のコマンドを入力して、Firebaseコマンドラインツールをインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g firebase-tools</span><br></pre></td></tr></table></figure><p><img src="image-102.png" alt="npm install -g firebase-tools" loading="lazy"></p><h3 id="プロジェクトの作成"><a href="#プロジェクトの作成" class="headerlink" title="プロジェクトの作成"></a>プロジェクトの作成</h3><p>続いて、次のコマンドを入力してプロジェクトの作成をします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase init</span><br></pre></td></tr></table></figure><p><img src="image-103.png" alt="firebase init" loading="lazy"></p><p>対話をしながらプロジェクトの作成ができます。</p><p>プロジェクトを作るディレクトリーに間違いがなければエンターキーを押します。</p><p>ちなみに、YやNを入力せずにエンターキーを押すと大文字の方が選択されるみたいです。今回はYが大文字なのでYesってことですね。</p><p>次に、どの機能を使うか聞かれるので「Functions」にチェックを入れてエンターキーを押します。</p><p><img src="image-104.png" alt="Functions" loading="lazy"></p><p>先ほど作ったプロジェクトにAPIを作成したいので「Use an existing project」を選択してエンターキーを押します。</p><p><img src="image-105.png" alt="Use an existing project" loading="lazy"></p><p>Firebaseのプロジェクトが表示されるので、先ほど作ったプロジェクト（今回は【functions-api】）を選択してエンターキーを押します。</p><p><img src="image-112.png" alt="プロジェクト選択" loading="lazy"></p><p>Cloud Functions で使う言語を聞かれるので「JavaScript」を選択してエンターキーを押します。</p><p><img src="image-107.png" alt="JavaScript を選択" loading="lazy"></p><p>ESLint は「No」を入力しエンターキーを押します！ ESLint はエラーとか警告とかがメンド臭かった思い出。</p><p><img src="image-108.png" alt="ESLint" loading="lazy"></p><p>依存関係のインストールもしたいのでそのままエンターキーを押します。</p><p><img src="image-109.png" alt="依存関係のインストール" loading="lazy"></p><p>これでプロジェクトの作成が完了です。</p><p><img src="image-110.png" alt="プロジェクト作成完了" loading="lazy"></p><h3 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h3><p>APIを作成して Cloud Functions にデプロイをします。</p><p>とりあえず、サクッとサンプルのコメントを外してデプロイしてみます。</p><p>functionsフォルダーの「index.js」を開いてコメントになっている処理を有効にします。</p><p><img src="image-111.png" alt="コメントになっている処理を有効化" loading="lazy"></p><p>次のコマンドを入力すると Cloud Functions にAPIをデプロイすることが出来ます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firebase deploy</span><br></pre></td></tr></table></figure><p><img src="image-113.png" alt="firebase deploy" loading="lazy"></p><p>デプロイには3分ほどかかりました。</p><p>無事にデプロイが完了すると Function URL が表示されるので、そのURLをブラウザにコピペすると Cloud Functions の API を実行することが出来ます。</p><p><img src="image-114.png" alt="Cloud Functions API 実行" loading="lazy"></p><h2 id="JavaScript-から呼び出し"><a href="#JavaScript-から呼び出し" class="headerlink" title="JavaScript から呼び出し"></a>JavaScript から呼び出し</h2><p>APIの動作確認ができたら、最後に JavaScript から呼び出しをしてみましょう。</p><p>適当なディレクトリーに新規で「index.html」ファイルを作成して、次のコードを貼り付けます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;ja&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=&quot;ajaxButton&quot; type=&quot;button&quot;&gt;Cloud FunctionsのAPIを実行&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        (function () &#123;</span><br><span class="line">            var httpRequest;</span><br><span class="line">            document.getElementById(&quot;ajaxButton&quot;).addEventListener(&#x27;click&#x27;, makeRequest);</span><br><span class="line"></span><br><span class="line">            function makeRequest() &#123;</span><br><span class="line">                httpRequest = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">                if (!httpRequest) &#123;</span><br><span class="line">                    alert(&#x27;中断 :( XMLHTTP インスタンスを生成できませんでした&#x27;);</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                httpRequest.onreadystatechange = alertContents;</span><br><span class="line">                httpRequest.open(&#x27;GET&#x27;, &#x27;https://us-central1-functions-api-a8011.cloudfunctions.net/helloWorld&#x27;);</span><br><span class="line">                httpRequest.send();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            function alertContents() &#123;</span><br><span class="line">                if (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</span><br><span class="line">                    if (httpRequest.status === 200) &#123;</span><br><span class="line">                        alert(httpRequest.responseText);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        alert(&#x27;リクエストに問題が発生しました&#x27;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>httpRequest.open関数の URL は自分のAPIに置き換えて下さいね。</p><p>貼り付けたら保存して、ダブルクリックで実行します。</p><p><img src="image-115.png" alt="index.html実行" loading="lazy"></p><p>実行してブラウザ内のAPI実行ボタンを押すと、APIから取得した結果が表示されます。</p><p><img src="image-116.png" alt="エラーアラート" loading="lazy"></p><p>エラーになってしまったので F12キーで DevTools を開き、原因を探していきましょう。</p><p>DevTools のネットワークタブを開いてから、再度API実行ボタンを押すとコンソールにエラー内容が表示されます。</p><p><img src="image-117.png" alt="Access to XMLHttpRequest at &#39;https://us-central1-functions-api-a8011.cloudfunctions.net/helloWorld&#39; from origin &#39;null&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource." loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;https://us-central1-functions-api-a8011.cloudfunctions.net/helloWorld&#x27; from origin &#x27;null&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>ふむふむなるほど。今回はCORSポリシーに違反しているので、エラーにされていることが分かりました。</p><h3 id="CORSポリシー違反の解決"><a href="#CORSポリシー違反の解決" class="headerlink" title="CORSポリシー違反の解決"></a>CORSポリシー違反の解決</h3><p>CORSエラーの場合は、APIがクロスドメインを許可していないため起こるので、クロスドメインを許可する設定を与えてあげれば問題解決です。</p><p>functionsフォルダーの「index.js」を開いて、次の1行を追記します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br></pre></td></tr></table></figure><p>こんな感じになればOK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exports.helloWorld = functions.https.onRequest((request, response) =&gt; &#123;</span><br><span class="line">  functions.logger.info(&quot;Hello logs!&quot;, &#123;structuredData: true&#125;);</span><br><span class="line">  response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">  response.send(&quot;Hello from Firebase!&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="image-118.png" alt="Access-Control-Allow-Origin" loading="lazy"></p><p>修正して保存したら、再度デプロイをして動作確認をします。</p><p>アラートで「Hello from Firebase!」と表示されれば大成功です！！！</p><p><img src="image-119.png" alt="Hello from Firebase!" loading="lazy"></p><p>以上、お疲れさまでした。よきAPIライフをお送りください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ちょっと手こずったので、忘れないうちに備忘録しときます。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 21H2 22000.4</summary>
      
    
    
    
    
    <category term="firebase" scheme="https://noitaro.github.io/tags/firebase/"/>
    
    <category term="google" scheme="https://noitaro.github.io/tags/google/"/>
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Html で Python を動かす</title>
    <link href="https://noitaro.github.io/brython/"/>
    <id>https://noitaro.github.io/brython/</id>
    <published>2022-01-29T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.783Z</updated>
    
    <content type="html"><![CDATA[<p>今回はホントに Html で Python を動かしてみます。</p><p>実際に動かしてみた感想は、出来ることが少ないのであまり魅力を感じませんでした。</p><p>一応こんな技術もあるのかって感じで、覚えておいてくれればいいかなと思います。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 (22000.434)</li><li>Python 3.10.1</li><li>Brython 3.10.4</li></ul><h2 id="Brython"><a href="#Brython" class="headerlink" title="Brython"></a>Brython</h2><p>今回使うモジュールは <a href="https://brython.info/" title="Brython">Brython</a> です。</p><p>ブラウザ上で動かすので pip でインストール必要はありません。</p><p>ですが WebSocket を使って Python ファイルを読み込むので、実行には Webサーバー が必要です。ここがメンドクサポイントです。 作ったHtmlをダブルクリックしても動かないんですよね。</p><h3 id="作業フォルダ"><a href="#作業フォルダ" class="headerlink" title="作業フォルダ"></a>作業フォルダ</h3><p>まず作業用フォルダを作成して、その中にカラのファイルを作っていきます。</p><p>私はとりあえずこんな感じでサクッと作りました。</p><p><img src="image-85.png" loading="lazy"></p><p>ファイルの中身はまだカラです。</p><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><p>各ファイルにそれぞれ次のソースをコピペします。Brython は CDN で読み込んでいます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/brython/3.8.7/brython.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body onload=&quot;brython()&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/python&quot; src=&quot;main.py&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from browser import document</span><br><span class="line">document &lt;= &quot;Hello !&quot;</span><br></pre></td></tr></table></figure><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>ここまで出来たら動作確認をします。</p><p>先ほど作った作業フォルダで右クリックをして Windows ターミナル を開きます。</p><p><img src="image-86.png" alt="Windows ターミナルで開く" loading="lazy"></p><p>Windows 10 を使っている方は、シフトキーを押しながら右クリックをすると コマンドプロンプトか Windows PowerShell が開けたはずです。</p><p>開いたターミナルに次のコマンドを入力して Webサーバー を起動させます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p><img src="image-88.png" alt="python httpserver" loading="lazy"></p><p>Webサーバー が起動したらブラウザを開いて <a href="http://localhost:8000/">http://localhost:8000</a> にアクセスすれば、今作った Html と Python が実行されます。</p><p><img src="image-89.png" alt="動作確認" loading="lazy"></p><h2 id="応用編-電卓"><a href="#応用編-電卓" class="headerlink" title="応用編 (電卓)"></a>応用編 (電卓)</h2><p>動いてる感じがするけど、こんなの見てもつまらないので <a href="https://brython.info/static_tutorial/en/" title="チュートリアル">チュートリアル</a> にある電卓を試してみたいと思います。</p><h3 id="index-html-1"><a href="#index-html-1" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/brython/3.8.7/brython.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./index.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body onload=&quot;brython()&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/python&quot; src=&quot;main.py&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>CSSの読み込みが増えただけですね。</p><h3 id="index-css"><a href="#index-css" class="headerlink" title="index.css"></a>index.css</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    font-family: sans-serif;</span><br><span class="line">    font-weight: normal;</span><br><span class="line">    font-size: 1.1em;</span><br><span class="line">&#125;</span><br><span class="line">td&#123;</span><br><span class="line">    background-color: #ccc;</span><br><span class="line">    padding: 10px 30px 10px 30px;</span><br><span class="line">    border-radius: 0.2em;</span><br><span class="line">    text-align: center;</span><br><span class="line">    cursor: default;</span><br><span class="line">&#125;</span><br><span class="line">#result&#123;</span><br><span class="line">    border-color: #000;</span><br><span class="line">    border-width: 1px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    padding: 10px 30px 10px 30px;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-py-1"><a href="#main-py-1" class="headerlink" title="main.py"></a>main.py</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from browser import document, html</span><br><span class="line"></span><br><span class="line">def action(event):</span><br><span class="line">    element = event.target</span><br><span class="line">    value = element.text</span><br><span class="line">    if value not in &quot;=C&quot;:</span><br><span class="line">        if result.text in [&quot;0&quot;, &quot;error&quot;]:</span><br><span class="line">            result.text = value</span><br><span class="line">        else:</span><br><span class="line">            result.text = result.text + value</span><br><span class="line">    elif value == &quot;C&quot;:</span><br><span class="line">        result.text = &quot;0&quot;</span><br><span class="line">    elif value == &quot;=&quot;:</span><br><span class="line">        try:</span><br><span class="line">            result.text = eval(result.text)</span><br><span class="line">        except:</span><br><span class="line">            result.text = &quot;error&quot;</span><br><span class="line"></span><br><span class="line">calc = html.TABLE()</span><br><span class="line">calc &lt;= html.TR(html.TH(html.DIV(&quot;0&quot;, id=&quot;result&quot;), colspan=3) + html.TD(&quot;C&quot;))</span><br><span class="line">lines = [&quot;789/&quot;, &quot;456*&quot;, &quot;123-&quot;, &quot;0.=+&quot;]</span><br><span class="line">calc &lt;= (html.TR(html.TD(x) for x in line) for line in lines)</span><br><span class="line">document &lt;= calc</span><br><span class="line">result = document[&quot;result&quot;]</span><br><span class="line"></span><br><span class="line">for button in document.select(&quot;td&quot;):</span><br><span class="line">    button.bind(&quot;click&quot;, action)</span><br></pre></td></tr></table></figure><h3 id="動作確認-1"><a href="#動作確認-1" class="headerlink" title="動作確認"></a>動作確認</h3><p>ファイル構成はこんな感じになるはずです。</p><p><img src="image-90.png" alt="ファイル構成" loading="lazy"></p><p>先ほどと同じようにブラウザで <a href="http://localhost:8000/">http://localhost:8000</a> にアクセスして動作確認をしてみます。</p><p>電卓で計算ができればOKです。</p><p><img src="image-91.png" alt="電卓" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今回はホントに Html で Python を動かしてみます。&lt;/p&gt;
&lt;p&gt;実際に動かしてみた感想は、出来ることが少ないのであまり魅力を感じませんでした。&lt;/p&gt;
&lt;p&gt;一応こんな技術もあるのかって感じで、覚えておいてくれればいいかなと思います。&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="html" scheme="https://noitaro.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Google スプレッドシートの読み書き</title>
    <link href="https://noitaro.github.io/python-google-sheets-api/"/>
    <id>https://noitaro.github.io/python-google-sheets-api/</id>
    <published>2022-01-23T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.483Z</updated>
    
    <content type="html"><![CDATA[<p>Python から Google スプレッドシート を読み書きする方法です。</p><p>Python でゴリゴリ整形したデータを Google スプレッドシート に蓄えたかったので備忘録します。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 (22000.434)</li><li>Python 3.10.1</li><li>gspread 5.1.1</li></ul><h2 id="GCP-Google-Cloud-Platform"><a href="#GCP-Google-Cloud-Platform" class="headerlink" title="GCP (Google Cloud Platform)"></a>GCP (Google Cloud Platform)</h2><p>Python から Google スプレッドシート を操作するには <a href="https://console.cloud.google.com/" title="GCP (Google Cloud Platform)">GCP (Google Cloud Platform)</a> で APIキー を発行する必要があります。</p><h3 id="プロジェクトの作成"><a href="#プロジェクトの作成" class="headerlink" title="プロジェクトの作成"></a>プロジェクトの作成</h3><p>まず <a href="https://console.cloud.google.com/projectselector2/" title="GCP ()">GCP (Google Cloud Platform)</a> へ行き、プロジェクトを作成します。</p><p><img src="image-57.png" alt="プロジェクトを作成" loading="lazy"></p><p>分かりやすい適当なプロジェクト名を入力します。</p><p><img src="image-58.png" alt="プロジェクト名を入力" loading="lazy"></p><p>少し待つと GCP にプロジェクトが出来上がります。</p><p><img src="image-59.png" alt="プロジェクト" loading="lazy"></p><h3 id="Google-Drive-API-を有効化"><a href="#Google-Drive-API-を有効化" class="headerlink" title="Google Drive API を有効化"></a>Google Drive API を有効化</h3><p>Python から Google スプレッドシート を操作したいので、Google Drive API を有効化します。</p><p>まず、「API とサービス」の「ライブラリ」へ行き、</p><p><img src="image-60.png" alt="API とサービス ライブラリ" loading="lazy"></p><p>「google drive api」を検索して、</p><p><img src="image-61.png" alt="Google Drive API" loading="lazy"></p><p>Google Drive API ライブラリ を有効化します。</p><p><img src="image-62.png" alt="Google Drive API を有効化" loading="lazy"></p><h3 id="Google-Sheets-API-を有効化"><a href="#Google-Sheets-API-を有効化" class="headerlink" title="Google Sheets API を有効化"></a>Google Sheets API を有効化</h3><p>同じ要領で「Google Sheets API」も有効化します。</p><p><img src="image-63.png" alt="Google Sheets API" loading="lazy"></p><p><img src="image-64.png" alt="Google Sheets API を有効化" loading="lazy"></p><h3 id="認証情報の作成"><a href="#認証情報の作成" class="headerlink" title="認証情報の作成"></a>認証情報の作成</h3><p>続いて、Python から Google スプレッドシート を操作するために、認証情報を作成します。</p><p><img src="image-65.png" alt="認証情報の作成" loading="lazy"></p><p>「認証情報を作成」ボタンを押し、</p><p><img src="image-66.png" alt="認証情報を作成" loading="lazy"></p><p>「サービスアカウント」を選択します。</p><p><img src="image-67.png" alt="サービスアカウント" loading="lazy"></p><h3 id="サービスアカウントの作成"><a href="#サービスアカウントの作成" class="headerlink" title="サービスアカウントの作成"></a>サービスアカウントの作成</h3><p>「サービスアカウント名」と「サービスアカウントID」を入力し「完了」ボタンを押すとサービスアカウントが作られます。</p><p><img src="image-68.png" alt="サービスアカウントの作成" loading="lazy"></p><h3 id="サービスアカウントキーの作成"><a href="#サービスアカウントキーの作成" class="headerlink" title="サービスアカウントキーの作成"></a>サービスアカウントキーの作成</h3><p>今作ったサービスアカウントを開いて、</p><p><img src="image-69.png" alt="サービスアカウント" loading="lazy"></p><p>「キー」タブを選択し、</p><p><img src="image-70.png" alt="キータブを選択" loading="lazy"></p><p>「新しい鍵を作成」を選択します。</p><p><img src="image-71.png" alt="新しい鍵を作成" loading="lazy"></p><p>キーのタイプ「JSON」を選択し「作成」を押すと サービスアカウントのキーが作成されます。</p><p><img src="image-72.png" alt="JSON" loading="lazy"></p><p>保存ダイアログが出るので、キーファイルを適当な場所に保存します。</p><h2 id="Google-スプレッドシート"><a href="#Google-スプレッドシート" class="headerlink" title="Google スプレッドシート"></a>Google スプレッドシート</h2><p>Python から読み書きできる Google スプレッドシート を作っていきます。</p><h3 id="共有の設定"><a href="#共有の設定" class="headerlink" title="共有の設定"></a>共有の設定</h3><p>対象の Google スプレッドシート を開いて「ファイル &gt; 共有 &gt; 他のユーザーと共有」を選択します。</p><p><img src="image-73.png" alt="他のユーザーと共有" loading="lazy"></p><p>「ユーザーを追加」する箇所に、先ほど保存したキーファイルの「client_email」を貼り付けます。</p><p><img src="image-74.png" alt="ユーザーを追加" loading="lazy"></p><p>この部分をコピペすればOKです。</p><p><img src="image-75.png" alt="client_email" loading="lazy"></p><p>最後に「送信」ボタンを押せば共有設定は完了です。</p><p><img src="image-76.png" alt="共有設定は完了" loading="lazy"></p><h2 id="Google-スプレッドシートの読み書き"><a href="#Google-スプレッドシートの読み書き" class="headerlink" title="Google スプレッドシートの読み書き"></a>Google スプレッドシートの読み書き</h2><p>準備が終わったので早速 Python から Google スプレッドシートの読み書き をしてみたいと思います。</p><h3 id="ライブラリのインストール"><a href="#ライブラリのインストール" class="headerlink" title="ライブラリのインストール"></a>ライブラリのインストール</h3><p>今回は「<a href="https://docs.gspread.org/en/latest/" title="gspread">gspread</a>」ライブラリを使って読み書きをしていきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gspread</span><br></pre></td></tr></table></figure><h3 id="書き込み"><a href="#書き込み" class="headerlink" title="書き込み"></a>書き込み</h3><p>同じディレクトリのサービスアカウントキーファイルを読み込み、Google スプレッドシートに値を書き込みに行きます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import gspread</span><br><span class="line"></span><br><span class="line"># サービスアカウントキーファイルの読み込み</span><br><span class="line">gspread_client = gspread.service_account(filename=&quot;./durable-retina-339104-a1ecc76aaf24.json&quot;)</span><br><span class="line"></span><br><span class="line"># Google スプレッドシートを開く</span><br><span class="line">spread_sheet = gspread_client.open(&quot;Google スプレッドシートの読み書き&quot;)</span><br><span class="line"></span><br><span class="line"># A1セルを更新</span><br><span class="line">spread_sheet.sheet1.update_acell(&#x27;A1&#x27;, &#x27;勝利は奇跡じゃない&#x27;)</span><br></pre></td></tr></table></figure><p>実行すると Google スプレッドシート に値が入ります。</p><p><img src="image-77.png" alt="Google スプレッドシート に値が入ります" loading="lazy"></p><h3 id="読み込み"><a href="#読み込み" class="headerlink" title="読み込み"></a>読み込み</h3><p>最後に Google スプレッドシート から値を読み込んでみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import gspread</span><br><span class="line"></span><br><span class="line"># サービスアカウントキーファイルの読み込み</span><br><span class="line">gspread_client = gspread.service_account(filename=&quot;./durable-retina-339104-a1ecc76aaf24.json&quot;)</span><br><span class="line"></span><br><span class="line"># Google スプレッドシートを開く</span><br><span class="line">spread_sheet = gspread_client.open(&quot;Google スプレッドシートの読み書き&quot;)</span><br><span class="line"></span><br><span class="line"># A1セルを読み込む</span><br><span class="line">cell = spread_sheet.sheet1.acell(&#x27;A1&#x27;)</span><br><span class="line">print(cell.value) # 結果: 勝利は奇跡じゃない</span><br></pre></td></tr></table></figure><h4 id="指定列を全て取得"><a href="#指定列を全て取得" class="headerlink" title="指定列を全て取得"></a>指定列を全て取得</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># A列を全て取得</span><br><span class="line">cols = spread_sheet.sheet1.col_values(1)</span><br></pre></td></tr></table></figure><h4 id="指定行を全て取得"><a href="#指定行を全て取得" class="headerlink" title="指定行を全て取得"></a>指定行を全て取得</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 1行目を全て取得</span><br><span class="line">rows = spread_sheet.sheet1.row_values(1)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python から Google スプレッドシート を読み書きする方法です。&lt;/p&gt;
&lt;p&gt;Python でゴリゴリ整形したデータを Google スプレッドシート に蓄えたかったので備忘録します。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="google" scheme="https://noitaro.github.io/tags/google/"/>
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>WSL2+Ubuntu+PostgreSQL</title>
    <link href="https://noitaro.github.io/wsl2-ubuntu-postgresql/"/>
    <id>https://noitaro.github.io/wsl2-ubuntu-postgresql/</id>
    <published>2022-01-16T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.895Z</updated>
    
    <content type="html"><![CDATA[<p>私がやった手順の備忘録です。ご参考になれば幸いです。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 11 Home 21H2 (22000.434)</li><li>Ubuntu 20.04.3 LTS</li><li>PostgreSQL 12.9 (Ubuntu 12.9-0ubuntu0.20.04.1)</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="WSL2"><a href="#WSL2" class="headerlink" title="WSL2"></a>WSL2</h3><p>まず WSL2 をインストールします。</p><p>管理者権限の PowerShell で次のコマンドを実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure><p><img src="image-33.png" alt="WSL2をインストール" loading="lazy"></p><p>このコマンドを実行すると次のアクションが実行されます。</p><ol><li>WSL コンポーネントを有効化</li><li>Linux カーネルをインストール</li><li>WSL2 を既定値として設定</li><li>Ubuntu をインストール</li></ol><p>これだけで WSL2 のインストールが完了します。</p><p>前よりすごく簡単になりましたね。インストールが終わったら PC を再起動しておきましょう。</p><h4 id="管理者権限で-PowerShell-を開くには？"><a href="#管理者権限で-PowerShell-を開くには？" class="headerlink" title="管理者権限で PowerShell を開くには？"></a>管理者権限で PowerShell を開くには？</h4><p>Windows 11 の検索欄に「PowerShell」と入力し「管理者として実行する」を選択すると開けます。</p><p><img src="image-32.png" alt="管理者として実行する" loading="lazy"></p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>Windows 11 のアプリに Ubuntu が追加されているので、そこからインストールした Ubuntu を起動させることが出来ます。</p><p><img src="image-42.png" alt=" Ubuntuを起動" loading="lazy"></p><p>Ubuntu が起動するとまず初めに Ubuntu のユーザー名とパスワードの作成を求められます。</p><p><img src="image-34.png" alt="ユーザー名とパスワードの作成" loading="lazy"></p><p>パスワードの入力時は ***(アスタリスク) も表示されませんが、問題ないので気にせず入力しましょう。</p><p><img src="image-35.png" alt="Ubuntuアカウントの作成" loading="lazy"></p><p>これで Ubuntu のインストールも完了です。メチャクチャ簡単になりましたね。</p><h4 id="バージョン確認"><a href="#バージョン確認" class="headerlink" title="バージョン確認"></a>バージョン確認</h4><p>せっかくなので Ubuntu のバージョンを確認しておきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/os-release</span><br></pre></td></tr></table></figure><p><img src="image-41.png" alt=" Ubuntuのバージョン確認" loading="lazy"></p><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><p>初めに パッケージの更新とアップグレード を実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure><p><img src="image-36.png" alt=" パッケージの更新とアップグレード" loading="lazy"></p><p>パッケージの更新が終わったら次のコマンドを実行して、PostgreSQL をインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install postgresql postgresql-contrib</span><br></pre></td></tr></table></figure><p><img src="image-37.png" alt="PostgreSQLのインストール" loading="lazy"></p><p>PostgreSQL のインストールが出来たら、下記コマンドでバージョン確認ができるようになります。正しくインストールできたかの確認にもなりますので、実行してみましょう。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql --version</span><br></pre></td></tr></table></figure><p><img src="image-38.png" alt="バージョン確認" loading="lazy"></p><p>次のコマンドで PostgreSQL の状態を変えることができます。</p><h4 id="PostgreSQL-の状態を確認する"><a href="#PostgreSQL-の状態を確認する" class="headerlink" title="PostgreSQL の状態を確認する"></a>PostgreSQL の状態を確認する</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service postgresql status</span><br></pre></td></tr></table></figure><h4 id="PostgreSQL-を開始する"><a href="#PostgreSQL-を開始する" class="headerlink" title="PostgreSQL を開始する"></a>PostgreSQL を開始する</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service postgresql start</span><br></pre></td></tr></table></figure><h4 id="PostgreSQL-を停止する"><a href="#PostgreSQL-を停止する" class="headerlink" title="PostgreSQL を停止する"></a>PostgreSQL を停止する</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service postgresql stop</span><br></pre></td></tr></table></figure><p><img src="image-39.png" alt="PostgreSQL の状態を確認する" loading="lazy"></p><h4 id="シェルを使って-PostgreSQL-に接続する"><a href="#シェルを使って-PostgreSQL-に接続する" class="headerlink" title="シェルを使って PostgreSQL に接続する"></a>シェルを使って PostgreSQL に接続する</h4><p>PostgreSQLサービスが開始されている状態で、次のコマンドを使うとシェルに接続することができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql</span><br></pre></td></tr></table></figure><p><img src="image-40.png" alt="sudo -u postgres psql" loading="lazy"></p><h4 id="パスワードを設定する"><a href="#パスワードを設定する" class="headerlink" title="パスワードを設定する"></a>パスワードを設定する</h4><p>外部から接続するにはパスワードを設定する必要があります。</p><p>次のコマンドを入力すると、パスワードを設定することができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER ROLE postgres WITH PASSWORD &#x27;postgres&#x27;;</span><br></pre></td></tr></table></figure><p><img src="image-53.png" alt="パスワードを設定" loading="lazy"></p><h4 id="外部接続を有効にする"><a href="#外部接続を有効にする" class="headerlink" title="外部接続を有効にする"></a>外部接続を有効にする</h4><p><a href="https://a5m2.mmatsubara.com/">a5m2</a> や ロールPC の Python から接続したいため、外部接続を有効にします。</p><p>下記コマンドを入力して Ubuntu のフォルダーをエクスプローラーで開きます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explorer.exe .</span><br></pre></td></tr></table></figure><p><img src="image-44.png" alt="explorer.exe ." loading="lazy"></p><p>このコマンドを入力すると Windows 11 のエクスプローラーが開きます。</p><p><img src="image-45.png" alt="Windows 11 のエクスプローラー" loading="lazy"></p><p>2回ほど上の階層に戻って Ubuntu の root ディレクトリに行きます。</p><p><img src="image-46.png" alt="Ubuntu の root ディレクトリ" loading="lazy"></p><p>そこから下記ディレクトリのファイルへ行って編集していきます。</p><h5 id="etc-postgresql-12-main-pg-hba-conf"><a href="#etc-postgresql-12-main-pg-hba-conf" class="headerlink" title="&#x2F;etc&#x2F;postgresql&#x2F;12&#x2F;main&#x2F;pg_hba.conf"></a>&#x2F;etc&#x2F;postgresql&#x2F;12&#x2F;main&#x2F;pg_hba.conf</h5><p><img src="image-47.png" alt="pg_hba.conf" loading="lazy"></p><p>たどり着いたらメモ帳で開いて、下記項目を修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host    all             all             127.0.0.1/32            md5</span><br><span class="line">↓</span><br><span class="line">host    all             all             all                     md5</span><br></pre></td></tr></table></figure><p><img src="image-52.png" alt="host" loading="lazy"></p><h5 id="etc-postgresql-12-main-postgresql-conf"><a href="#etc-postgresql-12-main-postgresql-conf" class="headerlink" title="&#x2F;etc&#x2F;postgresql&#x2F;12&#x2F;main&#x2F;postgresql.conf"></a>&#x2F;etc&#x2F;postgresql&#x2F;12&#x2F;main&#x2F;postgresql.conf</h5><p><img src="image-49.png" alt="postgresql.conf" loading="lazy"></p><p>続いてこちらのファイルもメモ帳で開き、下記項目を修正します。</p><p>先頭の # (シャープ) を消して、 ‘localhost’ を ‘0.0.0.0’ に変更します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#listen_addresses = &#x27;localhost&#x27;         # what IP address(es) to listen on;</span><br><span class="line">↓</span><br><span class="line">listen_addresses = &#x27;0.0.0.0&#x27;            # what IP address(es) to listen on;</span><br></pre></td></tr></table></figure><p><img src="image-50.png" alt="listen_addresses" loading="lazy"></p><p>この2つの変更ができたら PostgreSQL を再起動して完了です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service postgresql restart</span><br></pre></td></tr></table></figure><p><img src="image-51.png" alt=" PostgreSQL再起動" loading="lazy"></p><h5 id="外部接続の確認"><a href="#外部接続の確認" class="headerlink" title="外部接続の確認"></a>外部接続の確認</h5><p>外部から SQL の実行をしたいので、PostgreSQL に接続します。</p><p>今回は <a href="https://a5m2.mmatsubara.com/">a5m2</a> を使ってやってみましょう。</p><ul><li>サーバー名: Ubuntu のローカルIPアドレス</li><li>データベース名: postgres</li><li>ユーザーID: postgres</li><li>パスワード: postgres</li></ul><p><img src="image-55.png" alt="データベース接続" loading="lazy"></p><p>今回は上記設定で接続することができました。</p><p><img src="image-56.png" alt="接続確認" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.microsoft.com/ja-jp/windows/wsl/setup/environment">https://docs.microsoft.com/ja-jp/windows/wsl/setup/environment</a></p><p><a href="https://docs.microsoft.com/ja-jp/windows/wsl/tutorials/wsl-database#install-postgresql">https://docs.microsoft.com/ja-jp/windows/wsl/tutorials/wsl-database#install-postgresql</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;私がやった手順の備忘録です。ご参考になれば幸いです。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 11 Home 21H2 (22000.43</summary>
      
    
    
    
    
    <category term="ubuntu" scheme="https://noitaro.github.io/tags/ubuntu/"/>
    
    <category term="wsl2" scheme="https://noitaro.github.io/tags/wsl2/"/>
    
    <category term="postgresql" scheme="https://noitaro.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>【Python】日時変換のアレコレ</title>
    <link href="https://noitaro.github.io/python-datetime-convert/"/>
    <id>https://noitaro.github.io/python-datetime-convert/</id>
    <published>2022-01-09T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.471Z</updated>
    
    <content type="html"><![CDATA[<p>Python の日時変換が覚えられず、毎回ググっていたのでまとめました。</p><h2 id="タイムゾーンの指定"><a href="#タイムゾーンの指定" class="headerlink" title="タイムゾーンの指定"></a>タイムゾーンの指定</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from dateutil.tz import tzlocal</span><br><span class="line"></span><br><span class="line">now: datetime = datetime.now(tz=tzlocal())</span><br><span class="line">print(now)</span><br><span class="line"># 結果: 2022-01-09 17:22:04.652831+09:00</span><br></pre></td></tr></table></figure><h2 id="datetime型を文字列型に変換"><a href="#datetime型を文字列型に変換" class="headerlink" title="datetime型を文字列型に変換"></a>datetime型を文字列型に変換</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from dateutil.tz import tzlocal</span><br><span class="line"></span><br><span class="line">now: datetime = datetime.now(tz=tzlocal())</span><br><span class="line">print(now)</span><br><span class="line"># 結果: 2022-01-09 17:22:04.652831+09:00</span><br><span class="line"></span><br><span class="line">str_datetime: str = now.strftime(&#x27;%Y-%m-%d&#x27;)</span><br><span class="line">print(str_datetime)</span><br><span class="line"># 結果: &#x27;2022-01-09&#x27;</span><br><span class="line"></span><br><span class="line">str_datetime: str = now.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">print(str_datetime)</span><br><span class="line"># 結果: &#x27;2022-01-09 17:22:04&#x27;</span><br></pre></td></tr></table></figure><h2 id="文字列型をdatetime型に変換"><a href="#文字列型をdatetime型に変換" class="headerlink" title="文字列型をdatetime型に変換"></a>文字列型をdatetime型に変換</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from dateutil.tz import tzlocal</span><br><span class="line">import calendar</span><br><span class="line"></span><br><span class="line">now: datetime = datetime.now(tz=tzlocal())</span><br><span class="line">print(now)</span><br><span class="line"># 結果: 2022-01-09 17:22:04.652831+09:00</span><br><span class="line"></span><br><span class="line">str_datetime: str = now.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">print(str_datetime)</span><br><span class="line"># 結果: &#x27;2022-01-09 17:22:04&#x27;</span><br><span class="line"></span><br><span class="line">dt: datetime = datetime.strptime(str_datetime, &#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">print(dt)</span><br><span class="line"># 結果: 2022-01-09 17:22:04</span><br></pre></td></tr></table></figure><p>この場合、タイムゾーンが設定されない。</p><h2 id="datetime型をタイムスタンプ-int型-に変換"><a href="#datetime型をタイムスタンプ-int型-に変換" class="headerlink" title="datetime型をタイムスタンプ(int型)に変換"></a>datetime型をタイムスタンプ(int型)に変換</h2><h3 id="秒までのタイムスタンプ"><a href="#秒までのタイムスタンプ" class="headerlink" title="秒までのタイムスタンプ"></a>秒までのタイムスタンプ</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from dateutil.tz import tzlocal</span><br><span class="line">import calendar</span><br><span class="line"></span><br><span class="line">now: datetime = datetime.now(tz=tzlocal())</span><br><span class="line">print(now)</span><br><span class="line"># 結果: 2022-01-09 17:22:04.652831+09:00</span><br><span class="line"></span><br><span class="line">timestamp: int = calendar.timegm(now.utctimetuple())</span><br><span class="line">print(timestamp)</span><br><span class="line"># 結果: 1641716524</span><br></pre></td></tr></table></figure><p><a href="https://url-c.com/tc/">Webサービス</a> を使うと、簡単にタイムスタンプを日時に変換できる。</p><h3 id="ミリ秒までのタイムスタンプ"><a href="#ミリ秒までのタイムスタンプ" class="headerlink" title="ミリ秒までのタイムスタンプ"></a>ミリ秒までのタイムスタンプ</h3><p>10桁のタイムスタンプは秒までしか持っていないので、ミリ秒のタイムスタンプが欲しい場合は 1000倍するとよい。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from dateutil.tz import tzlocal</span><br><span class="line">import calendar</span><br><span class="line"></span><br><span class="line">now: datetime = datetime.now(tz=tzlocal())</span><br><span class="line">print(now)</span><br><span class="line"># 結果: 2022-01-09 17:22:04.652831+09:00</span><br><span class="line"></span><br><span class="line">timestamp: int = calendar.timegm(now.utctimetuple())*1000</span><br><span class="line">print(timestamp)</span><br><span class="line"># 結果: 1641716524000</span><br></pre></td></tr></table></figure><h2 id="タイムスタンプ-int型-をdatetime型に変換"><a href="#タイムスタンプ-int型-をdatetime型に変換" class="headerlink" title="タイムスタンプ(int型)をdatetime型に変換"></a>タイムスタンプ(int型)をdatetime型に変換</h2><h3 id="秒までのタイムスタンプ-1"><a href="#秒までのタイムスタンプ-1" class="headerlink" title="秒までのタイムスタンプ"></a>秒までのタイムスタンプ</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from dateutil.tz import tzlocal</span><br><span class="line">import calendar</span><br><span class="line"></span><br><span class="line">now: datetime = datetime.now(tz=tzlocal())</span><br><span class="line">print(now)</span><br><span class="line"># 結果: 2022-01-09 17:22:04.652831+09:00</span><br><span class="line"></span><br><span class="line">timestamp: int = calendar.timegm(now.utctimetuple())</span><br><span class="line">print(timestamp)</span><br><span class="line"># 結果: 1641716524</span><br><span class="line"></span><br><span class="line">dt: datetime = datetime.fromtimestamp(timestamp)</span><br><span class="line">print(dt)</span><br><span class="line"># 結果: 2022-01-09 17:22:04</span><br></pre></td></tr></table></figure><h3 id="ミリ秒までのタイムスタンプ-1"><a href="#ミリ秒までのタイムスタンプ-1" class="headerlink" title="ミリ秒までのタイムスタンプ"></a>ミリ秒までのタイムスタンプ</h3><p>ミリ秒のタイムスタンプの場合は、0.001倍してから変換する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from dateutil.tz import tzlocal</span><br><span class="line">import calendar</span><br><span class="line"></span><br><span class="line">now: datetime = datetime.now(tz=tzlocal())</span><br><span class="line">print(now)</span><br><span class="line"># 結果: 2022-01-09 17:22:04.652831+09:00</span><br><span class="line"></span><br><span class="line">timestamp: int = calendar.timegm(now.utctimetuple())*1000</span><br><span class="line">print(timestamp)</span><br><span class="line"># 結果: 1641716524000</span><br><span class="line"></span><br><span class="line">dt: datetime = datetime.fromtimestamp(timestamp*0.001)</span><br><span class="line">print(dt)</span><br><span class="line"># 結果: 2022-01-09 17:22:04</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>とりあえず思いついただけ記載しました。</p><p>足りなければ追記します。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python の日時変換が覚えられず、毎回ググっていたのでまとめました。&lt;/p&gt;
&lt;h2 id=&quot;タイムゾーンの指定&quot;&gt;&lt;a href=&quot;#タイムゾーンの指定&quot; class=&quot;headerlink&quot; title=&quot;タイムゾーンの指定&quot;&gt;&lt;/a&gt;タイムゾーンの指定&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Windows 11 のインストールと設定</title>
    <link href="https://noitaro.github.io/windows-11-install/"/>
    <id>https://noitaro.github.io/windows-11-install/</id>
    <published>2022-01-04T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.803Z</updated>
    
    <content type="html"><![CDATA[<p>2021年の10月に公開された Windows 11。そろそろ慣れておきたかったのでメインPCにインストールしました。</p><p>インストールはすごく簡単でしたが、その後の設定に悪戦苦闘。設定を変えたいのに、どこをいじれば変わるのかが全然分からず、使いにくいこと甚だしいです。</p><p>時代の流れに取り残されないように、頑張ってでも新しいものに触れて、常に精進していこうと思います。</p><p>ちなみにこの記事は Windows 11 で書いていますが、使い勝手は今までと変わらずと言ったところでしょうか。</p><h2 id="チェック"><a href="#チェック" class="headerlink" title="チェック"></a>チェック</h2><p>Windows 11 が今のPCにインストールできるか確認します。</p><p><a href="https://www.microsoft.com/ja-jp/windows/windows-11">Microsoftの公式サイト</a>から「PC正常性チェックアプリ」をダウンロードします。</p><p><img src="image-1.png" alt="PC正常性チェックアプリをダウンロード" loading="lazy"></p><p>インストールして実行すると Windows 11 がインストールできるか教えてくれます。</p><p><img src="image-2.png" alt="Windows 11 がインストールできるかチェック" loading="lazy"></p><h2 id="インストールUSBの作成"><a href="#インストールUSBの作成" class="headerlink" title="インストールUSBの作成"></a>インストールUSBの作成</h2><p>Windows 11 がインストールできそうなので、Windows 11 のインストールUSBを作成していきます。</p><p><a href="https://www.microsoft.com/ja-jp/software-download/windows11">Microsoftの公式サイト</a>からインストールメディア作成ツールをダウンロードします。</p><p><img src="image-3.png" alt="インストールメディア作成ツールをダウンロード" loading="lazy"></p><p>ダウンロードした「MediaCreationToolW11.exe」を実行すると、インストールメディア作成ウィザードが始まります。</p><p><img src="image-4.png" alt="インストールメディア作成ウィザード" loading="lazy"></p><p>最初に言語とエディションの選択です。</p><p><img src="image-5.png" alt="言語とエディションの選択" loading="lazy"></p><p>今のPCに最適な設定になっていますが、「おすすめオプション」のチェックを外すと変更することができます。</p><p><img src="image-6.png" alt="おすすめオプションのチェックを外すと変更できる" loading="lazy"></p><p>今回は変更せずに次へ進みました。</p><p>次にメディアの選択です。</p><p>今回は USBから起動させたいので USBフラッシュドライブ を選択します。</p><p><img src="image-7.png" alt="USBフラッシュドライブを選択" loading="lazy"></p><p>ISOファイル を選択すると、Windows 11 のインストールイメージがダウンロードできます。VM(仮想マシン)にインストールするなら ISOファイル を選択します。</p><p>対象のUSBメモリを選択して「次へ」をクリックします。</p><p><img src="image-8.png" alt="USBメモリを選択" loading="lazy"></p><p>今回使ったUSBメモリは <a href="https://amzn.to/3qU59jB">こちら</a> です。部屋に転がっていたのを使いました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3qU59jB"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3qU59jB"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | KIOXIA(キオクシア) 旧東芝メモリ USBフラッシュメモリ 32GB USB2.0 日本製 国内サポート正規品 KLU202A032GW | キオクシア(KIOXIA) | USBメモリ・フラッシュドライブ  通販</div><div class="hbc-url">https://amzn.to/3qU59jB</div></div></div></div></a></div></div><p>Windows 11 のダウンロードが始まり、</p><p><img src="image-9.png" alt="Windows 11 のダウンロード" loading="lazy"></p><p>しばらく待つと起動用USBメモリが出来上がります。</p><p><img src="image-10.png" alt="起動用USBメモリ完成" loading="lazy"></p><h2 id="Windows-11-のインストール"><a href="#Windows-11-のインストール" class="headerlink" title="Windows 11 のインストール"></a>Windows 11 のインストール</h2><p>今作ったUSBメモリをPCに刺したまま、PCを再起動をします。</p><p>BIOSロゴの画面で「F11」キーを押しっぱなしして、起動メニュー画面へ進みます。</p><p><img src="image-11-1024x576.png" alt="BIOSロゴ画面" loading="lazy"></p><p>私のPCのマザボは MSI の「<a href="https://amzn.to/3sWnICr">MAG Z390M MORTAR</a>」なので、機種によってはキーが違うかもしれません。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3sWnICr"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3sWnICr"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | MSI MAG Z390M MORTAR Micro-ATX Intel Z390 M.2 DDR4 SATA USB3.1コンピューターマザーボードデスクトップメインボードに適合 | MYHJ | マザーボード 通販</div><div class="hbc-url">https://amzn.to/3sWnICr</div></div></div></div></a></div></div><p>起動メニュー画面へ入ったら、Windows 11 インストール用のUSBメモリを選択します。</p><p>今回は東芝製のUSBメモリを使ったので「UEFI: TOSHIBA USB FLASH DRIVE PMAP」を選択しました。</p><p><img src="image-12.png" alt="起動メニュー画面" loading="lazy"></p><p>しばらく待つと Windows セットアップ画面が表示されるので指示に従って進めていきます。</p><p><img src="image-13.png" alt="Windows セットアップ画面" loading="lazy"></p><p>ライセンス認証はプロダクトキーを持っていないのでスキップします。Windows 11 インストール後にインターネット経由で認証できるので問題ありませんでした。</p><p><img src="image-14.png" alt="ライセンス認証" loading="lazy"></p><p>エディション は今使ってるPCと同じものを選びます。私のPCは Home を使っているので Home を選択します。</p><p>他のエディションを選択すると、ライセンス認証が出来なくなるので注意して下さい。</p><p><img src="image-15.png" alt="Windows 11 Home を選択" loading="lazy"></p><p>今回は「カスタム」を選択します。Windows 10 時代のアプリとか設定を引き継がず新規インストールしたいためです。</p><p><img src="image-16.png" alt="カスタムを選択" loading="lazy"></p><p>Windows 10 の設定やインストール済みアプリを引き継ぎたい場合は「アップグレード」を選択してください。</p><p>Windows 11 のインストール場所を選択する前に、現在のパーティションを全て削除します。</p><p><img src="image-17.png" alt="現在のパーティションを全て削除" loading="lazy"></p><p>もちろん Windows 10 時代の遺産を引き継ぎたくないからです。</p><p>パーティションを全て消すとこんな感じになりました。</p><p><img src="image-18.png" alt="パーティションを全て削除" loading="lazy"></p><p>私のPCは 480GBのSSD と 250GBのM.2SSD が搭載されているので、こんな感じに残りました。</p><p>M.2SSD を換装した時の記事は <a href="https://noitaro.github.io/m2-nvme-ssd/">こちら</a> です。</p><p>今回は 250GBのM.2SSD に Windows 11 をインストールする予定です。</p><p>まず、パーティションを新規作成します。</p><p><img src="image-19.png" alt="パーティションを新規作成" loading="lazy"></p><p>そうすると3つのパーティションが出来上がるので、一番容量が大きい パーティション3 を選択して「次へ」いきます。</p><p><img src="image-20.png" alt="パーティション3を選択" loading="lazy"></p><p>しばらく待つと、Windows 11 のインストールが始まります。</p><p><img src="image-21.png" alt="インストール" loading="lazy"></p><p>Windows 11 のインストールが完了すると、再起動して Windows 11 の設定に入ります。</p><p><img src="image-22.png" alt="再起動" loading="lazy"></p><h2 id="Windows-11-の設定"><a href="#Windows-11-の設定" class="headerlink" title="Windows 11 の設定"></a>Windows 11 の設定</h2><p>地域の設定をして、</p><p><img src="image-23.png" alt="地域の設定" loading="lazy"></p><p>キーボードの設定をして、</p><p><img src="image-24.png" alt="キーボードの設定" loading="lazy"></p><p>アカウントの設定をして、</p><p><img src="image-25.png" alt="アカウントの設定" loading="lazy"></p><p>PIN の設定をして、</p><p><img src="image-26.png" alt="PINの設定" loading="lazy"></p><p>プライバシーの設定をして、</p><p><img src="image-27.png" alt="プライバシーの設定" loading="lazy"></p><p>しばらく待つと Windows 11 が使えるようになりました。</p><p><img src="image-28.png" alt="これには数分かかる" loading="lazy"></p><p>デスクトップはこんな感じでした。</p><p><img src="image-29.png" alt="デスクトップ" loading="lazy"></p><p>Microsoft アカウントと連携したため、ライセンス認証も問題ありませんでした。</p><p><img src="image-30.png" alt="ライセンス認証" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>という分けで、新年早々 Windows 11 へ乗り換えました。</p><p>今のところは問題なくつかえているが、細かい設定が分かりづらくて若干戸惑い気味です。</p><p>使っていればそのうち慣れると思うので、これからも末永くよろしくお願い致します。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2021年の10月に公開された Windows 11。そろそろ慣れておきたかったのでメインPCにインストールしました。&lt;/p&gt;
&lt;p&gt;インストールはすごく簡単でしたが、その後の設定に悪戦苦闘。設定を変えたいのに、どこをいじれば変わるのかが全然分からず、使いにくいこと甚だしい</summary>
      
    
    
    
    
    <category term="windows" scheme="https://noitaro.github.io/tags/windows/"/>
    
    <category term="bios" scheme="https://noitaro.github.io/tags/bios/"/>
    
  </entry>
  
  <entry>
    <title>Nexus7(2013) に LineageOS 19.0 を入れる</title>
    <link href="https://noitaro.github.io/nexus7-2013-lineageos-19-0/"/>
    <id>https://noitaro.github.io/nexus7-2013-lineageos-19-0/</id>
    <published>2021-12-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.343Z</updated>
    
    <content type="html"><![CDATA[<p>今年もこの季節がやってきました。</p><p>Android 12 が発表されて早半年。Nexus7(2013) に対応したので、今年もサクッと導入してみたいと思います。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>LineageOS 19.0 は、Android 12 ベースのカスタムROMのことです。</p><p>Nexus7(2013) は、Google製の Androidタブレットで、発売当時は Android 4.3 が搭載されていました。公式では Android6.0.1 が最後のアップデートになってしまったのですが、有志の方々があの手この手を使って Android 12 (LineageOS 19.0) までアップデートできるようにして下さいました。</p><p>ホントありがとうございます。</p><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul><li>Windows 10 Home 21H1</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>まず必要なファイルをかき集めます。</p><h3 id="LineageOS-19-0"><a href="#LineageOS-19-0" class="headerlink" title="LineageOS 19.0"></a>LineageOS 19.0</h3><p><a href="https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-18-1-19-0-2021-12-12.3569067/">[ROM][flo|deb][UNOFFICIAL][LineageOS 18.1&#x2F;19.0] -&gt; 2021-12-12 | XDA Forums</a></p><p>こちらから「lineage-19.0-20211212-UNOFFICIAL-flo.zip」か「lineage-19.0-20211212-UNOFFICIAL-deb.zip」をダウンロードします。</p><p>お手持ちの Nexus7(2013) が Wi-Fiモデルの場合は「flo」、LTEモデルの場合は「deb」をダウンロードして下さい。</p><p><img src="WS002888.png" alt="LineageOS 19.0 のダウンロード" loading="lazy"></p><p>私が持ってる Nexus7(2013) は Wi-Fiモデル なので「lineage-19.0-20211212-UNOFFICIAL-flo.zip」をダウンロードしました。</p><p><img src="WS002889.png" alt="「lineage-19.0-20211212-UNOFFICIAL-flo.zip」をダウンロード" loading="lazy"></p><h3 id="BiTGApps"><a href="#BiTGApps" class="headerlink" title="BiTGApps"></a>BiTGApps</h3><p>Google Play も使いたいので <a href="https://bitgapps.github.io/">BiTGApps</a> もダウンロードします。</p><p>Nexus7(2013) は ARM版 に対応しています。</p><p><img src="WS002910.png" alt="ARMをクリック" loading="lazy"></p><p>「Files」をクリックしてから「BiTGApps-arm-12.0.0-R44_signed.zip」をダウンロードします。</p><p><img src="WS002911.png" alt="「BiTGApps-arm-12.0.0-R44_signed.zip」をダウンロード" loading="lazy"></p><h3 id="パーティションサイズ変更スクリプト"><a href="#パーティションサイズ変更スクリプト" class="headerlink" title="パーティションサイズ変更スクリプト"></a>パーティションサイズ変更スクリプト</h3><p>LineageOS 19.0 のシステム容量は 1275MB なので、Nexus7(2013) にインストールするためにシステムパーティションを拡張する必要があります。</p><p>今回のスクリプトで システムパーティションを1380MB、キャッシュパーティションを20MBに変更させます。</p><p><a href="https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-18-1-19-0-2021-12-12.3569067/">こちら</a> の「sysrepart_1380_20.zip」をクリックし、</p><p><img src="WS002891.png" alt="「sysrepart_1380_20.zip」をクリック" loading="lazy"></p><p>Googleドライブから「sysrepart_1380_20.zip」をダウンロードします。</p><p><img src="WS002893.png" alt="「sysrepart_1380_20.zip」をダウンロード" loading="lazy"></p><h3 id="TWRP"><a href="#TWRP" class="headerlink" title="TWRP"></a>TWRP</h3><p>久しぶりに カスタムROM を入れようとしたら TWRP が起動しなかったので、ついでにやっちゃいます。</p><p><a href="https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-18-1-19-0-2021-12-12.3569067/">こちら</a> の Download をクリックし、</p><p><img src="WS002896.png" alt="TWRPのDownload" loading="lazy"></p><p>自分の端末に合った TWRP をダウンロードします。私の Nexus7(2013) は Wi-Fiモデル なので「twrp-3.5.2_9-0-flo_followmsi.img」をダウンロードしました。</p><p><img src="WS002897.png" alt="「twrp-3.5.2_9-0-flo_followmsi.img」をダウンロード" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>必要なファイルが揃ったので、早速作業に取り掛かります。</p><h3 id="TWRP-1"><a href="#TWRP-1" class="headerlink" title="TWRP"></a>TWRP</h3><p>TWRP が起動しなかったので、まず TWRP のインストールからします。起動する方は飛ばしてもらって大丈夫です。</p><p>まず FASTBOOTモードで起動させます。</p><p>電源が切れている状態で「電源ボタン＋音量下ボタン」を長押しするか、PCと端末をUSBケーブルで繋いで下記コマンドを入力することで FASTBOOTモード を起動させることができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure><p><img src="WS002898.png" alt="FASTBOOTモードを起動" loading="lazy"></p><p>しばらく待つとこんな画面になります。</p><p><img src="PXL_20210220_032531611_2.png" alt="fastboot モード" loading="lazy"></p><p>この画面で下記コマンドを入れると TWRP をインストールすることができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash recovery D:\Nexus7\twrp-3.5.2_9-0-flo_followmsi.img</span><br></pre></td></tr></table></figure><p><img src="WS002899.png" alt="TWRP をインストール" loading="lazy"></p><h4 id="FASTBOOTモードで端末が認識されない場合は？"><a href="#FASTBOOTモードで端末が認識されない場合は？" class="headerlink" title="FASTBOOTモードで端末が認識されない場合は？"></a>FASTBOOTモードで端末が認識されない場合は？</h4><p>デバイスマネージャーで Android に警告マークが付いていると FASTBOOTモード が認識できていません。</p><p><img src="WS002377.png" alt="ほかのデバイス" loading="lazy"></p><p><a href="https://noitaro.github.io/nexus7-2013-magisk-root/">こちら記事</a> を参考にしてドライバーをインストールして下さい。</p><h3 id="システムパーティションの拡張"><a href="#システムパーティションの拡張" class="headerlink" title="システムパーティションの拡張"></a>システムパーティションの拡張</h3><p>システムパーティションを拡張させます。</p><p>ちなみに今の状態はこんな感じ、システム830MBですかね。これじゃあ入らないわ。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell df -h</span><br></pre></td></tr></table></figure><p><img src="WS002907.png" alt="今のパーティション状態" loading="lazy"></p><p>まず TWRP を起動させ、TWRPメニューの「Mount」をタップします。</p><p><img src="12_52_5947upper_Mount.png" alt="「Mount」をタップ" loading="lazy"></p><p>マウントしていないパーティションがあったらマウントさせます。</p><p><img src="12_56_4819upper.png" alt="パーティションのマウント" loading="lazy"></p><p>マウントが出来たらホームボタンを押して TWRPメニュー画面に戻っておきましょう。</p><p><img src="12_52_5947upper.png" alt="TWRPメニュー画面" loading="lazy"></p><p>そして下記コマンドで端末に「sysrepart_1380_20.zip」を転送します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push D:\Nexus7\sysrepart_1380_20.zip /sdcard/</span><br></pre></td></tr></table></figure><p><img src="WS002900.png" alt="ファイルの転送" loading="lazy"></p><p>スクリプトの転送が終わったら、TWRPメニューの「Install」をタップし、</p><p><img src="12_52_5947upper_Install.png" alt="「Install」をタップ" loading="lazy"></p><p>転送しておいた「sysrepart_1380_20.zip」をタップします。</p><p><img src="13_00_1706upper.png" alt="「sysrepart_1380_20.zip」をタップ" loading="lazy"></p><p>「Swipe to confirm Flash」を右にスワイプして、スクリプトを実行します。</p><p><img src="13_00_3510upper.png" alt="「Swipe to confirm Flash」を右にスワイプ" loading="lazy"></p><p>実行中はこんな感じで、下のバーが動いています。スクショだと分からないですが…</p><p><img src="13_01_1165upper.png" alt="インストール中" loading="lazy"></p><p>エラーなく終わればこんな表示になります。「Reboot System」をタップして一度再起動させます。</p><p><img src="13_26_3716upper.png" alt="インストール成功" loading="lazy"></p><p>再度コマンドで確認してみると、ちゃんと拡張されていることが分かります。</p><p><img src="WS002908.png" alt="拡張後のパーティション状態" loading="lazy"></p><p>もしエラーになってしまった場合は、<a href="https://developers.google.com/android/images#razor">Factory Image</a> で一度初期化した方がいいかもしれません。私も何回か失敗したので Factory Image で初期化したらうまくできました。</p><p>Factory Image での初期化は <a href="https://noitaro.github.io/pixel-3a-factory-image/">こちらの記事</a> を参考にして下さい。</p><h3 id="システムパーティションのフォーマット"><a href="#システムパーティションのフォーマット" class="headerlink" title="システムパーティションのフォーマット"></a>システムパーティションのフォーマット</h3><p>再起動後、TWRPメニュー画面になったら「Wipe」をタップし、</p><p><img src="12_52_5947upper_Wipe.png" alt="「Wipe」をタップ" loading="lazy"></p><p>「Format Data」をタップしてシステムパーティションをフォーマットします。余計なファイルが残っているとエラーになる可能性があるので、念のため…</p><p><img src="12_57_4100upper.png" alt="「Format Data」をタップ" loading="lazy"></p><p>キーボードで「yes」と入力するとフォーマットされます。</p><p><img src="12_58_1217upper.png" alt="「yes」を入力" loading="lazy"></p><p>フォーマット中はこんな感じ。</p><p><img src="12_58_2883upper.png" alt="フォーマット中" loading="lazy"></p><p>フォーマットが無事に終わったら、ホームボタンをタップしてTWRPメニュー画面に戻ります。</p><p><img src="12_58_4321upper.png" alt="フォーマット成功" loading="lazy"></p><h3 id="ファイルの転送"><a href="#ファイルの転送" class="headerlink" title="ファイルの転送"></a>ファイルの転送</h3><p>TWRPメニュー画面に戻ったら、下記コマンドを使って端末に「lineage-19.0-20211212-UNOFFICIAL-flo.zip」「BiTGApps-arm-12.0.0-R44_signed.zip」を転送します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push D:\Nexus7\lineage-19.0-20211212-UNOFFICIAL-flo.zip /sdcard/</span><br><span class="line">adb push D:\Nexus7\BiTGApps-arm-12.0.0-R44_signed.zip /sdcard/</span><br></pre></td></tr></table></figure><p><img src="WS002912.png" alt="端末にファイルを転送" loading="lazy"></p><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p>ファイルの転送が終わったら、TWRPメニューの「Install」をタップします。</p><p><img src="12_52_5947upper_Install.png" alt="「Install」をタップ" loading="lazy"></p><p>インストールするファイルを順番に選択していきます。</p><p>まず「lineage-19.0-20211212-UNOFFICIAL-flo.zip」を選択します。</p><p><img src="14_28_4786upper_lineage.png" alt="「lineage-19.0-20211212-UNOFFICIAL-flo.zip」を選択" loading="lazy"></p><p>BiTGApps も一緒にインストールしたいので「Add more Zips」をタップして一度前の画面に戻り、</p><p><img src="13_09_1187upper.png" alt="「Add more Zips」をタップ" loading="lazy"></p><p>続いて「BiTGApps-arm-12.0.0-R44_signed.zip」を選択します。</p><p><img src="14_28_4786upper_bitgapps.png" alt="「BiTGApps-arm-12.0.0-R44_signed.zip」を選択" loading="lazy"></p><p>最後に「Swipe to confirm Flash」を右にスワイプすると、インストールが開始されます。</p><p><img src="14_29_1266upper.png" alt="インストール開始" loading="lazy"></p><p>インストール中はこんな感じ。</p><p><img src="14_30_2904upper.png" alt="インストール中" loading="lazy"></p><p>インストールが無事に終わったら「Wipe Cache&#x2F;Dalvlk」をタップしてキャッシュを消します。</p><p><img src="14_32_3102upper.png" alt="インストール成功" loading="lazy"></p><h3 id="キャッシュの削除"><a href="#キャッシュの削除" class="headerlink" title="キャッシュの削除"></a>キャッシュの削除</h3><p>「Swipe to Wipe」を右にスワイプするとキャッシュが削除されます。</p><p><img src="13_48_1318upper.png" alt="キャッシュ削除" loading="lazy"></p><p>キャッシュが正常に消せたら「Reboot System」をタップしてシステムを再起動させます。</p><p><img src="13_48_2784upper.png" alt="キャッシュ削除成功" loading="lazy"></p><p>しばらくすると Android 12 (LineageOS 19.0) が起動します。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>LineageOS 19.0 にアップデートしたのですが、違いがほとんど感じられませんでした。</p><p>でも、UIが若干丸っこくなったかな。</p><p>最新のタブレットと比べると、スクロールはカクつくし画面遷移も遅いです。</p><p><img src="Screenshot_20211226-141239_Trebuchet.png" alt="LineageOS 19.0" loading="lazy"></p><p>使えないこともないですが、私が持ってる Nexus7(2013) はバッテリーがほぼ死んでいるので、常に給電して デジタルサイネージ にするぐらいしかないですね。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今年もこの季節がやってきました。&lt;/p&gt;
&lt;p&gt;Android 12 が発表されて早半年。Nexus7(2013) に対応したので、今年もサクッと導入してみたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlin</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="twrp" scheme="https://noitaro.github.io/tags/twrp/"/>
    
    <category term="gapps" scheme="https://noitaro.github.io/tags/gapps/"/>
    
    <category term="lineageos" scheme="https://noitaro.github.io/tags/lineageos/"/>
    
    <category term="nexus7-2013" scheme="https://noitaro.github.io/tags/nexus7-2013/"/>
    
  </entry>
  
  <entry>
    <title>【Vue】分割ペインコンポーネントを試す</title>
    <link href="https://noitaro.github.io/vue-split-pane/"/>
    <id>https://noitaro.github.io/vue-split-pane/</id>
    <published>2021-12-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.779Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/vue-splitpane">Vue Split Pane</a> を簡単に使ってみます。</p><p><img src="vue-split-pane.gif" loading="lazy"></p><h2 id="お試し"><a href="#お試し" class="headerlink" title="お試し"></a>お試し</h2><p>今回は CDN で読み込むので、インストール等はありません。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;ja&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;title&gt;vue-splitpane&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;v-app&gt;</span><br><span class="line">            &lt;split-pane split=&quot;horizontal&quot;&gt;</span><br><span class="line">                &lt;div slot=&quot;paneL&quot;&gt;</span><br><span class="line">                    &lt;v-card class=&quot;pa-2 blue text-center&quot; tile&gt;</span><br><span class="line">                        &lt;div class=&quot;white--text&quot;&gt;AAA&lt;/div&gt;</span><br><span class="line">                    &lt;/v-card&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div slot=&quot;paneR&quot;&gt;</span><br><span class="line">                    &lt;v-card class=&quot;pa-2 blue text-center&quot; tile&gt;</span><br><span class="line">                        &lt;div class=&quot;white--text&quot;&gt;BBB&lt;/div&gt;</span><br><span class="line">                    &lt;/v-card&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/split-pane&gt;</span><br><span class="line">        &lt;/v-app&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue-splitpane@1.0.6/dist/vue-split-pane.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123; vuetify: new Vuetify() &#125;).$mount(&#x27;#app&#x27;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>これを HTML に貼り付けて起動させれば、簡単に試すことができます。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/vue-splitpane&quot;&gt;Vue Split Pane&lt;/a&gt; を簡単に使ってみます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;vue-split-pane.gif&quot; loading=&quot;lazy&quot;&gt;</summary>
      
    
    
    
    
    <category term="html" scheme="https://noitaro.github.io/tags/html/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
    <category term="vue" scheme="https://noitaro.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>処理が重くても指定時間後に再試行する処理</title>
    <link href="https://noitaro.github.io/python-sleep-timelag-control/"/>
    <id>https://noitaro.github.io/python-sleep-timelag-control/</id>
    <published>2021-12-18T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.495Z</updated>
    
    <content type="html"><![CDATA[<p>タイトルの通りです。</p><p>基本的に繰り返し処理を書くと、処理の重さによって次の処理の開始が遅くなっていきます。</p><h2 id="基本1"><a href="#基本1" class="headerlink" title="基本1"></a>基本1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import datetime as dt</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    start_datetime = dt.datetime.now()</span><br><span class="line">    print(f&#x27;START: &#123;start_datetime&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    何か処理</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    time.sleep(10)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># START: 2021-12-18 21:09:57.488152</span><br><span class="line"># START: 2021-12-18 21:10:07.492113</span><br><span class="line"># START: 2021-12-18 21:10:17.508288</span><br><span class="line"># START: 2021-12-18 21:10:27.515364</span><br><span class="line"># START: 2021-12-18 21:10:37.525368</span><br><span class="line"># START: 2021-12-18 21:10:47.541210</span><br><span class="line"># START: 2021-12-18 21:10:57.555242</span><br></pre></td></tr></table></figure><p>何も対策を入れないと1ループで20ミリ秒遅れていきます。なので1日動かすと約3秒ズレることになり、これはゆゆしき問題です。</p><h2 id="基本2"><a href="#基本2" class="headerlink" title="基本2"></a>基本2</h2><p>もし上記の繰り返しで重たい処理をしたらどうなるでしょう？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import datetime as dt</span><br><span class="line"></span><br><span class="line">def slow_process():</span><br><span class="line">    trash = 1</span><br><span class="line">    for idx in range(10000000):</span><br><span class="line">        trash = trash * idx</span><br><span class="line">        pass</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    start_datetime = dt.datetime.now()</span><br><span class="line">    print(f&#x27;START: &#123;start_datetime&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    何か重たい処理</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    slow_process()</span><br><span class="line"></span><br><span class="line">    time.sleep(10)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># START: 2021-12-18 21:24:35.974505</span><br><span class="line"># START: 2021-12-18 21:24:46.887488</span><br><span class="line"># START: 2021-12-18 21:24:57.797534</span><br><span class="line"># START: 2021-12-18 21:25:08.712103</span><br><span class="line"># START: 2021-12-18 21:25:19.625054</span><br><span class="line"># START: 2021-12-18 21:25:30.562727</span><br><span class="line"># START: 2021-12-18 21:25:41.477604</span><br></pre></td></tr></table></figure><p>このように1回のループで1秒ずつ遅れていきます。常に動かす必要がある処理だと、何か対策を入れないといけません。</p><h2 id="対策"><a href="#対策" class="headerlink" title="対策"></a>対策</h2><p>今回の問題は処理に時間がかかったにもかかわらず、スリープが10秒の固定なのが問題です。</p><p>処理にかかった時間を差し引いて、 スリープ時間を調整してあげれば常に一定で繰り返しさせることができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">import datetime as dt</span><br><span class="line"></span><br><span class="line">def slow_process():</span><br><span class="line">    trash = 1</span><br><span class="line">    for idx in range(10000000):</span><br><span class="line">        trash = trash * idx</span><br><span class="line">        pass</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    start_datetime = dt.datetime.now()</span><br><span class="line">    print(f&#x27;START: &#123;start_datetime&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    何か重たい処理</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    slow_process()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    now_datetime = dt.datetime.now()</span><br><span class="line">    next_datetime = start_datetime + dt.timedelta(seconds=10)</span><br><span class="line">    next_seconds = (next_datetime - now_datetime).seconds</span><br><span class="line">    # print(f&quot;sleep: &#123;next_seconds&#125;sec&quot;)</span><br><span class="line">    time.sleep(next_seconds)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># START: 2021-12-18 21:39:32.871239</span><br><span class="line"># START: 2021-12-18 21:39:42.793268</span><br><span class="line"># START: 2021-12-18 21:39:52.698554</span><br><span class="line"># START: 2021-12-18 21:40:02.608381</span><br><span class="line"># START: 2021-12-18 21:40:12.530488</span><br><span class="line"># START: 2021-12-18 21:40:22.452134</span><br><span class="line"># START: 2021-12-18 21:40:32.387661</span><br></pre></td></tr></table></figure><p>このように、処理の開始時間と処理が終わった時間を差し引いて、スリープ時間を算出するようにすると、いくら重い処理をしても時間がズレることがなくなります。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;タイトルの通りです。&lt;/p&gt;
&lt;p&gt;基本的に繰り返し処理を書くと、処理の重さによって次の処理の開始が遅くなっていきます。&lt;/p&gt;
&lt;h2 id=&quot;基本1&quot;&gt;&lt;a href=&quot;#基本1&quot; class=&quot;headerlink&quot; title=&quot;基本1&quot;&gt;&lt;/a&gt;基本1&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Eel で 画像データを相互変換する</title>
    <link href="https://noitaro.github.io/eel-image-opencv/"/>
    <id>https://noitaro.github.io/eel-image-opencv/</id>
    <published>2021-12-11T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.019Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/ChrisKnott/Eel">Eel</a> を使うと Python から HTML を呼んだり、その逆で HTML から Python を呼び出すことができます。</p><p>今回はその Eel を使って、Python で読み込んだ画像データを HTMLに送って画面に表示したり、表示してある画像を Python に送って <a href="https://pypi.org/project/opencv-python/">OpenCV</a> でグレースケール化して戻すってことをやってみたいと思います。</p><p><img src="eel-image-opencv.gif" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 21H1</li><li>Python 3.8.10</li><li><a href="https://pypi.org/project/Eel/">Eel 0.14.0</a></li><li><a href="https://pypi.org/project/opencv-python/">opencv-python 4.5.2.54</a></li><li>vue 1.0.2</li></ul><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p>実際に動くソースコードは <a href="https://github.com/noitaro/eel-image-opencv">GitHub</a> に上げてあるので、ここでは要点だけ説明します。</p><h3 id="Python-実行時に-HTML-を表示する処理"><a href="#Python-実行時に-HTML-を表示する処理" class="headerlink" title="Python 実行時に HTML を表示する処理"></a>Python 実行時に HTML を表示する処理</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">import eel</span><br><span class="line"></span><br><span class="line">async def main():</span><br><span class="line">    eel.init(&#x27;web&#x27;)</span><br><span class="line">    eel.start(&#x27;index.html&#x27;, port=0, size=(450, 560))</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    try:</span><br><span class="line">        asyncio.run(main())</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><p>「web」フォルダ内の「index.html」を開くように設定しています。</p><h3 id="画像読み込み時の処理"><a href="#画像読み込み時の処理" class="headerlink" title="画像読み込み時の処理"></a>画像読み込み時の処理</h3><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">async get_img() &#123;</span><br><span class="line">    // Pythonから画像データ(Base64文字列)を読み込む</span><br><span class="line">    const img_base64 = await eel.get_img()();</span><br><span class="line"></span><br><span class="line">    // 画面に表示</span><br><span class="line">    this.img_src = &#x27;data:image/png;base64,&#x27; + img_base64;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>「eel.get_img」でPython を呼び出しています。</p><h4 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@eel.expose</span><br><span class="line">def get_img():</span><br><span class="line">    # ファイルを開くダイアログの表示</span><br><span class="line">    filename = filedialog.askopenfilename(</span><br><span class="line">        title=&quot;画像ファイルを開く&quot;,</span><br><span class="line">        filetypes=[(&quot;Image file&quot;, &quot;.bmp .png .jpg .tif&quot;)],</span><br><span class="line">        initialdir=&quot;./&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    # 画像ファイルを開いてbase64に変換</span><br><span class="line">    with open(filename, &#x27;br&#x27;) as f1:</span><br><span class="line">        img_base64 = base64.b64encode(f1.read())</span><br><span class="line"></span><br><span class="line">    # base64を文字列で返却</span><br><span class="line">    return img_base64.decode()</span><br></pre></td></tr></table></figure><p>画像を Base64 に変換して、Base64の文字列を HTML に返却しています。</p><h3 id="グレースケール化時の処理"><a href="#グレースケール化時の処理" class="headerlink" title="グレースケール化時の処理"></a>グレースケール化時の処理</h3><h4 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">async gray_scale() &#123;</span><br><span class="line">    let img = this.img_src;</span><br><span class="line">    img = img.replace(&#x27;data:image/png;base64,&#x27;, &#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">    // Pythonでグレースケール変換</span><br><span class="line">    const img_base64 = await eel.gray_scale(img)();</span><br><span class="line"></span><br><span class="line">    // 画面に表示</span><br><span class="line">    this.img_src = &#x27;data:image/png;base64,&#x27; + img_base64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>画面から Base64文字列の画像を取得して、Python に渡しています。</p><p>そして、戻ってきた画像データを再度画面に表示しています。</p><h4 id="Python-2"><a href="#Python-2" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@eel.expose</span><br><span class="line">def gray_scale(img_str: str):</span><br><span class="line">    # バリナリデータ &lt;- Base64文字列</span><br><span class="line">    img_binary: bytes = base64.b64decode(img_str)</span><br><span class="line"></span><br><span class="line">    # バイナリーストリーム &lt;- バリナリデータ</span><br><span class="line">    img_binarystream: io.BytesIO = io.BytesIO(img_binary)</span><br><span class="line"></span><br><span class="line">    # PILイメージ &lt;- バイナリーストリーム</span><br><span class="line">    img_pil: Image = Image.open(img_binarystream)</span><br><span class="line"></span><br><span class="line">    # numpy配列(RGBA) &lt;- PILイメージ</span><br><span class="line">    img_numpy: np.ndarray = np.asarray(img_pil)</span><br><span class="line"></span><br><span class="line">    # numpy配列(GRAY) &lt;- numpy配列(RGBA)</span><br><span class="line">    img_gray: np.ndarray = cv2.cvtColor(img_numpy, cv2.COLOR_RGBA2GRAY)</span><br><span class="line"></span><br><span class="line">    # Base64 &lt;- numpy配列(GRAY)</span><br><span class="line">    result, dst_data = cv2.imencode(&#x27;.png&#x27;, img_gray)</span><br><span class="line">    img_base64: bytes = base64.b64encode(dst_data)</span><br><span class="line"></span><br><span class="line">    # base64を文字列で返却</span><br><span class="line">    return img_base64.decode()</span><br></pre></td></tr></table></figure><p>受け取った Base64文字列を画像に変換してから、OpenCV を使ってグレースケール化し、再度Base64文字列に変換してHTMLに返却しています。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/ChrisKnott/Eel&quot;&gt;Eel&lt;/a&gt; を使うと Python から HTML を呼んだり、その逆で HTML から Python を呼び出すことができます。&lt;/p&gt;
&lt;p&gt;今回はその Eel を使って、Pyt</summary>
      
    
    
    
    
    <category term="opencv" scheme="https://noitaro.github.io/tags/opencv/"/>
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="html" scheme="https://noitaro.github.io/tags/html/"/>
    
    <category term="eel" scheme="https://noitaro.github.io/tags/eel/"/>
    
  </entry>
  
  <entry>
    <title>ブラウザから Python を操作する</title>
    <link href="https://noitaro.github.io/python-eel/"/>
    <id>https://noitaro.github.io/python-eel/</id>
    <published>2021-11-28T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.479Z</updated>
    
    <content type="html"><![CDATA[<p>誤解されないようにもう少し付け加えると、Python 操作のGUI部分をブラウザでやるって感じですかね。</p><p>こっちもよく分からない説明かもしれませんが、Python はコマンドで動くスクリプト言語なので、あのとっつきにくい真っ黒画面に文字が流れるのが主流となっています。</p><p>プログラム初心者にはちょっと取っ付きにくいと思います。</p><p>Python にもGUIで操作できるようにする事ができるんですが、見た目がダサいんですよね。Windows95かよってぐらいに。</p><p>今の時代なら、GUIにもグラデーションやアニメーションが付いてるのが一般的なので、古臭いGUIは好かれません。</p><p>簡単に美しいGUIを実装するならブラウザを頼るのが一番です。HTMLとCSSで簡単に美麗なGUIを作って、Pythonを操作してやれば気分は上々。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>前置きが長くなってしまいました。</p><p>PythonのGUIといえば、代表的なのが「Tkinter」だと思います。ですが見た目がダサいです。25年以上前のGUIなんて、いくら機能がよくても使いたいとは思いません。</p><p>なので今回は「<a href="https://github.com/ChrisKnott/Eel">Eel</a>」を使ってキレイなGUIをブラウザで作ってPythonを操作しようと思います。</p><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul><li>Windows 10 Home 21H1</li><li>Python 3.8.10</li><li>Eel 0.14.0</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>今回作るのは、実行フォルダ内のファイルを一覧表示するものです。</p><p><img src="python-eel.gif" loading="lazy"></p><p>見た目はブラウザですが、裏でPythonが動いています。ボタンを押すと、実行フォルダ内のファイル一覧を取得して画面に表示するプログラムです。</p><h3 id="Python側"><a href="#Python側" class="headerlink" title="Python側"></a>Python側</h3><p>まずPythonの処理から書いていきます。</p><p>事前に <a href="https://github.com/ChrisKnott/Eel">Eel</a> をインストールして使えるようにしておきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install eel</span><br></pre></td></tr></table></figure><h4 id="main-script-py"><a href="#main-script-py" class="headerlink" title="main_script.py"></a>main_script.py</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import eel</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line"></span><br><span class="line">    eel.init(&#x27;web&#x27;)</span><br><span class="line">    eel.start(&#x27;index.html&#x27;, port=0, size=(800, 600))</span><br><span class="line"></span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">@eel.expose</span><br><span class="line">def run_python():</span><br><span class="line"></span><br><span class="line">    files = os.listdir()</span><br><span class="line">    print(files)</span><br><span class="line">    eel.sleep(3)</span><br><span class="line">    return files</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    try:</span><br><span class="line">        main()</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><h3 id="GUI側"><a href="#GUI側" class="headerlink" title="GUI側"></a>GUI側</h3><p>GUI側はブラウザを使うのでHTMLを作成します。</p><p>webフォルダを作って下記コードをコピペします。</p><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;ja&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;!--Import Google Icon Font--&gt;</span><br><span class="line">    &lt;link href=&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;!-- Compiled and minified CSS --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.min.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Let browser know website is optimized for mobile--&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;a class=&quot;waves-effect waves-light btn&quot; id=&quot;runpython&quot;&gt;Python実行&lt;/a&gt;</span><br><span class="line">        &lt;ul class=&quot;collection&quot; id=&quot;collection&quot;&gt;&lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Modal Structure --&gt;</span><br><span class="line">    &lt;div id=&quot;modal1&quot; class=&quot;modal&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Import jQuery before materialize.js--&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;https://code.jquery.com/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- Compiled and minified JavaScript --&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;./index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/eel.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    // the &quot;href&quot; attribute of the modal trigger must specify the modal ID that wants to be triggered</span><br><span class="line">    $(&#x27;.modal&#x27;).modal(&#123; dismissible: false &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">document.querySelector(&quot;#runpython&quot;).addEventListener(&#x27;click&#x27;, async () =&gt; &#123;</span><br><span class="line">    $(&quot;#modal1&quot;).modal(&#x27;open&#x27;);</span><br><span class="line">    let files = await eel.run_python()();</span><br><span class="line">    $(&quot;#modal1&quot;).modal(&#x27;close&#x27;);</span><br><span class="line">    console.log(files);</span><br><span class="line"></span><br><span class="line">    files.forEach(element =&gt; &#123;</span><br><span class="line">        let li = document.createElement(&#x27;li&#x27;);</span><br><span class="line">        li.innerHTML = element;</span><br><span class="line">        li.classList.add(&quot;collection-item&quot;);</span><br><span class="line">        document.querySelector(&quot;#collection&quot;).appendChild(li);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h2><p>これで完成です。</p><p>フォルダ構成はこんな感じになると思います。</p><p><img src="WS002882.png" loading="lazy"></p><p>実行するとブラウザが開き、ボタンを押すとPythonの関数が実行されて結果が画面に表示されます。</p><h2 id="exe化"><a href="#exe化" class="headerlink" title="exe化"></a>exe化</h2><p>exe化して、簡単に配布することもできます。</p><p>下記コマンドで「<a href="https://pyinstaller.readthedocs.io/en/stable/">PyInstaller</a>」をインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyInstaller</span><br></pre></td></tr></table></figure><p>下記コマンドでPythonをexe化します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m eel main_script.py web --onefile --noconsole</span><br></pre></td></tr></table></figure><p>アイコンを変えたりするとなおいい感じに仕上がるでしょう。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m eel main_script.py web --onefile --noconsole --icon=Icojam-Animals-01-horse.ico</span><br></pre></td></tr></table></figure><p><img src="WS002883.png" loading="lazy"></p><p>実行するとコンソールも出ないでブラウザが起動するだけなので、PCが苦手な人にも安心して頂けると思います。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回のプログラムを <a href="https://github.com/noitaro/python-eel">GitHub</a> に上げておきます。</p><p>お試ししたい方はダウンロードしてみて下さい。</p><p>exe化したファイルは <a href="https://github.com/noitaro/python-eel/releases">こちら</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;誤解されないようにもう少し付け加えると、Python 操作のGUI部分をブラウザでやるって感じですかね。&lt;/p&gt;
&lt;p&gt;こっちもよく分からない説明かもしれませんが、Python はコマンドで動くスクリプト言語なので、あのとっつきにくい真っ黒画面に文字が流れるのが主流となって</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="html" scheme="https://noitaro.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>【React】Webpack を使って実行可能htmlを作成する</title>
    <link href="https://noitaro.github.io/react-webpack/"/>
    <id>https://noitaro.github.io/react-webpack/</id>
    <published>2021-11-21T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.527Z</updated>
    
    <content type="html"><![CDATA[<p>React は基本的にWebサーバが無いと動作しないですが、Webpack をすると実行可能なhtmlを作成することができます。</p><p>Electron とも相性がよく、React を Electron で表示させることができます。今回はその前段階として Webpack を使ってみたいと思います。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><ul><li>Windows 10 Home 21H1</li><li>Node.js 14.17.2</li><li>React 17.0.2</li><li>Babel 7.16.0</li><li>Webpack 5.64.2</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="プロジェクトの準備"><a href="#プロジェクトの準備" class="headerlink" title="プロジェクトの準備"></a>プロジェクトの準備</h3><p>まず初めに適当な作業フォルダを作り、下記コマンドで Node.js を初期化します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>そうすると「package.json」が出来上がります。</p><p><img src="WS002874.png" alt="npm init" loading="lazy"></p><h3 id="ライブラリのインストール"><a href="#ライブラリのインストール" class="headerlink" title="ライブラリのインストール"></a>ライブラリのインストール</h3><p>下記コマンドで React と Webpack をインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react react-dom</span><br><span class="line">npm install --save-dev webpack webpack-cli html-webpack-plugin babel-loader @babel/core @babel/preset-env @babel/preset-react @babel/plugin-syntax-jsx</span><br></pre></td></tr></table></figure><h3 id="package-json-の設定"><a href="#package-json-の設定" class="headerlink" title="package.json の設定"></a>package.json の設定</h3><p>scripts に下記コマンドを追加して npmコマンドでビルドできるようにします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;webpack --progress --mode development&quot;,</span><br><span class="line">  &quot;prod&quot;: &quot;webpack --progress --mode production&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="WS002877.png" alt="React scripts" loading="lazy"></p><h3 id="Webpack-の設定"><a href="#Webpack-の設定" class="headerlink" title="Webpack の設定"></a>Webpack の設定</h3><p>プロジェクトフォルダの直下に「webpack.config.js」という名前でJSファイルを作り、下記コードを貼り付けます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist/&#x27;),</span><br><span class="line">        publicPath: &#x27;./&#x27;,</span><br><span class="line">        filename: &#x27;index.js&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.(js|jsx)$/,</span><br><span class="line">                use: [&#x27;babel-loader&#x27;],</span><br><span class="line">                exclude: /node_modules/,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &#x27;./src/index.html&#x27;,</span><br><span class="line">            filename: &#x27;index.html&#x27;,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimize: false,</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: &quot;source-map&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Babel-の設定"><a href="#Babel-の設定" class="headerlink" title="Babel の設定"></a>Babel の設定</h3><p>プロジェクトフォルダの直下に「babel.config.js」という名前でJSファイルを作り、下記コードを貼り付けます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    &quot;presets&quot;: [&quot;@babel/preset-env&quot;, &quot;@babel/preset-react&quot;],</span><br><span class="line">    &quot;plugins&quot;: [&quot;@babel/plugin-syntax-jsx&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="html-の作成"><a href="#html-の作成" class="headerlink" title="html の作成"></a>html の作成</h3><p>プロジェクトフォルダに「src」フォルダを作って、その中に「index.html」を作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;ja&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="React-の作成"><a href="#React-の作成" class="headerlink" title="React の作成"></a>React の作成</h3><p>srcフォルダ内に「index.js」を作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactDOM from &#x27;react-dom&#x27;;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ReactDOM.render(&lt;App /&gt;, document.getElementById(&#x27;root&#x27;));</span><br></pre></td></tr></table></figure><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>最終的にこのようなファイル構成になると思います。</p><p><img src="WS002878.png" alt="React ファイル構成" loading="lazy"></p><p>下記コマンドで React を Webpack して 1つのファイルにします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>Webpack に成功すると「dist」というフォルダに、静的ファイルとして index.html とそれに必要なファイルが出力されます。</p><p><img src="WS002880.png" alt="React dist" loading="lazy"></p><p>あとは distフォルダの「index.html」を実行すれば React で作った Webページが表示されます。</p><p><img src="WS002881.png" alt="React index" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;React は基本的にWebサーバが無いと動作しないですが、Webpack をすると実行可能なhtmlを作成することができます。&lt;/p&gt;
&lt;p&gt;Electron とも相性がよく、React を Electron で表示させることができます。今回はその前段階として Webpa</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="react" scheme="https://noitaro.github.io/tags/react/"/>
    
    <category term="html" scheme="https://noitaro.github.io/tags/html/"/>
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
    <category term="webpack" scheme="https://noitaro.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>SLP を Ethereum に変換する</title>
    <link href="https://noitaro.github.io/slp-to-ethereum/"/>
    <id>https://noitaro.github.io/slp-to-ethereum/</id>
    <published>2021-11-14T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.619Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://axieinfinity.com/">Axie Infinity (アクシーインフィニティ)</a> のアドベンチャークエストをすると SLP (SMOOTH LOVE POTION) がもらえます。</p><p>毎日こつこつアドベンチャークエストをこなしある程度たまったので、SLP を Ethereum に変換したいと思います。</p><p>ちなみに1日最大75SLP もらえるのですが、私はPVPで勝てたことがないので1日50SLPが限界でした。毎日続けていればそれなりに貯まるので、悔しくなんかないですよ。</p><h2 id="Binance取引所のアカウント作成"><a href="#Binance取引所のアカウント作成" class="headerlink" title="Binance取引所のアカウント作成"></a>Binance取引所のアカウント作成</h2><p>SLP から Ethereum に変換するには <a href="https://www.binance.com/ja">Binance取引所</a> を使います。</p><p>アクシーを買った時に使った <a href="https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn">MetaMask</a> より手数料が安いためです。ちょっと前に対応したらしい。</p><p>アカウント作成は、指示に従って進めて行けば問題ないでしょう。</p><p><img src="WS002853-1.png" alt="Binance アカウント作成" loading="lazy"></p><p>SLP を移動させるためには本人認証も必要なので、そこまで完了させておきます。</p><p><img src="WS002854-1.png" alt="Binance 本人認証" loading="lazy"></p><p>本人認証に10日前後かかると思ってたんですが、1日で終わりました。</p><p><img src="WS002855.png" alt="Binance 本人認証完了" loading="lazy"></p><h2 id="SLP-を-Ronin-Wallet-に移動"><a href="#SLP-を-Ronin-Wallet-に移動" class="headerlink" title="SLP を Ronin Wallet に移動"></a>SLP を Ronin Wallet に移動</h2><p>では早速 Axie Infinity の <a href="https://marketplace.axieinfinity.com/profile/dashboard/">My account ページ</a> を開いて SLP を Ronin Wallet に移動しましょう。</p><p>Claim Tokens を選らんで「Claim SLP」を選択します。</p><p><img src="WS002856.png" alt="Claim SLP" loading="lazy"></p><p>とりあえず今回は 850SLP を移動させます。</p><p>Ronin Wallet にログインしてから「Claim SLP now」を押すと、</p><p><img src="WS002857.png" alt="Claim SLP now" loading="lazy"></p><p>Ronin Wallet の確認画面が表示されるので「Confirm」を押します。</p><p>少し時間が掛かりますが、Ronin Wallet に移動することができます。</p><p><img src="WS002859.png" alt="Ronin Wallet" loading="lazy"></p><p>前回移動させたのと合わせて 2203SLP になりました。</p><h2 id="SLP-を-Ronin-Wallet-から-Binance-に移動"><a href="#SLP-を-Ronin-Wallet-から-Binance-に移動" class="headerlink" title="SLP を Ronin Wallet から Binance に移動"></a>SLP を Ronin Wallet から Binance に移動</h2><p>Ronin Wallet に持ってきた SLP を Binance に移動します。</p><p>Binance の「<a href="https://www.binance.com/ja/my/wallet/account/main">フィアットと現物</a>」を選択し、</p><p><img src="WS002860.png" alt="Binance フィアットと現物" loading="lazy"></p><p>コイン検索で「SLP」を検索して、SLPの入金を選択します。</p><p><img src="WS002861.png" alt="Binance SLP" loading="lazy"></p><p>入金のネットワークは「Ronin」を選択します。</p><p><img src="WS002863.png" alt="Binance 入金ネットワーク" loading="lazy"></p><p>初回は Ronin の入金アドレスを持っていないので「アドレス取得」を選択して Binanceに入金するためのアドレスをもらいます。</p><p>SLP入金用アドレスが発行されるので、発行されたアドレスに SLP を移動させます。</p><p><img src="WS002864.png" alt="Binance 入金アドレス" loading="lazy"></p><p>Ronin Wallet に戻って「Send」から SLP を Binance に移動させます。</p><p><img src="WS002865.png" alt="Ronin Wallet Send" loading="lazy"></p><p>BinanceのSLP入金アドレスをコピペで貼り付けて、ASSETをSLPに変えて、MAXボタンを押して全てのSLPを移動させます。</p><p><img src="WS002866-1.png" alt="Ronin Wallet Send" loading="lazy"></p><p>「Confirm」ボタンを押してしばらく待つと、BinanceにSLPが入金されます。</p><p><img src="WS002867.png" alt="Ronin Wallet 確認" loading="lazy"></p><p><img src="WS002868.png" alt="Bitcoin 取引履歴" loading="lazy"></p><h2 id="SLP-を-Bitcoin-や-Ethereum-に変換"><a href="#SLP-を-Bitcoin-や-Ethereum-に変換" class="headerlink" title="SLP を Bitcoin や Ethereum に変換"></a>SLP を Bitcoin や Ethereum に変換</h2><p>SLPから直接 Bitcoin にも変換できるみたいです。調べてたら初めて知った。</p><h3 id="コンバート"><a href="#コンバート" class="headerlink" title="コンバート"></a>コンバート</h3><p>コンバートを使うと簡単に SLP を Bitcoin や Ethereum に変換することができます。</p><p><img src="WS002869.png" alt="Bitcoin コンバート" loading="lazy"></p><p>振替元を SLP にして、振替先を Bitcoin や Ethereum すれば簡単に変換することができます。</p><p><img src="WS002870.png" alt="Bitcoin コンバート" loading="lazy"></p><h3 id="現物取引"><a href="#現物取引" class="headerlink" title="現物取引"></a>現物取引</h3><p>現物取引で SLP を 米ドル (USD) や Ethereum にすることもできます。</p><p><img src="WS002871.png" alt="Bitcoin アドバンス" loading="lazy"></p><p>「SLP」で検索して「SLP&#x2F;USDT」や「SLP&#x2F;ETH」を選んで取引をします。</p><p><img src="WS002872.png" alt="SLP/ETH" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>遊ぶだけでお金がもらえるのは魅力的だと思いました。時間があればの話ですが。</p><p>私はPVPが苦手なので、ゲームが上手い人なら 毎月2250SLP貯めて日本円で18,000円相当は稼げるんじゃないでしょうか。</p><p>1アカウントだとお小遣い程度ですが、複数アカウント作って遊べばそれなりになりますね。</p><p>あと、初回にアクシーを3匹買ったのでその資金を回収するまでは続けたいと思います。</p><p>私が買ったアクシーは一番安い子ですが、毎日クエストするだけなので問題ないです。PVPはムリ。</p><p><img src="WS002873.png" alt="アクシー" loading="lazy"></p><p>最初の3匹は 1匹 0.04 ETH の子を買いました。3匹で 0.12 ETH、当時のレートで約40,000円。</p><p>思ってたより早く回収できそうなのでホントよかったです。ETHが値上がりしてるから。</p><p>余裕があれば アクシーをブリードして、生まれた子を競売にかけて稼ぐってこともやってみたいです。</p><p>そこまでハマる自信はないですが。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://axieinfinity.com/&quot;&gt;Axie Infinity (アクシーインフィニティ)&lt;/a&gt; のアドベンチャークエストをすると SLP (SMOOTH LOVE POTION) がもらえます。&lt;/p&gt;
&lt;p&gt;毎日こつこつアドベンチャ</summary>
      
    
    
    
    
    <category term="axie-infinity" scheme="https://noitaro.github.io/tags/axie-infinity/"/>
    
  </entry>
  
  <entry>
    <title>Electron .NET を試す</title>
    <link href="https://noitaro.github.io/electron-net/"/>
    <id>https://noitaro.github.io/electron-net/</id>
    <published>2021-10-31T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.031Z</updated>
    
    <content type="html"><![CDATA[<p>ネタ探しでネットサーフィンをしていたら面白そうなことに挑戦している <a href="https://github.com/ElectronNET/Electron.NET/">Github</a> を見つけたので、試してみたいと思います。</p><h2 id="Electron-NET-とは"><a href="#Electron-NET-とは" class="headerlink" title="Electron .NET とは"></a>Electron .NET とは</h2><p><a href="https://github.com/ElectronNET/Electron.NET/">Electron.NET</a></p><p>.NET 5ウェブアプリを Electron 使ってクロスプラットフォームのデスクトップアプリにする技術です。</p><p>この技術を使えば .NET 5 で作ったウェブアプリを、デスクトップアプリとして配布することができるようになります。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 21H1</li><li>Visual Studio 2019</li><li>.NET 5.0</li><li>ElectronNET.API 13.5.1</li><li>ElectronNET.CLI 13.5.1</li></ul><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>事前に「ASP.NET Core Web アプリ」で新しいプロジェクトを作っておきます。</p><p><img src="WS002843.png" alt="ASP.NET Core Web アプリ" loading="lazy"></p><p>ターゲットフレームワークは .NET 5.0 を選択します。</p><p><img src="WS002844.png" alt="ターゲットフレームワーク" loading="lazy"></p><p>デバック実行して動くことを確認しておきます。</p><p><img src="WS002842.png" alt="ASP.NET Core 5.0" loading="lazy"></p><h2 id="プロジェクトに-ElectronNET-API-をインストール"><a href="#プロジェクトに-ElectronNET-API-をインストール" class="headerlink" title="プロジェクトに ElectronNET.API をインストール"></a>プロジェクトに ElectronNET.API をインストール</h2><p>NuGet を使ってプロジェクトに ElectronNET.API をインストールします。</p><p>ソリューションエクスプローラーの WebApplication1 を選択してから右クリックメニューの「NuGetパッケージの管理」を選択します。</p><p><img src="WS002845.png" alt="NuGetパッケージの管理" loading="lazy"></p><p>参照を選んでから「ElectronNET.API」を検索してインストールします。</p><p><img src="WS002846.png" alt="ElectronNET.APIをインストール" loading="lazy"></p><h2 id="プログラム修正"><a href="#プログラム修正" class="headerlink" title="プログラム修正"></a>プログラム修正</h2><p>Electron.NET を有効にするため、プログラムを修正します。</p><p>修正するソースファイルは「Program.cs」と「Startup.cs」です。普段はあまり触ることのないところですね。</p><p><img src="WS002847.png" alt="Electron.NET を有効にする" loading="lazy"></p><h3 id="Program-cs"><a href="#Program-cs" class="headerlink" title="Program.cs"></a>Program.cs</h3><p>WebHostBuilder-Extension で Electron.NET を起動するように修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static IHostBuilder CreateHostBuilder(string[] args) =&gt;</span><br><span class="line">    Host.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            webBuilder.UseElectron(args);</span><br><span class="line">            webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><img src="WS002848.png" alt="webBuilder.UseElectron" loading="lazy"></p><h3 id="Startup-cs"><a href="#Startup-cs" class="headerlink" title="Startup.cs"></a>Startup.cs</h3><p>プログラム実行時に Electron のウインドウを開くように修正します。下記コードを一番下に追記します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void Configure(IApplicationBuilder app, IWebHostEnvironment env)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    // Open the Electron-Window here</span><br><span class="line">    Task.Run(async () =&gt; await Electron.WindowManager.CreateWindowAsync());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="WS002849.png" alt="Electron.WindowManager.CreateWindowAsync" loading="lazy"></p><p>ここまでの修正が出来たら Visual Studio を終了させます。</p><p>Visual Studio が起動していない状態で、以降の作業をしていきます。</p><h2 id="ElectronNET-CLI-をインストール"><a href="#ElectronNET-CLI-をインストール" class="headerlink" title="ElectronNET.CLI をインストール"></a>ElectronNET.CLI をインストール</h2><p>ASP.NET のプロジェクトに Electron を入れるため、ElectronNET.CLI をインストールします。</p><p>コマンドプロンプトを開いて下記コマンドを実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install ElectronNET.CLI -g</span><br></pre></td></tr></table></figure><p><img src="WS002840.png" alt="dotnet tool install ElectronNET.CLI -g" loading="lazy"></p><h3 id="Electron-NET-の初期化"><a href="#Electron-NET-の初期化" class="headerlink" title="Electron.NET の初期化"></a>Electron.NET の初期化</h3><p>Electron.NET を使うために プロジェクト内で Electron.NET の初期化をします。</p><p>下記コマンドをプロジェクトフォルダ内で実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electronize init</span><br></pre></td></tr></table></figure><p><img src="WS002841.png" alt="electronize init" loading="lazy"></p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>これで Electron.NET が使えるようになりました。</p><p>Visual Studio を起動させ「Electron.NET App」を選択してからデバック実行をします。</p><p><img src="WS002850.png" alt="Electron.NET App" loading="lazy"></p><p>最初の実行は時間が掛かって遅いですが、次からは早く実行することができます。</p><p><img src="WS002852.png" alt="Electron.NET" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>ウェブアプリをデスクトップアプリにする方法を紹介しました。</p><p>この技術は使いどころを選びますが、WEB配信をしないでウェブアプリを配布できるので、オフライン環境でウェブアプリを使えるようにできますね。</p><p>面白い技術なので、いい使い方があったら導入してみようと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ネタ探しでネットサーフィンをしていたら面白そうなことに挑戦している &lt;a href=&quot;https://github.com/ElectronNET/Electron.NET/&quot;&gt;Github&lt;/a&gt; を見つけたので、試してみたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;Elec</summary>
      
    
    
    
    
    <category term="application" scheme="https://noitaro.github.io/tags/application/"/>
    
    <category term="asp-net" scheme="https://noitaro.github.io/tags/asp-net/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="electron" scheme="https://noitaro.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>【Python】文字色を変える</title>
    <link href="https://noitaro.github.io/python-change-text-color/"/>
    <id>https://noitaro.github.io/python-change-text-color/</id>
    <published>2021-10-17T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.463Z</updated>
    
    <content type="html"><![CDATA[<p>Pythonの処理を表示していて、同じ色だと分かりにくいので色を変えて分かりやすくしたいと思います。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><ul><li>Windows 10 Home 21H1</li><li>Python 3.8.10</li><li>Fabric 1.14.1</li></ul><h2 id="Fabric-1-14-1"><a href="#Fabric-1-14-1" class="headerlink" title="Fabric 1.14.1"></a>Fabric 1.14.1</h2><p>色を付けるモジュールをインストールします。</p><p>その時、バージョン1.14.1を指定してください。バージョン2以上になると文字色変更が使えなくなります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fabric==1.14.1</span><br></pre></td></tr></table></figure><h2 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from fabric.colors import red, green, yellow, blue, magenta, cyan, white</span><br><span class="line"></span><br><span class="line">print(red(&quot;red: 赤&quot;))</span><br><span class="line">print(green(&quot;green: 緑&quot;))</span><br><span class="line">print(yellow(&quot;yellow: 黄&quot;))</span><br><span class="line">print(blue(&quot;blue: 青&quot;))</span><br><span class="line">print(magenta(&quot;magenta: マゼンタ&quot;))</span><br><span class="line">print(cyan(&quot;cyan: シアン&quot;))</span><br><span class="line">print(white(&quot;white: 白&quot;))</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>文字色が反映されるものと、反映されないものがあります。</p><ul><li>VS Code: OK</li><li>Windows ターミナル: OK</li><li>コマンドプロンプト: NG</li><li>Windows PowerShell: NG</li></ul><h3 id="VS-Code-OK"><a href="#VS-Code-OK" class="headerlink" title="VS Code: OK"></a>VS Code: OK</h3><p><img src="WS002833.png" alt="VS Code" loading="lazy"></p><h3 id="Windows-ターミナル-OK"><a href="#Windows-ターミナル-OK" class="headerlink" title="Windows ターミナル: OK"></a>Windows ターミナル: OK</h3><h3 id="コマンドプロンプト-NG"><a href="#コマンドプロンプト-NG" class="headerlink" title="コマンドプロンプト: NG"></a>コマンドプロンプト: NG</h3><p><img src="WS002834.png" alt="コマンドプロンプト" loading="lazy"></p><h3 id="Windows-PowerShell-NG"><a href="#Windows-PowerShell-NG" class="headerlink" title="Windows PowerShell: NG"></a>Windows PowerShell: NG</h3><p><img src="WS002836.png" alt="Windows PowerShell" loading="lazy"></p><h2 id="Windows-ターミナル-をインストールするには？"><a href="#Windows-ターミナル-をインストールするには？" class="headerlink" title="Windows ターミナル をインストールするには？"></a>Windows ターミナル をインストールするには？</h2><p>Microsoft Store の <a href="https://aka.ms/terminal">Windows Terminal</a> からインストールできます。</p><p><img src="WS002837.png" alt="Windows ターミナル をインストール" loading="lazy"></p><p>インストールすると、フォルダの右クリックメニューに表示されるようになります。</p><p><img src="WS002838.png" alt="フォルダの右クリックメニュー" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Pythonの処理を表示していて、同じ色だと分かりにくいので色を変えて分かりやすくしたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>【GCP】定期的に通知を飛ばすサーバを構築する</title>
    <link href="https://noitaro.github.io/gcp-notification-server/"/>
    <id>https://noitaro.github.io/gcp-notification-server/</id>
    <published>2021-10-05T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.071Z</updated>
    
    <content type="html"><![CDATA[<p>書いておかないと忘れるので、私がやった手順をここに記する。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><h3 id="やりたいこと"><a href="#やりたいこと" class="headerlink" title="やりたいこと"></a>やりたいこと</h3><p><a href="https://console.cloud.google.com/">Google Cloud Platform (GCP)</a> の<a href="https://cloud.google.com/free/docs/gcp-free-tier/?hl=ja#free-tier-usage-limits">無料枠内</a>で仮想マシンを作って、定期的に指定したウェブサイトのスクリーンショットを撮って Discord に送信したい。</p><p>GCP の無料仮想マシンは、低スペックで使ってみるまでは大丈夫か不安だったが、使ってみたら意外と普通に使えたので驚いた。公式サイトに書いてある通りの設定で VMインスタンスを作れば無料で使える。</p><p>デスクトップを搭載していないコンソールのサーバでも、ブラウザを使ってスクリーンショットが撮れた。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul><li>GCP に仮想マシン (VMインスタンス) があること</li><li>マシンタイプ： e2-micro</li><li>ブートディスク： Ubuntu 20.04 LTS</li></ul><p><img src="WS002809-1.png" loading="lazy"></p><p><img src="WS002810.png" loading="lazy"></p><h2 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h2><h3 id="Chrome-をインストール"><a href="#Chrome-をインストール" class="headerlink" title="Chrome をインストール"></a>Chrome をインストール</h3><p>Chrome がインストールされているか確認</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt list --installed google*</span><br></pre></td></tr></table></figure><p>Chrome のリポジトリを追加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &#x27;echo &quot;deb http://dl.google.com/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google.list&#x27;</span><br></pre></td></tr></table></figure><p>正常にリポジトリが追加されたか確認</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/apt/sources.list.d</span><br></pre></td></tr></table></figure><p>リポジトリの鍵情報を追加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>パッケージ一覧の更新（リポジトリを追加した後は必ず実行すること）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>Chrome をインストール</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure><p>Chrome がインストールされたか再確認</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt list --installed google*</span><br></pre></td></tr></table></figure><h3 id="Python-をインストール"><a href="#Python-をインストール" class="headerlink" title="Python をインストール"></a>Python をインストール</h3><p>Python をインストール</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3</span><br><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>Python のパッケージをインストール</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br><span class="line">pip install discordwebhook</span><br></pre></td></tr></table></figure><h3 id="ChromeDriver-をインストール"><a href="#ChromeDriver-をインストール" class="headerlink" title="ChromeDriver をインストール"></a>ChromeDriver をインストール</h3><p>まず、インストールした Chrome のバージョンを調べる。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --version</span><br></pre></td></tr></table></figure><p>調べたバージョンと同じか1つ大きいバージョンの ChromeDriver をインストール</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install chromedriver_binary==94.0.4606.61.0</span><br></pre></td></tr></table></figure><p>ここまでの作業で、ウェブサイトのスクリーンショットを撮って Discord に送ることができる。</p><h3 id="定期実行の設定"><a href="#定期実行の設定" class="headerlink" title="定期実行の設定"></a>定期実行の設定</h3><p>ここからは、指定した Python を定期的に実行する設定をしていく。</p><p>インストールした Python のパスを調べる。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which python3</span><br></pre></td></tr></table></figure><p>実行したい Pythonファイルのパスを調べる。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readlink -f example_1.py</span><br></pre></td></tr></table></figure><p>crontab (クロンタブ) エディタを開く。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>crontab に定期実行する設定を書き込む。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 8 * * * /usr/bin/python3 /home/user/example_1.py</span><br></pre></td></tr></table></figure><p>cron のサービス状態を確認</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service cron status</span><br></pre></td></tr></table></figure><p>cron を開始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service cron start</span><br></pre></td></tr></table></figure><p>cron を再起動</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/cron restart</span><br></pre></td></tr></table></figure><h3 id="サーバ日時の設定"><a href="#サーバ日時の設定" class="headerlink" title="サーバ日時の設定"></a>サーバ日時の設定</h3><p>GCP の仮想マシンは海外にあるので、タイムゾーンを日本標準時 (JST) に変更</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime</span><br></pre></td></tr></table></figure><p>仮想マシンのタイムゾーンを確認</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回は流儀に反して画像が少なめになっちゃいました。ごめんなさい。</p><p>とりあえず、私が使ったコマンドと説明を書いただけです。</p><p>やっぱコマンドは慣れませんね。覚えるのも大変ですし。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;書いておかないと忘れるので、私がやった手順をここに記する。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;h3 id=&quot;やりたいこと&quot;&gt;&lt;a href=&quot;#やり</summary>
      
    
    
    
    
    <category term="discord" scheme="https://noitaro.github.io/tags/discord/"/>
    
    <category term="gcp" scheme="https://noitaro.github.io/tags/gcp/"/>
    
    <category term="ubuntu" scheme="https://noitaro.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Python が動く Dockerfile を作る</title>
    <link href="https://noitaro.github.io/python-dockerfile/"/>
    <id>https://noitaro.github.io/python-dockerfile/</id>
    <published>2021-10-03T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.479Z</updated>
    
    <content type="html"><![CDATA[<p>Python の実行ファイルを入れて「Docker を実行するとその Python が実行される」そんな Dockerfile の Image を作りたいと思います。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><ul><li>Windows 10 Home 21H1</li><li>Docker version 20.10.8</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>まず、どのバージョンの Python を使うか決めます。</p><p>DockerHub の <a href="https://hub.docker.com/_/python?tab=tags&page=1&ordering=last_updated">Python Official Image</a> から使いたい Python のバージョンを決めます。</p><p>私は、新しすぎると動かないことと容量が気になったので「3.9.7-slim-buster」を使って Dockerfile を作ることに決めました。</p><p><img src="WS002803.png" loading="lazy"></p><h2 id="Dockerfile-を作る"><a href="#Dockerfile-を作る" class="headerlink" title="Dockerfile を作る"></a>Dockerfile を作る</h2><p>使う Python が決まったら実際に Dockerfile を作って行きます。</p><p>まず、適当なフォルダを作ってその中に「Dockerfile」と言う名前のファイル作ります。拡張子は無し。</p><p><img src="WS002804.png" loading="lazy"></p><p>Dockerfile には下記をコピペしておきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.9.7-slim-buster</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . /app</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">CMD [ &quot;python&quot;, &quot;./hello-world.py&quot; ]</span><br></pre></td></tr></table></figure><h3 id="hello-world-py"><a href="#hello-world-py" class="headerlink" title="hello-world.py"></a>hello-world.py</h3><p>同じフォルダ内に「hello-world.py」と「requirements.txt」を作ります。</p><p>中身は一番シンプルなものでいきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;Hello World!!&#x27;)</span><br></pre></td></tr></table></figure><p>「requirements.txt」の中身は今回不要なので空です。とりあえずこんな感じになればOK</p><p><img src="WS002805.png" loading="lazy"></p><h2 id="Image-を作成"><a href="#Image-を作成" class="headerlink" title="Image を作成"></a>Image を作成</h2><p>1つ上の階層に戻って、Image を作成するバッチファイルを作ります。</p><p>「docker-build.bat」というファイルを作って下記をコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd Python-run</span><br><span class="line">docker build -t docker-python .</span><br><span class="line">cd ../</span><br><span class="line">docker save docker-python -o docker-python.tar</span><br></pre></td></tr></table></figure><p>4行目で出来上がった Imageファイルを tar型式にアーカイブして出力しています。</p><p>なので出来上がった「python-run.tar」このファイルを渡せば簡単に Docker を動かすことができます。</p><p>バッチファイルを実行したらこんな感じになります。</p><p><img src="WS002806.png" loading="lazy"></p><p>フォルダ内に「python-run.tar」が作られてたら成功です。</p><p><img src="WS002807.png" loading="lazy"></p><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>「python-run.tar」を動かしたいPCにコピペしたら、実際に実行したいと思います。</p><p>python-run.tar と同じフォルダ内にバッチファイルを作って実行します。ファイル名は「docker-run.bat」にしました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker load -i python-run.tar</span><br><span class="line">docker run -it --rm --name python-run python-run</span><br></pre></td></tr></table></figure><p>バッチファイルを実行するとこのように結果が表示されます。</p><p><img src="WS002808.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python の実行ファイルを入れて「Docker を実行するとその Python が実行される」そんな Dockerfile の Image を作りたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="docker" scheme="https://noitaro.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Selenium を使って指定範囲のスクリーンショットを保存</title>
    <link href="https://noitaro.github.io/python-selenium-specified-range/"/>
    <id>https://noitaro.github.io/python-selenium-specified-range/</id>
    <published>2021-10-03T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.491Z</updated>
    
    <content type="html"><![CDATA[<p>Selenium を使って指定範囲のスクリーンショットを保存する方法です。備忘録になります。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><ul><li>Windows 10 Home 21H1</li><li>Python 3.8.10</li><li>既に Selenium でスクレイピングが出来ること</li></ul><h2 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.chrome.options import Options</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">options = Options()</span><br><span class="line"># ヘッドレスモード（画面を出してスクリーンショットすると、全体が撮れないため）</span><br><span class="line">options.add_argument(&quot;--headless&quot;)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=&quot;C:\chromedriver_win32\chromedriver.exe&quot;, options=options)</span><br><span class="line">driver.get(&quot;https://www.yahoo.co.jp/&quot;)</span><br><span class="line"></span><br><span class="line"># 読み込み待ち</span><br><span class="line">sleep(3)</span><br><span class="line"></span><br><span class="line"># ページのサイズを取得してドライバーに設定</span><br><span class="line">w = driver.execute_script(&#x27;return document.body.scrollWidth&#x27;)</span><br><span class="line">h = driver.execute_script(&#x27;return document.body.scrollHeight&#x27;)</span><br><span class="line">driver.set_window_size(w, h)</span><br><span class="line"></span><br><span class="line"># 範囲を指定してスクリーンショットを撮る</span><br><span class="line">png = driver.find_element(By.ID, &#x27;Service&#x27;).screenshot_as_png</span><br><span class="line"></span><br><span class="line"># ファイルに保存</span><br><span class="line">with open(&#x27;./screenshot.png&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">    f.write(png)</span><br><span class="line"></span><br><span class="line">driver.close()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>これを実行すると Yahooページのピックアップ欄がスクリーンショットされます。</p><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><p>ヘッドレスモードやページサイズを指定しているのは、指定範囲が見切れていたときに正常にスクリーンショットできなかったためです。</p><p>今回の方法を使えば、こういう風に指定範囲が見切れていても正常にスクリーンショットすることができます。</p><p><img src="WS002800.png" loading="lazy"></p><h2 id="指定範囲に-XPath-を設定"><a href="#指定範囲に-XPath-を設定" class="headerlink" title="指定範囲に XPath を設定"></a>指定範囲に XPath を設定</h2><p>Yahooページのピックアップ欄に ID属性 が設定されていたので簡単にできましたが、ID属性が指定されていなかったり構造が複雑だった場合は XPath を設定すると簡単にスクリーンショットできます。</p><h3 id="XPath-の調べ方"><a href="#XPath-の調べ方" class="headerlink" title="XPath の調べ方"></a>XPath の調べ方</h3><p>まず、スクリーンショットしたい箇所で右クリックをして「検証」を選択します。</p><p><img src="WS002801.png" loading="lazy"></p><p>スクリーンショットしたいHTMLタグを選んでから右クリックで「コピー」の XPathをコピー を選択すると、簡単に XPath が分かります。</p><p><img src="WS002802.png" loading="lazy"></p><p>あとは find_element_by_xpath に貼り付ければ完了です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 範囲を指定してスクリーンショットを撮る</span><br><span class="line">png = driver.find_element(By.XPATH, &#x27;//*[@id=&quot;tabpanelTopics1&quot;]/div/div[2]/article&#x27;).screenshot_as_png</span><br></pre></td></tr></table></figure><p>実行すると指定範囲がスクリーンショットされます。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Selenium を使って指定範囲のスクリーンショットを保存する方法です。備忘録になります。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Wi</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="scraping" scheme="https://noitaro.github.io/tags/scraping/"/>
    
    <category term="selenium" scheme="https://noitaro.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>Axie Infinity の始め方</title>
    <link href="https://noitaro.github.io/how-to-get-started-with-axie-infinity/"/>
    <id>https://noitaro.github.io/how-to-get-started-with-axie-infinity/</id>
    <published>2021-09-27T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.155Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://axieinfinity.com/">Axie Infinity (アクシーインフィニティ)</a> というゲームが流行っているみたいなので、私も流れに乗って遊んでみようと思います。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://axieinfinity.com/">Axie Infinity (アクシーインフィニティ)</a> とは、<a href="https://ja.wikipedia.org/wiki/%E9%9D%9E%E4%BB%A3%E6%9B%BF%E6%80%A7%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3">NFT (非代替性トークン)</a> を使ったオンラインゲームです。<a href="https://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%BC%E3%82%B5%E3%83%AA%E3%82%A2%E3%83%A0">Ethereum (イーサリアム)</a> から Ronin (ロニン) を買って Axieやアイテムを売買します。Axie を3匹買わないと始めれないので、初期投資がかかる。あと日本語は未対応なの。</p><h2 id="ゲームを始める"><a href="#ゲームを始める" class="headerlink" title="ゲームを始める"></a>ゲームを始める</h2><p>ゲームを始めるにはいろいろと準備をすることがあります。順を追って説明していきますね。</p><h3 id="Ronin-Wallet-を作成"><a href="#Ronin-Wallet-を作成" class="headerlink" title="Ronin Wallet を作成"></a>Ronin Wallet を作成</h3><h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><p><a href="https://chrome.google.com/webstore/detail/ronin-wallet/fnjhmkhhmkbjkkabndcnnogagogbneec">Ronin Wallet (ロニンウォレット)</a> とは、アクシーインフィニティ専用の仮想通貨Walletです。アクシーインフィニティを遊ぶためには必須となります。Google Chromeの拡張機能で Chrome にインストールして使います。インストールしないとアクシーインフィニティで遊べません。</p><p>上記URLは公式サイトからコピペしたものですが、フィッシングサイトが横暴しているみたいです。一応インストール前に提供元がアクシーインフィニティであるかちゃんと確認しましょう。世界的に人気なので好からぬことをする輩が多いみたいです。</p><p>Ronin Wallet を Chrome に追加します。</p><p><img src="WS002699.png" alt="Ronin Wallet を Chrome に追加" loading="lazy"></p><p>パズルのピースマークをクリックして、ピンを選択することでメニューに表示することができます。</p><p><img src="WS002704.png" alt="パズルのピースマークをクリックしてピンを選択" loading="lazy"></p><h4 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h4><p>Ronin Wallet のアイコンをクリックするとポップアップが表示されるので「Get Started」をクリックし、</p><p><img src="WS002705.png" alt="Get Started" loading="lazy"></p><p>開いたページの「I’m new. Let’s get set up!」をクリックして初期設定を開始します。</p><p><img src="WS002706.png" alt="I&#39;m new. Let&#39;s get set up!" loading="lazy"></p><p>まず初めにウォレットのパスワード決めます。入力したら「Create Wallet」をクリックして次の画面へ進みます。</p><p><img src="WS002707.png" alt="Create Wallet" loading="lazy"></p><p>次にリカバリーフレーズを表示させて、表示されたリカバリーフレーズをメモ帳にコピペして保存します。このリカバリーフレーズは絶対に無くしたり公開したりしないで下さい。</p><p>リカバリーフレーズの保存が終わったら「Confirm Seed Phrase」をクリックして次に進みます。</p><p><img src="WS002708.png" alt="リカバリーフレーズをメモ帳にコピペ" loading="lazy"></p><p>最後にリカバリーフレーズの確認として、各ポジションの正しい単語を入力して下さい。</p><p><img src="WS002709.png" alt="リカバリーフレーズの確認" loading="lazy"></p><p>これで Ronin Wallet の作成は完了です。</p><p><img src="WS002710.png" alt="Ronin Wallet の作成" loading="lazy"></p><h3 id="MetaMask-を作成"><a href="#MetaMask-を作成" class="headerlink" title="MetaMask を作成"></a>MetaMask を作成</h3><p><a href="https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn">MetaMask (メタマスク)</a> を使って、Ethereum (イーサリアム) を Ronin Wallet (ロニンウォレット) に送金します。</p><p>そのため MetaMask のアカウントを作成します。これも Chrome拡張機能 になっているので Chrome で作業して下さい。</p><h4 id="インストール-1"><a href="#インストール-1" class="headerlink" title="インストール"></a>インストール</h4><p><img src="WS002711.png" alt="MetaMask のアカウントを作成" loading="lazy"></p><p>Chrome に MetaMask を追加すると新しいタブでアカウント作成画面が開くので「開始」をクリックします。</p><p><img src="WS002712.png" alt="MetaMask" loading="lazy"></p><h4 id="設定-1"><a href="#設定-1" class="headerlink" title="設定"></a>設定</h4><p>初めに「ウォレットの作成」をクリックし、</p><p><img src="WS002713.png" alt="ウォレットの作成" loading="lazy"></p><p>利用規約に同意し、</p><p><img src="WS002714.png" alt="利用規約に同意" loading="lazy"></p><p>新しいパスワードを入力してから「作成」をクリックします。</p><p><img src="WS002715.png" alt="新しいパスワードを入力" loading="lazy"></p><p>表示されたバックアップフレーズをメモ帳にコピペして保存しておきます。</p><p><img src="WS002716.png" alt="バックアップフレーズをメモ帳にコピペ" loading="lazy"></p><p>バックアップフレーズの確認のため、バックアップフレーズを順番通りに選択していきます。</p><p><img src="WS002717.png" alt="バックアップフレーズの確認" loading="lazy"></p><p>これで MetaMask の作成は完了です。</p><p><img src="WS002718.png" alt="MetaMask の作成" loading="lazy"></p><h3 id="MetaMask-に-Ethereum-を送付"><a href="#MetaMask-に-Ethereum-を送付" class="headerlink" title="MetaMask に Ethereum を送付"></a>MetaMask に Ethereum を送付</h3><p>方法はいろいろあると思いますが、私は <a href="https://bitflyer.com/ja-jp/">bitFlyer</a> のアカウントを持っていたのでそこからとりあえず6万円分のイーサリアムを買ってメタマスクのアドレスに送付しました。</p><p><img src="WS002755.png" alt="MetaMask に Ethereum を送付" loading="lazy"></p><h3 id="Ronin-Wallet-に-Ethereum-を送付"><a href="#Ronin-Wallet-に-Ethereum-を送付" class="headerlink" title="Ronin Wallet に Ethereum を送付"></a>Ronin Wallet に Ethereum を送付</h3><p>続いてメタマスクのイーサリアムをロニンウォレットに送付します。</p><p><a href="https://bridge.roninchain.com/">公式サイト</a> の「Deposit」を選択し、</p><p><img src="WS002757.png" alt="Deposit を選択" loading="lazy"></p><p>FROMのイーサリアムアドレスと TOのロニンアドレスが正しいか確認して下さい。</p><p>ASSETに送付する仮想通貨を選択し、送付したい額を入力します。</p><p><img src="WS002758.png" alt="sky mavis" loading="lazy"></p><p>確認ダイアログが出てしばらく待つとロニンウォレットにイーサリアムが送付されます。</p><p><img src="WS002760.png" alt="ロニンウォレットにイーサリアムを送付" loading="lazy"></p><h3 id="Axie-Infinity-のアカウントを作成"><a href="#Axie-Infinity-のアカウントを作成" class="headerlink" title="Axie Infinity のアカウントを作成"></a>Axie Infinity のアカウントを作成</h3><p>ロニンウォレットを使ってアクシーインフィニティのアカウントを作ります。</p><p><a href="https://marketplace.axieinfinity.com/login">公式サイト</a> の「Login with Ronin Wallet」をクリックし、名前を決めれば完了です。</p><p><img src="WS002761.png" alt="Login with Ronin Wallet" loading="lazy"></p><h3 id="ゲームクライアントをインストール"><a href="#ゲームクライアントをインストール" class="headerlink" title="ゲームクライアントをインストール"></a>ゲームクライアントをインストール</h3><p>ゲームは Windows、Mac、iOS、Android とそれぞれで用意されているので、好きな環境で遊ぶことができます。私は Windowsですね。iPad mini で遊ぼうとしたらまだベータ版だったみたいでダメでした。</p><p>ブラウザで <a href="https://axieinfinity.com/">公式サイト</a> を開いて、右上の「PLAY NOW」を押すとゲームクライアントがダウンロードできます。</p><p><img src="WS002697.png" alt="アクシーインフィニティ" loading="lazy"></p><p>zip形式で圧縮されているので展開して、中に入っている「mavis_hub_setup.exe」を実行するとインストールが始まります。</p><p><img src="WS002698.png" alt="mavis_hub_setup.exe" loading="lazy"></p><p>あとはログインをしてゲームを楽しみましょう。</p><h2 id="備考"><a href="#備考" class="headerlink" title="備考"></a>備考</h2><p>アクシーインフィニティについてもっと知りたいって方には、こちらの記事をオススメします。</p><p><a href="https://note.com/kozo_tx/n/nadf615c75414">https://note.com/kozo_tx/n/nadf615c75414</a></p><p>アクシーインフィニティのブリードについて書かれている記事</p><p><a href="https://nftnavi.net/axieinfinity-2/">https://nftnavi.net/axieinfinity-2/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://axieinfinity.com/&quot;&gt;Axie Infinity (アクシーインフィニティ)&lt;/a&gt; というゲームが流行っているみたいなので、私も流れに乗って遊んでみようと思います。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="games" scheme="https://noitaro.github.io/tags/games/"/>
    
    <category term="axie-infinity" scheme="https://noitaro.github.io/tags/axie-infinity/"/>
    
  </entry>
  
  <entry>
    <title>アプリ情報を開くadbコマンド</title>
    <link href="https://noitaro.github.io/adb-command-to-open-app-info/"/>
    <id>https://noitaro.github.io/adb-command-to-open-app-info/</id>
    <published>2021-09-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.635Z</updated>
    
    <content type="html"><![CDATA[<p>アプリ情報を開くadbコマンドを紹介します。</p><p>今回は <a href="https://jp.bignox.com/">NoxPlayer</a> で紹介しますが、もちろん実機端末でも使えます。</p><h2 id="コマンド"><a href="#コマンド" class="headerlink" title="コマンド"></a>コマンド</h2><p>例としてウマ娘のアプリ情報を開いてみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -a android.settings.APPLICATION_DETAILS_SETTINGS -d package:jp.co.cygames.umamusume</span><br></pre></td></tr></table></figure><p><img src="WS002719.png" loading="lazy"></p><p>このように実行するとウマ娘のアプリ情報が表示されます。</p><p><img src="Screenshot_20210926-140855-1.png" loading="lazy"></p><h2 id="補足説明"><a href="#補足説明" class="headerlink" title="補足説明"></a>補足説明</h2><h3 id="adb-exe"><a href="#adb-exe" class="headerlink" title="adb.exe"></a>adb.exe</h3><p>adb.exe で NoxPlayer を操作するには、NoxPlayer 専用の adb.exe が必要です。基本的には NoxPlayer をインストールしたフォルダに入っている adb.exe を使えば問題なく動作します。</p><p><img src="WS002720.png" loading="lazy"></p><h3 id="パッケージ名"><a href="#パッケージ名" class="headerlink" title="パッケージ名"></a>パッケージ名</h3><p>パッケージ名を変えることで、別のアプリのアプリ情報を開くことができます。</p><p>パッケージ名とは「jp.co.cygames.umamusume」この部分です。</p><p>調べ方は、<a href="https://play.google.com/store/apps/details?id=jp.co.cygames.umamusume&hl=ja">Google Play</a> のページへ行き、URL の「id&#x3D;」の後ろにある文字列がパッケージ名となります。</p><p><img src="WS002721.png" loading="lazy"></p><p>今回の記事は以上となります。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;アプリ情報を開くadbコマンドを紹介します。&lt;/p&gt;
&lt;p&gt;今回は &lt;a href=&quot;https://jp.bignox.com/&quot;&gt;NoxPlayer&lt;/a&gt; で紹介しますが、もちろん実機端末でも使えます。&lt;/p&gt;
&lt;h2 id=&quot;コマンド&quot;&gt;&lt;a href=&quot;#コマンド</summary>
      
    
    
    
    
    <category term="adb" scheme="https://noitaro.github.io/tags/adb/"/>
    
    <category term="nox" scheme="https://noitaro.github.io/tags/nox/"/>
    
  </entry>
  
  <entry>
    <title>Flutter の開発環境準備</title>
    <link href="https://noitaro.github.io/flutter-development-environment/"/>
    <id>https://noitaro.github.io/flutter-development-environment/</id>
    <published>2021-09-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.047Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://flutter.dev/">Flutter</a> とは、スマホアプリやウェブアプリ、デスクトップアプリ等のネイティブアプリを単一のコードから作成できるUIフレームワークです。私がこよなく愛しているGoogle製。</p><h2 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h2><ul><li>Windows 10 Home 21H1</li><li>Flutter 2.5.1</li><li>Android Studio 2020.3.1.24</li><li>Android SDK 31.0.0</li><li>Android SDK Command-line Tools 5.0</li><li>VS Code 1.60.2</li></ul><h2 id="Windows-に-Flutter-をインストール"><a href="#Windows-に-Flutter-をインストール" class="headerlink" title="Windows に Flutter をインストール"></a>Windows に Flutter をインストール</h2><p>Windows に Flutter をインストールします。インストールと言っても FlutterSDK を適当なフォルダに展開してパスを通すだけ。</p><h3 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h3><p>まず <a href="https://flutter.dev/docs/get-started/install/windows#get-the-flutter-sdk">公式サイト</a> から「flutter_windows_2.5.1-stable.zip」をダウンロードします。</p><p><img src="WS002722.png" alt="flutter_windows_2.5.1-stable.zip をダウンロード" loading="lazy"></p><p>今回は分かりやすくCドライブの直下に展開しました。</p><p><img src="WS002723.png" alt="Cドライブの直下に展開" loading="lazy"></p><h3 id="パス設定"><a href="#パス設定" class="headerlink" title="パス設定"></a>パス設定</h3><p>コマンドプロンプトから Flutter のコマンドを使えるようにするためパスを設定します。パスを通すと言う作業ですね。</p><p>コントロールパネルのシステム画面を開いて、システムの詳細設定を選択します。</p><p><img src="WS002724.png" alt="システムの詳細設定を選択" loading="lazy"></p><p>システムのプロパティが開くので、詳細設定タブの「環境変数」を選択します。</p><p><img src="WS002726.png" alt="詳細設定タブの環境変数を選択" loading="lazy"></p><p>ユーザ環境変数の「Path」を選択してから「編集」ボタンをクリックします。</p><p><img src="WS002728.png" alt="ユーザ環境変数" loading="lazy"></p><p>環境変数名の編集画面で Flutter を展開した場所の「bin」フォルダを設定してあげます。今回はCドライブの直下に展開したので「C:\flutter\bin」を設定しました。</p><p>終わったら「OK」ボタンを押して全ての画面を閉じます。</p><p><img src="WS002729.png" alt="C:\flutter\bin を設定" loading="lazy"></p><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>最後にコマンドプロンプトに下記コマンドを入力して動作確認と依存環境のチェックをします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p><img src="WS002731.png" alt="flutter doctor" loading="lazy"></p><p>Flutter は正しく動作しているみたいですが、Android Studio がインストールしていないため × が出ちゃってますね。</p><h2 id="Android-Studio-をインストール"><a href="#Android-Studio-をインストール" class="headerlink" title="Android Studio をインストール"></a>Android Studio をインストール</h2><p>Android Studio がいるみたいなのでインストールします。</p><p>まず、<a href="https://developer.android.com/studio">公式サイト</a> から「android-studio-2020.3.1.24-windows.exe」をダウンロードします。</p><p><img src="WS002732.png" alt="android-studio-2020.3.1.24-windows.exe をダウンロード" loading="lazy"></p><p>ダウンロードしたアイコンを実行して Android Studio をインストールします。</p><p><img src="WS002733.png" alt="アイコン" loading="lazy"></p><p>特に設定は変えず「Next」を押していけばインストールできます。</p><p><img src="WS002734.png" alt="Android Studio インストール" loading="lazy"></p><p>インストールが終わったら一度実行しておきましょう。</p><p>インポートするものは無いので「Do not import settings」を選んで「OK」を押します。</p><p><img src="WS002735.png" alt="Do not import settings" loading="lazy"></p><p>使用状況を匿名で送信するかの確認です。気になる人は「Don’t send」を選択すれば送信しない設定になります。</p><p><img src="WS002738.png" alt="Don&#39;t send" loading="lazy"></p><p>ここまで進めたら再度 Flutter の依存環境チェックをします。</p><p>Android Studio は OK になったんですがまだ Android toolchain が × のままですね。もう少し設定が必要そうです。</p><p><img src="WS002739.png" alt="Android Studio OK" loading="lazy"></p><h3 id="セットアップウィザード"><a href="#セットアップウィザード" class="headerlink" title="セットアップウィザード"></a>セットアップウィザード</h3><p>Android Studio のセットアップウィザードを完了させないとダメそうなので「Next」ボタンを押して作業を続行します。</p><p><img src="WS002740.png" alt="Android Studio セットアップウィザード" loading="lazy"></p><p>特に気にしないので「Standard」を選択したまま「Next」ボタンを押して、</p><p><img src="WS002741.png" alt="Standard を選択" loading="lazy"></p><p>UIのテーマはお好みで、私はダーク系が好きなのでこのままです。</p><p><img src="WS002742.png" alt="UIテーマ" loading="lazy"></p><p>最後にインストールされる内容が一覧で表示されます。問題なければ「Finish」を押してセットアップ開始になります。</p><p><img src="WS002743.png" alt="Finish を押してセットアップ開始" loading="lazy"></p><p>セットアップウィザードが終わったら 再度 Flutter で依存環境をチェックします。</p><p>今度は2つ × が付いちゃいました。1つづつ解消していきましょう。</p><ul><li>cmdline-tools component is missing</li><li>Android license status unknown.</li></ul><p><img src="WS002744.png" alt="cmdline-tools component is missing" loading="lazy"></p><h4 id="cmdline-tools-component-is-missing"><a href="#cmdline-tools-component-is-missing" class="headerlink" title="cmdline-tools component is missing"></a>cmdline-tools component is missing</h4><p>こちらのエラーは SDKマネージャーを使って アンドロイドのコマンドラインツールをインストールしろってことだと思います。</p><p>Android Studio のスタートメニューから「More Actions」をクリックして「SDK Manager」を選択します。</p><p><img src="WS002746.png" alt="SDK Manager を選択" loading="lazy"></p><p>「SDK Tools」タブを選択し「Android SDK Command-line Tools」にチェックを入れて「OK」ボタンでインストール開始します。</p><p><img src="WS002747-1.png" alt="Android SDK Command-line Tools" loading="lazy"></p><p>最終確認ダイアログでも「OK」ボタンを押します。</p><p><img src="WS002749.png" alt="最終確認ダイアログ" loading="lazy"></p><p>ライセンスにも同意しておきます。</p><p><img src="WS002750.png" alt="ライセンスに同意" loading="lazy"></p><p>コマンドラインツールのインストールが終わったら再度 Flutter で依存環境をチェックします。</p><p><img src="WS002751.png" alt="Android licenses not accepted." loading="lazy"></p><p>コマンドラインツールのエラーは消えましたね。</p><h4 id="Android-licenses-not-accepted"><a href="#Android-licenses-not-accepted" class="headerlink" title="Android licenses not accepted."></a>Android licenses not accepted.</h4><p>これは簡単、アンドロイドライセンスに同意してね。ってことです。</p><p>コマンドプロンプトで下記コマンドを実行してアンドロイドライセンスに同意しましょう。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure><p>こんな画面が出たら「Y」キーを入力してエンターキーを押します。</p><p><img src="WS002752.png" alt="Yキーを入力" loading="lazy"></p><p>ちなみに、大文字で書かれて方が何も入力しないでエンターキーを押したときに送信されるキーです。</p><p>7回同じ操作が続きます。</p><p>「All SDK package licenses accepted」と表示されれば完了です。</p><p><img src="WS002753.png" alt="All SDK package licenses accepted" loading="lazy"></p><p>最後に依存環境をチェックします。</p><p>全てにチェックが入って問題なく使える状態になりました。</p><p><img src="WS002754.png" alt="No issues found!" loading="lazy"></p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>今回はウェブ用に開発していく予定なので、Androidエミュレーターのインストールや Visual Studio 2019 のインストールはやりません。</p><p>必要になったらその時にインストールすることにします。</p><p>既にインストールしてあった VS Code や Java は説明出来てませんが、同じ要領インストールしてみて下さい。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt; とは、スマホアプリやウェブアプリ、デスクトップアプリ等のネイティブアプリを単一のコードから作成できるUIフレームワークです。私がこよなく愛しているGoogle製。&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="android-studio" scheme="https://noitaro.github.io/tags/android-studio/"/>
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="flutter" scheme="https://noitaro.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Discord に通知する BOT を作る</title>
    <link href="https://noitaro.github.io/python-discord-notification-bot/"/>
    <id>https://noitaro.github.io/python-discord-notification-bot/</id>
    <published>2021-09-12T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.475Z</updated>
    
    <content type="html"><![CDATA[<p>Pythonを動かしたまま外出をしたときに、進捗や状況が知りたいってことがあったので、定期的に<a href="https://discord.com/">Discord</a>に通知するBOTを作りたいと思います。</p><p>BOTと言っても大げさなことはせずに、単純にループで繰り返して定期的に通知を送るだけです。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><ul><li>Windows 10 Home 21H1</li><li>Python 3.8.10</li><li>discordwebhook 1.0.2</li><li>Discordアカウント取得済み</li><li>Discordデスクトップアプリインストール済み</li></ul><h2 id="Discord-の-Webhook-を発行する"><a href="#Discord-の-Webhook-を発行する" class="headerlink" title="Discord の Webhook を発行する"></a>Discord の Webhook を発行する</h2><p>Discordに通知するために Webhook という機能を使います。</p><p>Webhookとは、HTTPプロトコルのPOSTリクエストを利用して、情報のやり取りをする手法のことです。</p><p>Discord は Webhook の機能を提供しているので、まずはその機能を使えるようにします。</p><h3 id="サーバーを追加"><a href="#サーバーを追加" class="headerlink" title="サーバーを追加"></a>サーバーを追加</h3><p>Discord のサーバーを持ってない人はまずサーバーを追加します。持ってる人は飛ばして大丈夫。</p><p><img src="WS002668.png" alt="サーバーを追加" loading="lazy"></p><p>とりあえず、オリジナルサーバーを作成します。</p><p><img src="WS002669.png" alt="オリジナルの作成" loading="lazy"></p><p>この辺りは適当で。</p><p><img src="WS002670.png" alt="自分と友達のため" loading="lazy"></p><p>サーバー名を決めてサーバーの完成です。</p><p><img src="WS002671.png" alt="サーバー名を入力" loading="lazy"></p><h3 id="Webhook-を発行"><a href="#Webhook-を発行" class="headerlink" title="Webhook を発行"></a>Webhook を発行</h3><p>続いて今作ったサーバーに通知を送れるようにするため、Webhook を発行します。</p><p>今回は一般チャンネルに通知させたいため、一般チャンネルの Webhook を発行します。別のチャンネルや通知専用のチャンネルに通知をさせたい場合は、そのチャンネルで Webhook を発行して下さい。</p><p>「チャンネルの編集」をクリックし、</p><p><img src="WS002672.png" alt="チャンネルの編集をクリック" loading="lazy"></p><p>連携サービスを選択し「ウェブフックを作成」をクリックすると Webhook が作成されます。</p><p><img src="WS002673.png" alt="ウェブフックを作成をクリック" loading="lazy"></p><p>最後に「ウェブフックURLをコピー」を押して、クリップボードに WebhookURL をコピーしメモ帳に貼り付けておきましょう。今はまだ使わないので。</p><p><img src="WS002674.png" alt="ウェブフックURLをコピーをクリック" loading="lazy"></p><h2 id="Discord-に通知を飛ばす"><a href="#Discord-に通知を飛ばす" class="headerlink" title="Discord に通知を飛ばす"></a>Discord に通知を飛ばす</h2><p>早速 Discord に通知を飛ばしてみます。</p><p>Webhook は単なる URL なので <a href="https://pypi.org/project/requests/">requests</a>ライブラリのPOSTメソッドでも全然問題ないんですが、今回はもっと簡単な <a href="https://pypi.org/project/discordwebhook/">discordwebhook</a>ライブラリを使って通知を飛ばします。</p><h3 id="discordwebhook"><a href="#discordwebhook" class="headerlink" title="discordwebhook"></a>discordwebhook</h3><p>discordwebhookライブラリを使いたいのでインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install discordwebhook</span><br></pre></td></tr></table></figure><p>Successfully と表示されればインストール完了。</p><p><img src="WS002675.png" alt="pip install discordwebhook" loading="lazy"></p><h3 id="文字だけ"><a href="#文字だけ" class="headerlink" title="文字だけ"></a>文字だけ</h3><p>URLの部分は自分の WebhookURL を張り付けて実行して下さい。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from discordwebhook import Discord</span><br><span class="line"></span><br><span class="line">discord = Discord(url=&quot;https://discordapp.com/api/webhooks/******************/********************************************************************&quot;)</span><br><span class="line">discord.post(content=&quot;Hello, world.&quot;)</span><br></pre></td></tr></table></figure><p>実行すると Discord に通知が飛んできます。</p><p><img src="WS002679.png" alt="文字だけ" loading="lazy"></p><h3 id="画像付き"><a href="#画像付き" class="headerlink" title="画像付き"></a>画像付き</h3><p>画像も送ることができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from discordwebhook import Discord</span><br><span class="line"></span><br><span class="line">discord = Discord(url=&quot;https://discordapp.com/api/webhooks/******************/********************************************************************&quot;)</span><br><span class="line">discord.post(</span><br><span class="line">    content=&quot;Hello, world.&quot;, </span><br><span class="line">    file=&#123;</span><br><span class="line">        &quot;animal1&quot;: open(&quot;C:/Users/*****/Desktop/animal_wolf01_01.png&quot;, &quot;rb&quot;),</span><br><span class="line">        &quot;animal2&quot;: open(&quot;C:/Users/*****/Desktop/animal_deer01_01.png&quot;, &quot;rb&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p><img src="WS002680.png" alt="画像付き" loading="lazy"></p><p>こんな使い方できます。</p><p><img src="WS002682.png" alt="リセマラ結果を通知" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Pythonを動かしたまま外出をしたときに、進捗や状況が知りたいってことがあったので、定期的に&lt;a href=&quot;https://discord.com/&quot;&gt;Discord&lt;/a&gt;に通知するBOTを作りたいと思います。&lt;/p&gt;
&lt;p&gt;BOTと言っても大げさなことはせずに、単純</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="discord" scheme="https://noitaro.github.io/tags/discord/"/>
    
    <category term="bot" scheme="https://noitaro.github.io/tags/bot/"/>
    
  </entry>
  
  <entry>
    <title>【C#】List vs HashSet vs Dictionary</title>
    <link href="https://noitaro.github.io/list-vs-hashset-vs-dictionary/"/>
    <id>https://noitaro.github.io/list-vs-hashset-vs-dictionary/</id>
    <published>2021-09-05T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.243Z</updated>
    
    <content type="html"><![CDATA[<p>繰り返し処理とLinqのパフォーマンステストです。</p><p><img src="background_00016.jpg" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 21H1</li><li>Visual Studio 2019</li><li>.NET Core 3.1</li></ul><h2 id="繰り返し処理は-List型-が一番早い"><a href="#繰り返し処理は-List型-が一番早い" class="headerlink" title="繰り返し処理は List型 が一番早い"></a>繰り返し処理は List型 が一番早い</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp1</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            // テストデータ作成</span><br><span class="line">            var list = new List&lt;int&gt;();</span><br><span class="line">            var hash = new HashSet&lt;int&gt;();</span><br><span class="line">            var dict = new Dictionary&lt;int, int&gt;();</span><br><span class="line">            for (var i = 0; i &lt; 10000000; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                list.Add(i);</span><br><span class="line">                hash.Add(i);</span><br><span class="line">                dict.Add(i, i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var sw = new Stopwatch();</span><br><span class="line">            decimal total = 0;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;繰り返し処理で値の合計を算出する。&quot;);</span><br><span class="line"></span><br><span class="line">            sw.Start();</span><br><span class="line">            foreach (var item in list)</span><br><span class="line">            &#123;</span><br><span class="line">                total += item;</span><br><span class="line">            &#125;</span><br><span class="line">            sw.Stop();</span><br><span class="line">            Console.WriteLine(&quot;List: &#123;0&#125;ms&quot;, sw.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">            total = 0;</span><br><span class="line"></span><br><span class="line">            sw.Start();</span><br><span class="line">            foreach (var item in hash)</span><br><span class="line">            &#123;</span><br><span class="line">                total += item;</span><br><span class="line">            &#125;</span><br><span class="line">            sw.Stop();</span><br><span class="line">            Console.WriteLine(&quot;HashSet: &#123;0&#125;ms&quot;, sw.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">            total = 0;</span><br><span class="line"></span><br><span class="line">            sw.Start();</span><br><span class="line">            foreach (var item in dict)</span><br><span class="line">            &#123;</span><br><span class="line">                total += item.Value;</span><br><span class="line">            &#125;</span><br><span class="line">            sw.Stop();</span><br><span class="line">            Console.WriteLine(&quot;Dictionary: &#123;0&#125;ms&quot;, sw.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">            total = 0;</span><br><span class="line"></span><br><span class="line">            sw.Start();</span><br><span class="line">            foreach (var item in dict.Keys)</span><br><span class="line">            &#123;</span><br><span class="line">                total += item;</span><br><span class="line">            &#125;</span><br><span class="line">            sw.Stop();</span><br><span class="line">            Console.WriteLine(&quot;Dictionary.Keys: &#123;0&#125;ms&quot;, sw.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">            total = 0;</span><br><span class="line"></span><br><span class="line">            sw.Start();</span><br><span class="line">            foreach (var item in dict.Values)</span><br><span class="line">            &#123;</span><br><span class="line">                total += item;</span><br><span class="line">            &#125;</span><br><span class="line">            sw.Stop();</span><br><span class="line">            Console.WriteLine(&quot;Dictionary.Values: &#123;0&#125;ms&quot;, sw.ElapsedMilliseconds);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">繰り返し処理で値の合計を算出する。</span><br><span class="line">List: 122ms</span><br><span class="line">HashSet: 254ms</span><br><span class="line">Dictionary: 428ms</span><br><span class="line">Dictionary.Keys: 560ms</span><br><span class="line">Dictionary.Values: 687ms</span><br></pre></td></tr></table></figure><h2 id="Linq-はどれも同じ速さ"><a href="#Linq-はどれも同じ速さ" class="headerlink" title="Linq はどれも同じ速さ"></a>Linq はどれも同じ速さ</h2><p>先ほどのソースを改造して Linq を使って取得した場合、どうなるか確認してみました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sw.Start();</span><br><span class="line">var listFirst = list.FirstOrDefault(x =&gt; x == 1000);</span><br><span class="line">sw.Stop();</span><br><span class="line">Console.WriteLine(&quot;List: &#123;0&#125;ms&quot;, sw.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">sw.Start();</span><br><span class="line">var hashFirst = hash.FirstOrDefault(x =&gt; x == 1000);</span><br><span class="line">sw.Stop();</span><br><span class="line">Console.WriteLine(&quot;HashSet: &#123;0&#125;ms&quot;, sw.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">sw.Start();</span><br><span class="line">var dictFirst = dict.FirstOrDefault(x =&gt; x.Key == 1000);</span><br><span class="line">sw.Stop();</span><br><span class="line">Console.WriteLine(&quot;Dictionary: &#123;0&#125;ms&quot;, sw.ElapsedMilliseconds);</span><br></pre></td></tr></table></figure><h3 id="実行結果-1"><a href="#実行結果-1" class="headerlink" title="実行結果"></a>実行結果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List: 857ms</span><br><span class="line">HashSet: 857ms</span><br><span class="line">Dictionary: 857ms</span><br></pre></td></tr></table></figure><p>速さに違いはなかったですが、遅いです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>意外だったのが HashSet型 より List型 の方が早かったこと。</p><p>Linq は遅い。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;繰り返し処理とLinqのパフォーマンステストです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;background_00016.jpg&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
  </entry>
  
  <entry>
    <title>【Python】指定フォルダのファイルを全てプッシュする</title>
    <link href="https://noitaro.github.io/python-git-push/"/>
    <id>https://noitaro.github.io/python-git-push/</id>
    <published>2021-08-29T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.483Z</updated>
    
    <content type="html"><![CDATA[<p>ちょっと最近ネタ切れ気味なので備忘録になります。</p><h2 id="指定フォルダの変更ファイルを全てプッシュ"><a href="#指定フォルダの変更ファイルを全てプッシュ" class="headerlink" title="指定フォルダの変更ファイルを全てプッシュ"></a>指定フォルダの変更ファイルを全てプッシュ</h2><p>指定フォルダでPythonが実行されたことが前提となります。</p><p>Gitをクローンしているフォルダが違う場合は、指定フォルダに移動してから実行して下さい。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line"># Push</span><br><span class="line">os.system(&#x27;git add ./data&#x27;)</span><br><span class="line">os.system(&#x27;git commit -m &quot;add data&quot;&#x27;)</span><br><span class="line">os.system(&#x27;git push&#x27;)</span><br></pre></td></tr></table></figure><p>今回は dataフォルダ内の全てのファイルをプッシュしたいので、このようなコードになりました。</p><p>コミットするときのメッセージは “add data” になります。</p><p>Python には <a href="https://gitpython.readthedocs.io/en/stable/tutorial.html">Gitを操作するライブラリ</a> もあるので、そっちの方がもっと柔軟に操作できます。</p><p>そこまで高機能じゃなくてとりあえず定期的にプッシュがしたいだけならコレで十分かと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ちょっと最近ネタ切れ気味なので備忘録になります。&lt;/p&gt;
&lt;h2 id=&quot;指定フォルダの変更ファイルを全てプッシュ&quot;&gt;&lt;a href=&quot;#指定フォルダの変更ファイルを全てプッシュ&quot; class=&quot;headerlink&quot; title=&quot;指定フォルダの変更ファイルを全てプッシュ</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="github" scheme="https://noitaro.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>エピックセブン 装備最適化ツールの使い方</title>
    <link href="https://noitaro.github.io/fribbels-epic-7-gear-optimizer/"/>
    <id>https://noitaro.github.io/fribbels-epic-7-gear-optimizer/</id>
    <published>2021-08-22T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.055Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://epic-seven.jp/">エピックセブン</a> の ワイバーン11 がなかなかクリア出来なかったので、装備最適化ツール（<a href="https://github.com/fribbels/Fribbels-Epic-7-Optimizer">Fribbels Epic 7 Gear Optimizer</a>）を使ってみました。</p><p>その結果、ずっとクリア出来なかった ワイバーン11 と 12 が、オートでクリア出来るようになりました！ 今まで装備が悪かったみたい。</p><p>なので今回は、装備最適化ツール の簡単な使い方を説明します。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://epic-seven.jp/">エピックセブン（Epic Seven）</a>とは、アズレンの Yostar が運営するスマホゲーム。コツコツキャラクターや装備を整えてマイペースに楽しめるので、私が唯一ハマっている。</p><p><a href="https://github.com/fribbels/Fribbels-Epic-7-Optimizer">装備最適化ツール（Fribbels Epic 7 Gear Optimizer）</a>とは、最適な装備の組み合わせを自動で行ってくれる非公式ツール。エピ7は装備の厳選が醍醐味となっていおり、倉庫にはたくさんの装備で溢れかえってしまうから、その中からいい装備だけをかき集めてくれる。スゴイ！</p><p>ちなみに、JavaScript と Electron で作られてる。ゲームのパケットをキャプチャして持ってる装備一覧を作る機能も付いてる。パケットキャプチャは Python を使っていて、キャプチャしたデータはサーバに送って解析しているっぽい。この解析部分をブラックボックスにさせたいの分かる！</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Wondows 10 Home 20H2</li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>装備最適化ツールを動かすために、色々とインストールするものがあります。</p><h3 id="Fribbels-Epic-7-Gear-Optimizer"><a href="#Fribbels-Epic-7-Gear-Optimizer" class="headerlink" title="Fribbels Epic 7 Gear Optimizer"></a>Fribbels Epic 7 Gear Optimizer</h3><p><a href="https://github.com/fribbels/Fribbels-Epic-7-Optimizer/releases">こちら</a>から最新の「Fribbels Epic 7 Gear Optimizer」をダウンロードします。</p><p><img src="WS002475.png" alt="FribbelsE7Optimizer-1.6.1-windows.zip" loading="lazy"></p><p>ダウンロードしたら展開もして置きます。</p><p><img src="WS002476.png" alt="FribbelsE7Optimizer" loading="lazy"></p><h3 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h3><p><a href="https://java.com/en/download/manual.jsp">こちら</a>から「Windows Offline (64-bit)」版をダウンロードして、インストールも済ませます。</p><p><img src="WS002478.png" alt="Windows Offline (64-bit)" loading="lazy"></p><p>インストールはひたすら「次へ」を押して行って問題ないです。終わったら再起動させましょう。</p><p><img src="WS002446.png" alt="Javaセットアップ" loading="lazy"></p><h3 id="Nox-を使って装備インポートを自動でする場合"><a href="#Nox-を使って装備インポートを自動でする場合" class="headerlink" title="Nox を使って装備インポートを自動でする場合"></a>Nox を使って装備インポートを自動でする場合</h3><p>Nox を使って装備インポートを自動でする場合は、下記ツールもインストールします。</p><h4 id="Python3-4-以降"><a href="#Python3-4-以降" class="headerlink" title="Python3.4 以降"></a>Python3.4 以降</h4><p><a href="https://www.python.org/">こちら</a>からダウンロード &amp; インストールをしておきます。</p><p>インストール時に「PATH に Python を追加する」を有効にします。</p><h4 id="Npcap"><a href="#Npcap" class="headerlink" title="Npcap"></a>Npcap</h4><p>Nox のパケットを傍受するために必要。</p><p><a href="https://nmap.org/npcap/#download">こちら</a>から「Npcap 1.50 installer」をダウンロードして、インストールしておきます。</p><p><img src="AWS000006.png" alt="Npcap 1.50 installer" loading="lazy"></p><p>インストール時に「Support raw 802.11 traffic (and monitor mode) for wireless adapters」を有効にします。コレにチェックを入れると有線と無線のパケットを傍受することが出来るみたい。今回はその機能を使うらしい。</p><p><img src="WS002448.png" alt="Support raw 802.11 traffic (and monitor mode) for wireless adapters" loading="lazy"></p><p>ココまで出来たら再起動をして、次の工程へ進みます。</p><h2 id="装備のインポート"><a href="#装備のインポート" class="headerlink" title="装備のインポート"></a>装備のインポート</h2><p>装備のインポートには、自動モードとスクショモードがあります。自動モードの方が簡単なのでこっちを使って説明。スクショモードは試してないので割愛します。</p><p>まず「FribbelsE7Optimizer.exe」を実行してツールを起動させます。</p><p>その後「Importer」タブを選択し「Import heroes and gear automatically」をクリックし、</p><p><img src="AWS000004.png" loading="lazy"></p><p>「Start scanning」をクリック。</p><p><img src="AWS000008.png" alt="Start scanning をクリック" loading="lazy"></p><p>あとは Nox で エピ7 を実行し、ロビー画面まで進めてから「Stop scanning」をクリックすると、持ってる装備データが JSON形式 で手に入ります。</p><p><img src="WS002482.png" alt="Stop scanning" loading="lazy"></p><p>一度「Export」を押してローカルに保存し、</p><p><img src="AWS000011.png" alt="Export" loading="lazy"></p><p>「Merge data」で読み込んで完了です。</p><p><img src="AWS000012.png" alt="Merge data" loading="lazy"></p><h2 id="装備の最適化"><a href="#装備の最適化" class="headerlink" title="装備の最適化"></a>装備の最適化</h2><p>ここまで出来れば、後は最適化していくだけです。</p><p>まず「Heroes」タブを開いて、最適化させたいキャラクターを追加します。</p><p><img src="WS002485.png" alt="最適化させたいキャラクターを追加" loading="lazy"></p><p>次に「Optimizer」タブを開いて、最適化させたいキャラクターを選択します。</p><p><img src="WS002486.png" alt="最適化させたいキャラクターを選" loading="lazy"></p><h3 id="一番簡単な最適化方法"><a href="#一番簡単な最適化方法" class="headerlink" title="一番簡単な最適化方法"></a>一番簡単な最適化方法</h3><p>色々最適化オプションがあって、どこをイジればいいか分からないと思います。</p><p>私もよく分かっていないので、最低限「Substat priority」をイジればいい感じにしてくれるところを書きます。</p><p>細かく設定したら、それだけいい感じに最適化してくれるので、余力があれば挑戦してみて下さい。</p><h4 id="高火力向けの装備ビルド"><a href="#高火力向けの装備ビルド" class="headerlink" title="高火力向けの装備ビルド"></a>高火力向けの装備ビルド</h4><p><img src="WS002486_2.png" alt="高火力向けの装備ビルド" loading="lazy"></p><h4 id="ヒーラー向けの装備ビルド"><a href="#ヒーラー向けの装備ビルド" class="headerlink" title="ヒーラー向けの装備ビルド"></a>ヒーラー向けの装備ビルド</h4><p><img src="WS002487.png" alt="ヒーラー向けの装備ビルド" loading="lazy"></p><h4 id="タンク向けの装備ビルド"><a href="#タンク向けの装備ビルド" class="headerlink" title="タンク向けの装備ビルド"></a>タンク向けの装備ビルド</h4><p><img src="WS002488.png" alt="タンク向けの装備ビルド" loading="lazy"></p><p>「Start」を押せば、いろいろな組み合わせの結果が抽選されて出てくるので、気に入った組み合わせを実際に装備させれば最適化完了です。</p><p><img src="WS002490.png" alt="Start" loading="lazy"></p><p>最後に、気に入った組み合わせを選んで「Equip」を押せば、他のキャラクターでその装備が抽選されなくなります。なので被ることが無くなります。</p><p><img src="WS002491.png" alt="Equip" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>とりあえず、簡単な使い方を説明しました。</p><p>もっと色々な設定をイジって最適化も出来るのですが、英語が苦手なのでコレが限界でした。</p><p>まあ、ワイバーン11がオート周回出来るようになったので、これで90装備を揃えて更に楽しめそうです。やったね。</p><p>非公式ツールだけどパケット操作をしている訳じゃないので、問題ないと思っています、</p><p>ですが、自己責任でお願いします。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://epic-seven.jp/&quot;&gt;エピックセブン&lt;/a&gt; の ワイバーン11 がなかなかクリア出来なかったので、装備最適化ツール（&lt;a href=&quot;https://github.com/fribbels/Fribbels-Epic-7-Opt</summary>
      
    
    
    
    
    <category term="nox" scheme="https://noitaro.github.io/tags/nox/"/>
    
    <category term="games" scheme="https://noitaro.github.io/tags/games/"/>
    
  </entry>
  
  <entry>
    <title>【Python】Selenium を使ってスクレイピング</title>
    <link href="https://noitaro.github.io/python-selenium-scraping/"/>
    <id>https://noitaro.github.io/python-selenium-scraping/</id>
    <published>2021-08-10T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.491Z</updated>
    
    <content type="html"><![CDATA[<p>私は結構な頻度でPCを初期化するんですが、その都度前使っていたツールをインストールしなおして使える状態までもっていっています。</p><p>でも毎回忘れちゃってて、都度検索しては「あぁじゃない、こうじゃない」ってやってるので、次忘れたときのために備忘録しておきます。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><ul><li>Windows 10 Home 21H1</li><li>Python 3.8.10</li><li>Visual Studio Code 1.58.2</li><li>Selenium 3.141.0</li></ul><h2 id="Seleniumのインストール"><a href="#Seleniumのインストール" class="headerlink" title="Seleniumのインストール"></a>Seleniumのインストール</h2><p>下記コマンドを実行する。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p>Successfully と表示されれば成功。ワーニングは気にしない。</p><p><img src="WS002659.png" loading="lazy"></p><h2 id="WebDriverのインストール"><a href="#WebDriverのインストール" class="headerlink" title="WebDriverのインストール"></a>WebDriverのインストール</h2><p>今回はChromeを使ってスクレイピングしたいので、Chrome用のWebDriverをインストールします。</p><p>Seleniumを使うにはWebDriverが必須です。</p><p><a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">こちらのサイト</a>から最新のWebDriverをダウンロードします。</p><p><img src="WS002660-1.png" loading="lazy"></p><p><img src="WS002663.png" loading="lazy"></p><p>ダウンロードが出来たら適当なところに展開しておきます。</p><p><img src="WS002664.png" loading="lazy"></p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>とりあえず簡単なコードで動作確認します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">driver = webdriver.Chrome(executable_path=&quot;D:\Python\chromedriver_win32\chromedriver.exe&quot;)</span><br><span class="line"></span><br><span class="line">driver.get(&quot;https://www.google.com/&quot;)</span><br><span class="line"></span><br><span class="line">driver.close()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>Pythonで上記コードを実行して、正常に終了すればseleniumの導入は完了です。</p><h2 id="エラーが出る場合は？"><a href="#エラーが出る場合は？" class="headerlink" title="エラーが出る場合は？"></a>エラーが出る場合は？</h2><h3 id="WebDriverException"><a href="#WebDriverException" class="headerlink" title="WebDriverException"></a>WebDriverException</h3><p>Message: ‘chromedriver_win32’ executable may have wrong permissions. Please see <a href="https://sites.google.com/a/chromium.org/chromedriver/home">https://sites.google.com/a/chromium.org/chromedriver/home</a></p><p><img src="WS002666.png" loading="lazy"></p><p>WebDriverのパスが正しくない可能性があります。よく確認してみて下さい。</p><p>Windowsの場合はファイル名まで正しく指定して下さい。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome(executable_path=&quot;D:\Python\chromedriver_win32\chromedriver.exe&quot;)</span><br></pre></td></tr></table></figure><h3 id="SessionNotCreatedException"><a href="#SessionNotCreatedException" class="headerlink" title="SessionNotCreatedException"></a>SessionNotCreatedException</h3><p>Message: session not created: This version of ChromeDriver only supports Chrome version 93<br>Current browser version is 92.0.4515.131 with binary path C:\Program Files\Google\Chrome\Application\chrome.exe</p><p><img src="WS002667.png" loading="lazy"></p><p>ChromeのバージョンとWebDriverのバージョンが一緒じゃない。一緒のバージョンを使いましょう。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;私は結構な頻度でPCを初期化するんですが、その都度前使っていたツールをインストールしなおして使える状態までもっていっています。&lt;/p&gt;
&lt;p&gt;でも毎回忘れちゃってて、都度検索しては「あぁじゃない、こうじゃない」ってやってるので、次忘れたときのために備忘録しておきます。&lt;/p</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="chrome" scheme="https://noitaro.github.io/tags/chrome/"/>
    
    <category term="scraping" scheme="https://noitaro.github.io/tags/scraping/"/>
    
  </entry>
  
  <entry>
    <title>【mixhost】PHPのバージョンを 7.4 に上げる</title>
    <link href="https://noitaro.github.io/mixhost-php-7-4/"/>
    <id>https://noitaro.github.io/mixhost-php-7-4/</id>
    <published>2021-08-01T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.299Z</updated>
    
    <content type="html"><![CDATA[<p>うちの WordPress を最新版の 5.8 にアップデートしたところ、PHP の動作要件が低いことに気がつきました。</p><p><a href="https://ja.wordpress.org/about/requirements/"><img src="WS002649.png" loading="lazy"></a></p><p>私のサイトは 7.2</p><p><img src="WS002650-1.png" loading="lazy"></p><p>というわけで mixhostサーバーでの PHPバージョンの変え方を説明します。</p><h2 id="PHPバージョンの変え方"><a href="#PHPバージョンの変え方" class="headerlink" title="PHPバージョンの変え方"></a>PHPバージョンの変え方</h2><p>まず <a href="https://mixhost.jp/">mixhost</a> の cPanelにログインします。</p><p>ソフトウェア項目の「MultiPHP マネージャー」を選択し、</p><p><img src="WS002652.png" alt="MultiPHP マネージャーを選択" loading="lazy"></p><p>対象のドメインにチェックを入れて、</p><p><img src="WS002655.png" alt="対象のドメインにチェックを入れる" loading="lazy"></p><p>PHPバージョンを 7.4 に変えて「適用」ボタンを押します。</p><p><img src="WS002656.png" alt="PHPバージョンを 7.4 に変えて適用" loading="lazy"></p><p>右上にこんなポップアップが出れば成功。</p><p><img src="WS002658.png" alt="成功" loading="lazy"></p><p>対象のドメインの PHPバージョンが変わっているはずです。</p><p><img src="WS002658-1.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>少しだけサイトの表示が早くなった気がします！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;うちの WordPress を最新版の 5.8 にアップデートしたところ、PHP の動作要件が低いことに気がつきました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ja.wordpress.org/about/requirements/&quot;&gt;&lt;img src=&quot;WS00</summary>
      
    
    
    
    
    <category term="wordpress" scheme="https://noitaro.github.io/tags/wordpress/"/>
    
    <category term="php" scheme="https://noitaro.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi Pico をインタラクティブ実行する3つの方法</title>
    <link href="https://noitaro.github.io/raspberry-pi-pico/"/>
    <id>https://noitaro.github.io/raspberry-pi-pico/</id>
    <published>2021-07-25T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.515Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://amzn.to/2VazU3A">Raspberry Pi Pico</a> を対話モード(インタラクティブモード)で実行する3つの方法を紹介します。</p><p>何で？と思いますが実行環境と使用用途で使い分けしたかったからです。私の Raspberry Pi Pico の使い方が、ごくまれな奇怪な使い方だったので他にはいないと思いますが一応紹介だけしておきます。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://amzn.to/2VazU3A">Raspberry Pi Pico</a> とは、Pythonで動かせるマイコン ボードのことです。</p><p><a href="https://amzn.to/2VazU3A"><img src="PICO-Image-2.png" alt="Raspberry Pi Pico" loading="lazy"></a></p><p>アマゾンだと割高になってますが、私は<a href="https://www.switch-science.com/catalog/6900/">スイッチサイエンス</a>で550円で買いました。送料が発生したのでまとめ買いです。</p><p>この値段とこのサイズで Python が動かせるということだったので、前から興味があったのです。私の奇怪な使い方と言うのは、オンラインゲームのマクロを動かすために使っています。キーボードやマウスをエミュレートできるので、Pythonで画像認識させてキーボードやマウスを操作させています。この話はまた追い追いできたらいいなと思います。まだ手探り感覚で動かしているので。</p><h3 id="USBケーブル（USB-Aオス-USB-MicroBオス-）"><a href="#USBケーブル（USB-Aオス-USB-MicroBオス-）" class="headerlink" title="USBケーブル（USB(Aオス)-USB(MicroBオス)）"></a>USBケーブル（USB(Aオス)-USB(MicroBオス)）</h3><p>余談ですが <a href="https://amzn.to/3ePJOyr">USBケーブル</a> が必須です。A-MicroB のものが。</p><p><a href="https://amzn.to/3ePJOyr"><img src="61GUw9RL-hL._AC_SL1500_.png" alt="USBケーブル（USB(Aオス)-USB(MicroBオス)）" loading="lazy"></a></p><h2 id="インタラクティブ実行するツールの紹介"><a href="#インタラクティブ実行するツールの紹介" class="headerlink" title="インタラクティブ実行するツールの紹介"></a>インタラクティブ実行するツールの紹介</h2><h3 id="Thonny"><a href="#Thonny" class="headerlink" title="Thonny"></a>Thonny</h3><p><a href="https://thonny.org/">公式ツール</a>です。これさえインストールしておけば問題なしです。</p><p><img src="WS002644.png" alt="Thonny" loading="lazy"></p><h3 id="TeraTerm"><a href="#TeraTerm" class="headerlink" title="TeraTerm"></a>TeraTerm</h3><p>対話モードなら <a href="https://ja.osdn.net/projects/ttssh2/">TeraTerm</a> でもできます。</p><p><img src="WS002645.png" alt="TeraTerm" loading="lazy"></p><p>シリアルモードで接続すると使えます。</p><p><img src="WS002642.png" alt="シリアルモードで接続" loading="lazy"></p><h3 id="Web-Serial-API"><a href="#Web-Serial-API" class="headerlink" title="Web Serial API"></a>Web Serial API</h3><p>Google Chromeで利用できるシリアル通信で動かすこともできます。</p><p><img src="WS002648.png" alt="Web Serial API" loading="lazy"></p><p>例として今回は <a href="https://googlechromelabs.github.io/serial-terminal/">デモページ</a> を利用します。</p><p>「Connect」を押して、</p><p><img src="WS002646.png" alt="Connectを選択" loading="lazy"></p><p>「CircuitPython CDC control (COM3)」を選択して「接続」を押せば使えるようになります。</p><p><img src="WS002647.png" alt="CircuitPython CDC control (COM3)を選択して接続" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>使い勝手はそれぞれ違いますが、できることは全て同じです。</p><p>自分が使いやすいと思ったのを使えばいいと思います。</p><p>私は「Web Serial API」を使います。バックグラウンドで常に動かしていたいので。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://amzn.to/2VazU3A&quot;&gt;Raspberry Pi Pico&lt;/a&gt; を対話モード(インタラクティブモード)で実行する3つの方法を紹介します。&lt;/p&gt;
&lt;p&gt;何で？と思いますが実行環境と使用用途で使い分けしたかったからです。私の R</summary>
      
    
    
    
    
    <category term="raspberry-pi" scheme="https://noitaro.github.io/tags/raspberry-pi/"/>
    
  </entry>
  
  <entry>
    <title>フリーソフトでPDFを編集</title>
    <link href="https://noitaro.github.io/pdf-edit/"/>
    <id>https://noitaro.github.io/pdf-edit/</id>
    <published>2021-07-18T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.443Z</updated>
    
    <content type="html"><![CDATA[<p>PDFファイルを編集するには Adobe公式ソフトの Adobe Acrobat Pro DC が一般的だと思う。</p><p>別に私は今回このソフトを紹介したい訳ではない。寧ろ逆でフリーソフトを駆使して、ある程度の編集が出来ればいいと思っている。</p><p>確かに Adobe Acrobat Pro DC は優秀で痒いところにも手が届く最高のソフトかもしれない。だが、有料なのだ。年間20,000円のサブスクリプション契約を強いられたら、ちょっと躊躇してしまう。</p><p>貧乏性と言うよりケチ臭い私が、今回気に入ったフリーソフトを数点紹介したいと思う。何度も言うが実に非効率的でめんどくさい作業をしたと私自身思っている。資金に余裕があって時間は有限だと思う人は、考えるよりも早く課金をした方が幸せになれると思う。</p><h2 id="PDFの結合"><a href="#PDFの結合" class="headerlink" title="PDFの結合"></a>PDFの結合</h2><p>複数のPDFを結合するには「<a href="https://www.pdfshaper.com/">PDF Shaper Free</a>」がオススメ。</p><p><img src="WS002637.png" alt="PDF Shaper Free" loading="lazy"></p><h3 id="無料版でできること"><a href="#無料版でできること" class="headerlink" title="無料版でできること"></a>無料版でできること</h3><ul><li>PDFの文書変換</li><li>PDFの画像変換</li><li>画像のPDF変換</li><li>PDFの結合</li><li>PDFの分割</li><li>ページの回転</li><li>ページのトリミング</li><li>ページの追加</li><li>ページの移動</li><li>ページの抽出</li><li>ページの削除</li><li>テキストの抽出</li><li>イメージの抽出</li></ul><h2 id="PDFを-2in1-に変換"><a href="#PDFを-2in1-に変換" class="headerlink" title="PDFを 2in1 に変換"></a>PDFを 2in1 に変換</h2><p>PDFを 2in1 ページに変換するには「<a href="http://uchijyu.s601.xrea.com/wordpress/pdf_as/">pdf_as</a>」がオススメ。</p><p><img src="WS002638.png" alt="pdf_as" loading="lazy"></p><h3 id="ほかにできること"><a href="#ほかにできること" class="headerlink" title="ほかにできること"></a>ほかにできること</h3><ul><li>画像のPDF変換</li><li>PDFの結合</li><li>PDFの分割</li><li>ページの追加</li><li>ページの抽出</li><li>ページの削除</li><li>ページの回転</li><li>白紙ページの追加</li><li>2in1変換</li></ul><h2 id="PDFにページ番号を設定"><a href="#PDFにページ番号を設定" class="headerlink" title="PDFにページ番号を設定"></a>PDFにページ番号を設定</h2><p>PDFにページ番号を設定するには「<a href="https://www.ilovepdf.com/ja/add_pdf_page_number">iLovePDF</a>」がオススメ。これはオンラインでも編集ができる優れもの。ちょっと機密性に心配があるから、不安だと思う人は考えてから使ってほしい。</p><p><img src="WS002640.png" alt="iLovePDF" loading="lazy"></p><h3 id="ほかにできること-1"><a href="#ほかにできること-1" class="headerlink" title="ほかにできること"></a>ほかにできること</h3><ul><li><a href="https://www.ilovepdf.com/ja/merge_pdf">PDFの結合</a></li><li><a href="https://www.ilovepdf.com/ja/split_pdf">PDFの分割</a></li><li><a href="https://www.ilovepdf.com/ja/compress_pdf">PDFの圧縮</a></li><li><a href="https://www.ilovepdf.com/ja/pdf_to_word">PDFのWord変換</a></li><li><a href="https://www.ilovepdf.com/ja/pdf_to_powerpoint">PDFのPowerpoint変換</a></li><li><a href="https://www.ilovepdf.com/ja/pdf_to_excel">PDFのExcel変換</a></li><li><a href="https://www.ilovepdf.com/ja/word_to_pdf">WordのPDF変換</a></li><li><a href="https://www.ilovepdf.com/ja/powerpoint_to_pdf">PowerpointのPDF変換</a></li><li><a href="https://www.ilovepdf.com/ja/excel_to_pdf">ExcelのPDF変換</a></li><li><a href="https://www.ilovepdf.com/ja/edit-pdf">PDFの編集</a></li><li><a href="https://www.ilovepdf.com/ja/pdf_to_jpg">PDFの画像変換</a></li><li><a href="https://www.ilovepdf.com/ja/jpg_to_pdf">画像のPDF変換</a></li><li><a href="https://www.ilovepdf.com/ja/add_pdf_page_number">ページ番号の設定</a></li><li><a href="https://www.ilovepdf.com/ja/pdf_add_watermark">透かしの追加</a></li><li><a href="https://www.ilovepdf.com/ja/rotate_pdf">ページの回転</a></li><li><a href="https://www.ilovepdf.com/ja/html-to-pdf">HTMLのPDF変換</a></li><li><a href="https://www.ilovepdf.com/ja/unlock_pdf">パスワード解除</a></li><li><a href="https://www.ilovepdf.com/ja/protect-pdf">PDFの暗号化</a></li><li><a href="https://www.ilovepdf.com/ja/organize-pdf">ページの並び替え</a></li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回紹介したフリーソフトは Adobe Acrobat Pro DC も劣らない優れたソフトだと思います。</p><p>痒いところには中々手が届きにくいですが、それでもある程度のことができちゃうので、ほんのちょっとだけPDFを変換したいって時にはいいんじゃないでしょうか。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PDFファイルを編集するには Adobe公式ソフトの Adobe Acrobat Pro DC が一般的だと思う。&lt;/p&gt;
&lt;p&gt;別に私は今回このソフトを紹介したい訳ではない。寧ろ逆でフリーソフトを駆使して、ある程度の編集が出来ればいいと思っている。&lt;/p&gt;
&lt;p&gt;確かに </summary>
      
    
    
    
    
    <category term="free-software" scheme="https://noitaro.github.io/tags/free-software/"/>
    
  </entry>
  
  <entry>
    <title>【C#】バックグラウンドアプリにキー情報を送る</title>
    <link href="https://noitaro.github.io/background-apps-sendkeys/"/>
    <id>https://noitaro.github.io/background-apps-sendkeys/</id>
    <published>2021-07-11T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.779Z</updated>
    
    <content type="html"><![CDATA[<p>Win32API を使ってプロセス間通信をやってみたいと思います。</p><p>マクロとかBOTとか作ってみたいなと思って、ちょっと調べてて自分なりに使えそうな情報をただまとめただけの記事です。</p><p>私の目標はフォーカスを奪われないで処理を実行したい。ただこれだけ。</p><p>昔から裏作業をさせてネットサーフィンは邪魔されたくないって思いが強いので、マウスカーソルを自動操作するマクロなんて邪道だと思っちゃっています。</p><h2 id="完成図"><a href="#完成図" class="headerlink" title="完成図"></a>完成図</h2><p>コンソールに文字を打って、エンターキーを押すとメモ帳に文字を送信しています。</p><p><img src="background-apps-sendkeys.gif" loading="lazy"></p><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp1</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        [DllImport(&quot;user32.dll&quot;)]</span><br><span class="line">        static extern IntPtr GetDesktopWindow();</span><br><span class="line">        [DllImport(&quot;user32.dll&quot;)]</span><br><span class="line">        static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);</span><br><span class="line">        [DllImport(&quot;user32.dll&quot;)]</span><br><span class="line">        static extern int SendMessage(IntPtr hWnd, int uMsg, int wParam, string lParam);</span><br><span class="line">        [DllImport(&quot;user32.dll&quot;)]</span><br><span class="line">        static extern int SendMessage(IntPtr hWnd, int uMsg, int wParam, StringBuilder lParam);</span><br><span class="line"></span><br><span class="line">        const int WM_SETTEXT = 0X000C;</span><br><span class="line">        const int WM_GETTEXT = 0x000D;</span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            // デスクトップのウインドウハンドル取得</span><br><span class="line">            var hwnd = GetDesktopWindow();</span><br><span class="line">            // メモ帳のウインドウハンドル取得</span><br><span class="line">            hwnd = FindWindowEx(hwnd, IntPtr.Zero, &quot;notepad&quot;, null);</span><br><span class="line">            // メモ帳ウインドウ内の「Edit」ウインドウのハンドル取得</span><br><span class="line">            hwnd = FindWindowEx(hwnd, IntPtr.Zero, &quot;Edit&quot;, null);</span><br><span class="line"></span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                // コンソールに入力された文字列を取得</span><br><span class="line">                var readText = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">                if (string.IsNullOrWhiteSpace(readText))</span><br><span class="line">                &#123;</span><br><span class="line">                    // 未入力の場合、終了</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    // メモ帳に入力されている文字列を取得</span><br><span class="line">                    var sb = new StringBuilder();</span><br><span class="line">                    SendMessage(hwnd, WM_GETTEXT, 255, sb);</span><br><span class="line"></span><br><span class="line">                    sb.AppendLine(readText);</span><br><span class="line"></span><br><span class="line">                    // メモ帳に文字列を送信</span><br><span class="line">                    SendMessage(hwnd, WM_SETTEXT, 0, sb.ToString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Win32API を使ってプロセス間通信をやってみたいと思います。&lt;/p&gt;
&lt;p&gt;マクロとかBOTとか作ってみたいなと思って、ちょっと調べてて自分なりに使えそうな情報をただまとめただけの記事です。&lt;/p&gt;
&lt;p&gt;私の目標はフォーカスを奪われないで処理を実行したい。ただこれだ</summary>
      
    
    
    
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
  </entry>
  
  <entry>
    <title>【MSI】TPM2.0 を有効にする</title>
    <link href="https://noitaro.github.io/msi-tpm2-0/"/>
    <id>https://noitaro.github.io/msi-tpm2-0/</id>
    <published>2021-07-04T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.303Z</updated>
    
    <content type="html"><![CDATA[<p>先日 Windows11 が発表されました。</p><p>一緒にハードウェア要件も公表され、その中に TPM2.0 が必須になりました。</p><p>この話を聞くまで TPM というのをさっぱり知らなかったのですが、どうもマザーボードに付いているセキュリティチップのことみたいです。これがないと Windwos11 がインストールできないので、その時はマザーボードの交換が必要になります。</p><p>Windows11 が一般の人にもインストール可能になってから慌てふためかないためにも、今のうちに TPM2.0 を有効にしておきましょう。</p><p>というのが今回の記事になります。</p><h2 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h2><p>まずは自分の PC が TPM をサポートしているのか、またはTPM2.0 が既に有効になっているのかを確認してみます。</p><p>今回は有志の方が作ってくれたフリーツールを使って確認します。公式の確認ツールは分かりづらいとのことだったので、フリーツールを使います。</p><h3 id="WhyNotWin11"><a href="#WhyNotWin11" class="headerlink" title="WhyNotWin11"></a>WhyNotWin11</h3><p>こちらの <a href="https://github.com/rcmaehl/WhyNotWin11">GitHub</a> からダウンロードします。</p><p><img src="WS002627.png" alt="WhyNotWin11 ダウンロード" loading="lazy"></p><p>警告が出る場合は、継続を選択するとダウンロードが完了します。</p><p><img src="WS002628.png" alt="継続を選択" loading="lazy"></p><p>ダウンロードが出来たら「WhyNotWin11.exe」を実行します。</p><p><img src="WS002629.png" alt="WhyNotWin11.exe を実行" loading="lazy"></p><p>実行時に警告が出た場合は、詳細情報をクリックし、</p><p><img src="WS002631.png" alt="詳細情報をクリック" loading="lazy"></p><p>実行を押すとツールが起動します。</p><p><img src="WS002632.png" alt="WhyNotWin11 実行" loading="lazy"></p><h4 id="どうだった？"><a href="#どうだった？" class="headerlink" title="どうだった？"></a>どうだった？</h4><p>私の PC で実行した結果はこんな感じでした。</p><p><img src="WS002633.png" alt="WhyNotWin11" loading="lazy"></p><p>ちなみに私の PC の詳細は<a href="https://noitaro.github.io/build-pc/">こちらの記事</a>をご覧ください。</p><h2 id="TPM2-0-を有効にする（MSI編）"><a href="#TPM2-0-を有効にする（MSI編）" class="headerlink" title="TPM2.0 を有効にする（MSI編）"></a>TPM2.0 を有効にする（MSI編）</h2><p>まずは電源を入れてF11キーを押しっぱなしにし、BIOS画面に入ります。</p><p>「Settings」を選択し、</p><p><img src="vlcsnap-2021-07-04-16h58m27s687.png" alt="Settings を選択" loading="lazy"></p><p>「Security」を選択し、</p><p><img src="vlcsnap-2021-07-04-16h59m11s266.png" alt="Security を選択" loading="lazy"></p><p>「Trusted Computing」を選択し、</p><p><img src="vlcsnap-2021-07-04-16h59m34s370.png" alt="Trusted Computing を選択" loading="lazy"></p><p>「Security Device Support」を選択します。</p><p><img src="vlcsnap-2021-07-04-17h00m00s534.png" alt="Security Device Support を選択" loading="lazy"></p><h3 id="Security-Device-Support-無効-有効"><a href="#Security-Device-Support-無効-有効" class="headerlink" title="Security Device Support: [無効]-&gt;[有効]"></a>Security Device Support: [無効]-&gt;[有効]</h3><p>「Security Device Support」を有効にします。</p><p><img src="vlcsnap-2021-07-04-17h00m11s344.png" alt="Security Device Support を有効" loading="lazy"></p><p>これでBIOSでの変更は終わり。</p><p>ESCキーを押して前の画面に戻り「保存して終了」を選択し、</p><p><img src="vlcsnap-2021-07-04-17h00m26s005.png" alt="保存して終了を選択" loading="lazy"></p><p>「変更を保存して再起動」を選択します。</p><p><img src="vlcsnap-2021-07-04-17h00m35s368.png" alt="変更を保存して再起動を選択" loading="lazy"></p><p>最後に変更箇所の確認が出るので、変更が間違っていないかを確認してBIOSを終了させます。</p><p><img src="vlcsnap-2021-07-04-17h00m46s475.png" alt="変更箇所の確認" loading="lazy"></p><h2 id="再確認"><a href="#再確認" class="headerlink" title="再確認"></a>再確認</h2><p>PCが起動したら、再度 WhyNotWin11 を実行して確認します。</p><p>無事に TPM2.0 が有効になって Windows11 がインストールできる状態になりました。</p><p><img src="WS002634.png" alt="WhyNotWin11" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今すぐにこの TPM2.0 を変える必要は無いですが、あとあと絶対に必要になるので暇なときに変えておきましょう。</p><p>と言っても Windows11 をインストールするかは別ですけどね。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先日 Windows11 が発表されました。&lt;/p&gt;
&lt;p&gt;一緒にハードウェア要件も公表され、その中に TPM2.0 が必須になりました。&lt;/p&gt;
&lt;p&gt;この話を聞くまで TPM というのをさっぱり知らなかったのですが、どうもマザーボードに付いているセキュリティチップのこと</summary>
      
    
    
    
    
    <category term="bios" scheme="https://noitaro.github.io/tags/bios/"/>
    
    <category term="msi" scheme="https://noitaro.github.io/tags/msi/"/>
    
  </entry>
  
  <entry>
    <title>【mermaid.js】フローチャートに画像を表示する</title>
    <link href="https://noitaro.github.io/mermaid-js-flowchart-in-image/"/>
    <id>https://noitaro.github.io/mermaid-js-flowchart-in-image/</id>
    <published>2021-06-27T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.263Z</updated>
    
    <content type="html"><![CDATA[<p>mermaid.js のフローチャートに画像を表示させます。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>mermaid.js とは、JavaScript製のフローチャート作成ライブラリです。複雑なフローチャートやシーケンス図が簡単に書けちゃいます。</p><p><a href="https://mermaid-js.github.io/mermaid/">mermaid.js 公式サイトはこちら</a></p><p>で、今回フローチャートに画像を表示させたかったのですが、思いのほか上手くいかず四苦八苦してやっと表示できるようになったので紹介します。</p><h2 id="完成系"><a href="#完成系" class="headerlink" title="完成系"></a>完成系</h2><p>手っ取り早く完成系から紹介します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/mermaid/6.0.0/mermaid.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mermaid/6.0.0/mermaid.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">      var mermaidAPI = mermaid.mermaidAPI;</span><br><span class="line">      var config = &#123;</span><br><span class="line">        startOnLoad: false,</span><br><span class="line">        htmlLabels: true,</span><br><span class="line">        callback: function (id) &#123;</span><br><span class="line">          console.log(id, &#x27; rendered&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        flowchart: &#123;</span><br><span class="line">          useMaxWidth: false,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      mermaid.initialize(config);</span><br><span class="line">      var element = document.getElementById(&quot;app&quot;);</span><br><span class="line">      var insertSvg = function (svgCode, bindFunctions) &#123;</span><br><span class="line">        element.innerHTML = svgCode;</span><br><span class="line">      &#125;;</span><br><span class="line">      var graphDefinition = `</span><br><span class="line">    graph LR</span><br><span class="line">    subgraph \u5e7c\u5e74\u671f</span><br><span class="line">    botamon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/botamon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30dc\u30bf\u30e2\u30f3)</span><br><span class="line">    koromon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/koromon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30b3\u30ed\u30e2\u30f3)</span><br><span class="line">    end</span><br><span class="line">    subgraph \u6210\u9577\u671f</span><br><span class="line">    agumon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/agumon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30a2\u30b0\u30e2\u30f3)</span><br><span class="line">    betamon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/betamon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30d9\u30bf\u30e2\u30f3)</span><br><span class="line">    end</span><br><span class="line">    subgraph \u6210\u719f\u671f</span><br><span class="line">    greymon-first(&lt;img src=&#x27;https://digimon.net/cimages/digimon/greymon-first.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30b0\u30ec\u30a4\u30e2\u30f3)</span><br><span class="line">    tyranomon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/tyranomon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30c6\u30a3\u30e9\u30ce\u30e2\u30f3)</span><br><span class="line">    devimon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/devimon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30c7\u30d3\u30e2\u30f3)</span><br><span class="line">    meramon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/meramon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30e1\u30e9\u30e2\u30f3)</span><br><span class="line">    airdramon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/airdramon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30a8\u30a2\u30c9\u30e9\u30e2\u30f3)</span><br><span class="line">    seadramon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/seadramon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30a8\u30a2\u30c9\u30e9\u30e2\u30f3)</span><br><span class="line">    numemon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/numemon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30cc\u30e1\u30e2\u30f3)</span><br><span class="line">    end</span><br><span class="line">    subgraph \u5b8c\u5168\u4f53</span><br><span class="line">    metalgreymon-v(&lt;img src=&#x27;https://digimon.net/cimages/digimon/metalgreymon-v.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30e1\u30bf\u30eb\u30b0\u30ec\u30a4\u30e2\u30f3)</span><br><span class="line">    mamemon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/mamemon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u30de\u30e1\u30e2\u30f3)</span><br><span class="line">    monzaemon(&lt;img src=&#x27;https://digimon.net/cimages/digimon/monzaemon.jpg&#x27; width=&#x27;40&#x27; height=&#x27;40&#x27; /&gt;&lt;br&gt;\u3082\u3093\u3056\u3048\u30e2\u30f3)</span><br><span class="line">    end</span><br><span class="line">    botamon--&gt;koromon</span><br><span class="line">    koromon--&gt;agumon</span><br><span class="line">    koromon--&gt;betamon</span><br><span class="line">    agumon--&gt;greymon-first</span><br><span class="line">    agumon--&gt;tyranomon</span><br><span class="line">    agumon--&gt;devimon</span><br><span class="line">    betamon--&gt;devimon</span><br><span class="line">    agumon--&gt;meramon</span><br><span class="line">    betamon--&gt;meramon</span><br><span class="line">    betamon--&gt;airdramon</span><br><span class="line">    betamon--&gt;seadramon</span><br><span class="line">    agumon--&gt;numemon</span><br><span class="line">    betamon--&gt;numemon</span><br><span class="line">    greymon-first--&gt;metalgreymon-v</span><br><span class="line">    devimon--&gt;metalgreymon-v</span><br><span class="line">    airdramon--&gt;metalgreymon-v</span><br><span class="line">    tyranomon--&gt;mamemon</span><br><span class="line">    meramon--&gt;mamemon</span><br><span class="line">    seadramon--&gt;mamemon</span><br><span class="line">    numemon--&gt;monzaemon</span><br><span class="line">    `;</span><br><span class="line">      var graph = mermaidAPI.render(&quot;mermaid&quot;, graphDefinition, insertSvg);</span><br><span class="line">    &#125;;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>これを HTML に張り付けてブラウザで表示させると、こんなフローチャートが表示されます。</p><p><img src="WS002625.png" loading="lazy"></p><p>なんでデジモンなのかは置いておいて、こんな感じにフローチャート内に画像を表示することができます。</p><h2 id="つまづいた点"><a href="#つまづいた点" class="headerlink" title="つまづいた点"></a>つまづいた点</h2><h3 id="render関数-を通さないと画像が表示できない"><a href="#render関数-を通さないと画像が表示できない" class="headerlink" title="render関数 を通さないと画像が表示できない"></a>render関数 を通さないと画像が表示できない</h3><p>mermaid.js は HTML内に直接書けるように出来ているのですが、画像を表示させるために、JavaScript の mermaidAPI.render関数 を通さないと画像が表示できませんでした。</p><p>例えば、このように書くだけでフローチャートができちゃうんですよ、普通は。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/mermaid/6.0.0/mermaid.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mermaid/6.0.0/mermaid.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;mermaid.initialize(&#123; startOnLoad: true &#125;);&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;mermaid&quot;&gt;</span><br><span class="line">    graph LR</span><br><span class="line">    A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">    B --&gt; C&#123;Decision&#125;</span><br><span class="line">    C --&gt;|One| D[Result one]</span><br><span class="line">    C --&gt;|Two| E[Result two]</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="WS002626.png" loading="lazy"></p><p>この書き方が出来なかったのが辛かった。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://stackoverflow.com/questions/42402912/how-to-embed-an-image-in-a-node-with-mermaid-js">https://stackoverflow.com/questions/42402912/how-to-embed-an-image-in-a-node-with-mermaid-js</a></p><h3 id="日本語表示が出来なかった"><a href="#日本語表示が出来なかった" class="headerlink" title="日本語表示が出来なかった"></a>日本語表示が出来なかった</h3><p>え？いや、出来てるじゃん。って思ったと思いますが、日本語を1文字ずつわざわざ Unicodeエスケープシーケンス に変換して表示しています。</p><p>日本語の変換にはこちらを使わせてもらいました。</p><p><a href="https://tech-unlimited.com/escape-unicode.html">Unicodeエスケープシーケンス変換ツール</a></p><p>わざわざ変換するのがクソめんどくさい。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>そんなこんなで、JavaScript製のフローチャート作成ライブラリの紹介でした。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;mermaid.js のフローチャートに画像を表示させます。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;mermaid.js とは、JavaScript</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Android自動操作モジュールを複数端末に対応させた話</title>
    <link href="https://noitaro.github.io/multi-startup/"/>
    <id>https://noitaro.github.io/multi-startup/</id>
    <published>2021-06-20T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.311Z</updated>
    
    <content type="html"><![CDATA[<p>私の欲望がふんだんに詰め込まれた Python の「<a href="https://github.com/noitaro/android-auto-play-opencv">Android自動操作モジュール</a>」</p><p>複数端末で同時実行できるように、バージョンアップしました。</p><p><img src="Animation.gif" loading="lazy"></p><p>小さくて分かりづらいですが、Noxを使ってウマ娘のリセマラを同時に動かしています。</p><p>もちろん私の作った Android自動操作モジュール はマウスやフォーカスを奪わないので、ネットサーフィンしながらひたすら周回してくれます。PCクソ重なんですけどね。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>前提として、過去の「<a href="https://noitaro.github.io/python-umamusume/">ウマ娘自動リセマラ</a>」が出来ていること。</p><p><a href="https://noitaro.github.io/python-umamusume/">https://noitaro.github.io/python-umamusume/</a></p><h3 id="Nox-Player-を複数起動させる"><a href="#Nox-Player-を複数起動させる" class="headerlink" title="Nox Player を複数起動させる"></a>Nox Player を複数起動させる</h3><p>Nox Player をインストールした時に、デスクトップに「Multi-Drive」のショートカットが作られたと思います。ソレを起動させて、エミュレーターを複製します。</p><p><img src="WS002612.png" loading="lazy"></p><p>無いよって人はインストールフォルダにある「MultiPlayerManager.exe」を起動させましょう。</p><p><img src="WS002614.png" loading="lazy"></p><p>Nox Player を起動していない状態で「コピー」を選択すると、エミュレーターのコピーができます。</p><p><img src="WS002615.png" loading="lazy"></p><p>あとはそれぞれの再生ボタンを押せば、複数のNoxが起動します。</p><p><img src="WS002616.png" loading="lazy"></p><h3 id="ウマ娘用専用スクリプト"><a href="#ウマ娘用専用スクリプト" class="headerlink" title="ウマ娘用専用スクリプト"></a>ウマ娘用専用スクリプト</h3><p><a href="https://github.com/noitaro/python-umamusume">こちら</a>も更新したので、新たに最新版をダウンロードして来ます。</p><p><img src="WS002502.png" loading="lazy"></p><h4 id="複数端末を有効にする"><a href="#複数端末を有効にする" class="headerlink" title="複数端末を有効にする"></a>複数端末を有効にする</h4><p>複数端末のコードはコメントアウトしてあるので、コメントを外して有効にします。</p><p>7行目と23行目～31行目</p><p><img src="WS002617.png" loading="lazy"></p><h3 id="コンソールでキー操作できるモジュールをインストール"><a href="#コンソールでキー操作できるモジュールをインストール" class="headerlink" title="コンソールでキー操作できるモジュールをインストール"></a>コンソールでキー操作できるモジュールをインストール</h3><p>複数端末を選択するために「<a href="https://github.com/magmax/python-inquirer">python-inquirer</a>」モジュールをインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install inquirer</span><br></pre></td></tr></table></figure><h2 id="複数端末でリセマラ"><a href="#複数端末でリセマラ" class="headerlink" title="複数端末でリセマラ"></a>複数端末でリセマラ</h2><p>これで準備完了。</p><p>Noxを複数起動してウマ娘リセマラを実行すると、デバイスの選択ができるようになっています。</p><p><img src="WS002618.png" loading="lazy"></p><p>上下キーで選んでエンターキーで決定。</p><p><img src="WS002621_2.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;私の欲望がふんだんに詰め込まれた Python の「&lt;a href=&quot;https://github.com/noitaro/android-auto-play-opencv&quot;&gt;Android自動操作モジュール&lt;/a&gt;」&lt;/p&gt;
&lt;p&gt;複数端末で同時実行できるように、バージョ</summary>
      
    
    
    
    
    <category term="android-auto-play" scheme="https://noitaro.github.io/tags/android-auto-play/"/>
    
  </entry>
  
  <entry>
    <title>p5.js を触ってみる</title>
    <link href="https://noitaro.github.io/p5-js-ball/"/>
    <id>https://noitaro.github.io/p5-js-ball/</id>
    <published>2021-06-13T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.439Z</updated>
    
    <content type="html"><![CDATA[<p>ひょんなことから p5.js を触る機会があったので、備忘録していきます。</p><p>シリーズ化するかは分かりませんが、楽しく色々なことが出来そうなので、使い道があればもっと掘り進めて行こうと思っています。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>p5.js とは、HTML上のキャンバスに画像やテキストを簡単に表示したり動かしたりできる学習用の JavaScriptライブラリ です。</p><p>Web上にエディタもあるので、インストールせずにブラウザだけで学習できます。p5.js を勉強すると Unity などのゲーム開発時にちょっとだけ、分かってる感をか持ち出せるかと思います。</p><p>ボク「あっ！これ進研ゼミでやったところだ！」こんな感じ。</p><h2 id="とりあえずやってみよう"><a href="#とりあえずやってみよう" class="headerlink" title="とりあえずやってみよう"></a>とりあえずやってみよう</h2><p>Webエディタを開けば、動く環境が用意されているので、ワンクリックで結果が確認できるようになっています。</p><p><a href="https://editor.p5js.org/">p5.js Web Editor</a></p><p>まずは、何も考えずにスタートボタンを押してみます。</p><p><img src="WS002605.png" loading="lazy"></p><p>右側のプレビューが灰色になればOK。プログラム通りに実行されたことになります。</p><p>最初から書いてあるプログラムの内容は「400x400のキャンバスを作って灰色で塗りつぶす」と書いてあるので、その通りに表示されたのです。</p><h2 id="ここから本番"><a href="#ここから本番" class="headerlink" title="ここから本番"></a>ここから本番</h2><p>こんなのまだ楽しくないですよね。</p><h3 id="円の表示"><a href="#円の表示" class="headerlink" title="円の表示"></a>円の表示</h3><p>では続きまして、円を表示させてみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var position = &#123;x: 200, y: 200&#125; // 円の位置</span><br><span class="line"></span><br><span class="line">function setup() &#123;</span><br><span class="line">  createCanvas(400, 400);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function draw() &#123;</span><br><span class="line">  background(220);</span><br><span class="line">  noStroke(); // 輪郭線は無し</span><br><span class="line">  fill(255, 0, 255); // マゼンタ色で塗りつぶす</span><br><span class="line">  ellipse(position.x, position.y, 50, 50); // 円を表示</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記ソースを p5.js に張り付けてスタートボタンを押します。</p><p><img src="WS002607.png" loading="lazy"></p><p>プレビュー画面の中央に、マゼンタ色の円が表示されました。</p><h3 id="円の移動"><a href="#円の移動" class="headerlink" title="円の移動"></a>円の移動</h3><p>次に、円を移動させます。プレビュー画面の外に行っちゃわないように、跳ね返る感じでプログラムしてみましょう。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var position = &#123;x: 200, y: 200&#125; // 位置</span><br><span class="line">var vector = &#123;x: 3, y: 2&#125; // 移動量</span><br><span class="line"></span><br><span class="line">function setup() &#123;</span><br><span class="line">  createCanvas(400, 400);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function draw() &#123;</span><br><span class="line">  background(220);</span><br><span class="line">  noStroke(); // 輪郭線は無し</span><br><span class="line">  fill(255, 0, 255); // マゼンタ色で塗りつぶす</span><br><span class="line">  </span><br><span class="line">  position.x = position.x + vector.x; // X位置にX移動量を加算</span><br><span class="line">  position.y = position.y + vector.y; // Y位置にY移動量を加算</span><br><span class="line">  if(position.x &lt; 0 || position.x &gt; 400) &#123;</span><br><span class="line">    // 画面外に行く場合、移動量をマイナスにする</span><br><span class="line">    vector.x = vector.x * -1;</span><br><span class="line">  &#125;</span><br><span class="line">  if(position.y &lt; 0 || position.y &gt; 400) &#123;</span><br><span class="line">    // 画面外に行く場合、移動量をマイナスにする</span><br><span class="line">    vector.y = vector.y * -1; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ellipse(position.x, position.y, 50, 50); // 円を表示</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>円が跳ね返りながら、プレビュー画面内を行ったり来たりするようになりました。</p><p><img src="WS002608.png" loading="lazy"></p><h3 id="ボールを増やす"><a href="#ボールを増やす" class="headerlink" title="ボールを増やす"></a>ボールを増やす</h3><p>もっと激しいのがいいって方のために、円を100個にしてみましょう。</p><p>今回からボールと言う変数名にします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var balls = [];</span><br><span class="line"></span><br><span class="line">function setup() &#123;</span><br><span class="line">  createCanvas(400, 400);</span><br><span class="line">  for (let i = 0; i &lt; 100; i++)&#123;</span><br><span class="line">    balls.push(&#123;positionX: 200, positionY: 200, vectorX: random(5), vectorY: random(5)&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function draw() &#123;</span><br><span class="line">  background(220);</span><br><span class="line">  noStroke(); // 輪郭線は無し</span><br><span class="line">  fill(255, 0, 255); // マゼンタ色で塗りつぶす</span><br><span class="line">  </span><br><span class="line">  for (let i = 0; i &lt; 100; i++)&#123;</span><br><span class="line">    let ball = balls[i];</span><br><span class="line">    ball.positionX = ball.positionX + ball.vectorX; // X位置にX移動量を加算</span><br><span class="line">    ball.positionY = ball.positionY + ball.vectorY; // Y位置にY移動量を加算</span><br><span class="line">    if(ball.positionX &lt; 0 || ball.positionX &gt; 400) &#123;</span><br><span class="line">      // 画面外に行く場合、移動量をマイナスにする</span><br><span class="line">      ball.vectorX = ball.vectorX * -1;</span><br><span class="line">    &#125;</span><br><span class="line">    if(ball.positionY &lt; 0 || ball.positionY &gt; 400) &#123;</span><br><span class="line">      // 画面外に行く場合、移動量をマイナスにする</span><br><span class="line">      ball.vectorY = ball.vectorY * -1; </span><br><span class="line">    &#125;</span><br><span class="line">    ellipse(ball.positionX, ball.positionY, 50, 50); // 円を表示</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="WS002609.png" loading="lazy"></p><h3 id="ボールの色を変える"><a href="#ボールの色を変える" class="headerlink" title="ボールの色を変える"></a>ボールの色を変える</h3><p>同じ色はイヤだと言うあなたへ。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var balls = [];</span><br><span class="line"></span><br><span class="line">function setup() &#123;</span><br><span class="line">  createCanvas(400, 400);</span><br><span class="line">  for (let i = 0; i &lt; 100; i++)&#123;</span><br><span class="line">    balls.push(&#123;</span><br><span class="line">      positionX: 200, positionY: 200, </span><br><span class="line">      vectorX: random(5), vectorY: random(5),</span><br><span class="line">      color: &#123;</span><br><span class="line">        red: random(255), </span><br><span class="line">        green: random(255), </span><br><span class="line">        blue: random(255)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function draw() &#123;</span><br><span class="line">  background(220);</span><br><span class="line">  noStroke(); // 輪郭線は無し</span><br><span class="line">  </span><br><span class="line">  for (let i = 0; i &lt; 100; i++)&#123;</span><br><span class="line">    let ball = balls[i];</span><br><span class="line">    ball.positionX = ball.positionX + ball.vectorX; // X位置にX移動量を加算</span><br><span class="line">    ball.positionY = ball.positionY + ball.vectorY; // Y位置にY移動量を加算</span><br><span class="line">    if(ball.positionX &lt; 0 || ball.positionX &gt; 400) &#123;</span><br><span class="line">      // 画面外に行く場合、移動量をマイナスにする</span><br><span class="line">      ball.vectorX = ball.vectorX * -1;</span><br><span class="line">    &#125;</span><br><span class="line">    if(ball.positionY &lt; 0 || ball.positionY &gt; 400) &#123;</span><br><span class="line">      // 画面外に行く場合、移動量をマイナスにする</span><br><span class="line">      ball.vectorY = ball.vectorY * -1; </span><br><span class="line">    &#125;</span><br><span class="line">    fill(ball.color.red, ball.color.green, ball.color.blue);</span><br><span class="line">    ellipse(ball.positionX, ball.positionY, 50, 50);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="WS002611.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ひょんなことから p5.js を触る機会があったので、備忘録していきます。&lt;/p&gt;
&lt;p&gt;シリーズ化するかは分かりませんが、楽しく色々なことが出来そうなので、使い道があればもっと掘り進めて行こうと思っています。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめ</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
    <category term="p5-js" scheme="https://noitaro.github.io/tags/p5-js/"/>
    
  </entry>
  
  <entry>
    <title>Makefile から実行ファイルをビルドする方法</title>
    <link href="https://noitaro.github.io/makefile-build/"/>
    <id>https://noitaro.github.io/makefile-build/</id>
    <published>2021-05-23T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.255Z</updated>
    
    <content type="html"><![CDATA[<p>私的に初めてだったので備忘録します。</p><h2 id="必要なファイルを揃える"><a href="#必要なファイルを揃える" class="headerlink" title="必要なファイルを揃える"></a>必要なファイルを揃える</h2><h3 id="Cygwin"><a href="#Cygwin" class="headerlink" title="Cygwin"></a>Cygwin</h3><p>シグウィンと読みます。UNIX の gcc を使ってビルドしたかったので入れました。</p><p><a href="https://www.cygwin.com/">こちら</a>から「setup-x86_64.exe」をダウンロードします。</p><p><a href="https://www.cygwin.com/">https://www.cygwin.com/</a></p><p><img src="WS002537.png" loading="lazy"></p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>ダウンロードした「setup-x86_64.exe」を実行してインストールします。</p><p><img src="WS002538.png" loading="lazy"></p><p>インターネットから必要なファイルをダウンロードしてきます。</p><p><img src="WS002539.png" loading="lazy"></p><p>どのユーザーでも使えるようにするため、Cドライブの直下にインストールします。</p><p><img src="WS002540.png" loading="lazy"></p><p>インターネットからダウンロードした必要なファイルを保存するディレクトリを指定します。このファイルがあれば、次回からインターネットに繋がなくてもインストールできます。</p><p><img src="WS002541.png" loading="lazy"></p><p>プロキシは無いので一番上を選択。</p><p><img src="WS002542.png" loading="lazy"></p><p>必要なファイルをどのサイトからダウンロードするかを指定します。繋がらなかったり遅かったりする場合は別のサイトを指定します。</p><p><img src="WS002543.png" loading="lazy"></p><p>今回は gcc を使ってビルドしたいので「gcc」や「make」と検索して必要なファイルを絞り込みます。</p><p>Viewを「Category」にし、Searchに「make」を入れて、All &gt; Devel を開きます。</p><p><img src="WS002546.png" loading="lazy"></p><p>私の場合はインストールしちゃってるのでスクリーンショットが違いますが、「Skip」になっているプルダウンを開いて、最新のバージョンを選択して下さい。</p><p><img src="WS002547.png" loading="lazy"></p><p>「gcc-core」も同様に。</p><p><img src="WS002548.png" loading="lazy"></p><p>インストールするパッケージを選択したら後は、支持に従って進めればOKです。</p><h2 id="環境変数にパスを追加"><a href="#環境変数にパスを追加" class="headerlink" title="環境変数にパスを追加"></a>環境変数にパスを追加</h2><p>「make」コマンドを使えるようにするため、環境変数のパスに Cygwin の binフォルダを追加します。</p><p>システムの「システムの詳細設定」を選択し、</p><p><img src="WS002549.png" loading="lazy"></p><p>システムプロパティの「環境変数」を選択し、</p><p><img src="WS002551.png" loading="lazy"></p><p>ユーザー環境変数の「Path」を選択し「編集」ボタンを押下、</p><p><img src="WS002552.png" loading="lazy"></p><p>一番下に、Cygwin の binフォルダを追加します。今回は Cドライブの直下にインストールしたので「C:\cygwin64\bin」を追加しました。</p><p><img src="WS002553.png" loading="lazy"></p><p>これで Makefile から実行ファイルをビルドする準備がととのいました。</p><p>ビルドする方法は、Makefile があるフォルダをコマンドプロンプトで開いて「make」と入力すればOKです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;私的に初めてだったので備忘録します。&lt;/p&gt;
&lt;h2 id=&quot;必要なファイルを揃える&quot;&gt;&lt;a href=&quot;#必要なファイルを揃える&quot; class=&quot;headerlink&quot; title=&quot;必要なファイルを揃える&quot;&gt;&lt;/a&gt;必要なファイルを揃える&lt;/h2&gt;&lt;h3 id=&quot;Cyg</summary>
      
    
    
    
    
    <category term="makefile" scheme="https://noitaro.github.io/tags/makefile/"/>
    
    <category term="build" scheme="https://noitaro.github.io/tags/build/"/>
    
    <category term="exe" scheme="https://noitaro.github.io/tags/exe/"/>
    
  </entry>
  
  <entry>
    <title>Windows の 半角/全角 を Mac風に変える方法</title>
    <link href="https://noitaro.github.io/windows-ime-on-off-change/"/>
    <id>https://noitaro.github.io/windows-ime-on-off-change/</id>
    <published>2021-05-16T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.827Z</updated>
    
    <content type="html"><![CDATA[<p>Windows の 半角&#x2F;全角キー は押すたびに半角と全角が切り替わります。なので文章を入力する時に、今のIME入力モードを頭で覚えておくか、右下のタスクバーのIMEモードを目で見てから、文章を打ち始めなければいけないので結構面倒くさいと思っています。</p><p>その点 Macだと、スペースキーの左右に IMEを有効にするキーと IMEを無効にするキー が存在するので、日本語を打つなら最初に IMEを有効にするキー を押してから入力し始めればいいだけなので、今のIME入力モードを覚える必要がありません。</p><p><img src="Apple-Keyboard-2.png" loading="lazy"></p><p>なので今回は、Windows 10 のキー設定を変えて IME入力切り替えを Mac風に変えようと思います。</p><p>変更してすぐは慣れていないので戸惑うかも知れませんが、慣れれば楽に文章を入力できるようになるので良ければ設定して見て下さい。</p><p><img src="fullkeybw_L-2.png" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 20H2</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>タスクバーの IME表示 を右クリックし、</p><p><img src="WS002526.png" loading="lazy"></p><p>Microsoft IMEの設定画面を開きます。</p><p><img src="WS002528.png" loading="lazy"></p><p>次に、キーとタッチのカスタマイズ を選択し、</p><p><img src="WS002530.png" loading="lazy"></p><p>「各キーに好みの機能を割り当てる」をオンにして、無変換キーと変換キーの割り当てを変えます。</p><ul><li>無変換キー → IMEオフ</li><li>変換キー → IMEオン</li></ul><p><img src="WS002531.png" loading="lazy"></p><p>これで完了です。あとは慣れるだけ。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Microsoft IME だとこれだけの設定しか変えれませんが、以前のバージョンの Microsoft IME を使えば、もっと細かくキー設定が出来ます。</p><p><img src="WS002532.png" loading="lazy"></p><p><img src="WS002533.png" loading="lazy"></p><p>または、Google 日本語IME をインストールすると、同じようなキー設定が出来ます。</p><p><img src="WS002534.png" loading="lazy"></p><p>もっとキー設定を変えたい場合は検討して見て下さい。</p><p>私は Insertキーが邪魔で鬱陶しかったので、無効にしてやりました。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows の 半角&amp;#x2F;全角キー は押すたびに半角と全角が切り替わります。なので文章を入力する時に、今のIME入力モードを頭で覚えておくか、右下のタスクバーのIMEモードを目で見てから、文章を打ち始めなければいけないので結構面倒くさいと思っています。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="windows" scheme="https://noitaro.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>【OpenCV】ツムを判別する方法 FINAL</title>
    <link href="https://noitaro.github.io/opencv-tsumtsum-final/"/>
    <id>https://noitaro.github.io/opencv-tsumtsum-final/</id>
    <published>2021-05-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.439Z</updated>
    
    <content type="html"><![CDATA[<p>今回でいったん区切りをつけたいと思います。GWも終わるし、何より雲行きがあやしくなってきたのが大きいです。</p><p><img src="WS002517.png" loading="lazy"></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>まず簡単に現状報告です。<a href="https://noitaro.github.io/opencv-tsumtsum-2/">前回</a> 色分けが出来たので、今回ルート検索を実装しました。ルート検索は、まあいい感じに無難なのが出来たのでよかったんですが、前回の色分けが悪くて動作に難が出てきちゃいました。</p><p>とりあえず、ルート検索まで実装したソースを <a href="https://github.com/noitaro/opencv-tsumtsum">GitHub</a> に上げておきます。</p><p><a href="https://github.com/noitaro/opencv-tsumtsum">https://github.com/noitaro/opencv-tsumtsum</a></p><h3 id="必須ライブラリ"><a href="#必須ライブラリ" class="headerlink" title="必須ライブラリ"></a>必須ライブラリ</h3><p>下記ライブラリを使っています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install pywin32</span><br><span class="line">pip install keyboard</span><br><span class="line">pip install pyautogui</span><br><span class="line">pip install opencv-python</span><br></pre></td></tr></table></figure><h3 id="ツムをなぞる処理"><a href="#ツムをなぞる処理" class="headerlink" title="ツムをなぞる処理"></a>ツムをなぞる処理</h3><p>WIN32APIを使ってマウスカーソルを操作しているので、バックグラウンドで回すことができません。</p><p>一度、adbシェルの sendevent を使って実装したんですが、速度が出なかったのでやめました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># タップ開始</span><br><span class="line">cmd = &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 3, 53 , pos[0]) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 3, 54 , pos[1]) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 3, 58 , 10 ) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 3, 57 , 0  ) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 0, 2  , 0  ) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 1, 330, 1  ) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 0, 0  , 0  )</span><br><span class="line">subprocess.run(&#x27;adb -s &#x27; + self.device + &#x27; shell \&quot;&#x27; + cmd + &#x27;\&quot;&#x27;, shell=True)</span><br><span class="line"></span><br><span class="line"># ツムをなぞる</span><br><span class="line">cmd = &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 3, 53 , pos[0]) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 3, 54 , pos[1]) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 3, 58 , 10 ) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 3, 57 , 0  ) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 3, 50 , 0  ) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 3, 51 , 0  ) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 0, 2  , 0  ) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 0, 0  , 0  )</span><br><span class="line">subprocess.run(&#x27;adb -s &#x27; + self.device + &#x27; shell \&quot;&#x27; + cmd + &#x27;\&quot;&#x27;, shell=True)</span><br><span class="line"></span><br><span class="line"># タップ終了</span><br><span class="line">cmd = &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 0, 2  , 0  ) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 1, 330, 0  ) + \</span><br><span class="line">      &quot;sendevent %s %s %s %s;&quot; % (&#x27;/dev/input/event5&#x27;, 0, 0  , 0  )</span><br><span class="line">subprocess.run(&#x27;adb -s &#x27; + self.device + &#x27; shell \&quot;&#x27; + cmd + &#x27;\&quot;&#x27;, shell=True)</span><br></pre></td></tr></table></figure><h3 id="アンドロイド画面の取得"><a href="#アンドロイド画面の取得" class="headerlink" title="アンドロイド画面の取得"></a>アンドロイド画面の取得</h3><p><a href="https://noitaro.github.io/scrcpy/">scrcpy</a> を使ってアンドロイドの画面をPCモニターに出力して、PCのスクリーンショットを撮って使うようにしました。</p><p>scrcpy を x&#x3D;0、y&#x3D;0 の位置に表示させて 幅を500pxで実行するとちょういい感じになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrcpy.exe --window-x 0 --window-y 0 --window-width 500</span><br></pre></td></tr></table></figure><p>PCのスクリーンショットは簡単に撮れました。そのまま OpenCV に渡せる。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgArray = pyautogui.screenshot(region=(0,0,500,888))</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>アルゴリズムは出来たので、あとはツムの判別をどうするかですかね。色だけだとどうしても判別しきれませんでした。</p><p>機械学習で学習させて判別できるように、今後対応してみようと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今回でいったん区切りをつけたいと思います。GWも終わるし、何より雲行きがあやしくなってきたのが大きいです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;WS002517.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; cl</summary>
      
    
    
    
    
    <category term="opencv" scheme="https://noitaro.github.io/tags/opencv/"/>
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="automation" scheme="https://noitaro.github.io/tags/automation/"/>
    
  </entry>
  
  <entry>
    <title>【OpenCV】ツムを判別する方法２</title>
    <link href="https://noitaro.github.io/opencv-tsumtsum-2/"/>
    <id>https://noitaro.github.io/opencv-tsumtsum-2/</id>
    <published>2021-05-04T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.439Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://noitaro.github.io/opencv-houghcircles/">前回</a> ツムを判別する方法に、ハフ変換を使って円を検出しました。</p><p>今回はハフ変換で見つけたツムを、識別してグループ化していきます。</p><p><img src="WS002514.png" loading="lazy"></p><h2 id="処理"><a href="#処理" class="headerlink" title="処理"></a>処理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line"></span><br><span class="line">    img = cv2.imread(&#x27;IMG_0941.png&#x27;)</span><br><span class="line">    img = img[300: 900, 0: 554]</span><br><span class="line"></span><br><span class="line">    circles = GetHoughCircles(img)</span><br><span class="line">    averaging = GetAveraging(img, circles)</span><br><span class="line"></span><br><span class="line">    # 描画</span><br><span class="line">    for item in averaging:</span><br><span class="line">        cv2.circle(img, (item[&#x27;x&#x27;], item[&#x27;y&#x27;]), item[&#x27;radius&#x27;], (item[&#x27;blue&#x27;], item[&#x27;green&#x27;], item[&#x27;red&#x27;]), thickness=-1)</span><br><span class="line">        cv2.putText(img, str(item[&#x27;index&#x27;]), (item[&#x27;x&#x27;]-10, item[&#x27;y&#x27;]+12), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 0, 0), thickness=2)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(&#x27;detected circles&#x27;, img)</span><br><span class="line">    cv2.waitKey(0)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">def GetHoughCircles(img):</span><br><span class="line">    cimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    circles = cv2.HoughCircles(cimg, cv2.HOUGH_GRADIENT, 1.2, 30, param1=100, param2=40, minRadius=20, maxRadius=54)</span><br><span class="line">    circles = numpy.uint16(numpy.around(circles))</span><br><span class="line">    return circles</span><br><span class="line"></span><br><span class="line">def GetAveraging(img, circles):</span><br><span class="line">    average = []</span><br><span class="line"></span><br><span class="line">    for i in circles[0, :]:</span><br><span class="line">        # img[top : bottom, left : right]</span><br><span class="line">        imgcrop = img[i[1]-2: i[1]+2, i[0]-2: i[0]+2]</span><br><span class="line">        imgblur = cv2.blur(imgcrop, (10, 10))</span><br><span class="line"></span><br><span class="line">        b = math.floor(imgblur.T[0].flatten().mean() * 0.1) * 10</span><br><span class="line">        g = math.floor(imgblur.T[1].flatten().mean() * 0.1) * 10</span><br><span class="line">        r = math.floor(imgblur.T[2].flatten().mean() * 0.1) * 10</span><br><span class="line"></span><br><span class="line">        average.append(&#123;&quot;blue&quot;: b, &quot;green&quot;: g, &quot;red&quot;: r, &#x27;x&#x27;: i[0], &#x27;y&#x27;: i[1], &#x27;radius&#x27;: i[2]&#125;)</span><br><span class="line"></span><br><span class="line">    SetGrouping(average)</span><br><span class="line"></span><br><span class="line">    return average</span><br><span class="line"></span><br><span class="line">def SetGrouping(averaging):</span><br><span class="line"></span><br><span class="line">    group = []</span><br><span class="line">    for average in averaging:</span><br><span class="line">        isOK = False</span><br><span class="line">        idx = 0</span><br><span class="line"></span><br><span class="line">        # 初回</span><br><span class="line">        if len(group) &lt;= 0:</span><br><span class="line">            average[&#x27;index&#x27;] = idx</span><br><span class="line">            group.append(average)</span><br><span class="line"></span><br><span class="line">        for item in group:</span><br><span class="line"></span><br><span class="line">            if item[&#x27;blue&#x27;] - 10 &lt;= average[&#x27;blue&#x27;] and average[&#x27;blue&#x27;] &lt;= item[&#x27;blue&#x27;] + 10 and item[&#x27;green&#x27;] - 10 &lt;= average[&#x27;green&#x27;] and average[&#x27;green&#x27;] &lt;= item[&#x27;green&#x27;] + 10 and item[&#x27;red&#x27;] - 10 &lt;= average[&#x27;red&#x27;] and average[&#x27;red&#x27;] &lt;= item[&#x27;red&#x27;] + 10:</span><br><span class="line"></span><br><span class="line">                isOK = True</span><br><span class="line">                average[&#x27;index&#x27;] = item[&#x27;index&#x27;]</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">        if not isOK:</span><br><span class="line">            idx = len(group)</span><br><span class="line">            average[&#x27;index&#x27;] = idx</span><br><span class="line">            group.append(average)</span><br><span class="line"></span><br><span class="line">    return</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="使った機能"><a href="#使った機能" class="headerlink" title="使った機能"></a>使った機能</h2><h3 id="画像のぼかし-平滑化"><a href="#画像のぼかし-平滑化" class="headerlink" title="画像のぼかし (平滑化)"></a>画像のぼかし (平滑化)</h3><p>cv2.blur() を使ってツムにぼかしを入れてから、円の中心の色を取得しています。精度を上げたかったので、下一桁を切り捨ててからグループ化処理をしました。</p><p>グループ化処理では、ある程度似た色を1つのグループとするようにしています。まったく同じ色ってのは、難しかったのでここは調整が必要ですね。</p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>後は、最短経路をつなぐアルゴリズムですかね。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://noitaro.github.io/opencv-houghcircles/&quot;&gt;前回&lt;/a&gt; ツムを判別する方法に、ハフ変換を使って円を検出しました。&lt;/p&gt;
&lt;p&gt;今回はハフ変換で見つけたツムを、識別してグループ化していきます。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="opencv" scheme="https://noitaro.github.io/tags/opencv/"/>
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="automation" scheme="https://noitaro.github.io/tags/automation/"/>
    
  </entry>
  
  <entry>
    <title>【OpenCV】ツムを判別する方法１</title>
    <link href="https://noitaro.github.io/opencv-houghcircles/"/>
    <id>https://noitaro.github.io/opencv-houghcircles/</id>
    <published>2021-04-25T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.435Z</updated>
    
    <content type="html"><![CDATA[<p>ツムツムを自動化するために、スクリーンショットの中からツムを拾い出す処理を書いていきます。</p><p>と言っても OpenCVのハフ変換を使って、円検出をちょっとやっただけなんですけどね。</p><p>たまに、対象外になっちゃうツムが出てくるけどどうしようかな。悩ましい。</p><p><img src="WS002509.png" loading="lazy"></p><h2 id="処理"><a href="#処理" class="headerlink" title="処理"></a>処理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(&#x27;IMG_0941.png&#x27;)</span><br><span class="line">cimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">circles = cv2.HoughCircles(cimg, cv2.HOUGH_GRADIENT, 1.2, 30, param1=100, param2=40, minRadius=20, maxRadius=54)</span><br><span class="line"></span><br><span class="line">circles = np.uint16(np.around(circles))</span><br><span class="line"></span><br><span class="line">for i in circles[0, :]:</span><br><span class="line">    cv2.circle(img, (i[0], i[1]), i[2], (0, 255, 0), 2)</span><br><span class="line">    cv2.circle(img, (i[0], i[1]), 2, (0, 0, 255), 3)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&#x27;detected circles&#x27;, img)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>あとは、繋げてタッチイベントを送ればいいと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ツムツムを自動化するために、スクリーンショットの中からツムを拾い出す処理を書いていきます。&lt;/p&gt;
&lt;p&gt;と言っても OpenCVのハフ変換を使って、円検出をちょっとやっただけなんですけどね。&lt;/p&gt;
&lt;p&gt;たまに、対象外になっちゃうツムが出てくるけどどうしようかな。悩まし</summary>
      
    
    
    
    
    <category term="opencv" scheme="https://noitaro.github.io/tags/opencv/"/>
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Nintendo Switch で Android 10 を起動させる方法</title>
    <link href="https://noitaro.github.io/nintendo-switch-android-10/"/>
    <id>https://noitaro.github.io/nintendo-switch-android-10/</id>
    <published>2021-04-11T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.359Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://noitaro.github.io/nintendo-switch-android-9-0/">前回</a>、Nintendo Switch で LineageOS 16（Android 9） を起動させましたが、月日が流れて LineageOS 17.1（Android 10）が動かせるようになってました。</p><p>前回の LineageOS 16 とは違い、結構いい感じにカスタマイズされてスリープも Joycon も問題なく動くようになっています。</p><p>手順も前回と一緒でした。</p><h2 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h2><p><a href="https://forum.xda-developers.com/t/rom-unofficial-switchroot-android-10.4229761/">https://forum.xda-developers.com/t/rom-unofficial-switchroot-android-10.4229761/</a></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 20H2</li><li>Nintendo Switch 11.0.1</li><li>hekate 5.5.4</li><li><a href="https://amzn.to/2PKziQ3">SDカード 128GB</a></li></ul><h2 id="必要なファイルを集める"><a href="#必要なファイルを集める" class="headerlink" title="必要なファイルを集める"></a>必要なファイルを集める</h2><h3 id="Nintendo-Switch-用-LineageOS-17-1"><a href="#Nintendo-Switch-用-LineageOS-17-1" class="headerlink" title="Nintendo Switch 用 LineageOS 17.1"></a>Nintendo Switch 用 LineageOS 17.1</h3><p><a href="https://forum.xda-developers.com/t/rom-unofficial-switchroot-android-10.4229761/">こちら</a>から Nintendo Switch 用 LineageOS 17.1 「icosa-tablet-20210205-rel.zip」をダウンロードします。</p><p><img src="WS002462.png" alt="「icosa-tablet-20210205-rel.zip」をダウンロード" loading="lazy"></p><p>ダウンロードが終わったら展開しておきましょう。</p><p>中身は、hekate が使う「bootloader」と、Android が使う「switchroot」と、Switch 用にカスタマイズされた「lineage-17.1-20210205-UNOFFICIAL-foster_tab-signed.zip」が入っています。</p><p><img src="WS002463.png" alt="中身" loading="lazy"></p><h3 id="hekate"><a href="#hekate" class="headerlink" title="hekate"></a>hekate</h3><p><a href="https://github.com/CTCaer/hekate/releases/">こちら</a>から「hekate_ctcaer_5.5.4_Nyx_1.0.1.zip」をダウンロードします。</p><p><img src="WS002464.png" alt="「hekate_ctcaer_5.5.4_Nyx_1.0.1.zip」をダウンロード" loading="lazy"></p><p>同じく展開しておきます。</p><p><img src="WS002465.png" alt="展開" loading="lazy"></p><h3 id="必要に応じて"><a href="#必要に応じて" class="headerlink" title="必要に応じて"></a>必要に応じて</h3><h4 id="Google-Play-を使いたい"><a href="#Google-Play-を使いたい" class="headerlink" title="Google Play を使いたい"></a>Google Play を使いたい</h4><p><a href="https://opengapps.org/">こちら</a>から arm64 pico をダウンロード</p><p><img src="WS002469.png" alt=" arm64 pico をダウンロード" loading="lazy"></p><h4 id="スリープ機能改善バッチ"><a href="#スリープ機能改善バッチ" class="headerlink" title="スリープ機能改善バッチ"></a>スリープ機能改善バッチ</h4><p><a href="https://forum.xda-developers.com/t/rom-unofficial-switchroot-android-10.4229761/">こちら</a>から「alarm-disable.zip」をダウンロード。アラームを無効にすることでスリープ機能を改善するみたいです。</p><p><img src="WS002470_1.png" alt="「alarm-disable.zip」をダウンロード" loading="lazy"></p><h4 id="ボタン配置改善バッチ"><a href="#ボタン配置改善バッチ" class="headerlink" title="ボタン配置改善バッチ"></a>ボタン配置改善バッチ</h4><p><a href="https://forum.xda-developers.com/t/rom-unofficial-switchroot-android-10.4229761/">こちら</a>から「joycon-xbox.zip」をダウンロード。「AとB」を入れ替え、「XとY」を入れ替えます。つまりxboxと同じ配置になるみたい。</p><p><img src="WS002470_2.png" alt="「joycon-xbox.zip」をダウンロード" loading="lazy"></p><h2 id="Nintendo-Switch-で-LineageOS-17-1"><a href="#Nintendo-Switch-で-LineageOS-17-1" class="headerlink" title="Nintendo Switch で LineageOS 17.1"></a>Nintendo Switch で LineageOS 17.1</h2><p>ここから先は、私が試して成功した方法を説明します。参考サイトの手順と若干違いますが、一つの方法として御覧ください。</p><h3 id="SDカード初期化"><a href="#SDカード初期化" class="headerlink" title="SDカード初期化"></a>SDカード初期化</h3><p><a href="https://noitaro.github.io/nintendo-switch-android-sdcard-undo/">こちらの記事</a>を参考にして、SDカードを初期化します。パーティションも全て初期化されるので、ホントの初期化になります。</p><p>あと遊び終わって、パーティションを元に戻す時にも使います。</p><h3 id="ファイル準備"><a href="#ファイル準備" class="headerlink" title="ファイル準備"></a>ファイル準備</h3><p>SDカードの初期化が出来たら、SDカードに必要なファイルを入れていきます。</p><p>まず「icosa-tablet-20210205-rel」フォルダの中身をSDカードにコピーします。</p><p><img src="WS002388-1.png" alt="フォルダの中身をSDカードにコピー" loading="lazy"></p><p>次に「hekate_ctcaer_5.5.4_Nyx_1.0.1」フォルダの中身をSDカードにコピーします。</p><p><img src="WS002388-2.png" alt="フォルダの中身をSDカードにコピー" loading="lazy"></p><p>最後に、必要に応じて「open_gapps-arm64-10.0-pico-20210410.zip」「alarm-disable.zip」「joycon-xbox.zip」をコピーして完成。</p><p><img src="WS002472.png" alt="必要に応じてコピー" loading="lazy"></p><h3 id="hekate-で-SDカードに-Android領域作成"><a href="#hekate-で-SDカードに-Android領域作成" class="headerlink" title="hekate で SDカードに Android領域作成"></a>hekate で SDカードに Android領域作成</h3><p>まず、hekate を起動させて「Tools」を選択し、</p><p><img src="nyx20210310_200821_1.png" alt="Tools を選択" loading="lazy"></p><p>次に「Partition SD Card」を選択します。</p><p><img src="nyx20210310_200825.png" alt="Partition SD Card を選択" loading="lazy"></p><p>現在のパーティション状態が表示されるので「OK」を押して閉じます。</p><p><img src="nyx20210310_200830.png" alt="OK を押して閉じる" loading="lazy"></p><p>Android のスライダーを 16GiB まで上げます。アンドロイド用の領域になるので、ガッツリ遊ぶって人はもっと確保してもいいかも。</p><p>選択し終わったら「Next Step」を押して、</p><p><img src="nyx20210310_200900.png" alt="Next Step を選択" loading="lazy"></p><p>パーティション作成確認がでるので「Start」を選択します。</p><p><img src="nyx20210310_200905.png" alt="Start を選択" loading="lazy"></p><p>「Status: Done!」と表示されれば無事に終了。続いてアンドロイドを入れるため「Flash Android」を選択</p><p><img src="nyx20210310_201026.png" alt="Flash Android を選択" loading="lazy"></p><p>確認がでるので「Continue」を選択</p><p><img src="nyx20210310_201031.png" alt="Continue を選択" loading="lazy"></p><p>「Success: Kernel image flashed!」「Success: TWRP image flashed!」「Success: DTB image flashed!」が表示されれば成功。続いてアンドロイドインストールするためのTWRPを起動するので「Continue」を選択</p><p><img src="nyx20210310_201036.png" alt="Continue を選択" loading="lazy"></p><h3 id="TWRP-で-Androidインストール"><a href="#TWRP-で-Androidインストール" class="headerlink" title="TWRP で Androidインストール"></a>TWRP で Androidインストール</h3><p>hekateが再起動してTWRPに入ります。</p><p>TWRP が起動したら「Swipe to Allow Modifications」を右にスライドします。</p><p><img src="IMG_20200719_132029_1.png" alt="「Swipe to Allow Modifications」を右にスライド" loading="lazy"></p><p>「Install」を選択</p><p><img src="IMG_20200719_132042_1.png" alt="「Install」を選択" loading="lazy"></p><p>まず「(Up A Level)」を選択して 一つ上の階層に行きます。</p><p><img src="IMG_20200719_132730.png" alt="「(Up A Level)」を選択" loading="lazy"></p><p>「external_sd」を選択</p><p><img src="IMG_20200719_132744.png" alt="「external_sd」を選択" loading="lazy"></p><p>「lineage-17.1-20210205-UNOFFICIAL-foster_tab-signed.zip」を選択</p><p><img src="PXL_20210410_100226030_1.png" alt="lineage-17.1-20210205-UNOFFICIAL-foster_tab-signed.zip を選択" loading="lazy"></p><p>必要に応じて Google Play やスリープ機能改善バッチ、ボタン配置改善バッチをインストールした場合は「Add more Zips」を選択して前の画面に戻り、同じ要領でインストールに追加していきます。</p><p><img src="PXL_20210410_100240050.png" alt="Add more Zips を選択して前の画面に戻る" loading="lazy"></p><p>必要なものが追加出来たら「Swipe to confirm Flash」を右にスライドしてインストール開始</p><p><img src="PXL_20210410_100313809.png" alt="Swipe to confirm Flash を右にスライドしてインストール開始" loading="lazy"></p><p>インストールが完了したら「Wipe Cache&#x2F;Dalvik」を選択しキャッシュを削除します。</p><p><img src="PXL_20210410_100604866.png" alt="Wipe Cache/Dalvik を選択しキャッシュを削除" loading="lazy"></p><p>「Swipe to Wipe」を右にスライドして実行</p><p><img src="PXL_20210410_100611891.png" alt="Swipe to Wipe を右にスライド" loading="lazy"></p><p>終わったら「Reboot System」を選択して再起動。しばらく待つと LineageOS 17.1 が起動します。</p><p><img src="PXL_20210410_100625461.png" alt="Reboot System を選択して再起動" loading="lazy"></p><h3 id="Android-起動"><a href="#Android-起動" class="headerlink" title="Android 起動"></a>Android 起動</h3><p>初期設定を済ませるとホーム画面が表示されます。</p><p>あとは普段どおり、Google Play からゲームを入れたりして遊びましょう。</p><p>Joycon も機能するので、コントローラー対応のゲームが遊びやすいと思います。</p><h4 id="Nintendo-Switch-で原神"><a href="#Nintendo-Switch-で原神" class="headerlink" title="Nintendo Switch で原神"></a>Nintendo Switch で原神</h4><p>何個かゲームを入れてみました。</p><p>Joycon で動かせたら楽しそうだったから入れてみたんですが、ムービーがカックカクで、快適にプレイ出来ませんでした。残念。</p><p><img src="PXL_20210410_130855709.png" alt="Nintendo Switch で原神" loading="lazy"></p><h4 id="Nintendo-Switch-でウマ娘"><a href="#Nintendo-Switch-でウマ娘" class="headerlink" title="Nintendo Switch でウマ娘"></a>Nintendo Switch でウマ娘</h4><p>ウマ娘 は結構快適でした。ロードは若干カクつくけどそれ以外はスムーズ。だけど、縦画面の向きが逆じゃないか？ この向きだと、音量ボタンが逆になっちゃうですよね。</p><p><img src="PXL_20210411_085121615.png" alt="Nintendo Switch でウマ娘" loading="lazy"></p><h4 id="一度電源を切った後、もう一度アンドロイドを起動したい場合は？"><a href="#一度電源を切った後、もう一度アンドロイドを起動したい場合は？" class="headerlink" title="一度電源を切った後、もう一度アンドロイドを起動したい場合は？"></a>一度電源を切った後、もう一度アンドロイドを起動したい場合は？</h4><p>再度 hekate を起動して「More Configs」を選択し、</p><p><img src="nyx20210310_200821.png" alt="More Configs を選択" loading="lazy"></p><p>「Switchroot Android 10」で起動出来ます。</p><p><img src="nyx20210311_044246.png" alt="Switchroot Android 10" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://noitaro.github.io/nintendo-switch-android-9-0/&quot;&gt;前回&lt;/a&gt;、Nintendo Switch で LineageOS 16（Android 9） を起動させましたが、月日が流れて Lineag</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="nintendo-switch" scheme="https://noitaro.github.io/tags/nintendo-switch/"/>
    
    <category term="twrp" scheme="https://noitaro.github.io/tags/twrp/"/>
    
    <category term="lineageos" scheme="https://noitaro.github.io/tags/lineageos/"/>
    
    <category term="hekate" scheme="https://noitaro.github.io/tags/hekate/"/>
    
  </entry>
  
  <entry>
    <title>【Python】ウマ娘 自動リセマラ周回のやり方</title>
    <link href="https://noitaro.github.io/python-umamusume/"/>
    <id>https://noitaro.github.io/python-umamusume/</id>
    <published>2021-04-04T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.495Z</updated>
    
    <content type="html"><![CDATA[<p>巷で話題になっているスマホゲーム「<a href="https://play.google.com/store/apps/details?id=jp.co.cygames.umamusume">ウマ娘 プリティーダービー</a>」のリセマラを自動周回させます。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>ウマ娘の最終目標である「URAファイナルズ」に出場するため、リセマラを使って出来るだけ有利にスタートダッシュを決めたい。</p><p>そのためリセマラを何十回もやって、キャラクターを厳選する必要があります。</p><p>1回のリセマラが5分以内で終わるので、そこまで苦じゃないがやっぱり楽をしたい。</p><p>そんな私の欲望を叶えるため、ひと肌脱いできました。</p><h3 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h3><p>この記事を読んで出来ること。</p><p>1周する毎にフォルダの中にガチャ結果とデータ連携の結果が保存されて行きます。</p><p>1周5分ぐらいかな、たまに失敗してるけど。</p><p><img src="WS002435.png" alt="ガチャ結果" loading="lazy"></p><p>それぞれのフォルダの中身はこんな感じ。</p><p>今の時期だと10連ガチャが7回出来るみたい。</p><p><img src="WS002437.png" alt="ガチャ結果" loading="lazy"></p><p>あとはガチャ結果がよかったアカウントを、データ連携で戻して最高のスタートダッシュを決めます。</p><p>さらに今回の方法を使うと、マウスカーソルが奪われずに複数のNoxPlayerを同時に操作してリセマラを行うことができます。ネットサーフィンしていても問題ないですよ。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>NoxPlayerを自動操作して、ウマ娘のリセマラをしていくのに Python をインストールする必要があります。 Python はインタプリタ型のプログラム言語で、Microsoft Store から誰でも簡単にインストールすることができます。</p><p><a href="https://www.microsoft.com/store/productId/9MSSZTT1N39L">こちら</a>から Python 3.8 をインストールして下さい。若干バージョンが違っていても問題ありません。</p><p><img src="3f7310d4-ws000490.png" alt="Python" loading="lazy"></p><h3 id="アンドロイド自動操作モジュール"><a href="#アンドロイド自動操作モジュール" class="headerlink" title="アンドロイド自動操作モジュール"></a>アンドロイド自動操作モジュール</h3><p>NoxPlayerを自動操作するために、<a href="https://github.com/noitaro/android-auto-play-opencv">アンドロイド自動操作モジュール</a> を使います。なので事前に、コマンドプロンプトからインストールしておきます。</p><h4 id="インストール方法"><a href="#インストール方法" class="headerlink" title="インストール方法"></a>インストール方法</h4><p>「Win」キーと「R」キーを同時に押して「ファイル名を指定して実行」ダイアログに「cmd」と入力し、コマンドプロンプトを開きます。</p><p><img src="WS001449.png" loading="lazy"></p><p>で、開いたコマンドプロンプトに 下記コマンド を入力して アンドロイド自動操作モジュール をインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install android-auto-play-opencv</span><br></pre></td></tr></table></figure><p><img src="WS002505.png" loading="lazy"></p><p>Successfully と出ればインストール成功です。</p><h3 id="ウマ娘自動リセマラ周回スクリプト"><a href="#ウマ娘自動リセマラ周回スクリプト" class="headerlink" title="ウマ娘自動リセマラ周回スクリプト"></a>ウマ娘自動リセマラ周回スクリプト</h3><p>Python の準備が整ったので、私が組んだ <a href="https://github.com/noitaro/python-umamusume">ウマ娘自動リセマラ周回スクリプト</a> をダウンロードして展開しましょう。</p><p><a href="https://github.com/noitaro/python-umamusume">https://github.com/noitaro/python-umamusume</a></p><p>上記サイトからを ウマ娘自動リセマラ周回スクリプト をダウンロードし、</p><p><img src="WS002502.png" loading="lazy"></p><p>展開すると「umamusume.py」とテンプレート画像が入っています。</p><h3 id="NoxPlayer"><a href="#NoxPlayer" class="headerlink" title="NoxPlayer"></a>NoxPlayer</h3><p>次に NoxPlayer をインストールします。NoxPlayer は PC上でアンドロイドを動かすことが出来るツールです。複数同時起動ができるので、いろいろなアプリを同時に実行することができて、とっても役にたつツールです。</p><p>NoxPlayer を使う場合は <a href="https://jp.bignox.com/blog/umacrash/">64bitベータ版</a> を使うことをオススメします。</p><p><img src="WS002419.png" alt="NoxPlayerをダウンロード" loading="lazy"></p><p>私の環境で試したところアプリ起動時によくクラッシュしていましたが、64bit版を使うようになったら多少改善されました。まあ落ちる時は落ちるので、気休め程度ですけどね。</p><h4 id="解像度-960x540"><a href="#解像度-960x540" class="headerlink" title="解像度 960x540"></a>解像度 960x540</h4><p>今回のスクリプトは「解像度 960x540」で作っちゃったので、このサイズでしか上手く動かせません。</p><p>タップ位置とか比較画像のサイズを再設定すれば別の端末でも動かせるので、別の端末で動かしたい人はスクリプトの修正が必要です。</p><p><img src="WS002420.png" alt="解像度 960x540" loading="lazy"></p><h3 id="ウマ娘-チュートリアル"><a href="#ウマ娘-チュートリアル" class="headerlink" title="ウマ娘 チュートリアル"></a>ウマ娘 チュートリアル</h3><p>事前にチュートリアルを1回終わらせて、スキップ出来る状態にしておいて下さい。</p><p><img src="Screenshot_20210403-102123-1.png" alt="チュートリアルスキップ" loading="lazy"></p><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>展開したフォルダに「umamusume.py」が入っています。</p><p>そのフォルダでコマンドプロンプトを開いて Python を実行すると自動で動き出します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python umamusume.py</span><br></pre></td></tr></table></figure><p><img src="WS002431.png" alt="python umamusume.py" loading="lazy"></p><p><img src="WS002429.png" alt="自動リセマラ周回" loading="lazy"></p><h3 id="コマンドプロンプトの開き方は？"><a href="#コマンドプロンプトの開き方は？" class="headerlink" title="コマンドプロンプトの開き方は？"></a>コマンドプロンプトの開き方は？</h3><p>「umamusume.py」があるフォルダでコマンドプロンプトを開かないと正しく実行されません。</p><p>テンプレート画像が相対パスなので、ちょっと注意が必要です。</p><p>エクスプローラーのアドレスバーに「cmd」と入力しエンタキーで開けます。</p><p><img src="WS002434.png" alt="コマンドプロンプトの開き方" loading="lazy"></p><h3 id="ADBパス設定"><a href="#ADBパス設定" class="headerlink" title="ADBパス設定"></a>ADBパス設定</h3><p>もし動かない場合は、NoxPlayer の ADBパスを設定する必要があります。</p><p>候補を何個か登録してありますが、NoxPlayer のインストール設定によっては変わることがあるので、動かない場合は手動で追加して下さい。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adbpathCandidates = [</span><br><span class="line">    &#x27;C:\\Program Files\\Nox\\bin\\&#x27;,</span><br><span class="line">    &#x27;C:\\Program Files (x86)\\Nox64\\bin\\&#x27;,</span><br><span class="line">    &#x27;C:\\Program Files (x86)\\Nox\\bin\\&#x27;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="WS002885.png" loading="lazy"></p><h3 id="NoxPlayer用の-adb-exe-の調べ方"><a href="#NoxPlayer用の-adb-exe-の調べ方" class="headerlink" title="NoxPlayer用の adb.exe の調べ方"></a>NoxPlayer用の adb.exe の調べ方</h3><p>デスクトップにある NoxPlayerのショートカットを右クリックして「ファイルの場所を開く」を選択</p><p><img src="WS002510.png" loading="lazy"></p><p>開いたフォルダに NoxPlayer用の adb.exe があります。なので、そのフォルダパスを adbpathCandidates に追加すればOK</p><p><img src="WS002511.png" loading="lazy"></p><p>Python は エンマークがエスケープ文字に設定されているので、エンマークを使いたい時は2回続けて書く必要があります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;D:\Program Files\Nox64\bin\&#x27; # NG</span><br><span class="line">&#x27;D:\\Program Files\\Nox64\\bin\\&#x27; # OK</span><br></pre></td></tr></table></figure><h2 id="複数端末に対応-2021-06-20：追記"><a href="#複数端末に対応-2021-06-20：追記" class="headerlink" title="複数端末に対応 2021&#x2F;06&#x2F;20：追記"></a>複数端末に対応 2021&#x2F;06&#x2F;20：追記</h2><p>同時に複数の端末で自動操作できるように修正しました。</p><p><a href="https://noitaro.github.io/multi-startup/">https://noitaro.github.io/multi-startup/</a></p><p>効率アップですね。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;巷で話題になっているスマホゲーム「&lt;a href=&quot;https://play.google.com/store/apps/details?id=jp.co.cygames.umamusume&quot;&gt;ウマ娘 プリティーダービー&lt;/a&gt;」のリセマラを自動周回させます。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="automation" scheme="https://noitaro.github.io/tags/automation/"/>
    
    <category term="android-auto-play" scheme="https://noitaro.github.io/tags/android-auto-play/"/>
    
    <category term="umamusume" scheme="https://noitaro.github.io/tags/umamusume/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi 4 に LineageOS 18.1 (Android 11) を入れる</title>
    <link href="https://noitaro.github.io/lineageos-18-1-for-raspberry-pi-4/"/>
    <id>https://noitaro.github.io/lineageos-18-1-for-raspberry-pi-4/</id>
    <published>2021-03-28T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.235Z</updated>
    
    <content type="html"><![CDATA[<p>ちょっとネットサーフィンをしていたら面白い記事を見つけまして、試しにやってみました。</p><p>手順はムチャクチャ簡単で、Raspberry Pi4用にカスタマイズされた LineageOS をマイクロSDカードに入れて、Raspberryで起動するだけ。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="Raspberry-Pi4"><a href="#Raspberry-Pi4" class="headerlink" title="Raspberry Pi4"></a>Raspberry Pi4</h3><p><a href="https://amzn.to/3sx5i8a">Raspberry Pi4 ModelB 4GB</a></p><p><img src="PXL_20210322_123658137.png" alt="Raspberry Pi4" loading="lazy"></p><p>必須ではありませんが、<a href="https://amzn.to/3u1TwTA">Raspberry Pi用のタッチモニター</a> があると操作しやすかったです。</p><h3 id="LineageOS-18-1-Android-11-for-Raspberry-Pi-4"><a href="#LineageOS-18-1-Android-11-for-Raspberry-Pi-4" class="headerlink" title="LineageOS 18.1 (Android 11) for Raspberry Pi 4"></a>LineageOS 18.1 (Android 11) for Raspberry Pi 4</h3><p><a href="https://konstakang.com/devices/rpi4/LineageOS18/">LineageOS 18.1 (Android 11) for Raspberry Pi 4</a></p><p>上記サイトから「lineage-18.1-20210214-UNOFFICIAL-KonstaKANG-rpi4.zip」をダウンロードして、展開しておきます。</p><p><img src="WS002408.png" alt="ダウンロード" loading="lazy"></p><p>たまにリンクが切れている場合があります。切れていた場合は少し待つと回復するので、しばらく立ってから再度アクセスしてみて下さい。</p><p><img src="WS002409.png" alt="ダウンロード" loading="lazy"></p><p><img src="WS002410.png" alt="ダウンロード" loading="lazy"></p><h3 id="balenaEtcher"><a href="#balenaEtcher" class="headerlink" title="balenaEtcher"></a>balenaEtcher</h3><p><a href="https://www.balena.io/etcher/">balenaEtcher</a></p><p>SDカードに LineageOS を書き込むために使います。</p><p><img src="686ec17e-ws000755.png" alt="Etcher for Windows Portable をダウンロード" loading="lazy"></p><p>今回はポータブル版をダウンロードしました。インストール無しで使えるので、PCを汚さずオススメです。</p><h3 id="マイクロSDカード"><a href="#マイクロSDカード" class="headerlink" title="マイクロSDカード"></a>マイクロSDカード</h3><p>8GB以上の microSDカード を推奨します。今はだいぶ安いので <a href="https://amzn.to/3suN0Vd">32GB</a> や <a href="https://amzn.to/3lXc30w">128GB</a> を1枚持っていると、今後困らなくて便利だと思います。</p><h2 id="LineageOS-書き込み"><a href="#LineageOS-書き込み" class="headerlink" title="LineageOS 書き込み"></a>LineageOS 書き込み</h2><p>balenaEtcher を使って SDカードに LineageOS を書き込みます。</p><p>balenaEtcherを実行します。</p><p>初めに「Flash from file」ボタンを押して、展開しておいた「lineage-18.1-20210214-UNOFFICIAL-KonstaKANG-rpi4.img」を選択。</p><p><img src="WS002411-1.png" alt="イメージファイルを選択" loading="lazy"></p><p>次に「Select target」ボタンを押して、書き込み対象のSDカードを選択。</p><p><img src="WS002412.png" alt="書き込み対象のSDカードを選択" loading="lazy"></p><p>最後に「Flash!」ボタンを押して書き込み開始。</p><p><img src="WS002413.png" alt="書き込み開始" loading="lazy"></p><p>書き込みが終わったら Raspberry Pi に SDカード を挿して電源を入れれば LineageOS が立ち上がります。</p><p>あとは、Wi-Fi や アカウント等のセットアップを済ませれば、完成です。</p><p><img src="PXL_20210327_081235663.png" alt="LineageOS 18.1 (Android 11) for Raspberry Pi 4" loading="lazy"></p><h3 id="Google-Play-のインストール方法"><a href="#Google-Play-のインストール方法" class="headerlink" title="Google Play のインストール方法"></a>Google Play のインストール方法</h3><p>初期状態だと Google Playアプリは入っていません。上の写真は入れた後の写真なので、チャチャっと入れちゃいましょう。</p><p>ラズパイ上のブラウザで <a href="https://sourceforge.net/projects/opengapps/files/arm/test/">こちら</a> にアクセスして、pico版の「open_gapps-arm-11.0-pico-20210130-TEST.zip」をダウンロードします。</p><p><img src="WS002416.png" alt="20210130" loading="lazy"></p><p><img src="WS002417.png" alt="open_gapps-arm-11.0-pico-20210130-TEST.zip" loading="lazy"></p><p>後は、TWRP でインストールすれば OK。</p><p>ROOT化も同様に、TWRP で Magisk をインストールすれば OK です。</p><h3 id="TWRPを起動させるには？"><a href="#TWRPを起動させるには？" class="headerlink" title="TWRPを起動させるには？"></a>TWRPを起動させるには？</h3><p>TWRP を起動させるために「高度な再起動」設定を有効にします。</p><p>まず、システムの「ジェスチャー」を選択し、</p><p><img src="Screenshot_20210328-214956-1.png" alt="ジェスチャー を選択" loading="lazy"></p><p>「電源ボタンメニュー」を選択し、</p><p><img src="Screenshot_20210328-215007.png" alt="電源ボタンメニュー を選択" loading="lazy"></p><p>「高度な再起動」設定を有効にします。</p><p><img src="Screenshot_20210328-215030.png" alt="高度な再起動 を有効" loading="lazy"></p><p>これを有効にすると、再起動時にリカバリーモードを選択出来るようになります。</p><p>F5キーを長押しして「再起動」を選択し、</p><p><img src="Screenshot_20210328-215040.png" alt="再起動 を選択" loading="lazy"></p><p>「Recovery」を選択すれば、TWRPが起動します。</p><p><img src="Screenshot_20210328-215046-1.png" alt="Recovery 選択" loading="lazy"></p><h3 id="電源を切る方法"><a href="#電源を切る方法" class="headerlink" title="電源を切る方法"></a>電源を切る方法</h3><p>Raspberry Pi には電源ボタンがありません。</p><p>そのため、キーボードのファンクションキーが デバイス物理キーに割り当てられています。</p><ul><li>F1：ホーム</li><li>F2：戻る</li><li>F3：マルチタスク</li><li>F4：メニュー</li><li>F5：電源</li><li>F11：音量を下げる</li><li>F12：音量を上げる</li></ul><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><h3 id="SDカードを戻す方法"><a href="#SDカードを戻す方法" class="headerlink" title="SDカードを戻す方法"></a>SDカードを戻す方法</h3><p>今回SDカードのパーティションを変更したので、遊び終わったらパーティションを戻してあげましょう。戻さないと容量が少ないままでイラッとします。</p><p>戻し方は <a href="https://noitaro.github.io/nintendo-switch-android-sdcard-undo/">過去の記事</a> で説明しているので、そちらを参考にして下さい。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://konstakang.com/devices/rpi4/LineageOS18/">https://konstakang.com/devices/rpi4/LineageOS18/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ちょっとネットサーフィンをしていたら面白い記事を見つけまして、試しにやってみました。&lt;/p&gt;
&lt;p&gt;手順はムチャクチャ簡単で、Raspberry Pi4用にカスタマイズされた LineageOS をマイクロSDカードに入れて、Raspberryで起動するだけ。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="google" scheme="https://noitaro.github.io/tags/google/"/>
    
    <category term="twrp" scheme="https://noitaro.github.io/tags/twrp/"/>
    
    <category term="gapps" scheme="https://noitaro.github.io/tags/gapps/"/>
    
    <category term="lineageos" scheme="https://noitaro.github.io/tags/lineageos/"/>
    
    <category term="raspberry-pi" scheme="https://noitaro.github.io/tags/raspberry-pi/"/>
    
  </entry>
  
  <entry>
    <title>Satisfactory Modの入れ方</title>
    <link href="https://noitaro.github.io/satisfactory-install-mod/"/>
    <id>https://noitaro.github.io/satisfactory-install-mod/</id>
    <published>2021-03-14T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Satisfactory-Mod-Manager"><a href="#Satisfactory-Mod-Manager" class="headerlink" title="Satisfactory Mod Manager"></a>Satisfactory Mod Manager</h2><p>Satisfactory Mod Manager を使います。</p><p>非公式ツールなので自己責任でお願い致します。</p><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p>下記サイトから最新版の「Satisfactory-Mod-Manager-Setup.exe」をダウンロードして実行します。</p><p><a href="https://github.com/satisfactorymodding/SatisfactoryModManager/releases">https://github.com/satisfactorymodding/SatisfactoryModManager/releases</a></p><p><img src="WS002403.png" alt="Satisfactory-Mod-Manager-Setup.exe" loading="lazy"></p><h3 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h3><p>試しに飛行Modを入れてみます。</p><ol><li>Search に「fly」を入力。</li><li>見つかったModにチェックを入れる。</li></ol><p><img src="WS002407.png" alt="Satisfactory Mod Manager" loading="lazy"></p><p>これで、Modの導入は完了です。</p><p>最後に「Launch Game」を押してゲームを開始します。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://satisfactory.unevi.net/smm-tutrial/">https://satisfactory.unevi.net/smm-tutrial/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Satisfactory-Mod-Manager&quot;&gt;&lt;a href=&quot;#Satisfactory-Mod-Manager&quot; class=&quot;headerlink&quot; title=&quot;Satisfactory Mod Manager&quot;&gt;&lt;/a&gt;Satisfactory M</summary>
      
    
    
    
    
    <category term="mod" scheme="https://noitaro.github.io/tags/mod/"/>
    
    <category term="satisfactory" scheme="https://noitaro.github.io/tags/satisfactory/"/>
    
  </entry>
  
  <entry>
    <title>Power Automate Desktop OneDriveClientExceptionエラー</title>
    <link href="https://noitaro.github.io/power-automate-desktop-onedriveclientexception/"/>
    <id>https://noitaro.github.io/power-automate-desktop-onedriveclientexception/</id>
    <published>2021-03-13T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.459Z</updated>
    
    <content type="html"><![CDATA[<p>マイクロソフトが RPAツール である Power Automate Desktop を無償公開するってことになり、自動化界隈で少し話題となりました。</p><p>そもそも RPAツール とは何ぞやと言いますと、簡単に言えば自動化ツールとなります。</p><h2 id="Microsoft製の自動化ツールをインストール"><a href="#Microsoft製の自動化ツールをインストール" class="headerlink" title="Microsoft製の自動化ツールをインストール"></a>Microsoft製の自動化ツールをインストール</h2><p>ダウンロードは Microsoft の <a href="https://blogs.windows.com/windowsexperience/2021/03/02/download-power-automate-desktop-for-windows-10-to-automate-tasks-and-processes-at-no-additional-cost/">配布ページ</a> から出来ます。インストール等も指示に従ってすすめて行けば出来るでしょう。</p><p><img src="WS002399.png" loading="lazy"></p><h2 id="問題発生"><a href="#問題発生" class="headerlink" title="問題発生"></a>問題発生</h2><p>よし、インストールも終わってやるぞ！って時に問題が発生しました。</p><p>私の環境が悪いのか知りませんが、下記エラーが出て一向に始まる気配が無い。</p><h3 id="ハンドルされないエラー"><a href="#ハンドルされないエラー" class="headerlink" title="ハンドルされないエラー"></a>ハンドルされないエラー</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">メッセージ = Access Denied  </span><br><span class="line">エラー = WinAutomation.DataClients.OneDrive.OneDriveClientException  </span><br><span class="line">全文 = WinAutomation.DataClients.OneDrive.OneDriveClientException: Access Denied  </span><br><span class="line">場所 WinAutomation.DataClients.OneDrive.Http.OneDriveHttpClient.d__6.MoveNext()</span><br></pre></td></tr></table></figure><p><img src="WS002397.png" alt="WinAutomation.DataClients.OneDrive.OneDriveClientException" loading="lazy"></p><p>OneDriveClientException って書いてあし、OneDrive がインストールされてないから怒られている気がします。</p><p>と言う訳で <a href="https://www.microsoft.com/store/productId/9WZDNCRFJ1P3">OneDrive</a> を入れて再挑戦。</p><p><img src="WS002400.png" alt="OneDrive" loading="lazy"></p><p>とりあえず、インストールしてみたけど一向に解消されず。</p><p>よく見てみると、アカウントが凍結されているみたい。</p><p><img src="WS002401.png" alt="アカウントの凍結を解除する" loading="lazy"></p><p>凍結を解除させたら、無事に動くようになりました。</p><p><img src="WS002402.png" loading="lazy"></p><p>その後、OneDriveをアンインストールしても動いているので、原因はアカウントが凍結されていたからだと思います。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>アカウントが凍結されていたため。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;マイクロソフトが RPAツール である Power Automate Desktop を無償公開するってことになり、自動化界隈で少し話題となりました。&lt;/p&gt;
&lt;p&gt;そもそも RPAツール とは何ぞやと言いますと、簡単に言えば自動化ツールとなります。&lt;/p&gt;
&lt;h2 id=</summary>
      
    
    
    
    
    <category term="automation" scheme="https://noitaro.github.io/tags/automation/"/>
    
  </entry>
  
  <entry>
    <title>WPF WebView2 で DevTools を開く</title>
    <link href="https://noitaro.github.io/wpf-webview2-devtools/"/>
    <id>https://noitaro.github.io/wpf-webview2-devtools/</id>
    <published>2021-03-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.887Z</updated>
    
    <content type="html"><![CDATA[<p>Chrome ブラウザで F12キー を押すと出てくるアレです。</p><p>WPF の WebView2 でも出せれるので紹介します。あるとマジ便利です。オススメ。</p><h2 id="WebView2-で-DevTools-を開く"><a href="#WebView2-で-DevTools-を開く" class="headerlink" title="WebView2 で DevTools を開く"></a>WebView2 で DevTools を開く</h2><p>WPF に WebView2 を置いてプログラムを組みます。</p><p>で、実行して一度 WebView2 （ブラウザ表示されている部分）をクリックしてから、「Ctrl＋Shift＋I(アイ)キー」を押すと開きます。</p><p><img src="WS002388.png" alt="WebView2 で DevTools を開く" loading="lazy"></p><p>備忘録でした。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Chrome ブラウザで F12キー を押すと出てくるアレです。&lt;/p&gt;
&lt;p&gt;WPF の WebView2 でも出せれるので紹介します。あるとマジ便利です。オススメ。&lt;/p&gt;
&lt;h2 id=&quot;WebView2-で-DevTools-を開く&quot;&gt;&lt;a href=&quot;#WebVi</summary>
      
    
    
    
    
    <category term="wpf" scheme="https://noitaro.github.io/tags/wpf/"/>
    
    <category term="webview2" scheme="https://noitaro.github.io/tags/webview2/"/>
    
  </entry>
  
  <entry>
    <title>Nexus7(2013) に Magisk を入れて Root化する</title>
    <link href="https://noitaro.github.io/nexus7-2013-magisk-root/"/>
    <id>https://noitaro.github.io/nexus7-2013-magisk-root/</id>
    <published>2021-02-28T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.351Z</updated>
    
    <content type="html"><![CDATA[<p>今回は、TWRPを使わないでアンドロイドを Root化する方法を紹介します。</p><h2 id="対象"><a href="#対象" class="headerlink" title="対象"></a>対象</h2><ul><li>Bootloaderアンロック済み</li><li>boot.img 取得済み</li></ul><p>この条件さえ揃っていれば、どんな端末でも Root化出来ます。揃う事は滅多に無いんですけどね。</p><p>私が知っている物だと、Rakuten Mini や Pixel シリーズぐらいです。</p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>今回は端末メインで作業して行こうと思います。PCはチョロっとだけ使います。</p><h3 id="Magisk"><a href="#Magisk" class="headerlink" title="Magisk"></a>Magisk</h3><p>まず、Magiskを手に入れます。「Magisk」と検索し <a href="https://github.com/topjohnwu/Magisk/releases">GitHubページ</a> へ行きます。</p><p><img src="Screenshot_20210227-200610_Chrome.png" alt="Magisk GitHubページ " loading="lazy"></p><p>最新版の「Magisk-v22.0.apk」をダウンロードします。</p><p><img src="Screenshot_20210227-200705_Chrome.png" alt="Magisk-v22.0.apk をダウンロード" loading="lazy"></p><p>ダウンロードが出来たら「ファイル」アプリを開いて、</p><p><img src="Screenshot_20210227-200817_Trebuchet.png" alt="ファイルアプリを起動" loading="lazy"></p><p>左のメニューから「ダウンロード」ディレクトリへ行って、</p><p><img src="Screenshot_20210227-200834_%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB.png" alt="ダウンロード ディレクトリへ移動" loading="lazy"></p><p>「Magisk-v22.0.apk」があるのでタップし、</p><p><img src="Screenshot_20210227-200850_%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB.png" alt="Magisk-v22.0.apk を選択" loading="lazy"></p><p>Magiskをインストールします。</p><p><img src="Screenshot_20210227-200859_%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8_%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%A9.png" alt="Magiskをインストール" loading="lazy"></p><h4 id="「不明なアプリをインストールすることはできません。」と言われたら？"><a href="#「不明なアプリをインストールすることはできません。」と言われたら？" class="headerlink" title="「不明なアプリをインストールすることはできません。」と言われたら？"></a>「不明なアプリをインストールすることはできません。」と言われたら？</h4><p><img src="Screenshot_20210227-200723_%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8_%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%A9.png" alt="不明なアプリをインストールすることはできません。" loading="lazy"></p><p>Chromeの設定を変えます。「この提供元のアプリを許可」を有効にする事でAPKをインストールする事ができるようになります。</p><p><img src="Screenshot_20210227-200737_%E8%A8%AD%E5%AE%9A.png" alt="この提供元のアプリを許可 を有効" loading="lazy"></p><h3 id="boot-img-に-Magiskパッチを当てる"><a href="#boot-img-に-Magiskパッチを当てる" class="headerlink" title="boot.img に Magiskパッチを当てる"></a>boot.img に Magiskパッチを当てる</h3><p>Magisk のインストールが出来たら、boot.img に Magiskパッチを当てて行きます。</p><p>boot.img に Magiskパッチを当てて Flash(焼く)すれば Root化出来るようになります。</p><h4 id="lineage-18-1-20210207-UNOFFICIAL-flo-zip-から-boot-img-を取り出す"><a href="#lineage-18-1-20210207-UNOFFICIAL-flo-zip-から-boot-img-を取り出す" class="headerlink" title="lineage-18.1-20210207-UNOFFICIAL-flo.zip から boot.img を取り出す"></a>lineage-18.1-20210207-UNOFFICIAL-flo.zip から boot.img を取り出す</h4><p>ファイルアプリから Nexus 7 Rootディレクトリ内の「lineage-18.1-20210207-UNOFFICIAL-flo.zip」をタップし、</p><p><img src="Screenshot_20210227-201116_%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB.png" alt="lineage-18.1-20210207-UNOFFICIAL-flo.zip を選択" loading="lazy"></p><p>boot.img を選択し、</p><p><img src="Screenshot_20210227-201502_%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB.png" alt="boot.img を選択" loading="lazy"></p><p>「次の場所に解凍」を選択し、</p><p><img src="Screenshot_20210227-201521_%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB.png" alt="次の場所に解凍 を選択" loading="lazy"></p><p>Nexus 7 Rootディレクトリに解凍します。</p><p><img src="Screenshot_20210227-201533_%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB.png" alt="Rootディレクトリに解凍" loading="lazy"></p><h4 id="boot-img-に-Magiskパッチを当てる-1"><a href="#boot-img-に-Magiskパッチを当てる-1" class="headerlink" title="boot.img に Magiskパッチを当てる"></a>boot.img に Magiskパッチを当てる</h4><p>Magiskアプリを起動させて、</p><p><img src="Screenshot_20210227-200933_Trebuchet.png" alt="Magiskアプリを起動" loading="lazy"></p><p>Magiskのインストールをタップします。</p><p><img src="Screenshot_20210227-200950_Magisk.png" alt="Magiskのインストール" loading="lazy"></p><p>「バッチするファイルの選択」を選び、</p><p><img src="Screenshot_20210227-201126_Magisk.png" alt="バッチするファイルの選択" loading="lazy"></p><p>先程解凍しておいた「boot.img」を選んで バッチ適応を初めます。</p><p><img src="Screenshot_20210227-201549_%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB.png" alt="boot.img を選択" loading="lazy"></p><p>インストール完了っと出れば成功です。</p><p><img src="Screenshot_20210227-201633_Magisk.png" alt="インストール完了" loading="lazy"></p><p>Downloadディレクトリに「パッチ済みのboot.img」が出力されています。ファイル名は「magisk_patched_jEfxA.img」で、末尾は毎回変わりそうです。</p><p><img src="Screenshot_20210227-203558_%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB.png" alt="magisk_patched_jEfxA.img" loading="lazy"></p><h3 id="Root化"><a href="#Root化" class="headerlink" title="Root化"></a>Root化</h3><p>まず、Magiskパッチを当てたboot.imgをPCにコピーします。画像はコピー後。</p><p><img src="WS002386.png" alt="magisk_patched_jEfxA.img" loading="lazy"></p><p>次に Nexus7(2013) を fastboot モードにします。手順は電源が切れている状態で、「電源ボタン＋音量下ボタン」を長押し。</p><p><img src="PXL_20210220_032531611_2.png" alt="fastboot モード" loading="lazy"></p><p>PCと端末をUSBケーブルで繋いで、下記コマンドを打ってboot.imgを書き込むと Root化完了です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot D:\Nexus\magisk_patched_jEfxA.img</span><br></pre></td></tr></table></figure><p><img src="WS002385.png" alt="fastboot flash boot" loading="lazy"></p><p>楽天Miniと同じ手順ですね。</p><p>Magiskがインストール済に変わっていれば、成功です。</p><p><img src="Screenshot_20210227-210141_Magisk.png" alt="Magiskインストール済" loading="lazy"></p><h4 id="fastboot-モードで端末が認識されない場合は？"><a href="#fastboot-モードで端末が認識されない場合は？" class="headerlink" title="fastboot モードで端末が認識されない場合は？"></a>fastboot モードで端末が認識されない場合は？</h4><p>fastboot モードの端末をPCと接続しても、認識されない事があります。</p><p>デバイスマネージャーを見て、Androidに警告マークが付いていると認識されていない事になっています。</p><p><img src="WS002377.png" alt="ほかのデバイス" loading="lazy"></p><p>その場合はドライバを当てると、正しく認識するようになって、コマンドが通るようになります。</p><p>ドライバは<a href="https://developer.android.com/studio/run/win-usb?hl=ja">こちら</a>からダウンロード出来ます。</p><p><img src="WS002387.png" alt="こちらをクリックして Google USB ドライバの ZIP ファイル（ZIP）をダウンロード" loading="lazy"></p><p>ドライバの更新で「コンピューターを参照してドライバーを検索」を選択して、展開しておいた「usb_driver」をインストールすればOK</p><p><img src="WS002378-1.png" alt="コンピューターを参照してドライバーを検索」" loading="lazy"></p><p><img src="WS002379.png" alt="フォルダの参照" loading="lazy"></p><p><img src="WS002380.png" alt="コンピューター上のドライバーを参照します。" loading="lazy"></p><p><img src="WS002381.png" alt="このデバイスソフトウェアをインストールしますか？" loading="lazy"></p><p><img src="WS002382-1.png" alt="ドライバーが正常に更新されました。" loading="lazy"></p><p>「Android Bootloader Interface」で認識されるようになります。</p><p><img src="WS002384.png" alt="Android Bootloader Interface" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今回は、TWRPを使わないでアンドロイドを Root化する方法を紹介します。&lt;/p&gt;
&lt;h2 id=&quot;対象&quot;&gt;&lt;a href=&quot;#対象&quot; class=&quot;headerlink&quot; title=&quot;対象&quot;&gt;&lt;/a&gt;対象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Bootloaderアンロック済み&lt;</summary>
      
    
    
    
    
    <category term="magisk" scheme="https://noitaro.github.io/tags/magisk/"/>
    
    <category term="rooted" scheme="https://noitaro.github.io/tags/rooted/"/>
    
    <category term="nexus7-2013" scheme="https://noitaro.github.io/tags/nexus7-2013/"/>
    
  </entry>
  
  <entry>
    <title>WPF アプリケーションの多重起動を禁止する</title>
    <link href="https://noitaro.github.io/wpf-multiple-execution-prohibited/"/>
    <id>https://noitaro.github.io/wpf-multiple-execution-prohibited/</id>
    <published>2021-02-23T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.871Z</updated>
    
    <content type="html"><![CDATA[<p>C# でアプリケーションの多重起動を禁止するコードを紹介します。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>WPF App .NET Core 3.1</p><p><img src="WS002373.png" loading="lazy"></p><h2 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h2><p>App.xaml.cs の OnStartup関数をオーバーライドして、下記のコードの様に修正します。</p><p><img src="WS002374.png" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System.Reflection;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Windows;</span><br><span class="line"></span><br><span class="line">namespace WpfApp1</span><br><span class="line">&#123;</span><br><span class="line">    public partial class App : Application</span><br><span class="line">    &#123;</span><br><span class="line">        protected override void OnStartup(StartupEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            // ミューテックス作成</span><br><span class="line">            var mutex = new Mutex(false, Assembly.GetExecutingAssembly().GetName().Name);</span><br><span class="line"></span><br><span class="line">            // ミューテックスの所有権を要求</span><br><span class="line">            if (!mutex.WaitOne(0, false))</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(&quot;このアプリケーションは多重起動出来ません。&quot;);</span><br><span class="line">                Shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>多重起動のテストをするため、デバッグではなく実行ファイルを直接起動します。ビルド結果が保存されているディレクトリを開き、プログラムを起動します。</p><p><img src="WS002375.png" loading="lazy"></p><p>1つ目のプログラムを起動している状態で、2つ目のプログラムを起動させると、メッセージボックスが表示されて、多重起動が出来ない様になっています。</p><p><img src="WS002376.png" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.ipentec.com/document/csharp-singleexec">https://www.ipentec.com/document/csharp-singleexec</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C# でアプリケーションの多重起動を禁止するコードを紹介します。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;p&gt;WPF App .NET Core 3.1&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="wpf" scheme="https://noitaro.github.io/tags/wpf/"/>
    
  </entry>
  
  <entry>
    <title>Nexus7(2013) をまっさらな状態に戻す</title>
    <link href="https://noitaro.github.io/nexus7-2013-factory-image/"/>
    <id>https://noitaro.github.io/nexus7-2013-factory-image/</id>
    <published>2021-02-20T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.331Z</updated>
    
    <content type="html"><![CDATA[<p>Factory Image を焼いて工場出荷時（まっさら）の状態に戻します。</p><p>Google製タブレットの Nexus は、Factory Image が公開されているので、どんな状態でも工場出荷時の状態に戻す事が出来ます。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>まず初めに、必要なアイテムを集めます。</p><h3 id="Factory-Image"><a href="#Factory-Image" class="headerlink" title="Factory Image"></a>Factory Image</h3><p>Nexus7(2013) 用の Factory Image をダウンロードします。</p><p><a href="https://developers.google.com/android/images#razor">Factory Images for Nexus and Pixel Devices</a></p><p>私が持っている Nexus は、Wi-Fiモデル なので 6.0.1 (MOB30X) をダウンロードしました。</p><p><img src="WS002346.png" alt="6.0.1 (MOB30X)" loading="lazy"></p><p>ダウンロードが出来たら展開しておきます。</p><p><img src="WS002347.png" alt="razor-mob30x" loading="lazy"></p><h3 id="SDK-Platform-Tools"><a href="#SDK-Platform-Tools" class="headerlink" title="SDK Platform-Tools"></a>SDK Platform-Tools</h3><p>SDK Platform-Tools 内にある adb.exe等 を使って Nexus を操作します。</p><p><a href="https://developer.android.com/studio/releases/platform-tools.html">SDK Platform-Tools</a></p><p><img src="WS002037.png" alt="SDK Platform-Tools をダウンロード" loading="lazy"></p><p>こちらも展開しておきます。</p><p><img src="WS002039.png" alt="Platform-Tools 展開" loading="lazy"></p><h3 id="データ転送のUSBケーブル（MicroB）"><a href="#データ転送のUSBケーブル（MicroB）" class="headerlink" title="データ転送のUSBケーブル（MicroB）"></a>データ転送のUSBケーブル（MicroB）</h3><p><a href="https://amzn.to/3brMeRH">データ転送のUSBケーブル（MicroB）</a></p><p>Nexus7(2013) は古い端末なので、最近主流の USB TypeC じゃ無いんですよね。うちに転がっていればいいですが。充電用はファイル転送が出来ずダメでした。</p><p><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=wagjxh3et-22&language=ja_JP&l=li1&o=9&a=B0711PVX6Z" loading="lazy"></p><h2 id="工場出荷時の状態に戻す"><a href="#工場出荷時の状態に戻す" class="headerlink" title="工場出荷時の状態に戻す"></a>工場出荷時の状態に戻す</h2><p>必要なファイルが集まったら、作業に取り掛かります。</p><p>まず、展開た Factory Image フォルダに、SDK Platform-Tools内 の下記4つのファイルをコピーします。</p><ul><li>adb.exe</li><li>AdbWinApi.dll</li><li>AdbWinUsbApi.dll</li><li>fastboot.exe</li></ul><p>こんな感じのファイル構成になればOK</p><p><img src="WS002348.png" alt="razor-mob30x" loading="lazy"></p><h3 id="fastboot-モードへ入る"><a href="#fastboot-モードへ入る" class="headerlink" title="fastboot モードへ入る"></a>fastboot モードへ入る</h3><p>続いて、Nexus7 を fastboot モードにします。</p><p>電源が切れている状態で、「電源ボタン＋音量下ボタン」を長押しすると fastboot モードになります。</p><p><img src="PXL_20210220_032531611_2.png" alt="fastboot" loading="lazy"></p><p>fastboot モードになったら、パソコンと Nexus7 を USBケーブル でつなぎます。</p><p>「flash-all.bat」を実行すれば工場出荷時の状態に戻す事が出来ます。</p><p><img src="WS002349.png" alt="flash-all.bat" loading="lazy"></p><h2 id="アンドロイドが認識されない場合"><a href="#アンドロイドが認識されない場合" class="headerlink" title="アンドロイドが認識されない場合"></a>アンドロイドが認識されない場合</h2><p>adb devices と打って offline と表示される場合、USBケーブルに問題がある場合があります。</p><p><img src="WS002350.png" alt="adb devices" loading="lazy"></p><p>というか、私がそうでした。USBケーブルを別のものに変えたら、正常に認識するようになりました。</p><p><img src="WS002351.png" alt="adb devices" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Factory Image を焼いて工場出荷時（まっさら）の状態に戻します。&lt;/p&gt;
&lt;p&gt;Google製タブレットの Nexus は、Factory Image が公開されているので、どんな状態でも工場出荷時の状態に戻す事が出来ます。&lt;/p&gt;
&lt;h2 id=&quot;準備&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="adb" scheme="https://noitaro.github.io/tags/adb/"/>
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="nexus7-2013" scheme="https://noitaro.github.io/tags/nexus7-2013/"/>
    
    <category term="factory-image" scheme="https://noitaro.github.io/tags/factory-image/"/>
    
  </entry>
  
  <entry>
    <title>Nexus7(2013) に LineageOS 18.1 を入れる</title>
    <link href="https://noitaro.github.io/nexus7-2013-lineageos-18-1/"/>
    <id>https://noitaro.github.io/nexus7-2013-lineageos-18-1/</id>
    <published>2021-02-20T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.331Z</updated>
    
    <content type="html"><![CDATA[<p>LineageOS 18.1 は、Android 11 をベースにしたフリーのOSです。</p><p>このサイトを見に来ている人は、多分私より詳しいんじゃないかと思うので詳しい説明要らないですよね。</p><p>LineageOS 18.1 は、Android 11 をベースに作られているので、ちゃんと Nexus7 で動作するのか不安ですが試してみたいと思います。</p><p>結果としては、問題なく動きました。特にカクついて重いことも無く至って良好です。後は、見た目が前のバージョンと殆ど一緒でした。アップデートさせた意味があったのか、疑問が残りました。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>必要なファイルを準備します。</p><h3 id="LineageOS-18-1"><a href="#LineageOS-18-1" class="headerlink" title="LineageOS 18.1"></a>LineageOS 18.1</h3><p><a href="https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-18-1-2021-02-07.3569067/">XDA開発者フォーラム</a></p><p>上記リンクから XDA開発者フォーラム へ行き、UNOFFICIALリンクから LineageOS 18.1 をダウンロードします。</p><p><img src="WS002363.png" alt="lineage-18.1-UNOFFICIAL のダウンロード" loading="lazy"></p><p>Nexus7 はモデルが2種類あるので、自分が持っている端末のモデルと同じものをダウンロードして下さい。</p><ul><li>lineage-18.1-20210207-UNOFFICIAL-deb.zip → LTEモデル</li><li>lineage-18.1-20210207-UNOFFICIAL-flo.zip → Wi-Fiモデル</li></ul><p><img src="WS002364.png" alt="lineage-18.1-UNOFFICIAL のダウンロード" loading="lazy"></p><h4 id="モデルの確認方法"><a href="#モデルの確認方法" class="headerlink" title="モデルの確認方法"></a>モデルの確認方法</h4><p>fastboot モードで分かります。fastboot モードは、電源が切れている状態で「電源ボタン＋音量下ボタン」を長押しすると入れます。</p><p><img src="PXL_20210220_032531611_3.png" alt="モデルの確認" loading="lazy"></p><h3 id="パーティションサイズ変更スクリプト"><a href="#パーティションサイズ変更スクリプト" class="headerlink" title="パーティションサイズ変更スクリプト"></a>パーティションサイズ変更スクリプト</h3><p>システムの容量が大きくなってきて、未変更の状態だと LineageOS 18.1 がインストール出来ないので、パーティションサイズを変更するスクリプトで事前に変更する必要があります。</p><p>このスクリプトを流すと、システム1280MB と キャッシュ120MB の記憶領域が作られます。</p><p>これは1回流せばいいだけなのですが、ちょい手間です。</p><p>ダウンロードは先程と同じ <a href="https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-18-1-2021-02-07.3569067/">XDA開発者フォーラム</a> から出来ます。</p><p>少しスクロールすると「sysrepart_1280_120.zip」リンクがあるので、そこへ飛んで、</p><p><img src="WS002365.png" alt="sysrepart_1280_120.zip リンクを選択" loading="lazy"></p><p>まあ、さっきと同じ Googleドライブなんですけどね。そこから「sysrepart_1280_120.zip」をダウンロードします。</p><p><img src="WS002366.png" alt="sysrepart_1280_120.zip をダウンロード" loading="lazy"></p><h3 id="Open-GApps"><a href="#Open-GApps" class="headerlink" title="Open GApps"></a>Open GApps</h3><p>Google Play を使いたいので、Open GApps も入れます。</p><p>Android 11版の Open GApps はまだテスト版しか無いので <a href="https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-18-1-2021-02-07.3569067/">XDA開発者フォーラム</a> から ARM版のファイルをダウンロードして下さい。</p><p>少しスクロールして Gapps の URLリンクを開いて、</p><p><img src="WS002367.png" alt="Gapps の URLリンクを選択" loading="lazy"></p><p>日付が一番新しいフォルダを開いて、</p><p><img src="WS002368.png" alt="日付が一番新しいフォルダを選択" loading="lazy"></p><p>「open_gapps-arm-11.0-pico-20210130-UNOFFICIAL_TEST.zip」をダウンロードします。日付は若干違うかも知れませんが、問題無いでしょう。</p><p><img src="WS002369.png" alt="open_gapps-arm-11.0-pico-20210130-UNOFFICIAL_TEST.zip をダウンロード" loading="lazy"></p><p>今回は pico版を選びました。pico版に含まれるのは Google Play だけなので、ホント必要最低限のアプリしか入っていません。</p><p>必要になれば Google Play からインストール出来るので、pico版をオススメします。</p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>必要なファイルが揃ったので、早速作業に取り掛かります。</p><h3 id="システム領域の拡張"><a href="#システム領域の拡張" class="headerlink" title="システム領域の拡張"></a>システム領域の拡張</h3><p>まず、システム領域を拡張させます。</p><p>私は前回やっていたので <a href="https://noitaro.github.io/install-nexus-7-2013-android-9/">前回の記事</a> を参考に実施して下さい。</p><p>ちなみに、今の状態はこんな感じでした。上がシステムで下がキャッシュですね。</p><p><img src="WS002370.png" alt="システム領域の確認" loading="lazy"></p><h3 id="TWRP"><a href="#TWRP" class="headerlink" title="TWRP"></a>TWRP</h3><p>まず、TWRPに入ります。</p><p>入り方は色々ありますが、一番簡単な方法でやります。</p><p>電源が切れている状態で、「電源ボタン＋音量下ボタン」を長押しすると fastboot モードになります。</p><p><img src="PXL_20210220_032531611_2.png" alt="fastboot モード" loading="lazy"></p><p>その後、音量大ボタンや音量小ボタンを押して「Recovery mode」に変更して電源ボタンで決定すると TWRP に入る事が出来ます。</p><p><img src="PXL_20210220_032813388_2.png" alt="Recovery mode に変更して電源ボタンで決定" loading="lazy"></p><h3 id="フォーマット"><a href="#フォーマット" class="headerlink" title="フォーマット"></a>フォーマット</h3><p>TWRP に入ったらまずデータをフォーマットをします。不要なファイルがあると不具合の原因になるので。</p><p>メニュー画面の Wipe を選択し、</p><p><img src="16_22_0297upper_1.png" alt="Wipe を選択" loading="lazy"></p><p>Format Data を選択し、</p><p><img src="16_22_4754lower.png" alt="Format Data を選択" loading="lazy"></p><p>キーボードから yes と入力し確定をすると、データがフォーマットされます。</p><p><img src="16_26_4462upper.png" alt="yes と入力し確定をする" loading="lazy"></p><p>データのフォーマットが終わったら、ホームボタンを押して最初のメニュー画面まで戻ります。</p><p><img src="16_27_1664upper.png" alt="ホームボタンを押してメニュー画面まで戻る" loading="lazy"></p><h3 id="ファイルの転送"><a href="#ファイルの転送" class="headerlink" title="ファイルの転送"></a>ファイルの転送</h3><p>データが全て削除されたので、LineageOS 18.1 と Open GApps のファイルを転送します。</p><p>下記コマンドで転送出来ます。ファイルパスは各自変えて下さい。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push D:\Nexus\lineage-18.1-20210207-UNOFFICIAL-flo.zip /sdcard/</span><br><span class="line">adb push D:\Nexus\open_gapps-arm-11.0-pico-20210130-UNOFFICIAL_TEST.zip /sdcard/</span><br></pre></td></tr></table></figure><p><img src="WS002372.png" alt="LineageOS 18.1 と Open GApps のファイルを転送" loading="lazy"></p><p>あと、結構容量が大きいので転送に時間がかかりました。</p><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p>今転送したファイルを Nexus にインストールして行きます。</p><p>メニュー画面の Install を選択し、</p><p><img src="16_22_0297upper_2.png" alt="Install を選択" loading="lazy"></p><p>最初に LineageOS 18.1 をインストールするので「lineage-18.1-20210207-UNOFFICIAL-flo.zip」を選択します。</p><p><img src="16_31_4628upper_1.png" alt="lineage-18.1-20210207-UNOFFICIAL-flo.zip を選択" loading="lazy"></p><p>一緒に Open GApps もインストールするので、Add more Zips を選択してファイル選択画面に戻ります。</p><p><img src="16_32_5118upper.png" alt="Add more Zips を選択" loading="lazy"></p><p>で、次は「open_gapps-arm-11.0-pico-20210130-UNOFFICIAL_TEST.zip」を選択し、</p><p><img src="16_31_4628upper_2.png" alt="open_gapps-arm-11.0-pico-20210130-UNOFFICIAL_TEST.zip を選択" loading="lazy"></p><p>青いボタンを右にスワイプすると、書き込みが開始されます。</p><p><img src="16_33_3091lower.png" alt="青いボタンを右にスワイプ" loading="lazy"></p><h3 id="キャッシュの削除"><a href="#キャッシュの削除" class="headerlink" title="キャッシュの削除"></a>キャッシュの削除</h3><p>書き込みが終わったら Wipe cache&#x2F;delvik を選択して、キャッシュ等の不要ファイルを削除します。残ってると不具合の原因になるからね。</p><p><img src="16_37_2692upper.png" alt="Wipe cache/delvik を選択" loading="lazy"></p><p>先と同じように青いボタンを右にスワイプすると、キャッシュの削除が開始されます。</p><p><img src="16_37_4732upper.png" alt="青いボタンを右にスワイプ" loading="lazy"></p><h3 id="端末の再起動"><a href="#端末の再起動" class="headerlink" title="端末の再起動"></a>端末の再起動</h3><p>キャッシュの削除も無事に終わったら、Reboot System を選択して端末を再起動させます。</p><p><img src="16_38_0540upper.png" alt="Reboot System を選択" loading="lazy"></p><p>ここは必ず Do Not Install を選択しましょう。TWRPアプリがインストールされちゃいます。</p><p><img src="16_38_4355lower.png" alt="Do Not Install を選択" loading="lazy"></p><p>再起動すると、最初だけ結構時間がかかりますが LineageOS 18.1 が立ち上がるはずです。</p><h2 id="LineageOS-18-1-Android-11"><a href="#LineageOS-18-1-Android-11" class="headerlink" title="LineageOS 18.1 (Android 11)"></a>LineageOS 18.1 (Android 11)</h2><p>あんまり Android 10 との違いを感じませんでした。</p><p><img src="Screenshot_20210220-164852_Trebuchet.png" alt="LineageOS 18.1 のホーム画面" loading="lazy"></p><p>ちょっとアプリの間隔が広がった気がします。</p><p><img src="Screenshot_20210220-164908_Trebuchet-1.png" alt="アプリランチャー" loading="lazy"></p><p>ダークモードにしてみました。こんな感じ。</p><p><img src="Screenshot_20210220-165056.png" alt="タブレット情報" loading="lazy"></p><p>もちろん Google Play も問題無く使えます。</p><p><img src="Screenshot_20210220-165133_Google_Play.png" alt="Google Play" loading="lazy"></p><p>ストレージはこんな感じ。システムで 3.4GB 使ってました。</p><p><img src="Screenshot_20210220-165219.png" alt="ストレージ容量 システム 3.4GB" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>あんまり魅力的じゃないですが、新しいもの好きな私は大満足です。</p><p>これでまた1年、タンスの肥やしに出来ます。</p><h3 id="Nexus-7-関連の記事"><a href="#Nexus-7-関連の記事" class="headerlink" title="Nexus 7 関連の記事"></a>Nexus 7 関連の記事</h3><ul><li><a href="https://noitaro.github.io/nexus7-2013-lineageos-18-1/">LineageOS 18.1 (Android 11)</a></li><li><a href="https://noitaro.github.io/nexus-7-2013-lineage-17-android-10/">LineageOS 17 (Android 10)</a></li><li><a href="https://noitaro.github.io/install-nexus-7-2013-android-9/">LineageOS 16 (Android 9)</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-18-1-2021-02-07.3569067/">https://forum.xda-developers.com/t/rom-flo-deb-unofficial-lineageos-18-1-2021-02-07.3569067/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;LineageOS 18.1 は、Android 11 をベースにしたフリーのOSです。&lt;/p&gt;
&lt;p&gt;このサイトを見に来ている人は、多分私より詳しいんじゃないかと思うので詳しい説明要らないですよね。&lt;/p&gt;
&lt;p&gt;LineageOS 18.1 は、Android 11 を</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="twrp" scheme="https://noitaro.github.io/tags/twrp/"/>
    
    <category term="gapps" scheme="https://noitaro.github.io/tags/gapps/"/>
    
    <category term="lineageos" scheme="https://noitaro.github.io/tags/lineageos/"/>
    
    <category term="nexus7-2013" scheme="https://noitaro.github.io/tags/nexus7-2013/"/>
    
  </entry>
  
  <entry>
    <title>WPF 画面のスクリーンショットを取得する</title>
    <link href="https://noitaro.github.io/wpf-screenshot/"/>
    <id>https://noitaro.github.io/wpf-screenshot/</id>
    <published>2021-02-14T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.875Z</updated>
    
    <content type="html"><![CDATA[<p>幅と高さを指定してスクリーンショットを取得する事が出来ます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">using System.Drawing;</span><br><span class="line">using System.Drawing.Imaging;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Windows;</span><br><span class="line">using System.Windows.Media.Imaging;</span><br><span class="line"></span><br><span class="line">namespace WpfApp1</span><br><span class="line">&#123;</span><br><span class="line">    public partial class MainWindow : Window</span><br><span class="line">    &#123;</span><br><span class="line">        public MainWindow()</span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void Button_Click(object sender, RoutedEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            // 矩形領域</span><br><span class="line">            var rectangle = new Rectangle(0, 0, (int)sliderH.Value, (int)sliderV.Value);</span><br><span class="line">            var bitmap = new Bitmap(rectangle.Width, rectangle.Height);</span><br><span class="line">            var graphics = Graphics.FromImage(bitmap);</span><br><span class="line">            graphics.CopyFromScreen(new System.Drawing.Point(rectangle.X, rectangle.Y), new System.Drawing.Point(0, 0), bitmap.Size);</span><br><span class="line">            // グラフィックスの解放</span><br><span class="line">            graphics.Dispose();</span><br><span class="line"></span><br><span class="line">            // 画像の表示</span><br><span class="line">            using (var stream = new MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                bitmap.Save(stream, ImageFormat.Png);</span><br><span class="line">                stream.Seek(0, SeekOrigin.Begin);</span><br><span class="line">                image.Source = BitmapFrame.Create(stream, BitmapCreateOptions.None, BitmapCacheOption.OnLoad);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="WS002344.png" loading="lazy"></p><p><a href="https://github.com/noitaro/wpf-screenshot">ソースコード</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.fenet.jp/dotnet/column/language/4633/">https://www.fenet.jp/dotnet/column/language/4633/</a></p><p><a href="https://water2litter.net/rye/post/c_graphic_bitmap_image/">https://water2litter.net/rye/post/c_graphic_bitmap_image/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;幅と高さを指定してスクリーンショットを取得する事が出来ます。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="wpf" scheme="https://noitaro.github.io/tags/wpf/"/>
    
  </entry>
  
  <entry>
    <title>繰り返し処理を行うヘルパークラス</title>
    <link href="https://noitaro.github.io/retry-helper/"/>
    <id>https://noitaro.github.io/retry-helper/</id>
    <published>2021-02-13T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="まず、通常の処理"><a href="#まず、通常の処理" class="headerlink" title="まず、通常の処理"></a>まず、通常の処理</h2><p>Httpリクエストをして結果を返すだけの処理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Http;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp1</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static async Task Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            if (await HttpGetAsync(&quot;https://www.microsoft.com/&quot;))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($&quot;[&#123;DateTime.Now:HH:mm:ss&#125;] リクエストは正常に処理されました。&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($&quot;[&#123;DateTime.Now:HH:mm:ss&#125;] エラー&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private static async Task&lt;bool&gt; HttpGetAsync(string requestUri)</span><br><span class="line">        &#123;</span><br><span class="line">            using var client = new HttpClient();</span><br><span class="line">            var response = await client.GetAsync(requestUri);</span><br><span class="line">            if (response.StatusCode == HttpStatusCode.OK)</span><br><span class="line">            &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至ってシンプルです。コレを実行しHttpリクエストが成功すると「リクエストは正常に処理されました。」が表示され、失敗すると「エラー」が表示されます。</p><p>成功時</p><p><img src="WS002342.png" loading="lazy"></p><p>失敗時</p><p><img src="WS002343.png" loading="lazy"></p><h2 id="処理の修正"><a href="#処理の修正" class="headerlink" title="処理の修正"></a>処理の修正</h2><p>この処理に「エラーの場合3回までリトライしたい」「リトライ間隔は3秒間」という機能を盛り込みたい場合、愚直に処理を修正してもいいですが「あまりソースを変えたくない」「他にもリトライ機能を付けたい」となると、ちょっと手間だと思います。</p><p>なので、今回は「リトライ機能を持ったヘルパークラス」を作ることにします。</p><h3 id="リトライ機能を持ったヘルパークラス"><a href="#リトライ機能を持ったヘルパークラス" class="headerlink" title="リトライ機能を持ったヘルパークラス"></a>リトライ機能を持ったヘルパークラス</h3><p>クラスはこんな感じになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp1</span><br><span class="line">&#123;</span><br><span class="line">    public static class RepeatHelper</span><br><span class="line">    &#123;</span><br><span class="line">        private const int MAX_REPEAT = 3;</span><br><span class="line">        private const int MILLISECONDS_TIMEOUT = 3000;</span><br><span class="line"></span><br><span class="line">        public static async Task&lt;bool&gt; RepeatProcessAsync(Func&lt;string, Task&lt;bool&gt;&gt; func, string requestUri)</span><br><span class="line">        &#123;</span><br><span class="line">            var count = 0;</span><br><span class="line">            while (count &lt; MAX_REPEAT)</span><br><span class="line">            &#123;</span><br><span class="line">                if (count != 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    // 初回以降インターバルを設定</span><br><span class="line">                    await Task.Delay(MILLISECONDS_TIMEOUT);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (await func(requestUri))</span><br><span class="line">                &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine($&quot;[&#123;DateTime.Now:HH:mm:ss&#125;] リクエストエラーのため、リトライ処理に入ります。&quot;);</span><br><span class="line"></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使い方はこんな感じです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//if (await HttpGetAsync(&quot;https://www.microsoft.com/&quot;))</span><br><span class="line">// ↓↓↓</span><br><span class="line">// リトライヘルパークラスを使って処理をする。</span><br><span class="line">if (await RetryHelper.RetryProcessAsync(HttpGetAsync, &quot;https://www.microsoft.com/&quot;))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine($&quot;[&#123;DateTime.Now:HH:mm:ss&#125;] リクエストは正常に処理されました。&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine($&quot;[&#123;DateTime.Now:HH:mm:ss&#125;] エラー&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RetryHelper.RetryProcessAsync に、関数と引数を渡して処理します。</p><p>このように、3秒間隔でリトライして3回失敗したらエラーになりました。</p><p><img src="WS002341.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>処理を単純に修正するのもいいですが、直感的に分かりやすい処理を目指すのも有りかと思います。</p><p>まあ、人それぞれなので強要は出来ませんがね。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;まず、通常の処理&quot;&gt;&lt;a href=&quot;#まず、通常の処理&quot; class=&quot;headerlink&quot; title=&quot;まず、通常の処理&quot;&gt;&lt;/a&gt;まず、通常の処理&lt;/h2&gt;&lt;p&gt;Httpリクエストをして結果を返すだけの処理。&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
  </entry>
  
  <entry>
    <title>WPF WebView2 ローカルファイルを読み込む</title>
    <link href="https://noitaro.github.io/wpf-webview2-load-local-file/"/>
    <id>https://noitaro.github.io/wpf-webview2-load-local-file/</id>
    <published>2021-01-30T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.887Z</updated>
    
    <content type="html"><![CDATA[<p>WebView2 でローカルファイルを読み込んで、WPFとWebView2でデータの受け渡しを試してみました。</p><h2 id="完成形"><a href="#完成形" class="headerlink" title="完成形"></a>完成形</h2><p>Blocklyでビジュアルプログラミングをして、JavaScriptを実行してみました。フッター部で Blockly で作ったソースコードを表示しています。</p><p><img src="wpf-webview2-load-local-file.gif" loading="lazy"></p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ol><li>WebView2 でローカルファイルを読み込んでいます。</li><li>AvalonEdit に WebView2 から JavaScript を受け取って表示しています。</li><li>JavaScript実行ボタンを押すと、AvalonEdit の JavaScript を WebView2 に投げて実行しています。</li></ol><p><img src="WS002338.png" loading="lazy"></p><h2 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h2><ul><li>Windows 10 Home 20H2</li><li>Visual Studio Community 2019</li><li>.NET Core 3.1</li><li><a href="https://docs.microsoft.com/ja-jp/microsoft-edge/webview2/">Microsoft.Web.WebView2</a> 1.0.721-prerelease</li><li><a href="http://avalonedit.net/">AvalonEdit</a> 6.0.1</li><li><a href="https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit">MaterialDesignThemes</a> 3.2.0</li></ul><h2 id="機能説明"><a href="#機能説明" class="headerlink" title="機能説明"></a>機能説明</h2><p>じっくり知りたい人は、GitHub からソースコードをダウンロードして下さい。</p><p>ここではさっくり説明します。</p><h3 id="WebView2-でローカルファイルを読み込む"><a href="#WebView2-でローカルファイルを読み込む" class="headerlink" title="WebView2 でローカルファイルを読み込む"></a>WebView2 でローカルファイルを読み込む</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 実行ディレクトリを取得</span><br><span class="line">var currentDirectory = Environment.CurrentDirectory;</span><br><span class="line"></span><br><span class="line">// ローカルファイルのURIを作成</span><br><span class="line">var uri = new Uri($&quot;&#123;currentDirectory&#125;/AppData/index.html&quot;);</span><br><span class="line"></span><br><span class="line">// WebView2にローカルファイルのURIを設定</span><br><span class="line">webView.CoreWebView2.Navigate(uri.AbsoluteUri);</span><br></pre></td></tr></table></figure><p>注意する点としては、ローカルファイルは絶対パスで指定してあげましょう。</p><p>あと、実行ディレクトリ内の index.html を参照するため、出力ディレクトリにコピーする設定に変えておきます。</p><p><img src="WS002339.png" loading="lazy"></p><h3 id="WebView2-からデータを受け取る"><a href="#WebView2-からデータを受け取る" class="headerlink" title="WebView2 からデータを受け取る"></a>WebView2 からデータを受け取る</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    InitializeAsync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async void InitializeAsync()</span><br><span class="line">&#123;</span><br><span class="line">    // WebView2の初期化が終わるまで待機</span><br><span class="line">    await webView.EnsureCoreWebView2Async(null);</span><br><span class="line"></span><br><span class="line">    // window.chrome.webview.postMessage を受け取るイベント設定</span><br><span class="line">    webView.CoreWebView2.WebMessageReceived += CoreWebView2_WebMessageReceived;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void CoreWebView2_WebMessageReceived(object sender, CoreWebView2WebMessageReceivedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    // Webから受け取ったデータをAvalonEditに設定</span><br><span class="line">    textEditor.Text = e.TryGetWebMessageAsString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webView-CoreWebView2-WebMessageReceived"><a href="#webView-CoreWebView2-WebMessageReceived" class="headerlink" title="webView.CoreWebView2.WebMessageReceived"></a>webView.CoreWebView2.WebMessageReceived</h4><p>webView.CoreWebView2.WebMessageReceived このイベントで WebView2 からデータを受け取ることが出来ます。</p><h3 id="WebView2-にデータを渡す"><a href="#WebView2-にデータを渡す" class="headerlink" title="WebView2 にデータを渡す"></a>WebView2 にデータを渡す</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView.CoreWebView2.ExecuteScriptAsync(&quot;runCode()&quot;);</span><br></pre></td></tr></table></figure><p>今回は、JavaScript実行ボタンを押した時に、WebView2側の「runCodeファンクション」を実行するようにしています。</p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p><a href="https://github.com/noitaro/wpf-webview2-load-local-file">ソースコード</a></p><p><a href="https://github.com/noitaro/wpf-webview2-load-local-file/releases">実行ファイル</a></p><p><img src="WS002340.png" loading="lazy"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.microsoft.com/ja-jp/microsoft-edge/webview2/gettingstarted/wpf">https://docs.microsoft.com/ja-jp/microsoft-edge/webview2/gettingstarted/wpf</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WebView2 でローカルファイルを読み込んで、WPFとWebView2でデータの受け渡しを試してみました。&lt;/p&gt;
&lt;h2 id=&quot;完成形&quot;&gt;&lt;a href=&quot;#完成形&quot; class=&quot;headerlink&quot; title=&quot;完成形&quot;&gt;&lt;/a&gt;完成形&lt;/h2&gt;&lt;p&gt;Blo</summary>
      
    
    
    
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="wpf" scheme="https://noitaro.github.io/tags/wpf/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
    <category term="webview2" scheme="https://noitaro.github.io/tags/webview2/"/>
    
    <category term="blockly" scheme="https://noitaro.github.io/tags/blockly/"/>
    
  </entry>
  
  <entry>
    <title>WPF WebView2 特定のサイトのみを表示する</title>
    <link href="https://noitaro.github.io/wpf-webview2-only-display/"/>
    <id>https://noitaro.github.io/wpf-webview2-only-display/</id>
    <published>2021-01-24T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.891Z</updated>
    
    <content type="html"><![CDATA[<p>WebView2 を使うと、ページ遷移時のリクエスト情報を見る事が出来ます。</p><p>なので、その時に遷移して欲しく無いページだった場合キャンセルをすれば、ページ遷移せずに今のページに踏みとどまる事が出来ます。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="https://noitaro.github.io/wpf-webview2/">WPF WebView2 を試す</a></li><li><a href="https://noitaro.github.io/wpf-webview2-auto-login/">WPF WebView2 自動ログインを作る</a></li><li><a href="https://noitaro.github.io/wpf-webview2-auto-image-save/">WPF WebView2 開いたページの画像を自動保存する</a></li></ul><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 20H2</li><li>Visual Studio Community 2019</li><li>.NET Core 3.1</li><li><a href="https://www.nuget.org/packages/Microsoft.Web.WebView2/1.0.721-prerelease">WebView2 1.0.721-prerelease</a></li></ul><h2 id="NavigationStarting-を実装する"><a href="#NavigationStarting-を実装する" class="headerlink" title="NavigationStarting を実装する"></a>NavigationStarting を実装する</h2><p>ページ遷移が始まると、一番最初に <a href="https://docs.microsoft.com/ja-jp/microsoft-edge/webview2/concepts/navigation-events">NavigationStarting</a> イベントが呼ばれます。その時にイベントキャンセルをすればページ遷移を止める事が出来ます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.Web.WebView2.Core;</span><br><span class="line">using System;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Windows;</span><br><span class="line"></span><br><span class="line">namespace wpf_webview2</span><br><span class="line">&#123;</span><br><span class="line">    public partial class MainWindow : Window</span><br><span class="line">    &#123;</span><br><span class="line">        public MainWindow()</span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            InitializeAsync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        async void InitializeAsync()</span><br><span class="line">        &#123;</span><br><span class="line">            await webView.EnsureCoreWebView2Async(null);</span><br><span class="line">            webView.CoreWebView2.NewWindowRequested += CoreWebView2_NewWindowRequested;</span><br><span class="line">            webView.CoreWebView2.NavigationStarting += CoreWebView2_NavigationStarting;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void CoreWebView2_NewWindowRequested(object sender, CoreWebView2NewWindowRequestedEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            // リンク先を新しいウィンドウで開かなくする。</span><br><span class="line">            e.Handled = true;</span><br><span class="line"></span><br><span class="line">            // リンク先をメイン画面のWebView2で開く。</span><br><span class="line">            webView.CoreWebView2.Navigate(e.Uri);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void CoreWebView2_NavigationStarting(object sender, CoreWebView2NavigationStartingEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.WriteLine($&quot;NavigationStarting: &#123;e.Uri&#125;&quot;);</span><br><span class="line">            var uri = new Uri(e.Uri);</span><br><span class="line"></span><br><span class="line">            // 移動先がpixiv以外の場合は、ページ遷移をキャンセルする。</span><br><span class="line">            if (!uri.Host.Contains(&quot;pixiv&quot;))</span><br><span class="line">            &#123;</span><br><span class="line">                webView.CoreWebView2.ExecuteScriptAsync($&quot;alert(&#x27;pixiv以外のページを表示する事は出来ません。&#x27;)&quot;);</span><br><span class="line">                e.Cancel = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="WS002330.png" alt="NavigationStarting を実装する" loading="lazy"></p><p>広告等をクリックして pixiv 以外のページを表示しようとすると、ちゃんと動作している事が分かります。</p><p><img src="WS002331.png" alt="pixiv以外のページを表示する事は出来ません。" loading="lazy"></p><h2 id="新しいウィンドウを制御する"><a href="#新しいウィンドウを制御する" class="headerlink" title="新しいウィンドウを制御する"></a>新しいウィンドウを制御する</h2><p>また今回の実装中、新しいウィンドウでページ遷移する事が多々ありました。どのタイミングでそうなるのかは調査してません。</p><p><img src="WS002332.png" alt="新しいウィンドウを制御する" loading="lazy"></p><p>こんな感じで新しいウィンドウが出てしまいます。</p><h3 id="NewWindowRequested-を実装する"><a href="#NewWindowRequested-を実装する" class="headerlink" title="NewWindowRequested を実装する"></a>NewWindowRequested を実装する</h3><p>それを回避するために NewWindowRequested イベントで制御をするようにしました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void CoreWebView2_NewWindowRequested(object sender, CoreWebView2NewWindowRequestedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    // リンク先を新しいウィンドウで開かなくする。</span><br><span class="line">    e.Handled = true;</span><br><span class="line"></span><br><span class="line">    // リンク先をメイン画面のWebView2で開く。</span><br><span class="line">    webView.CoreWebView2.Navigate(e.Uri);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Handled プロパティに true を設定する事によって、新しいウィンドウが表示されなくなります。</p><p>しかし、それだけだとページ遷移が無くなってしまうので、メイン画面の Navigate に遷移先のURLを設定して、メインの WebView2 をページ遷移するようにしました。</p><p>こうする事で、新しいウィンドウが出なくなりページ遷移も正しくされるようになっています。</p><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p><a href="https://github.com/noitaro/wpf-webview2-only-display">GitHub</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WebView2 を使うと、ページ遷移時のリクエスト情報を見る事が出来ます。&lt;/p&gt;
&lt;p&gt;なので、その時に遷移して欲しく無いページだった場合キャンセルをすれば、ページ遷移せずに今のページに踏みとどまる事が出来ます。&lt;/p&gt;
&lt;h2 id=&quot;関連記事&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="wpf" scheme="https://noitaro.github.io/tags/wpf/"/>
    
  </entry>
  
  <entry>
    <title>WPF WebView2 開いたページの画像を自動保存する</title>
    <link href="https://noitaro.github.io/wpf-webview2-auto-image-save/"/>
    <id>https://noitaro.github.io/wpf-webview2-auto-image-save/</id>
    <published>2021-01-23T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.875Z</updated>
    
    <content type="html"><![CDATA[<p>WebView2 を使うと、開いたページのレスポンス情報を取得する事が出来ます。</p><p>レスポンス情報にはHTMLのURLや、画像、JavaScript、CSSなど、ホームページに必要な色々なものが流れてくるので、その中から画像のみを自動で保存する事をやってみたいと思います。</p><p>この機能を使えば、Twitter や Pixiv を巡回するだけでフォルダの中に画像が貯まっていきます。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="https://noitaro.github.io/wpf-webview2/">WPF WebView2 を試す</a></li><li><a href="https://noitaro.github.io/wpf-webview2-auto-login/">WPF WebView2 自動ログインを作る</a></li></ul><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 20H2</li><li>Visual Studio Community 2019</li><li>.NET Core 3.1</li><li><a href="https://www.nuget.org/packages/Microsoft.Web.WebView2/1.0.721-prerelease">WebView2 1.0.721-prerelease</a></li></ul><h3 id="レスポンス情報を取得するにあたって"><a href="#レスポンス情報を取得するにあたって" class="headerlink" title="レスポンス情報を取得するにあたって"></a>レスポンス情報を取得するにあたって</h3><p>今回、WebView2 の「<a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.core.corewebview2.webresourceresponsereceived?view=webview2-dotnet-1.0.721-prerelease">WebResourceResponseReceived</a>」イベントを使いますが、バージョン 1.0.721-prerelease 版で実装されたイベントハンドラーなので、これより古いバージョンだと実装する事が出来ません。</p><p>試す場合は 1.0.721-prerelease 以降のバージョンを使って下さい。</p><h3 id="WebView2-1-0-721-prerelease-を入れる"><a href="#WebView2-1-0-721-prerelease-を入れる" class="headerlink" title="WebView2 1.0.721-prerelease を入れる"></a>WebView2 1.0.721-prerelease を入れる</h3><p>今はまだプレリリースなので NuGet のパッケージ管理 から入れることが出来ません。</p><p>なので今回は、NuGet の パッケージマネージャーコンソール から入れます。</p><p><img src="WS002326.png" alt="ツール &gt; NuGetパッケージマネージャー &gt; パッケージマネージャーコンソール" loading="lazy"></p><p>ツール &gt; NuGetパッケージマネージャー &gt; パッケージマネージャーコンソール</p><p>パッケージマネージャーコンソール に下記をコピペすると、WebView2 1.0.721-prerelease がインストールされます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package Microsoft.Web.WebView2 -Version 1.0.721-prerelease</span><br></pre></td></tr></table></figure><p><img src="WS002327.png" alt="Install-Package Microsoft.Web.WebView2 -Version 1.0.721-prerelease" loading="lazy"></p><p>これで準備完了。</p><h2 id="WebResourceResponseReceived-を実装する"><a href="#WebResourceResponseReceived-を実装する" class="headerlink" title="WebResourceResponseReceived を実装する"></a>WebResourceResponseReceived を実装する</h2><p>WebView2 の WebResourceResponseReceived を実装して行きます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.Web.WebView2.Core;</span><br><span class="line">using System;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Windows;</span><br><span class="line"></span><br><span class="line">namespace wpf_webview2</span><br><span class="line">&#123;</span><br><span class="line">    public partial class MainWindow : Window</span><br><span class="line">    &#123;</span><br><span class="line">        public MainWindow()</span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            InitializeAsync();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        async void InitializeAsync()</span><br><span class="line">        &#123;</span><br><span class="line">            await webView.EnsureCoreWebView2Async(null);</span><br><span class="line">            webView.CoreWebView2.WebResourceResponseReceived += CoreWebView2_WebResourceResponseReceived;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private async void CoreWebView2_WebResourceResponseReceived(object sender, CoreWebView2WebResourceResponseReceivedEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            // URL の末尾が jpg か png のみ、画像を保存する。</span><br><span class="line">            if (e.Request.Uri.EndsWith(&quot;jpg&quot;) || e.Request.Uri.EndsWith(&quot;png&quot;))</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.WriteLine($&quot;WebResourceResponseReceived: &#123;e.Request.Uri&#125;&quot;);</span><br><span class="line"></span><br><span class="line">                // フォルダが無ければ作成する。</span><br><span class="line">                if (!File.Exists(&quot;img&quot;)) Directory.CreateDirectory(&quot;img&quot;);</span><br><span class="line"></span><br><span class="line">                var uri = new Uri(e.Request.Uri);</span><br><span class="line"></span><br><span class="line">                // 非同期でレスポンス画像を取得する。</span><br><span class="line">                using (var stream = await e.Response.GetContentAsync())</span><br><span class="line">                &#123;</span><br><span class="line">                    using (var fileStream = new FileStream($&quot;img/&#123;uri.Segments.Last()&#125;&quot;, FileMode.Create, FileAccess.Write))</span><br><span class="line">                    &#123;</span><br><span class="line">                        // ストリームをファイルに保存する。</span><br><span class="line">                        stream.CopyTo(fileStream);</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="WS002328.png" alt="WebResourceResponseReceived を実装する" loading="lazy"></p><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>では、実行して Pixiv を巡回してみます。</p><p><img src="WS002329.png" alt="WPF WebView2 開いたページの画像を自動保存する" loading="lazy"></p><p>こんな感じで、ネットを巡回するだけで画像が保存されるようになりました。</p><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p><a href="https://github.com/noitaro/wpf-webview2-auto-image-save">GitHub</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WebView2 を使うと、開いたページのレスポンス情報を取得する事が出来ます。&lt;/p&gt;
&lt;p&gt;レスポンス情報にはHTMLのURLや、画像、JavaScript、CSSなど、ホームページに必要な色々なものが流れてくるので、その中から画像のみを自動で保存する事をやってみたいと</summary>
      
    
    
    
    
    <category term="automation" scheme="https://noitaro.github.io/tags/automation/"/>
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
  </entry>
  
  <entry>
    <title>WPF WebView2 自動ログインを作る</title>
    <link href="https://noitaro.github.io/wpf-webview2-auto-login/"/>
    <id>https://noitaro.github.io/wpf-webview2-auto-login/</id>
    <published>2021-01-17T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.879Z</updated>
    
    <content type="html"><![CDATA[<p>WebView2 を使うと、C#側から JavaScript を挿入する事が出来るので、開いたページを JavaScript で操作出来ます。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="https://noitaro.github.io/wpf-webview2/">WPF WebView2 を試す</a></li></ul><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><p>ログインボタンを押したら、IDとパスワードを自動で入力してログインする。</p><p><img src="wpf-webview2-auto-login.gif" alt="自動ログイン" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 20H2</li><li>Visual Studio Community 2019</li><li>.NET Core 3.1</li><li><a href="https://www.nuget.org/packages/Microsoft.Web.WebView2/1.0.721-prerelease">Microsoft.Web.WebView2 1.0.721-prerelease</a></li></ul><h2 id="JavaScript-を挿入する"><a href="#JavaScript-を挿入する" class="headerlink" title="JavaScript を挿入する"></a>JavaScript を挿入する</h2><p>C#側から JavaScript を挿入するには、下記コードを使用します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView.CoreWebView2.ExecuteScriptAsync($&quot;alert(&#x27;挿入されたアラートダイアログ！&#x27;)&quot;);</span><br></pre></td></tr></table></figure><p>例えば、上記コードをボタン押下時に実行するとこんな感じになります。</p><p>あたかも Googleページがアラートを出した感じがしますが、挿入した JavaScript が出したものです。</p><p><img src="WS002313.png" alt="アラートダイアログの確認" loading="lazy"></p><p>コレを応用して、ボタンを押したら自動ログインする機能を実装します。</p><h2 id="ログイン画面の調査"><a href="#ログイン画面の調査" class="headerlink" title="ログイン画面の調査"></a>ログイン画面の調査</h2><p>自動ログインを作るっと言っても、まずは調査から始まります。当たり前ですね。</p><p>とりあえず今回は <a href="https://www.pixiv.net/">pixiv</a> に自動ログイン出来るようにします。pixiv はログインがザルなので簡単なんです。Yahoo とか Google は、2段階認証とかがあってちょっと難しいので今回はパス。</p><h3 id="ログインには何が必要なのか？"><a href="#ログインには何が必要なのか？" class="headerlink" title="ログインには何が必要なのか？"></a>ログインには何が必要なのか？</h3><p>pixiv にログインするには何が必要なのか？</p><p>ログインページ を見れば一発で分かりますね。「ID」「パスワード」それと「ログイン」ボタンです。</p><p><img src="WS002315.png" alt="ログイン画面の確認" loading="lazy"></p><h3 id="調査方法"><a href="#調査方法" class="headerlink" title="調査方法"></a>調査方法</h3><p>調査方法は簡単。「ID」「パスワード」「ログイン」が特定出来れば OK なのです。</p><p>まず、Chrome で <a href="https://accounts.pixiv.net/login">pixivログインページ</a> を開いて、ID のところを右クリック「検証」を選択する。</p><p><img src="WS002316.png" alt="検証を選択" loading="lazy"></p><p>そうすると、Chrome の DevTools が表示されます。</p><p>しかも ID のソースの部分が表示されているので、ID のソースの部分を右クリックして「Copy &gt; Copy JS path」を選択します。</p><p><img src="WS002319.png" alt="Copy &gt; Copy JS path を選択" loading="lazy"></p><p>これで、ID を特定できる JavaScript がクリップボードにコピーされました。</p><p>一度、メモ帳に貼り付けて置きます。</p><p>多分こんなコードが張り付くんじゃないでしょうか。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector(&quot;#LoginComponent &gt; form &gt; div.input-field-group &gt; div:nth-child(1) &gt; input[type=text]&quot;)</span><br></pre></td></tr></table></figure><p>同じ要領で パスワード と ログインボタン も調べます。最終的に、こんな感じになれば OK です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector(&quot;#LoginComponent &gt; form &gt; div.input-field-group &gt; div:nth-child(1) &gt; input[type=text]&quot;)</span><br><span class="line">document.querySelector(&quot;#LoginComponent &gt; form &gt; div.input-field-group &gt; div:nth-child(2) &gt; input[type=password]&quot;)</span><br><span class="line">document.querySelector(&quot;#LoginComponent &gt; form &gt; button&quot;)</span><br></pre></td></tr></table></figure><p><img src="WS002320.png" alt="メモ帳修正1" loading="lazy"></p><h2 id="少し整形"><a href="#少し整形" class="headerlink" title="少し整形"></a>少し整形</h2><p>このままでもいいんですが、後々のために少し整形して置きます。</p><h3 id="“-ダブルクォート-を-‘-シングルクォート-に置換"><a href="#“-ダブルクォート-を-‘-シングルクォート-に置換" class="headerlink" title="“ (ダブルクォート) を ‘ (シングルクォート) に置換"></a>“ (ダブルクォート) を ‘ (シングルクォート) に置換</h3><p>C# のソースに貼り付けた時に “ (ダブルクォート) だと問題があるので、事前に ‘ (シングルクォート) に置換して置きます。</p><p>カッコの中にある 6箇所 ですね。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector(&#x27;#LoginComponent &gt; form &gt; div.input-field-group &gt; div:nth-child(1) &gt; input[type=text]&#x27;)</span><br><span class="line">document.querySelector(&#x27;#LoginComponent &gt; form &gt; div.input-field-group &gt; div:nth-child(2) &gt; input[type=password]&#x27;)</span><br><span class="line">document.querySelector(&#x27;#LoginComponent &gt; form &gt; button&#x27;)</span><br></pre></td></tr></table></figure><p><img src="WS002321.png" alt="メモ帳修正2" loading="lazy"></p><h3 id="inputタグ-には-value-を、buttonタグ-には-click-を追加"><a href="#inputタグ-には-value-を、buttonタグ-には-click-を追加" class="headerlink" title="inputタグ には value を、buttonタグ には click を追加"></a>inputタグ には value を、buttonタグ には click を追加</h3><p>このままだと、まだ「場所が特定出来た」に過ぎないので、inputタグ には value を、buttonタグ には click を追加します。</p><p>inputタグ は文字が入力できるので、value に入力させたい文字を設定して置きます。今回の場合は IDとパスワードです。buttonタグ はクリックさせたいので click を追加します。で、行の末尾に ; (セミコロン) を入れます。</p><p>こんな感じになれば OK です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector(&#x27;#LoginComponent &gt; form &gt; div.input-field-group &gt; div:nth-child(1) &gt; input[type=text]&#x27;).value = &#x27;★★★ ID ★★★&#x27;;</span><br><span class="line">document.querySelector(&#x27;#LoginComponent &gt; form &gt; div.input-field-group &gt; div:nth-child(2) &gt; input[type=password]&#x27;).value = &#x27;★★★ パスワード ★★★&#x27;;</span><br><span class="line">document.querySelector(&#x27;#LoginComponent &gt; form &gt; button&#x27;).click();</span><br></pre></td></tr></table></figure><p><img src="WS002323.png" alt="メモ帳修正3" loading="lazy"></p><h2 id="ログイン機能の実装"><a href="#ログイン機能の実装" class="headerlink" title="ログイン機能の実装"></a>ログイン機能の実装</h2><p>ここまで出来たら、後は C#側に貼り付けるだけです。</p><p>「MainWindow.xaml」にボタンを置いて、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;wpf_webview2.MainWindow&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span><br><span class="line">        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span><br><span class="line">        xmlns:local=&quot;clr-namespace:wpf_webview2&quot;</span><br><span class="line">        xmlns:wv2=&quot;clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf&quot;</span><br><span class="line">        mc:Ignorable=&quot;d&quot;</span><br><span class="line">        Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;764&quot;&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;wv2:WebView2 Name=&quot;webView&quot; Source=&quot;https://accounts.pixiv.net/login&quot; Margin=&quot;0,55,0,0&quot;/&gt;</span><br><span class="line">        &lt;Button Content=&quot;ログイン&quot; Width=&quot;50&quot; Height=&quot;50&quot; VerticalAlignment=&quot;Top&quot; HorizontalAlignment=&quot;Left&quot; Click=&quot;Button_Click&quot;/&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure><p><img src="WS002324.png" alt="MainWindow.xaml にボタン追加" loading="lazy"></p><p>コードビハインド に Button_Clickイベント を書きます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void Button_Click(object sender, RoutedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">  // IDを自動入力する.</span><br><span class="line">  webView.CoreWebView2.ExecuteScriptAsync($&quot;document.querySelector(&#x27;#LoginComponent &gt; form &gt; div.input-field-group &gt; div:nth-child(1) &gt; input[type=text]&#x27;).value = &#x27;★★★ ID ★★★&#x27;;&quot;);</span><br><span class="line">  // パスワードを自動入力する.</span><br><span class="line">  webView.CoreWebView2.ExecuteScriptAsync($&quot;document.querySelector(&#x27;#LoginComponent &gt; form &gt; div.input-field-group &gt; div:nth-child(2) &gt; input[type=password]&#x27;).value = &#x27;★★★ パスワード ★★★&#x27;;&quot;);</span><br><span class="line">  // ログインをする.</span><br><span class="line">  webView.CoreWebView2.ExecuteScriptAsync($&quot;document.querySelector(&#x27;#LoginComponent &gt; form &gt; button&#x27;).click();&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="WS002325.png" alt="コードビハインド に Button_Clickイベント を追加" loading="lazy"></p><p>F5キーで実行して、左上のログインボタンを押すと 自動ログイン する事が確認出来ます。</p><p><img src="wpf-webview2-auto-login.gif" alt="自動ログイン" loading="lazy"></p><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><a href="https://github.com/noitaro/wpf-webview2-auto-login">https://github.com/noitaro/wpf-webview2-auto-login</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WebView2 を使うと、C#側から JavaScript を挿入する事が出来るので、開いたページを JavaScript で操作出来ます。&lt;/p&gt;
&lt;h2 id=&quot;関連記事&quot;&gt;&lt;a href=&quot;#関連記事&quot; class=&quot;headerlink&quot; title=&quot;関連記事&quot;</summary>
      
    
    
    
    
    <category term="automation" scheme="https://noitaro.github.io/tags/automation/"/>
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
  </entry>
  
  <entry>
    <title>WPF WebView2 を試す</title>
    <link href="https://noitaro.github.io/wpf-webview2/"/>
    <id>https://noitaro.github.io/wpf-webview2/</id>
    <published>2021-01-16T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.891Z</updated>
    
    <content type="html"><![CDATA[<p>WebView2 を使うと、Windowsアプリ に HTML、CSS、JavaScript を埋め込むことができます。 web で培った技術を Windowsアプリ に活かす事が出来るので、とっても魅力的だと思っています。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 20H2</li><li>Visual Studio Community 2019</li><li>.NET Core 3.1</li><li><a href="https://www.nuget.org/packages/Microsoft.Web.WebView2/1.0.721-prerelease">Microsoft.Web.WebView2 1.0.721-prerelease</a></li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>WebView2 を使うには <a href="https://developer.microsoft.com/ja-jp/microsoft-edge/webview2/">WebView2ランタイム</a> のインストールが必要です。</p><p>ダウンロードページに行って少しスクロールすると、ダウンロードリンクがあるので、自分の環境にあったインストーラーをダウンロードしインストールしておきます。</p><h3 id="エバーグリーン-ブートストラップ"><a href="#エバーグリーン-ブートストラップ" class="headerlink" title="エバーグリーン ブートストラップ"></a>エバーグリーン ブートストラップ</h3><p>ブートストラップ版は、インストール時に必要なファイルをダウンロードするタイプです。なので、インストーラーのサイズは小さいですが、インストール時にインターネットに繋がっている必要があります。</p><h3 id="エバーグリーン-スタンドアロン-インストーラー"><a href="#エバーグリーン-スタンドアロン-インストーラー" class="headerlink" title="エバーグリーン スタンドアロン インストーラー"></a>エバーグリーン スタンドアロン インストーラー</h3><p>スタンドアロン版は、ブートストラップと違いインストーラーに必要なファイルが全て含まれているため、ファイルサイズが大きいのが特徴です。そのため、インターネットに繋がっていなくてもインストールする事が出来ます。</p><p>お好きな方をダウンロードして下さい。私はスタンドアロンが好きなので断然こっちですね。</p><p><img src="WS002304.png" alt="エバーグリーン スタンドアロン インストーラー ダウンロード" loading="lazy"></p><p><img src="WS002305.png" alt="Microsoft Edge WebView2 Runtime ダウンロード" loading="lazy"></p><h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><p>ダウンロードした実行ファイルを開くと、インストールが開始されます。ボタン操作は必要ありませんでした。</p><p><img src="WS002306-1.png" alt="Microsoft Edge WebView2 Runtime インストール" loading="lazy"></p><h2 id="WebView2-を使ったアプリを作る"><a href="#WebView2-を使ったアプリを作る" class="headerlink" title="WebView2 を使ったアプリを作る"></a>WebView2 を使ったアプリを作る</h2><p>今回は WPFアプリケーション を作成します。</p><p>プロジェクト作成時に「WPF App (.NET)」を選びます。</p><p><img src="WS002307.png" alt="WPF App (.NET)" loading="lazy"></p><p>プロジェクトが出来上がったら、NuGet（ナゲット） を使って WebView2 SDK をプロジェクトに追加します。</p><p><img src="WS002308.png" alt="「ツール &gt; NuGetパッケージマネージャー &gt; ソリューションのNuGetパッケージの管理」" loading="lazy"></p><p>「ツール &gt; NuGetパッケージマネージャー &gt; ソリューションのNuGetパッケージの管理」</p><p>参照タブを選んで「Microsoft.Web.WebView2」を検索して WebView2 をインストールします。</p><p><img src="WS002309.png" alt="Microsoft.Web.WebView2" loading="lazy"></p><p><img src="WS002310.png" alt="変更のプレビュー" loading="lazy"></p><p>これで WebView2 を使ったアプリを作る準備が出来ました。</p><h3 id="画面に-WebView2-を追加する"><a href="#画面に-WebView2-を追加する" class="headerlink" title="画面に WebView2 を追加する"></a>画面に WebView2 を追加する</h3><p>ここからアプリ開発に入ります。</p><p>まず「MainWindow.xaml」をデザイナーで開きます。</p><p><img src="WS002311.png" alt="MainWindow.xaml をデザイナーで開く" loading="lazy"></p><p>Windowタグ内に WebView2 XAML の名前空間を追加します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:wv2=&quot;clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf&quot;</span><br></pre></td></tr></table></figure><p>こんな感じになれば OK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;wpf_webview2.MainWindow&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span><br><span class="line">        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span><br><span class="line">        xmlns:local=&quot;clr-namespace:wpf_webview2&quot;</span><br><span class="line">        xmlns:wv2=&quot;clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf&quot;</span><br><span class="line">        mc:Ignorable=&quot;d&quot;</span><br><span class="line">        Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure><p>次に WebView2コントロールを追加して、Sourceプロパティ に初期URLを設定します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;wv2:WebView2 Name=&quot;webView&quot; Source=&quot;https://www.google.com/&quot;/&gt;</span><br></pre></td></tr></table></figure><p>こんな感じになれば OK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;wpf_webview2.MainWindow&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span><br><span class="line">        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span><br><span class="line">        xmlns:local=&quot;clr-namespace:wpf_webview2&quot;</span><br><span class="line">        xmlns:wv2=&quot;clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf&quot;</span><br><span class="line">        mc:Ignorable=&quot;d&quot;</span><br><span class="line">        Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;&gt;</span><br><span class="line">    &lt;Grid&gt;</span><br><span class="line">        &lt;wv2:WebView2 Name=&quot;webView&quot; Source=&quot;https://www.google.com/&quot;/&gt;</span><br><span class="line">    &lt;/Grid&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure><p>F5キーを押して実行すると Google のホームページが表示されると思います。</p><p><img src="WS002312.png" alt="webview2 確認" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.microsoft.com/ja-jp/microsoft-edge/webview2/">https://docs.microsoft.com/ja-jp/microsoft-edge/webview2/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WebView2 を使うと、Windowsアプリ に HTML、CSS、JavaScript を埋め込むことができます。 web で培った技術を Windowsアプリ に活かす事が出来るので、とっても魅力的だと思っています。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="wpf" scheme="https://noitaro.github.io/tags/wpf/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】3Dモデルをアニメーションさせる</title>
    <link href="https://noitaro.github.io/unity-3d-model-animation/"/>
    <id>https://noitaro.github.io/unity-3d-model-animation/</id>
    <published>2021-01-09T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.687Z</updated>
    
    <content type="html"><![CDATA[<p>Unity の勉強がてら 3Dモデルをアニメーションさせます。</p><p><img src="unity-3d-model-animation.gif" alt="3Dモデルのアニメーション" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 20H2</li><li>Unity 2020.2.0f1</li></ul><h2 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h2><p>今回は 3Dテンプレート で作成します。</p><p><img src="WS002285.png" alt="3Dテンプレート" loading="lazy"></p><h2 id="3Dモデル読み込み"><a href="#3Dモデル読み込み" class="headerlink" title="3Dモデル読み込み"></a>3Dモデル読み込み</h2><p>まず、Assetsフォルダ内 に3Dモデルを保存する空フォルダを作ります。</p><p><img src="WS002287.png" alt="空フォルダを作成" loading="lazy"></p><p>今作った空フォルダ（Models）内に、拡張子が「fbx」のファイルをドラッグします。</p><p><img src="WS002289.png" alt="拡張子が「fbx」のファイルをドラッグ" loading="lazy"></p><p>今回お借りした 3Dモデルは「<a href="https://free3d.com/3d-model/lowpoly-cat-rigged-run-animation-756268.html">Lowpoly Cat Rigged + Run Animation 3Dモデル</a>」です。ダウンロードと展開を事前に済ませておきました。</p><h2 id="3Dモデル配置"><a href="#3Dモデル配置" class="headerlink" title="3Dモデル配置"></a>3Dモデル配置</h2><p>3Dモデルを Unity の3D空間に配置します。</p><p>「Assets &gt; Models」フォルダ内の cat_rigged を 左のツリーにドラッグすると配置出来ます。</p><p><img src="WS002290.png" alt="cat_rigged を 左のツリーにドラッグ" loading="lazy"></p><p>ついでに床も作っちゃいます。</p><p>左のツリーで「SampleScene」を選択し、右クリックから「ゲームオブジェクト &gt; 3Dオブジェクト &gt; 平面」を選択し、平面を追加します。</p><p><img src="WS002292.png" alt="ゲームオブジェクト &gt; 3Dオブジェクト &gt; 平面" loading="lazy"></p><p>ここまで出来たら、試しに実行してみます。</p><p>まだ、アニメーションしていないですよ。</p><p><img src="WS002293.png" alt="試しに実行" loading="lazy"></p><h2 id="アニメーション設定"><a href="#アニメーション設定" class="headerlink" title="アニメーション設定"></a>アニメーション設定</h2><p>3Dモデルにアニメーションを設定します。</p><p>Modelsフォルダ内で右クリックをして「作成 &gt; アニメーターコントローラー」を作ります。名前は「cat_rigged」にしました。</p><p><img src="WS002295.png" alt="作成 &gt; アニメーターコントローラー" loading="lazy"></p><p>作ったアニメーターコントローラーをダブルクリックすると、アニメーターパネルが開きます。</p><p>3Dモデルのアニメーションをアニメーターパネルにドラッグして、アニメーションを設定します。</p><p><img src="WS002297.png" alt="3Dモデルのアニメーションをアニメーターパネルにドラッグ" loading="lazy"></p><p>次に、3Dモデルに アニメーターコンポーネント を追加します。</p><p>左のツリーで cat_rigged を選択して、インスペクターの「コンポーネントを追加」ボタンを押下。</p><p><img src="WS002300.png" alt="コンポーネントを追加" loading="lazy"></p><p>「その他 &gt; アニメーター」を選択して、アニメーターコンポーネント を追加します。</p><p><img src="WS002298.png" alt="その他 &gt; アニメーター" loading="lazy"></p><p>アセットタブのアニメーターコントローラーを選択します。前に作った「cat_rigged」がアニメーターコントローラーです。</p><p><img src="WS002301.png" alt="アニメーターコントローラーを選択" loading="lazy"></p><p>これで、走るようになりましたがループ設定が出来ていないので、すぐ止まってしまいます。</p><p><img src="unity-3d-model-animation.gif" alt="3Dモデルのアニメーション" loading="lazy"></p><h3 id="ループ設定"><a href="#ループ設定" class="headerlink" title="ループ設定"></a>ループ設定</h3><p>アセットの3Dモデル内にあるアニメーションクリップ（Animation Clip）を選択して「Edit」ボタンを押すと、アニメーションの設定を変更することが出来ます。</p><p><img src="WS002302.png" alt="Animation Clip を選択して Edit ボタンを押す" loading="lazy"></p><p>「時間をループ」にチェックを入れるとアニメーションがループするようになります。</p><p><img src="WS002303.png" alt="時間をループにチェックを入れる" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Unity の勉強がてら 3Dモデルをアニメーションさせます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;unity-3d-model-animation.gif&quot; alt=&quot;3Dモデルのアニメーション&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="unity" scheme="https://noitaro.github.io/tags/unity/"/>
    
    <category term="3d-model" scheme="https://noitaro.github.io/tags/3d-model/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】カメラを WASDキー で動かせるようにする</title>
    <link href="https://noitaro.github.io/unity-wasd-control/"/>
    <id>https://noitaro.github.io/unity-wasd-control/</id>
    <published>2021-01-02T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.707Z</updated>
    
    <content type="html"><![CDATA[<p>PCゲームのFPSや、1人称視点、3人称視点のゲームで 自キャラを操作するときのアレです。</p><p><a href="https://assetstore.unity.com/packages/essentials/asset-packs/standard-assets-for-unity-2018-4-32351">アセット</a> であったので試しに入れてみました。</p><p>アセットのバージョンが古いので少し修正が必要ですが、アセットだけでカメラ操作が出来るのは魅力的です。</p><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ul><li>マウスで向きを変える</li><li>スペースキーでジャンプ</li><li>W、A、S、Dキーで歩く</li><li>シフトキーでダッシュ</li></ul><p><img src="unity-wasd-control.gif" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 20H2</li><li>Unity 2020.2.0f1</li></ul><h2 id="導入"><a href="#導入" class="headerlink" title="導入"></a>導入</h2><h3 id="Standard-Assets"><a href="#Standard-Assets" class="headerlink" title="Standard Assets"></a>Standard Assets</h3><p>アセットを導入します。</p><p>「ウィンドウ &gt; アセットストア」を選択して、アセットストアを開きます。</p><p><img src="WS002269.png" alt="ウィンドウ &gt; アセットストア" loading="lazy"></p><p>「<a href="https://assetstore.unity.com/packages/essentials/asset-packs/standard-assets-for-unity-2018-4-32351">Standard Assets</a>」を検索して「Add to My Assets」でダウンロードします。</p><p><img src="WS002270.png" alt="Add to My Assets" loading="lazy"></p><p>Unity に戻り「ウィンドウ &gt; パッケージマネージャー」を選択して、パッケージマネージャーを開きます。</p><p><img src="WS002271.png" alt="ウィンドウ &gt; パッケージマネージャー" loading="lazy"></p><p>左上のパッケージ項目を「マイアセット」に変更して、</p><p><img src="WS002272.png" alt="マイアセットに変更" loading="lazy"></p><p>左のリストから「Standard Assets (for Unity 2018.4)」を選択して、右下の「インポート」ボタンを押します。</p><p><img src="WS002273.png" alt="Standard Assets (for Unity 2018.4)" loading="lazy"></p><p>リストに表示されない場合は、更新ボタンを押すとリストに表示されます。</p><p>全てインポートします。</p><p><img src="WS002275.png" alt="インポート" loading="lazy"></p><h2 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h2><p>今回のアセットはバージョンが古いので、ソースコードの修正が必要です。</p><h3 id="エラーメッセージ"><a href="#エラーメッセージ" class="headerlink" title="エラーメッセージ"></a>エラーメッセージ</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assets\\Standard Assets\\Utility\\SimpleActivatorMenu.cs(11,16): error CS0619: &#x27;GUIText&#x27; is obsolete: &#x27;GUIText has been removed. Use UI.Text instead.&#x27;</span><br></pre></td></tr></table></figure><p>コンソールのエラー行をダブルクリックして、ソースコードを開きます。</p><p><img src="WS002277.png" alt="エラー行をダブルクリック" loading="lazy"></p><p>SimpleActivatorMenu.cs の GUIText が古くて使えないみたいです。</p><p><img src="WS002279.png" alt="GUIText が古くて使えない" loading="lazy"></p><p>2箇所修正をすると、エラーが無くなります。</p><ol><li>usingステートメントに「using UnityEngine.UI;」を追加。</li><li>GUIText を「Text」に変更。</li></ol><p><img src="WS002280.png" alt="GUIText を Text に変更" loading="lazy"></p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>エラーが無くなったので Standard Assets が使えるようになりました。</p><p>カメラの競合を防ぐために「Main Camera」を削除します。</p><p><img src="WS002281.png" alt="Main Camera を削除" loading="lazy"></p><p>アセットフォルダ内の「Standard Assets &gt; Characters &gt; FirstPersonCharacter &gt; Prefabs」 にある「FPSController」を Scene にドラッグすれば完成です。</p><p><img src="WS002282.png" alt="FPSController を Scene にドラッグ" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.ame-name.com/archives/370">https://www.ame-name.com/archives/370</a></p><p><a href="https://connect.unity.com/p/standard-assets-guitexture-and-guitext-are-obsolete">https://connect.unity.com/p/standard-assets-guitexture-and-guitext-are-obsolete</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PCゲームのFPSや、1人称視点、3人称視点のゲームで 自キャラを操作するときのアレです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/essentials/asset-packs/standard-asset</summary>
      
    
    
    
    
    <category term="unity" scheme="https://noitaro.github.io/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>Chrome リモート デスクトップ を使って Linux Mint に接続する</title>
    <link href="https://noitaro.github.io/chrome-remotedesktop-linux-mint/"/>
    <id>https://noitaro.github.io/chrome-remotedesktop-linux-mint/</id>
    <published>2020-12-29T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.859Z</updated>
    
    <content type="html"><![CDATA[<p>Chrome リモート デスクトップ を使って Linux Mint に接続する個人的メモです。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li><a href="http://linuxmint-jp.net/">Linux Mint</a> をインストール済みであること。</li></ul><h2 id="Chrome-ブラウザ-をインストール-する"><a href="#Chrome-ブラウザ-をインストール-する" class="headerlink" title="Chrome ブラウザ をインストール する"></a>Chrome ブラウザ をインストール する</h2><p>Linux Mint で <a href="https://www.google.com/intl/ja_jp/chrome/">Chromeブラウザダウンロードページ</a> を開いて「Chrome をダウンロード」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-14-37-56.png" alt="Chrome をダウンロード" loading="lazy"></p><p>「64 ビット .deb (Debian&#x2F;Ubuntu 用)」にチェックを入れて「同意してインストール」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-14-43-14.png" alt="64 ビット .deb (Debian/Ubuntu 用)" loading="lazy"></p><p>「GDebi パッケージインストーラー」を選んだ状態で「OK」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-15-15-24.png" alt="GDebi パッケージインストーラー" loading="lazy"></p><p>Google Chrome の「パッケージをインストール」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-15-17-55-1.png" alt="パッケージをインストール" loading="lazy"></p><p>ユーザのパスワードを入れて「認証する」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-15-19-34.png" alt="パスワードを入れて「認証する」ボタンを押下" loading="lazy"></p><p>追加ソフトウェアのインストールが必要な場合があります。その場合は「続行」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-15-25-29.png" alt="追加ソフトウェアのインストール" loading="lazy"></p><p>こんな画面が出れば、Google Chrome のインストール完了。</p><p><img src="Screenshot-at-2020-12-29-15-26-01.png" alt="Google Chrome のインストール完了" loading="lazy"></p><p>起動方法は、左下のメニューから「全てのアプリケーション &gt; インターネット &gt; Google Chrome」の順番に選択して、起動させる事が出来ます。</p><p><img src="WS002245.png" alt="全てのアプリケーション &gt; インターネット &gt; Google Chrome の順番に選択" loading="lazy"></p><p>初回起動時「Google Chrome を既定のブラウザにする」にチェックを入れて「OK」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-15-40-42.png" alt="Google Chrome を既定のブラウザにする にチェック" loading="lazy"></p><h2 id="Chrome-リモート-デスクトップ-をインストール-する"><a href="#Chrome-リモート-デスクトップ-をインストール-する" class="headerlink" title="Chrome リモート デスクトップ をインストール する"></a>Chrome リモート デスクトップ をインストール する</h2><p>続いて Chrome の リモート デスクトップ をインストールします。</p><p>先程インストールした Chrome で「<a href="https://remotedesktop.google.com/">https://remotedesktop.google.com/</a>」を開く。</p><p>「リモート アクセス」をクリック。</p><p><img src="Screenshot-at-2020-12-29-18-06-45.png" alt="リモート アクセス" loading="lazy"></p><p>Google にログインしていない場合はログインをする。</p><p><img src="Screenshot-at-2020-12-29-18-08-40.png" alt="Google にログイン" loading="lazy"></p><p>ログイン後、リモートアクセスの設定から ダウンロードボタンを押して、Chrome リモート デスクトップ をダウンロードする。</p><p><img src="Screenshot-at-2020-12-29-18-13-51.png" alt="Chrome リモート デスクトップ をダウンロード" loading="lazy"></p><p>Chrome リモート デスクトップ ツールのダウンロード中に、Chrome ウェブストア の 拡張機能「Chrome Remote Desktop」が表示されるので「Chrome に追加」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-18-16-11.png" alt="Chrome Remote Desktop" loading="lazy"></p><p>権限の確認が出るので「拡張機能を追加」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-18-19-01-2.png" alt="拡張機能を追加ボタンを押下" loading="lazy"></p><p>拡張機能「Chrome Remote Desktop」のインストールが終わったら元の画面に戻り、</p><p>「リモートアクセスの設定」のボタンが変わっているので「同意してインストール」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-18-24-40.png" alt="同意してインストールボタンを押下" loading="lazy"></p><p>「ダウンロードしたファイルを開く」か確認が出るので「はい」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-18-26-24.png" alt="ダウンロードしたファイルを開く" loading="lazy"></p><p>Google Chrome Remote Desktop の「パッケージをインストール」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-18-33-27.png" alt="パッケージをインストール" loading="lazy"></p><p>ユーザのパスワードを入れて「認証する」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-18-35-46.png" alt="認証する" loading="lazy"></p><p>追加ソフトウェアのインストールが必要な場合があります。その場合は「続行」ボタンを押下。</p><p><img src="Screenshot-at-2020-12-29-18-39-08.png" alt="追加ソフトウェアのインストール" loading="lazy"></p><p>こんな画面が出れば、Google Chrome Remote Desktop のインストール完了。</p><p><img src="Screenshot-at-2020-12-29-18-40-37.png" alt="Google Chrome Remote Desktop インストール完了" loading="lazy"></p><p>元のブラウザに戻って、表示用の名前を入力して、</p><p><img src="Screenshot-at-2020-12-29-18-43-28.png" alt="表示用の名前を入力" loading="lazy"></p><p>リモート接続時に入力する PIN を入力して、</p><p><img src="Screenshot-at-2020-12-29-18-43-56.png" alt="PIN を入力" loading="lazy"></p><p>ユーザのパスワードを入れて「認証する」ボタンを押下して、</p><p><img src="Screenshot-at-2020-12-29-18-44-07.png" alt="認証する" loading="lazy"></p><p>こんな画面になれば完了。</p><p><img src="Screenshot-at-2020-12-29-18-45-18.png" alt="Windows や タブレットから リモート接続することが出来る" loading="lazy"></p><p>Windows や タブレットから リモート接続することが出来るようになりました。</p><h2 id="Chrome-リモート-デスクトップ-の設定を変更する"><a href="#Chrome-リモート-デスクトップ-の設定を変更する" class="headerlink" title="Chrome リモート デスクトップ の設定を変更する"></a>Chrome リモート デスクトップ の設定を変更する</h2><p>このままでもいいのですが、少し設定を変えると使い勝手が格段に向上します。</p><p>今のままでリモート接続をすると、新規に仮想デスクトップが立ち上がってしまいます。</p><p><img src="WS002247-1.png" alt="新規に仮想デスクトップが立ち上がる" loading="lazy"></p><p>こんな感じで リモート接続をすると、まっさらになってしまいます。</p><p><img src="WS002249.png" loading="lazy"></p><p>なので、少し設定を変えてあげます。</p><h3 id="Chrome-Remote-Desktop-を停止させる"><a href="#Chrome-Remote-Desktop-を停止させる" class="headerlink" title="Chrome Remote Desktop を停止させる"></a>Chrome Remote Desktop を停止させる</h3><p>修正する前に、Chrome Remote Desktop を停止させます。</p><p>ターミナルに下記コマンドを入力すると Chrome Remote Desktop を停止させることが出来ます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/google/chrome-remote-desktop/chrome-remote-desktop --stop</span><br></pre></td></tr></table></figure><p><img src="Screenshot-at-2020-12-29-19-05-40.png" alt="Chrome Remote Desktop を停止" loading="lazy"></p><h3 id="chrome-remote-desktop-ファイルを修正する"><a href="#chrome-remote-desktop-ファイルを修正する" class="headerlink" title="chrome-remote-desktop ファイルを修正する"></a>chrome-remote-desktop ファイルを修正する</h3><p>ファイルマネージャから「ファイルシステム &gt; opt &gt; google &gt; chrome-remote-desktop」のディレクトリまで移動して、</p><p><img src="Screenshot-at-2020-12-29-19-09-24.png" alt="ファイルシステム &gt; opt &gt; google &gt; chrome-remote-desktop" loading="lazy"></p><p>ファイル &gt; Open as Administrator を選択して、ファイルマネージャを管理者権限に変更します。</p><p><img src="WS002251.png" alt="ファイル &gt; Open as Administrator" loading="lazy"></p><p>管理者権限にしないと、ファイルを編集することが出来ないのです。</p><p>警告画面が出るので「OK」ボタンを押下して,</p><p><img src="WS002252.png" alt="警告画面が出るので「OK」ボタンを押下" loading="lazy"></p><p>ユーザのパスワードを入れて「認証する」ボタンを押下すると、</p><p><img src="WS002253.png" loading="lazy"></p><p>管理者権限のファイルマネージャが開きます。</p><p>ファイルマネージャ に管理者権限があると「スーパーユーザ」と表示されます。</p><p><img src="Screenshot-at-2020-12-29-19-46-41.png" alt="スーパーユーザと表示される" loading="lazy"></p><p>「chrome-remote-desktop」ファイルを選択して、右クリックから「開く」を押下。</p><p><img src="WS002254.png" alt="chrome-remote-desktopを開く" loading="lazy"></p><p>「表示する」を押下して、テキストエディタで開きます。</p><p><img src="WS002255.png" alt="表示する" loading="lazy"></p><h4 id="108行目"><a href="#108行目" class="headerlink" title="108行目"></a>108行目</h4><p>「chrome-remote-desktop」ファイルを3箇所修正して行きます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FIRST_X_DISPLAY_NUMBER = 20</span><br><span class="line">を</span><br><span class="line">FIRST_X_DISPLAY_NUMBER = 0</span><br></pre></td></tr></table></figure><p><img src="Screenshot-at-2020-12-29-19-55-37.png" alt="FIRST_X_DISPLAY_NUMBER" loading="lazy"></p><h4 id="451、452行目"><a href="#451、452行目" class="headerlink" title="451、452行目"></a>451、452行目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while os.path.exists(X_LOCK_FILE_TEMPLATE % display):</span><br><span class="line">display += 1</span><br><span class="line">をコメントアウト</span><br></pre></td></tr></table></figure><p><img src="Screenshot-at-2020-12-29-20-03-14.png" alt="コメントアウト" loading="lazy"></p><h4 id="750、751行目"><a href="#750、751行目" class="headerlink" title="750、751行目"></a>750、751行目</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def launch_session(self, x_args):</span><br><span class="line">  self._init_child_env()</span><br><span class="line">  self._setup_pulseaudio()</span><br><span class="line">  self._setup_gnubby()</span><br><span class="line">  self._launch_x_server(x_args)</span><br><span class="line">  self._launch_x_session()</span><br><span class="line">を</span><br><span class="line">def launch_session(self, x_args):</span><br><span class="line">  self._init_child_env()</span><br><span class="line">  self._setup_pulseaudio()</span><br><span class="line">  self._setup_gnubby()</span><br><span class="line">#  self._launch_x_server(x_args) ← コメントアウト</span><br><span class="line">#  self._launch_x_session() ← コメントアウト</span><br><span class="line">  display = self.get_unused_display_number() ← 行追加</span><br><span class="line">  self.child_env[&quot;DISPLAY&quot;] = &quot;:%d&quot; % display ← 行追加</span><br></pre></td></tr></table></figure><p><img src="Screenshot-at-2020-12-29-20-08-14.png" alt="行追加" loading="lazy"></p><p>3箇所の修正が終わったら、保存をして完了。</p><p><img src="Screenshot-at-2020-12-29-20-12-43.png" alt="保存をして完了" loading="lazy"></p><h3 id="Chrome-Remote-Desktop-を起動させる"><a href="#Chrome-Remote-Desktop-を起動させる" class="headerlink" title="Chrome Remote Desktop を起動させる"></a>Chrome Remote Desktop を起動させる</h3><p>再度 Chrome Remote Desktop を起動させます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/google/chrome-remote-desktop/chrome-remote-desktop --start</span><br></pre></td></tr></table></figure><p><img src="Screenshot-at-2020-12-29-20-16-43.png" alt="Chrome Remote Desktop を起動" loading="lazy"></p><p>これで、リモート接続をしても新規の仮想デスクトップは立ち上がらずに、今ログインしているユーザを引き継ぐことが出来ます。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://almighty.hatenablog.jp/entry/2020/07/27/165831">https://almighty.hatenablog.jp/entry/2020/07/27/165831</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Chrome リモート デスクトップ を使って Linux Mint に接続する個人的メモです。&lt;/p&gt;
&lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="chrome" scheme="https://noitaro.github.io/tags/chrome/"/>
    
    <category term="linux" scheme="https://noitaro.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>【Unity】ブラウザと相互連携を実装する</title>
    <link href="https://noitaro.github.io/unity-webgl-internal/"/>
    <id>https://noitaro.github.io/unity-webgl-internal/</id>
    <published>2020-12-20T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.723Z</updated>
    
    <content type="html"><![CDATA[<p>Unity でブラウザゲームが作れる事を知ったので、簡単ながら試してみました。</p><p>しかも、Unity 2018.2 から WebAssembly(wasm) で出力されるようになったので、今までより格段に早く動作するみたいです。</p><h2 id="今回の目標"><a href="#今回の目標" class="headerlink" title="今回の目標"></a>今回の目標</h2><p>Unity から ブラウザを操作</p><p><img src="webgl-internal-1.gif" alt="Unity から ブラウザを操作" loading="lazy"></p><p>ブラウザから Unity を操作</p><p><img src="webgl-internal-2.gif" alt="ブラウザから Unity を操作" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 20H2</li><li>Unity 2020.2.0f1</li></ul><h2 id="WebGL-ビルド-を有効にする"><a href="#WebGL-ビルド-を有効にする" class="headerlink" title="WebGL ビルド を有効にする"></a>WebGL ビルド を有効にする</h2><p>まず初めに、Unity でブラウザゲーム を作るために WebGL ビルド を有効にします。</p><p>メニューの ファイル &gt; ビルド設定 の順で選択し、</p><p><img src="WS002204.png" alt="ファイル &gt; ビルド設定" loading="lazy"></p><p>プラットフォームを WebGL にして「Unity Hub でインストール」を選択します。</p><p><img src="20201220_1.png" alt="Unity Hub でインストール を選択" loading="lazy"></p><p>既に、WebGL をインストールしており ビルド設定が出来る状態なら、この作業を飛ばしても大丈夫です。</p><h3 id="WebGL-をインストール"><a href="#WebGL-をインストール" class="headerlink" title="WebGL をインストール"></a>WebGL をインストール</h3><p>Unity Hub が起動したら「WebGL Build Support」にチェックを入れて、実行を押します。</p><p><img src="WS002192-1.png" alt="WebGL Build Support にチェック" loading="lazy"></p><p>WebGL がインストールされます。</p><p>HTML5 のアイコンが表示されればOK。</p><p><img src="WS002193.png" alt="HTML5 のアイコンが表示される" loading="lazy"></p><p>Unity を再起動したら WebGLビルド が出来るようになります。</p><p><img src="WS002196.png" alt="WebGLビルド" loading="lazy"></p><h2 id="相互連携を実装する"><a href="#相互連携を実装する" class="headerlink" title="相互連携を実装する"></a>相互連携を実装する</h2><p>では早速、相互連携を実装して行きたいと思います。</p><h3 id="Unity側"><a href="#Unity側" class="headerlink" title="Unity側"></a>Unity側</h3><h4 id="背景色を単色に変更"><a href="#背景色を単色に変更" class="headerlink" title="背景色を単色に変更"></a>背景色を単色に変更</h4><p>Unity の背景を単色に変更します。</p><p>そのままでもいいのですが、あまり好きじゃないので単色に変更しました。</p><p>左側の「Main Camera」を選択してから、右側の クリアフラグ を「ソリッドカラー」に変更します。</p><p>で、その下の 背景項目 を変えれば、ゲーム中の背景色を変えることが出来ます。</p><p><img src="WS002205.png" alt="クリアフラグ を「ソリッドカラー」に変更" loading="lazy"></p><h4 id="InputField"><a href="#InputField" class="headerlink" title="InputField"></a>InputField</h4><p>Unity で文字入力をしたい場合は InputField を使います。</p><p>左側の「Canvas」を選択してから、右クリックをして UI &gt; 入力フィールド の順で選択します。</p><p><img src="WS002206.png" alt="UI &gt; 入力フィールド の順で選択" loading="lazy"></p><p>今回は InputField に処理を追加しないので、そのまま置いておきます。</p><p><img src="WS002207.png" alt="InputField" loading="lazy"></p><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><p>イベントを発火させるための 定番 Button を設置します。</p><p>InputField と同じ感じで、左側の「Canvas」を選択してから、右クリックをして UI &gt; X ボタン の順で選択します。</p><p><img src="WS002208.png" alt="UI &gt; X ボタン の順で選択" loading="lazy"></p><p>こんな感じになればOK。</p><p><img src="WS002209.png" alt="Button" loading="lazy"></p><p>実行してみるとこんな感じ。</p><p><img src="WS002214.png" alt="Unity 実行確認" loading="lazy"></p><h4 id="スクリプトファイルを作成する"><a href="#スクリプトファイルを作成する" class="headerlink" title="スクリプトファイルを作成する"></a>スクリプトファイルを作成する</h4><p>次に、今作ったボタンにイベントを設定して行きます。</p><p>Assetsフォルダ内に「Scripts」フォルダを作って、</p><p><img src="WS002211.png" alt="Scriptsフォルダ作成" loading="lazy"></p><p>Scriptsフォルダ内で右クリックをして、作成 &gt; C# スクリプト の順で選択します。</p><p><img src="WS002212.png" alt="作成 &gt; C# スクリプト の順で選択" loading="lazy"></p><p>ファイル名は「NewBehaviourScript」のまま変えず。メンドくさいので。</p><p><img src="WS002213.png" alt="ファイル名は「NewBehaviourScript」のまま" loading="lazy"></p><p>VS Code 等のテキストエディッタで開いて、下記ソースをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line">public class NewBehaviourScript : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [DllImport(&quot;__Internal&quot;)]</span><br><span class="line">    private static extern void JavaScriptAlert(string str);</span><br><span class="line"></span><br><span class="line">    public InputField inputField;</span><br><span class="line"></span><br><span class="line">    public void OnClick()</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(inputField.text);</span><br><span class="line">#if !UNITY_EDITOR &amp;&amp; UNITY_WEBGL</span><br><span class="line">        JavaScriptAlert(inputField.text);</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void FocusCanvas(string p_focus)</span><br><span class="line">    &#123;</span><br><span class="line">#if !UNITY_EDITOR &amp;&amp; UNITY_WEBGL</span><br><span class="line">        if (p_focus == &quot;0&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            WebGLInput.captureAllKeyboardInput = false;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            WebGLInput.captureAllKeyboardInput = true;</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void SetInputFieldText(string text)</span><br><span class="line">    &#123;</span><br><span class="line">        inputField.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="処理の説明"><a href="#処理の説明" class="headerlink" title="処理の説明"></a>処理の説明</h5><p>下記処理は、JavaScript の関数を実行するための宣言になります。 JavaScript に書かれている JavaScriptAlert を呼び出せるようにしています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[DllImport(&quot;__Internal&quot;)]</span><br><span class="line">private static extern void JavaScriptAlert(string str);</span><br></pre></td></tr></table></figure><p>下記コードで括った処理は、ブラウザで実行した時にしか動作しません。 コレが無いと Unity 上でエラーになるので気をつけましょう。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#if !UNITY_EDITOR &amp;&amp; UNITY_WEBGL</span><br><span class="line">    // 処理</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>FocusCanvas と SetInputFieldText は JavaScript から呼び出されることを想定して作っています。</p><h4 id="ボタンにイベントを設定する"><a href="#ボタンにイベントを設定する" class="headerlink" title="ボタンにイベントを設定する"></a>ボタンにイベントを設定する</h4><p>では、今作った処理をボタンに設定して、動くようにします。</p><p>左側の Canvas内から「Button」を選択してから、右側の コンポーネントを追加 &gt; スクリプト を選択し、</p><p><img src="WS002216.png" alt="コンポーネントを追加 &gt; スクリプト を選択" loading="lazy"></p><p>先程作った「New Behaviour Script」を選択します。</p><p><img src="WS002217.png" alt="New Behaviour Script を選択" loading="lazy"></p><p>こんな感じに、ボタンに New Behaviour Script (スクリプト) コンポーネント が追加されればOK。</p><p><img src="WS002218.png" alt="New Behaviour Script (スクリプト) コンポーネント" loading="lazy"></p><p>次に、今のスクリプトに InputField を関連付けさせます。</p><p>New Behaviour Script (スクリプト) コンポーネント の 入力フィールド にある マルをクリックし、</p><p><img src="WS002219.png" alt="New Behaviour Script (スクリプト) コンポーネント の 入力フィールド にある マルをクリック" loading="lazy"></p><p>Select InputField ダイアログが表示されるので、「シーン」タブを選択し InputField を選びます。</p><p><img src="WS002220.png" alt="「シーン」タブを選択し InputField を選択" loading="lazy"></p><p>New Behaviour Script (スクリプト) コンポーネント の 入力フィールド が「なし (入力フィールド)」から「InputField (Input Field)」に変わればOK。</p><h5 id="ボタンクリック時のイベント設定"><a href="#ボタンクリック時のイベント設定" class="headerlink" title="ボタンクリック時のイベント設定"></a>ボタンクリック時のイベント設定</h5><p>最後に、ボタンをクリックしたらどの関数を発火させるかを設定します。</p><p>ボタンのクリック時の ＋(プラス) を押して、リストを追加します。</p><p><img src="WS002221.png" alt="＋(プラス) を押して、リストを追加" loading="lazy"></p><p>こんな感じに 設定箇所が 1つ 追加されます。</p><p><img src="WS002222.png" alt="追加確認" loading="lazy"></p><p>先程と同様で マルをクリックし、Select Object から「シーン」タブを選んで、Button を選択します。</p><p><img src="WS002223.png" alt="「シーン」タブを選んで、Button を選択" loading="lazy"></p><p>「なし (オブジェクト)」から「Button」になればOK。</p><p><img src="WS002224.png" alt="「なし (オブジェクト)」から「Button」" loading="lazy"></p><p>「No Function」をクリックし NewBehaviourScript &gt; OnClick の順で選択して行きます。</p><p><img src="WS002225.png" alt="NewBehaviourScript &gt; OnClick の順で選択" loading="lazy"></p><p>こんな感じになれば、イベントの設定は完了です！</p><p><img src="WS002226.png" alt="イベント設定完了" loading="lazy"></p><h3 id="ブラウザ側"><a href="#ブラウザ側" class="headerlink" title="ブラウザ側"></a>ブラウザ側</h3><p>次に、ブラウザ側で動作するスクリプトを作って行きます。</p><p>Assetsフォルダに「Plugins」フォルダを作り、</p><p><img src="WS002228.png" alt="Pluginsフォルダを作成" loading="lazy"></p><p>Windows のエクスプローラで開きます。</p><p><img src="WS002229.png" alt="Windows のエクスプローラで開く" loading="lazy"></p><p>何も無いところで右クリックをして 新規作成 &gt;テキスト ドキュメント を選択し、空のテキストファイルを作成します。</p><p><img src="WS002231.png" alt="新規作成 &gt;テキスト ドキュメント を選択" loading="lazy"></p><p>ファイル名は「JavaScriptLibrary.jslib」にします。</p><p><img src="WS002232.png" alt="ファイル名は「JavaScriptLibrary.jslib」" loading="lazy"></p><p>拡張子も「jslib」に変更するので、ダイアログが出ますが「はい」を選択します。</p><p><img src="WS002233.png" alt="拡張子変更確認ダイアログ" loading="lazy"></p><p>拡張子が非表示の場合は、表示タブの「ファイル名拡張子」にチェックを入れると、表示されるようになります。</p><p><img src="WS002235.png" alt="表示タブの「ファイル名拡張子」にチェックを入れる" loading="lazy"></p><p>今作った「JavaScriptLibrary.jslib」をテキストエディタで開いて、下記コードをコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mergeInto(LibraryManager.library, &#123;</span><br><span class="line">  JavaScriptAlert: function (str) &#123;</span><br><span class="line">    window.alert(Pointer_stringify(str));</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h3><p>ここまで来たら、もう少しで完成です！ 頑張って！！！</p><p>WebGL を使って ブラウザ向けにビルドします。</p><p>メニューから ファイル &gt; ビルド設定 を開き、</p><p><img src="WS002204.png" alt="ファイル &gt; ビルド設定" loading="lazy"></p><p>プラットフォームを「WebGL」に変更し、開発ビルドにチェックを入れてから ビルドボタンを押します。</p><p><img src="WS002236.png" alt="プラットフォームを「WebGL」に変更しビルド" loading="lazy"></p><p>ビルド先フォルダを聞かれるので、新規で「web」フォルダを作り、その中にビルドしてもらいます。</p><p><img src="WS002238.png" alt="「web」フォルダを作る" loading="lazy"></p><p>ビルドが正常に完了すると、下記ファイルが出力されます。</p><ul><li>Build</li><li>TemplateData</li><li>index.html</li></ul><p><img src="WS002239.png" alt="ビルド正常終了" loading="lazy"></p><p>最後に「index.html」ファイルを修正して完成です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en-us&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;Unity WebGL Player | New Unity Project&lt;/title&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://code.jquery.com/jquery-3.3.1.slim.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body style=&quot;text-align: center&quot; class=&quot;m-3&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;col-auto&quot;&gt;</span><br><span class="line">        &lt;canvas class=&quot;border border-success&quot; id=&quot;unity-canvas&quot; style=&quot;width: 270px; height: 480px; background: #FFFFFF&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;col-auto&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;border border-success p-3&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">              &lt;input type=&quot;text&quot; class=&quot;form-control form-control-sm&quot; id=&quot;exampleInput1&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-outline-success btn-sm&quot; onclick=&quot;unitySendMessage()&quot;&gt;Unityに送信&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script src=&quot;Build/web.loader.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var unityInstance = null;</span><br><span class="line">    createUnityInstance(document.querySelector(&quot;#unity-canvas&quot;), &#123;</span><br><span class="line">      dataUrl: &quot;Build/web.data&quot;,</span><br><span class="line">      frameworkUrl: &quot;Build/web.framework.js&quot;,</span><br><span class="line">      codeUrl: &quot;Build/web.wasm&quot;,</span><br><span class="line">      streamingAssetsUrl: &quot;StreamingAssets&quot;,</span><br><span class="line">      companyName: &quot;DefaultCompany&quot;,</span><br><span class="line">      productName: &quot;New Unity Project&quot;,</span><br><span class="line">      productVersion: &quot;0.1&quot;,</span><br><span class="line">    &#125;).then(x =&gt; unityInstance = x);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script&gt; </span><br><span class="line">    document.addEventListener(&#x27;click&#x27;, function(e) &#123; </span><br><span class="line">     if (e.target.id == &quot;unity-canvas&quot;) &#123; </span><br><span class="line">      // Clicked on canvas </span><br><span class="line">      unityInstance.SendMessage(&quot;Button&quot;, &quot;FocusCanvas&quot;, &quot;1&quot;);</span><br><span class="line">     &#125; else &#123; </span><br><span class="line">      // Clicked outside of canvas </span><br><span class="line">      unityInstance.SendMessage(&quot;Button&quot;, &quot;FocusCanvas&quot;, &quot;0&quot;);</span><br><span class="line">     &#125; </span><br><span class="line">    &#125;); </span><br><span class="line">    function unitySendMessage(params) &#123;</span><br><span class="line">      unityInstance.SendMessage(&quot;Button&quot;, &quot;SetInputFieldText&quot;, $(&quot;#exampleInput1&quot;).val());</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><p>しかし「index.html」をダブルクリックしても、実行する事が出来ません。</p><p>GitHub にホスティングしないと駄目なのですが、それは次回説明します。</p><p>今回は「ビルドして実行」から動作確認をします。</p><p>注意事項として、ビルドをすると「index.html」が元に戻ってしまうので、再度コピペが必要です。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><h3 id="デモサイト"><a href="#デモサイト" class="headerlink" title="デモサイト"></a>デモサイト</h3><p><a href="https://noitaro.github.io/unity-webgl-internal-demo/">https://noitaro.github.io/unity-webgl-internal-demo/</a></p><h3 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h3><p><a href="https://github.com/noitaro/unity-webgl-internal">GitHub</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.unity3d.com/ja/current/Manual/webgl-interactingwithbrowserscripting.html">https://docs.unity3d.com/ja/current/Manual/webgl-interactingwithbrowserscripting.html</a></p><p><a href="https://stackoverrun.com/ja/q/10718642">https://stackoverrun.com/ja/q/10718642</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Unity でブラウザゲームが作れる事を知ったので、簡単ながら試してみました。&lt;/p&gt;
&lt;p&gt;しかも、Unity 2018.2 から WebAssembly(wasm) で出力されるようになったので、今までより格段に早く動作するみたいです。&lt;/p&gt;
&lt;h2 id=&quot;今回の目</summary>
      
    
    
    
    
    <category term="unity" scheme="https://noitaro.github.io/tags/unity/"/>
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV のテンプレートマッチングを使ってぷよを識別する２</title>
    <link href="https://noitaro.github.io/puyo-quest-opencv-2/"/>
    <id>https://noitaro.github.io/puyo-quest-opencv-2/</id>
    <published>2020-12-09T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.463Z</updated>
    
    <content type="html"><![CDATA[<p>ガッーっと、何も考えずに作ってしまったので、ソースがスパゲッティ状になってしまいました。</p><p>リファクタリングしながら、機能追加をしていたので、今回は鈍足になります。</p><p>申し訳ないです！！</p><h2 id="今回の目標"><a href="#今回の目標" class="headerlink" title="今回の目標"></a>今回の目標</h2><p>上下左右に繋がっている、同じ色のぷよを数える処理を作りました。</p><p>こんな感じに、繋がっているぷよを数えれるようにしました。</p><p><img src="WS002189.png" alt="同じ色のぷよを数えた結果" loading="lazy"></p><h2 id="前回"><a href="#前回" class="headerlink" title="前回"></a>前回</h2><p><a href="https://noitaro.github.io/puyo-quest-opencv-1/">OpenCV のテンプレートマッチングを使ってぷよを識別する１</a></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 20H2</li><li>Visual Studio 2019</li></ul><h2 id="処理"><a href="#処理" class="headerlink" title="処理"></a>処理</h2><p>呼び出し元はこんな感じですね。</p><p>引数の Array で 横8x縦6 の色情報が渡ってきます。</p><p>あとは、1マスずつ再帰関数の SearchConnectedPuyos に渡して、繋がっているぷよの数を数えていく処理になってます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private Puyo[,] getConnectCount(Puyo[,] cellsArray)</span><br><span class="line">&#123;</span><br><span class="line">  // 配列コピー</span><br><span class="line">  var array = ArrayCopy(cellsArray);</span><br><span class="line">  </span><br><span class="line">  for (var x = 0; x &lt; COLS; x++)</span><br><span class="line">  &#123;</span><br><span class="line">    for (var y = 0; y &lt; ROWS; y++)</span><br><span class="line">    &#123;</span><br><span class="line">      var puyo = GetPuyo(array, new Position(x, y));</span><br><span class="line">      // 自分のマスにぷよがいるか？</span><br><span class="line">      if (puyo.Color == PuyoColor.None) continue;</span><br><span class="line">      // 繋がったぷよを探す</span><br><span class="line">      var connectedPuyos = SearchConnectedPuyos(array, new List&lt;Position&gt;() &#123; new Position(x, y) &#125;);</span><br><span class="line">      puyo.Count = connectedPuyos.Count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こっちが繋がっているぷよの数を数える再帰関数です。</p><p>自分の関数内から、同じ関数を呼ぶので再帰です。</p><p>アルゴリズムを考えながら作っていたので、スゴくグチャグチャしちゃってます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;Position&gt; SearchConnectedPuyos(Puyo[,] array, List&lt;Position&gt; connectedPositions)</span><br><span class="line">&#123;</span><br><span class="line">  // 配列コピー</span><br><span class="line">  var positions = ArrayCopy(connectedPositions);</span><br><span class="line">  foreach (var position in SerchDirection)</span><br><span class="line">  &#123;</span><br><span class="line">    // 前回探索位置取得</span><br><span class="line">    var oldPosition = connectedPositions.Last();</span><br><span class="line">    // 今回探索位置取得</span><br><span class="line">    var nowPosition = new Position(oldPosition.X + position.X, oldPosition.Y + position.Y);</span><br><span class="line">    // ぷよがあるか？</span><br><span class="line">    if (GetPuyo(array, nowPosition).Color == PuyoColor.None) continue;</span><br><span class="line">    // 探索済みか？</span><br><span class="line">    if (positions.Any(i =&gt; i.X == nowPosition.X &amp;&amp; i.Y == nowPosition.Y)) continue;</span><br><span class="line">    // 上下左右の同色ぷよを探す</span><br><span class="line">    if (GetPuyo(array, oldPosition).Color == GetPuyo(array, nowPosition).Color)</span><br><span class="line">    &#123;</span><br><span class="line">      // 同色の場合</span><br><span class="line">      positions.Add(nowPosition);</span><br><span class="line">      // 再帰処理</span><br><span class="line">      var result = SearchConnectedPuyos(array, positions);</span><br><span class="line">      foreach (var item in result)</span><br><span class="line">      &#123;</span><br><span class="line">        // 未探索の場合、追加</span><br><span class="line">        if (!positions.Any(i =&gt; i.X == item.X &amp;&amp; i.Y == item.Y)) positions.Add(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 同色のぷよが見つからなかった場合、再帰処理を抜ける</span><br><span class="line">  return positions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>次回こそは、最善の一手を探し出すアルゴリズムを仕上げたいと思います。</p><p>出来るかな。。。</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><a href="https://github.com/noitaro/puyo-quest-opencv/releases/tag/v2.0">ソースコード</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ガッーっと、何も考えずに作ってしまったので、ソースがスパゲッティ状になってしまいました。&lt;/p&gt;
&lt;p&gt;リファクタリングしながら、機能追加をしていたので、今回は鈍足になります。&lt;/p&gt;
&lt;p&gt;申し訳ないです！！&lt;/p&gt;
&lt;h2 id=&quot;今回の目標&quot;&gt;&lt;a href=&quot;#今回</summary>
      
    
    
    
    
    <category term="opencv" scheme="https://noitaro.github.io/tags/opencv/"/>
    
    <category term="games" scheme="https://noitaro.github.io/tags/games/"/>
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="puyo-quest" scheme="https://noitaro.github.io/tags/puyo-quest/"/>
    
  </entry>
  
  <entry>
    <title>エレコム ゲーミングキーボード ECTK-G01UKBK レビュー</title>
    <link href="https://noitaro.github.io/ectk-g01ukbk/"/>
    <id>https://noitaro.github.io/ectk-g01ukbk/</id>
    <published>2020-12-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.015Z</updated>
    
    <content type="html"><![CDATA[<p>ちょっと気の迷いと言うか、何となく買っちゃったので軽くレビューします。</p><h2 id="買ったもの"><a href="#買ったもの" class="headerlink" title="買ったもの"></a>買ったもの</h2><p><a href="https://amzn.to/37BN1NX">ECTK-G01UKBK</a></p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/37BN1NX"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/37BN1NX"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: エレコム USB-A ゲーミングキーボード メカニカル 茶軸 5000万回耐久スイッチ 日本語配列 ゲーミングキーキャップ付属 全キーロールオーバー対応 LED搭載 ブラック ECTK-G01UKBK : パソコン・周辺機器</div><div class="hbc-url">https://amzn.to/37BN1NX</div></div></div></div></a></div></div><h2 id="見た目"><a href="#見た目" class="headerlink" title="見た目"></a>見た目</h2><p>Amazon で買ったので、伝票が直接貼られてました。キレイに剥がせそうに無かったので断念。</p><p><img src="PXL_20201206_035145719.png" alt="エレコム ゲーミングキーボード ECTK-G01UKBK 化粧箱" loading="lazy"></p><p>日本語配列だけど、ひらがなが書いてありません。私は好きです。あと、コードを束ねるマジックテープが付属。USBにもキャップ付きで、細かいオプションが充実してる。</p><p><img src="PXL_20201206_035316359.png" alt="エレコム ゲーミングキーボード ECTK-G01UKBK" loading="lazy"></p><p>ゲームでよく使うキー（8個）が付け替えれるようになってます。表面が凸凹している。</p><p><img src="PXL_20201206_035520172.png" alt="エレコム ゲーミングキーボード ECTK-G01UKBK 付替キー" loading="lazy"></p><h2 id="使ってみた感想"><a href="#使ってみた感想" class="headerlink" title="使ってみた感想"></a>使ってみた感想</h2><h3 id="重量が半端ない"><a href="#重量が半端ない" class="headerlink" title="重量が半端ない"></a>重量が半端ない</h3><p>とりあえず、持ってみた一声が「重っ！？」でした。</p><p>中身が詰まっているのか、途轍もなく重く感じました。ゲーミングキーボードを初めて買ったので、重いのが普通なのかも知れませんが、あり得ないぐらい重いです。</p><p>テンキーレスなのにこの重さ。</p><p>今使っているエレコムのキーボード「<a href="https://amzn.to/2IfY8TU">TK-FDM063BK</a>」は、テンキーも付いててコードレスなのに、これよりも重い。</p><p>カバンに入れて持ち運ぼうと思ってたのですが、やめました。</p><h3 id="タイピング音はまあまあ静か"><a href="#タイピング音はまあまあ静か" class="headerlink" title="タイピング音はまあまあ静か"></a>タイピング音はまあまあ静か</h3><p>今使っているキーボードがうるさい方なので、静かに感じました。</p><p>でもやっぱり、タイピング音がマイクで拾えちゃうからゲーム実況には向かないですね。</p><p>静音キーボードじゃないのでちょっと残念。</p><h3 id="ひらがなが書いてない"><a href="#ひらがなが書いてない" class="headerlink" title="ひらがなが書いてない"></a>ひらがなが書いてない</h3><p>日本語配列キーボードだけど、キーにひらがなが書いてありません。アルファベットと数字記号のみ。</p><p>シンプルでとっても良いと思います！！</p><p><img src="PXL_20201206_035322641.png" alt="エレコム ゲーミングキーボード ECTK-G01UKBK" loading="lazy"></p><p><img src="PXL_20201206_035335324.png" alt="エレコム ゲーミングキーボード ECTK-G01UKBK" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>とまあ、簡単な感想でした。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ちょっと気の迷いと言うか、何となく買っちゃったので軽くレビューします。&lt;/p&gt;
&lt;h2 id=&quot;買ったもの&quot;&gt;&lt;a href=&quot;#買ったもの&quot; class=&quot;headerlink&quot; title=&quot;買ったもの&quot;&gt;&lt;/a&gt;買ったもの&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https:</summary>
      
    
    
    
    
    <category term="gadget" scheme="https://noitaro.github.io/tags/gadget/"/>
    
    <category term="elecom" scheme="https://noitaro.github.io/tags/elecom/"/>
    
    <category term="keyboard" scheme="https://noitaro.github.io/tags/keyboard/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV のテンプレートマッチングを使ってぷよを識別する１</title>
    <link href="https://noitaro.github.io/puyo-quest-opencv-1/"/>
    <id>https://noitaro.github.io/puyo-quest-opencv-1/</id>
    <published>2020-11-29T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.463Z</updated>
    
    <content type="html"><![CDATA[<p>ぷよクエを自動化してみようかなっと思って、ちょっとだけプログラムしてみました。</p><p>Android を 自動操作する方法は知ってるので、「どこのぷよを消すか」のアルゴリズムを作っていこうと思います。</p><h2 id="こんなの作ります"><a href="#こんなの作ります" class="headerlink" title="こんなの作ります"></a>こんなの作ります</h2><p><img src="puyo-quest-opencv-1.gif" loading="lazy"></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>Windows 10 Home 20H2</p><p>Visual Studio 2019</p><h2 id="ぷよを識別する"><a href="#ぷよを識別する" class="headerlink" title="ぷよを識別する"></a>ぷよを識別する</h2><p>「どこのぷよを消すか」のアルゴリズムを作るにあたって、ぷよを識別する必要があります。</p><p>そうしないと、最善の手を導き出せないですもんね。</p><p>画面外のぷよは知るすべが無いので、画面上のぷよだけでアルゴリズムを組む必要があります。</p><p><img src="WS002188.png" alt="ぷよ識別" loading="lazy"></p><p>手順としては、1マスずつ（横8x縦6）どのぷよに一番似ているか、OpenCVのテンプレートマッチングをして行きます。</p><p>今回は、一番似ているぷよの色枠を表示してみました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">// Image コントロールから画像データを BitmapSource 形式で取得する。</span><br><span class="line">var imageBitmapSource = (BitmapSource)image.Source;</span><br><span class="line">// トリミング</span><br><span class="line">imageBitmapSource = new CroppedBitmap(imageBitmapSource, new Int32Rect(35, 1086, 1009, 708));</span><br><span class="line">// ピクセルフォーマットの変更</span><br><span class="line">imageBitmapSource = new FormatConvertedBitmap(imageBitmapSource, PixelFormats.Bgr24, null, 0);</span><br><span class="line"></span><br><span class="line">// BitmapSource 形式を OpenCV の Mat 形式に変換する。</span><br><span class="line">var imageMat = BitmapSourceConverter.ToMat(imageBitmapSource);</span><br><span class="line"></span><br><span class="line">var cellWidth = (int)(imageBitmapSource.Width / COLS); // 126</span><br><span class="line">var cellHeight = (int)(imageBitmapSource.Height / ROWS); // 118</span><br><span class="line"></span><br><span class="line">var resultList = new List &lt; (int X, int Y, Scalar ScalarColor)&gt; ();</span><br><span class="line">for (int x = 0; x &lt; COLS; x++) &#123;</span><br><span class="line">  for (int y = 0; y &lt; ROWS; y++) &#123;</span><br><span class="line">    // トリミング</span><br><span class="line">    var cell = new CroppedBitmap(imageBitmapSource, new Int32Rect(x * cellWidth, y * cellHeight, cellWidth, cellHeight));</span><br><span class="line"></span><br><span class="line">    // BitmapSource 形式を OpenCV の Mat 形式に変換する。</span><br><span class="line">    var cellMat = BitmapSourceConverter.ToMat(cell);</span><br><span class="line"></span><br><span class="line">    // グレースケール化</span><br><span class="line">    Cv2.CvtColor(cellMat, cellMat, ColorConversionCodes.RGB2GRAY);</span><br><span class="line"></span><br><span class="line">    var tmpResult = new List &lt; (Scalar ScalarColor, double MaxVal)&gt; ();</span><br><span class="line">    foreach(var template in TemplateList) &#123;</span><br><span class="line">      var templateBitmapSource = new BitmapImage();</span><br><span class="line">      templateBitmapSource.BeginInit();</span><br><span class="line">      templateBitmapSource.UriSource = new Uri(template.Uri, UriKind.Relative);</span><br><span class="line">      templateBitmapSource.EndInit();</span><br><span class="line">      var templateMat = BitmapSourceConverter.ToMat(templateBitmapSource);</span><br><span class="line"></span><br><span class="line">      // グレースケール化</span><br><span class="line">      Cv2.CvtColor(templateMat, templateMat, ColorConversionCodes.RGB2GRAY);</span><br><span class="line"></span><br><span class="line">      var resultMatch = new Mat();</span><br><span class="line"></span><br><span class="line">      // 空Matに全座標の比較データ（配列）を格納</span><br><span class="line">      Cv2.MatchTemplate(cellMat, templateMat, resultMatch, TemplateMatchModes.CCoeffNormed);</span><br><span class="line"></span><br><span class="line">      Cv2.MinMaxLoc(resultMatch, out _, out double maxVal);</span><br><span class="line"></span><br><span class="line">      tmpResult.Add((template.ScalarColor, maxVal));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var result = tmpResult.OrderByDescending(x =&gt; x.MaxVal).First();</span><br><span class="line">    resultList.Add((x, y, result.ScalarColor));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach((var x, var y, var scalarColor) in resultList) &#123;</span><br><span class="line">  Cv2.Rectangle(imageMat,</span><br><span class="line">    new Point((x * cellWidth) + 5, (y * cellHeight) + 5),</span><br><span class="line">    new Point((x * cellWidth) + cellWidth - 5, (y * cellHeight) + cellHeight - 5),</span><br><span class="line">    scalarColor, 5, LineTypes.Link8, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Image コントロールに BitmapSource 形式の画像データを設定する。</span><br><span class="line">image.Source = BitmapSourceConverter.ToBitmapSource(imageMat);</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>次回は、今回の結果を踏まえてアルゴリズムを組んでみたいと思います。</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><a href="https://github.com/noitaro/puyo-quest-opencv/releases/tag/v1.0">ソースコード</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ぷよクエを自動化してみようかなっと思って、ちょっとだけプログラムしてみました。&lt;/p&gt;
&lt;p&gt;Android を 自動操作する方法は知ってるので、「どこのぷよを消すか」のアルゴリズムを作っていこうと思います。&lt;/p&gt;
&lt;h2 id=&quot;こんなの作ります&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="opencv" scheme="https://noitaro.github.io/tags/opencv/"/>
    
    <category term="games" scheme="https://noitaro.github.io/tags/games/"/>
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="puyo-quest" scheme="https://noitaro.github.io/tags/puyo-quest/"/>
    
  </entry>
  
  <entry>
    <title>This version of ChromeDriver only supports Chrome version 85</title>
    <link href="https://noitaro.github.io/chromedriver/"/>
    <id>https://noitaro.github.io/chromedriver/</id>
    <published>2020-11-25T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.875Z</updated>
    
    <content type="html"><![CDATA[<p>普段、Python の Selenium WebDriver を使って スクレイピング をしているのですが、急にエラーを吐き出して動かなくなったので、その備忘録です。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 2004</li><li>Python 3.8.5</li><li>pip 20.2.4</li></ul><h2 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h2><p>Message: session not created: This version of ChromeDriver only supports Chrome version 85</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Google Chrome のバージョンが上がったためでした。</p><p>Google Chrome のバージョンを確認する方法は、ヘルプ &gt; Google Chrome について を選択します。</p><p><img src="201125_1.png" alt="ヘルプ &gt; Google Chrome について" loading="lazy"></p><p>Google Chrome 87 を使っているみたいですね。</p><p><img src="201125_2.png" alt="Google Chrome 87" loading="lazy"></p><h2 id="対処方法"><a href="#対処方法" class="headerlink" title="対処方法"></a>対処方法</h2><p>ChromeDriver は 85 なので ChromeDriver をアップグレードすれば解決します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip chromedriver-binary</span><br></pre></td></tr></table></figure><p><img src="201125_3.png" alt="pip install --upgrade pip chromedriver-binary" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://qiita.com/JinYusaku/items/03816315e7d5eefc0e23">https://qiita.com/JinYusaku/items/03816315e7d5eefc0e23</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;普段、Python の Selenium WebDriver を使って スクレイピング をしているのですが、急にエラーを吐き出して動かなくなったので、その備忘録です。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="chrome" scheme="https://noitaro.github.io/tags/chrome/"/>
    
    <category term="scraping" scheme="https://noitaro.github.io/tags/scraping/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET と Angular で TodoWebアプリ を作る２</title>
    <link href="https://noitaro.github.io/asp-net-angular-todo-app-2/"/>
    <id>https://noitaro.github.io/asp-net-angular-todo-app-2/</id>
    <published>2020-11-23T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.743Z</updated>
    
    <content type="html"><![CDATA[<p>前回の続きです。</p><p>今回は、認証必須ページの作成をして行きます。</p><h2 id="前回"><a href="#前回" class="headerlink" title="前回"></a>前回</h2><ul><li><a href="https://noitaro.github.io/asp-net-angular-todo-app-1/">ASP.NET と Angular で TodoWebアプリ を作る１</a></li></ul><h2 id="TODO画面-を作成"><a href="#TODO画面-を作成" class="headerlink" title="TODO画面 を作成"></a>TODO画面 を作成</h2><p>ログインしていないと開けない TODO画面 を作成します。</p><p>まず、Angular CLI を使って「todo」という名前のコンポーネントを生成します。</p><p>ClientApp フォルダ内で下記コマンドを実行すると、必要なファイルが作成されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate component todo</span><br></pre></td></tr></table></figure><p>ですが Visual Studio を使った Angular の場合は、エラーが発生します。</p><h3 id="エラー"><a href="#エラー" class="headerlink" title="エラー"></a>エラー</h3><p>More than one module matches. Use skip-import option to skip importing the component into the closest module.</p><p><img src="201111_14.png" alt="More than one module matches. Use skip-import option to skip importing the component into the closest module." loading="lazy"></p><p>その場合、メインモジュールの名前を指定すると解消されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate component todo --module app</span><br></pre></td></tr></table></figure><p><img src="201111_15.png" alt="ng generate component todo --module app" loading="lazy"></p><h3 id="TODO画面にログイン必須の設定を付与"><a href="#TODO画面にログイン必須の設定を付与" class="headerlink" title="TODO画面にログイン必須の設定を付与"></a>TODO画面にログイン必須の設定を付与</h3><p>ログイン必須の設定を付与して、ブラウザから開けれるようにします。</p><p>「app.module.ts」の forRoot に todo画面 を追加します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">imports: [</span><br><span class="line">  BrowserModule.withServerTransition(&#123; appId: &#x27;ng-cli-universal&#x27; &#125;),</span><br><span class="line">  HttpClientModule,</span><br><span class="line">  FormsModule,</span><br><span class="line">  ApiAuthorizationModule,</span><br><span class="line">  RouterModule.forRoot([</span><br><span class="line">    &#123; path: &#x27;&#x27;, component: HomeComponent, pathMatch: &#x27;full&#x27; &#125;,</span><br><span class="line">    &#123; path: &#x27;counter&#x27;, component: CounterComponent &#125;,</span><br><span class="line">    &#123; path: &#x27;fetch-data&#x27;, component: FetchDataComponent, canActivate: [AuthorizeGuard] &#125;,</span><br><span class="line">    &#123; path: &#x27;todo&#x27;, component: TodoComponent, canActivate: [AuthorizeGuard] &#125;</span><br><span class="line">  ])</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>その時、canActivate に「AuthorizeGuard」を付与することで ログイン必須のページに設定する事が出来ます。</p><h3 id="TODO画面へ遷移するリンクを追加"><a href="#TODO画面へ遷移するリンクを追加" class="headerlink" title="TODO画面へ遷移するリンクを追加"></a>TODO画面へ遷移するリンクを追加</h3><p>TODO画面を開けれるように メニューにリンクを追加します。</p><p>「WebApplication1\ClientApp\src\app\nav-menu\nav-menu.component.html」を修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;navbar-nav flex-grow&quot;&gt;</span><br><span class="line">  &lt;li class=&quot;nav-item&quot;</span><br><span class="line">      [routerLinkActive]=&quot;[&#x27;link-active&#x27;]&quot;</span><br><span class="line">      [routerLinkActiveOptions]=&quot;&#123; exact: true &#125;&quot;&gt;</span><br><span class="line">    &lt;a class=&quot;nav-link text-dark&quot; [routerLink]=&quot;[&#x27;/&#x27;]&quot;&gt;Home&lt;/a&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;nav-item&quot; [routerLinkActive]=&quot;[&#x27;link-active&#x27;]&quot;&gt;</span><br><span class="line">    &lt;a class=&quot;nav-link text-dark&quot; [routerLink]=&quot;[&#x27;/counter&#x27;]&quot;&gt;Counter&lt;/a&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;nav-item&quot; [routerLinkActive]=&quot;[&#x27;link-active&#x27;]&quot;&gt;</span><br><span class="line">    &lt;a class=&quot;nav-link text-dark&quot; [routerLink]=&quot;[&#x27;/fetch-data&#x27;]&quot;&gt;Fetch data&lt;/a&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;nav-item&quot; [routerLinkActive]=&quot;[&#x27;link-active&#x27;]&quot;&gt;</span><br><span class="line">    &lt;a class=&quot;nav-link text-dark&quot; [routerLink]=&quot;[&#x27;/todo&#x27;]&quot;&gt;Todo&lt;/a&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>試しにデバッグ実行をして、TODO画面を開いてみます。</p><p>ログインしていない場合はログイン画面が表示され、ログインしている場合は TODO画面 が表示されます。</p><p><img src="201111_18.png" alt="TODO画面" loading="lazy"></p><h3 id="サーバからデータを取得"><a href="#サーバからデータを取得" class="headerlink" title="サーバからデータを取得"></a>サーバからデータを取得</h3><p>自分が持っている TODOデータ をサーバから取得できるようにします。</p><h4 id="Todoモデル-の作成"><a href="#Todoモデル-の作成" class="headerlink" title="Todoモデル の作成"></a>Todoモデル の作成</h4><p>クライアント側とサーバ側にTodoモデルを作成します。</p><p>クライアント側はTypeScript、サーバ側はC#で作成します。</p><p>「WebApplication1\ClientApp\src\app\Todo.ts」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export interface Todo &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  title: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>「WebApplication1\Models\Todo.cs」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">namespace WebApplication1.Models</span><br><span class="line">&#123;</span><br><span class="line">    public class Todo</span><br><span class="line">    &#123;</span><br><span class="line">        [Key]</span><br><span class="line">        public int Id &#123; get; set; &#125;</span><br><span class="line">        [Required]</span><br><span class="line">        public string UserId &#123; get; set; &#125;</span><br><span class="line">        public string Title &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Controller-の作成"><a href="#Controller-の作成" class="headerlink" title="Controller の作成"></a>Controller の作成</h4><p>スキャフォールディングを使って、モデルからコントローラーを作成します。</p><p>「Controllers」フォルダを選択し、右クリックから 追加 &gt; 新規スキャフォールディングアイテム を選択します。</p><p><img src="WS002176.png" alt="新規スキャフォールディング" loading="lazy"></p><p>「Entity Framework を使用したアクションがある API コントローラー」を選択します。</p><p><img src="WS002177.png" alt="Entity Framework を使用したアクションがある API コントローラー" loading="lazy"></p><p>Todoモデルを使ってコントローラーを作ります。</p><p><img src="WS002178.png" alt="APIコントローラーの追加" loading="lazy"></p><h4 id="データベースを更新"><a href="#データベースを更新" class="headerlink" title="データベースを更新"></a>データベースを更新</h4><p>パッケージマネージャーコンソールを使って Todoテーブルを作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PM&gt; Add-Migration Todo</span><br><span class="line">PM&gt; Update-Database</span><br></pre></td></tr></table></figure><p><img src="WS002180.png" alt="Update-Database" loading="lazy"></p><p>Todoモデルと同じ型の Todoテーブルが作成されました。</p><p>ついでに軽くデータを入れておきます。</p><p><img src="WS002182.png" alt="Todoテーブル" loading="lazy"></p><p>UserIdは「AspNetUsers」テーブルの Id を使います。</p><p><img src="WS002183.png" alt="AspNetUsers" loading="lazy"></p><h4 id="Todoリスト-を取得"><a href="#Todoリスト-を取得" class="headerlink" title="Todoリスト を取得"></a>Todoリスト を取得</h4><h5 id="TodoesController-cs"><a href="#TodoesController-cs" class="headerlink" title="TodoesController.cs"></a>TodoesController.cs</h5><p>TodoesController を介して Todoリスト を取得できるようにします。</p><p>下記コードで、認証済みのログインユーザーIDが取得出来ます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var userId = User.FindFirst(ClaimTypes.NameIdentifier).Value;</span><br></pre></td></tr></table></figure><p>取得したユーザーIDを元に、データベースからその人のTODOデータを取得しクライアントに渡します。</p><p>「WebApplication1\Controllers\TodoesController.cs」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// GET: api/Todoes</span><br><span class="line">[HttpGet]</span><br><span class="line">public ActionResult&lt;IEnumerable&lt;Todo&gt;&gt; GetTodo()</span><br><span class="line">&#123;</span><br><span class="line">    // 認証済みログインユーザーIDを取得</span><br><span class="line">    var userId = User.FindFirst(ClaimTypes.NameIdentifier).Value;</span><br><span class="line">    // Todoテーブルから認証済みログインユーザーのデータを取得しクライアントに渡します。</span><br><span class="line">    return _context.Todo.Where(x =&gt; x.UserId == userId).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="todo-component-ts"><a href="#todo-component-ts" class="headerlink" title="todo.component.ts"></a>todo.component.ts</h5><p>クライアント側の呼び出し処理を書きます。</p><p>「WebApplication1\ClientApp\src\app\todo\todo.component.ts」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export class TodoComponent implements OnInit &#123;</span><br><span class="line">  public todoes: Todo[];</span><br><span class="line">  constructor(http: HttpClient, @Inject(&#x27;BASE_URL&#x27;) baseUrl: string) &#123;</span><br><span class="line">    http.get&lt;Todo[]&gt;(baseUrl + &#x27;api/todoes&#x27;).subscribe(result =&gt; &#123;</span><br><span class="line">      this.todoes = result;</span><br><span class="line">    &#125;, error =&gt; console.error(error));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="todo-component-html"><a href="#todo-component-html" class="headerlink" title="todo.component.html"></a>todo.component.html</h5><p>受け取ったデータを HTML で表示します。</p><p>「WebApplication1\ClientApp\src\app\todo\todo.component.html」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;p *ngIf=&quot;!todoes&quot;&gt;&lt;em&gt;Loading...&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;table class=&#x27;table table-striped&#x27; aria-labelledby=&quot;tableLabel&quot; *ngIf=&quot;todoes&quot;&gt;</span><br><span class="line">  &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;th&gt;No.&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;Title&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/thead&gt;</span><br><span class="line">  &lt;tbody&gt;</span><br><span class="line">    &lt;tr *ngFor=&quot;let forecast of todoes&quot;&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123; forecast.id &#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123; forecast.title &#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><h3 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h3><p>このように Todoテーブルの値が表示されるはずです。</p><p><img src="WS002184.png" alt="動作確認" loading="lazy"></p><h2 id="次回"><a href="#次回" class="headerlink" title="次回"></a>次回</h2><p>追加、更新、削除</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前回の続きです。&lt;/p&gt;
&lt;p&gt;今回は、認証必須ページの作成をして行きます。&lt;/p&gt;
&lt;h2 id=&quot;前回&quot;&gt;&lt;a href=&quot;#前回&quot; class=&quot;headerlink&quot; title=&quot;前回&quot;&gt;&lt;/a&gt;前回&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://n</summary>
      
    
    
    
    
    <category term="angular" scheme="https://noitaro.github.io/tags/angular/"/>
    
    <category term="asp-net" scheme="https://noitaro.github.io/tags/asp-net/"/>
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="sqlserver" scheme="https://noitaro.github.io/tags/sqlserver/"/>
    
    <category term="typescript" scheme="https://noitaro.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET と Angular で TodoWebアプリ を作る１</title>
    <link href="https://noitaro.github.io/asp-net-angular-todo-app-1/"/>
    <id>https://noitaro.github.io/asp-net-angular-todo-app-1/</id>
    <published>2020-11-18T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.739Z</updated>
    
    <content type="html"><![CDATA[<p>Angular を勉強するため、試しに TodoWebアプリ を作っていきます。</p><p>初めてなので変な箇所があるかも知れませんが、ご了承下さい。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 2004</li><li>Visual Studio 2019 .NET Framework 4.8</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="新しいプロジェクトを作る"><a href="#新しいプロジェクトを作る" class="headerlink" title="新しいプロジェクトを作る"></a>新しいプロジェクトを作る</h3><p>「ASP.NET Core Web アプリケーション」で新しいプロジェクトを作成します。</p><p><img src="201111_1.png" alt="ASP.NET Core Web アプリケーション" loading="lazy"></p><p>フレームワークは「ASP.NET Cre 3.1」を選びます。テンプレートは「Angular」。認証は「個別のユーザーアカウント」にします。</p><p><img src="201111_2.png" alt="ASP.NET Cre 3.1 Angular" loading="lazy"></p><p>認証の変更ボタンを押すとダイアログが出るので、認証オプションを「個別のユーザーアカウント」に変更して「OK」ボタンで確定します。</p><p><img src="201111_3-1.png" alt="個別のユーザーアカウント" loading="lazy"></p><h3 id="実行してみる"><a href="#実行してみる" class="headerlink" title="実行してみる"></a>実行してみる</h3><p>一度デバッグ実行をします。</p><p>デバッグ実行のプロファイルを「WebApplication1」に変更し、F5キーでデバッグ実行をします。</p><p><img src="201111_4.png" alt="デバッグ実行" loading="lazy"></p><p>初回のデバッグ実行は Angular で使うモジュールのインストールがあるので、もの凄く時間がかかります。</p><p>Restoring dependencies using ‘npm’. This may take several minutes…<br>‘npm’を使用して依存関係を復元します。 数分かかるかも知れません…</p><p><img src="201111_5.png" alt="&#39;npm&#39;を使用して依存関係を復元" loading="lazy"></p><p>ビルドが無事に終わると、ブラウザにメイン画面が表示されます。</p><p><img src="201111_9.png" alt="メイン画面" loading="lazy"></p><h4 id="ビルドエラーになった場合は？"><a href="#ビルドエラーになった場合は？" class="headerlink" title="ビルドエラーになった場合は？"></a>ビルドエラーになった場合は？</h4><p>error MSB3073: コマンド “npm install” はコード -1 で終了しました。</p><p><img src="201111_6-1.png" alt="&quot;npm install&quot; はコード -1 で終了しました。" loading="lazy"></p><p>not found: python2<br>Command failed: python.EXE -c import sys; print “%s.%s.%s” % sys.version_info[:3];</p><p><img src="201111_7.png" alt="Command failed" loading="lazy"></p><p>“npm install” がうまく出来なかったみたいなので、手動で実行してあげます。</p><p>プロジェクトフォルダ内の「ClientApp」フォルダで “npm install” を実行します。</p><p><img src="201111_8.png" alt="npm install" loading="lazy"></p><p>NPMのインストールが終わってから、再度ビルドをするとエラーが出なくなります。</p><h3 id="認証処理をする"><a href="#認証処理をする" class="headerlink" title="認証処理をする"></a>認証処理をする</h3><p>プロジェクト作成時に、認証処理を入れて作成したので右上の「Register」から新規アカウントを作成する事が出来ます。</p><p><img src="201111_10.png" alt="新規アカウント作成" loading="lazy"></p><p>Email と Password を入力して「Register」ボタンを押すと、データベースが無いので失敗します。</p><p>A database operation failed while processing the request.<br>SqlException: Cannot open database “aspnet-WebApplication1-53bc9b9d-9d6a-45d4-8429-2a2761773502” requested by the login.<br>リクエストの処理中にデータベース操作が失敗しました。<br>SqlException：ログインによって要求されたデータベース「aspnet-WebApplication1-53bc9b9d-9d6a-45d4-8429-2a2761773502」を開くことができません。</p><p>「Apply Migrations」ボタンを押すと、データベースと認証用テーブルを自動で作成してくれます。</p><p><img src="201111_11.png" alt="Apply Migrations" loading="lazy"></p><p>またパッケージマネージャーコンソールでも、データベースを作成する事が出来ます。</p><p>In Visual Studio, you can use the Package Manager Console to apply pending migrations to the database.<br>Visual Studioでは、パッケージマネージャーコンソールを使用して、保留中の移行をデータベースに適用できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PM&gt; Update-Database</span><br></pre></td></tr></table></figure><p>しばらくして「Try refreshing the page」と表示されるので、F5キー でページを更新します。</p><p>再度、Email と Password を入力して「Register」ボタンを押すと、新規アカウントを作ることが出来ます。</p><p><img src="201111_12.png" alt="新規アカウント作成" loading="lazy"></p><p>作ったアカウントでログインする事が出来ます。</p><p><img src="201111_13.png" alt="ログイン確認" loading="lazy"></p><h2 id="次回"><a href="#次回" class="headerlink" title="次回"></a>次回</h2><p>認証必須ページの作成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Angular を勉強するため、試しに TodoWebアプリ を作っていきます。&lt;/p&gt;
&lt;p&gt;初めてなので変な箇所があるかも知れませんが、ご了承下さい。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;</summary>
      
    
    
    
    
    <category term="angular" scheme="https://noitaro.github.io/tags/angular/"/>
    
    <category term="asp-net" scheme="https://noitaro.github.io/tags/asp-net/"/>
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="c-sharp" scheme="https://noitaro.github.io/tags/c-sharp/"/>
    
    <category term="sqlserver" scheme="https://noitaro.github.io/tags/sqlserver/"/>
    
    <category term="typescript" scheme="https://noitaro.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>【Cocos Creator】ベクトルの角度を取得する</title>
    <link href="https://noitaro.github.io/vectors-to-degrees/"/>
    <id>https://noitaro.github.io/vectors-to-degrees/</id>
    <published>2020-11-18T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.759Z</updated>
    
    <content type="html"><![CDATA[<p>Cocos Creator は 左下が基点なので注意が必要です。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Cocos Creator v2.4.3</li></ul><h2 id="ファンクション"><a href="#ファンクション" class="headerlink" title="ファンクション"></a>ファンクション</h2><p><img src="vectorsToDegrees.png" alt="vectorsToDegrees" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// ベクトルの角度を取得する</span><br><span class="line">vectorsToDegrees(dirVec: cc.Vec2) &#123;</span><br><span class="line">  // 水平右ベクトル</span><br><span class="line">  let comVec = cc.v2(1, 0);</span><br><span class="line">  // 水平右ベクトルと引数ベクトルとのラジアンを取得</span><br><span class="line">  let radian = comVec.signAngle(dirVec);</span><br><span class="line">  // ラジアンを角度に変換</span><br><span class="line">  let degrees = cc.misc.radiansToDegrees(radian);</span><br><span class="line">  return degrees;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(`右: $&#123;this.vectorsToDegrees(cc.v2(1, 0))&#125;`);         // 　右: 0</span><br><span class="line">console.log(`右上: $&#123;this.vectorsToDegrees(cc.v2(0.7, 0.7))&#125;`);   // 右上: 45</span><br><span class="line">console.log(`上: $&#123;this.vectorsToDegrees(cc.v2(0, 1))&#125;`);         // 　上: 90</span><br><span class="line">console.log(`左上: $&#123;this.vectorsToDegrees(cc.v2(-0.7, 0.7))&#125;`);  // 左上: 135</span><br><span class="line">console.log(`左: $&#123;this.vectorsToDegrees(cc.v2(-1, 0))&#125;`);        // 　左: 180</span><br><span class="line">console.log(`左下: $&#123;this.vectorsToDegrees(cc.v2(-0.7, -0.7))&#125;`); // 左下: -135</span><br><span class="line">console.log(`下: $&#123;this.vectorsToDegrees(cc.v2(0, -1))&#125;`);        // 　下: -90</span><br><span class="line">console.log(`右下: $&#123;this.vectorsToDegrees(cc.v2(0.7, -0.7))&#125;`);  // 右下: -45</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Cocos Creator は 左下が基点なので注意が必要です。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Cocos Creator v2.4.3&lt;/li</summary>
      
    
    
    
    
    <category term="typescript" scheme="https://noitaro.github.io/tags/typescript/"/>
    
    <category term="cocos-creator" scheme="https://noitaro.github.io/tags/cocos-creator/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator で ドット絵がぼやけなくする方法</title>
    <link href="https://noitaro.github.io/cocos-creator-filter-mode/"/>
    <id>https://noitaro.github.io/cocos-creator-filter-mode/</id>
    <published>2020-11-13T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.947Z</updated>
    
    <content type="html"><![CDATA[<p>Cocos Creator で ドット絵を表示させるとぼやけるんです。</p><p>画像のプロパティを変更したら、くっきり表示されることが分かったので紹介します。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>Cocos Creator v2.4.3</p><h2 id="現象"><a href="#現象" class="headerlink" title="現象"></a>現象</h2><p>せっかくのドット絵がぼやけて表示されちゃってます。</p><p><img src="WS002171.png" alt="Filter Mode Bilinear" loading="lazy"></p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>画像の Filter Mode を「Point」に変更すると、ぼやけずくっきりと表示されます。</p><p><img src="WS002172.png" alt="Filter Mode を「Point」に変更" loading="lazy"></p><p>くっきり表示されてます。</p><p><img src="WS002173.png" alt="Filter Mode Point" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.cocos.com/creator/manual/en/components/sprite.html">https://docs.cocos.com/creator/manual/en/components/sprite.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Cocos Creator で ドット絵を表示させるとぼやけるんです。&lt;/p&gt;
&lt;p&gt;画像のプロパティを変更したら、くっきり表示されることが分かったので紹介します。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    
    <category term="cocos-creator" scheme="https://noitaro.github.io/tags/cocos-creator/"/>
    
  </entry>
  
  <entry>
    <title>Nintendo Switch エミュレーター の yuzu を試す</title>
    <link href="https://noitaro.github.io/nintendo-switch-yuzu/"/>
    <id>https://noitaro.github.io/nintendo-switch-yuzu/</id>
    <published>2020-11-08T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.423Z</updated>
    
    <content type="html"><![CDATA[<p>動かしてみた感想です。</p><p><a href="https://ryujinx.org/">Ryujinx</a> よりはサクサク動いた。</p><p>グラフィックがバグってて、霧が真っ黒で描画された。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p><a href="https://noitaro.github.io/nintendo-switch-ryujinx/">https://noitaro.github.io/nintendo-switch-ryujinx/</a></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 2004</li><li>Intel Core i7 9700KF</li><li>Nvidia GeForce RTX 2060</li></ul><h2 id="必要なツールを揃える"><a href="#必要なツールを揃える" class="headerlink" title="必要なツールを揃える"></a>必要なツールを揃える</h2><h3 id="yuzu"><a href="#yuzu" class="headerlink" title="yuzu"></a>yuzu</h3><p>Nintendo Switch エミュレーター の本体です。</p><p><a href="https://yuzu-emu.org/">yuzu</a></p><p><a href="https://yuzu-emu.org/">https://yuzu-emu.org/</a></p><p><img src="WS002145.png" alt="yuzu ダウンロード" loading="lazy"></p><p><img src="WS002146.png" alt="yuzu ダウンロード" loading="lazy"></p><h3 id="Lockpick-RCM"><a href="#Lockpick-RCM" class="headerlink" title="Lockpick_RCM"></a>Lockpick_RCM</h3><p>prod.keysファイル をダンプするために使います。</p><p><a href="https://github.com/shchmue/Lockpick_RCM/releases">Lockpick_RCM</a></p><p><a href="https://github.com/shchmue/Lockpick_RCM/releases">https://github.com/shchmue/Lockpick_RCM/releases</a></p><p><img src="WS001948.png" alt="Lockpick_RCM ダウンロード" loading="lazy"></p><h3 id="WAIN-Card-Dumper-v2-0-0"><a href="#WAIN-Card-Dumper-v2-0-0" class="headerlink" title="[WAIN]Card Dumper v2.0.0"></a>[WAIN]Card Dumper v2.0.0</h3><p>ゲームソフトをダンプするために使います。</p><p><a href="https://www.maxconsole.com/threads/switch-release-wain-card-dumper-v2-0-0.49490/">[WAIN]Card Dumper v2.0.0</a></p><p><a href="https://www.maxconsole.com/threads/switch-release-wain-card-dumper-v2-0-0.49490/">https://www.maxconsole.com/threads/switch-release-wain-card-dumper-v2-0-0.49490/</a></p><p><img src="WS001949.png" alt="[WAIN]Card Dumper v2.0.0 ダウンロード" loading="lazy"></p><h2 id="エミュレーター-を動かす"><a href="#エミュレーター-を動かす" class="headerlink" title="エミュレーター を動かす"></a>エミュレーター を動かす</h2><p>ダウンロードした yuzuインストーラーを開いて、インストールします。</p><p><img src="WS002147.png" alt="yuzu インストール" loading="lazy"></p><p>チェックは変えず、そのままで OK です。</p><p><img src="WS002148.png" alt="yuzu インストーラー" loading="lazy"></p><p>デスクトップにショートカットが出来るので、それを開けば起動します。</p><p><img src="WS002151.png" alt="yuzu ショートカット" loading="lazy"></p><p>初回起動時、このようなダイアログが出ますが気にせず「OK」ボタンを押します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Components are missing that may hinder key derivation from completing.</span><br></pre></td></tr></table></figure><p><img src="WS002150.png" alt="Components are missing that may hinder key derivation from completing." loading="lazy"></p><p>こっちのダイアログは「匿名データを収集しますがいいですか？」との確認です。良ければ「Yes」 嫌なら「No」を選択しましょう。私は「No」を選択しました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Anonymous data is collected to help improve yuzu.  </span><br><span class="line">Would you like to share your usage data with us?</span><br></pre></td></tr></table></figure><p><a href="https://yuzu-emu.org/help/feature/telemetry/">Telemetry - Anonymous data is collected</a></p><p><img src="WS002149.png" alt="Anonymous data is collected to help improve yuzu." loading="lazy"></p><h3 id="起動しない場合は？"><a href="#起動しない場合は？" class="headerlink" title="起動しない場合は？"></a>起動しない場合は？</h3><p>「<a href="https://aka.ms/vs/16/release/vc_redist.x64.exe">MicrosoftVisual C ++ 2019</a>」をインストールすると、起動するみたいです。</p><h3 id="設定を変える"><a href="#設定を変える" class="headerlink" title="設定を変える"></a>設定を変える</h3><p>起動したら、まず設定を日本語に変更します。</p><p>メニューの Emulation &gt; Configure を選択し、</p><p><img src="WS002162.png" alt="Emulation &gt; Configure" loading="lazy"></p><p>Systemタブを選んで「Language」と「Region」を 日本語 に変更します。</p><p><img src="WS002163.png" alt="Systemタブを選んで「Language」と「Region」を 日本語 に変更" loading="lazy"></p><h3 id="Prod-keys-をダンプする"><a href="#Prod-keys-をダンプする" class="headerlink" title="Prod.keys をダンプする"></a>Prod.keys をダンプする</h3><p>ゲームを実行させるには、Prod.keys が必要です。</p><p>Lockpick_RCM を ペイロードして prod.keysファイル をダンプします。</p><p><img src="IMG_20200830_131942.png" alt="Lockpick_RCM を ペイロードして prod.keysファイル をダンプ" loading="lazy"></p><p>Lockpick_RCM を起動したら、SDカードに prod.keys がダンプされます。</p><p>SDカードの switchフォルダにダンプされた prod.keys を、yuzu の指定したフォルダに入れます。</p><p>File &gt; Open yuzu Folder で yuzuフォルダ を開きます。</p><p><img src="WS002153.png" alt="File &gt; Open yuzu Folder" loading="lazy"></p><p>新規で「keys」フォルダを作り、</p><p><img src="WS002166.png" alt="新規で「keys」フォルダを作る" loading="lazy"></p><p>その中に prod.keys を入れます。</p><p><img src="WS002167.png" alt="prod.keys" loading="lazy"></p><h3 id="ゲームソフトをダンプする"><a href="#ゲームソフトをダンプする" class="headerlink" title="ゲームソフトをダンプする"></a>ゲームソフトをダンプする</h3><p>[WAIN]Card Dumper を起動して ゲームソフトをダンプします。</p><p><img src="2020083013263000-DB1426D1DFD034027CECDE9C2DD914B8.png" alt="[WAIN]Card Dumper で ゲームソフトをダンプ" loading="lazy"></p><h3 id="ゲームを起動する"><a href="#ゲームを起動する" class="headerlink" title="ゲームを起動する"></a>ゲームを起動する</h3><p>これで、ゲームを起動する準備が出来ました。</p><p>実際にエミュレータでゲームを起動してみましょう。</p><p>File &gt; Load File で ダンプしたゲームソフトを読み込むと、遊ぶことが出来ます。</p><p><img src="WS002152.png" alt="File &gt; Load File" loading="lazy"></p><p><img src="WS002165.png" alt="yuzu 実行画面" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;動かしてみた感想です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ryujinx.org/&quot;&gt;Ryujinx&lt;/a&gt; よりはサクサク動いた。&lt;/p&gt;
&lt;p&gt;グラフィックがバグってて、霧が真っ黒で描画された。&lt;/p&gt;
&lt;h2 id=&quot;関連記事&quot;&gt;&lt;a href=&quot;#関連</summary>
      
    
    
    
    
    <category term="nintendo-switch" scheme="https://noitaro.github.io/tags/nintendo-switch/"/>
    
    <category term="emulator" scheme="https://noitaro.github.io/tags/emulator/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator で コンベアを作る</title>
    <link href="https://noitaro.github.io/cocos-creator-conveyor/"/>
    <id>https://noitaro.github.io/cocos-creator-conveyor/</id>
    <published>2020-11-03T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.931Z</updated>
    
    <content type="html"><![CDATA[<p>こんなの作ります。</p><p><img src="cocos-creator-003.gif" loading="lazy"></p><p><a href="https://noitaro.github.io/cocos-creator-conveyor-web/">こちら</a> から実際に動かせます。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>Cocos Creator 2.4.3</p><h2 id="作成手順"><a href="#作成手順" class="headerlink" title="作成手順"></a>作成手順</h2><h3 id="3Dモデルを作る"><a href="#3Dモデルを作る" class="headerlink" title="3Dモデルを作る"></a>3Dモデルを作る</h3><p><a href="https://www.blender.org/">Blender</a> で角と直線の 3Dモデル を作ります。今回は メッシュ だけで テクスチャ はありません。</p><p><img src="201102_2.png" alt="3Dモデル" loading="lazy"></p><p><img src="201102_1.png" alt="3Dモデル" loading="lazy"></p><p>3Dモデル が出来たら FBX形式 でエクスポートします。</p><p><img src="WS002110-1.png" alt="FBX形式エクスポート" loading="lazy"></p><p>Cocos Creator に FBX形式の3Dモデル をインポートします。</p><p>ファイルを掴んでドラッグすると、インポートする事が出来ます。</p><p><img src="WS002118.png" alt="3Dモデルインポート" loading="lazy"></p><p>3Dモデル をインポートするとこんな感じになります。</p><p><img src="WS002119.png" alt="3Dモデルインポート" loading="lazy"></p><h3 id="Cocos-Creator-の設定を変更する"><a href="#Cocos-Creator-の設定を変更する" class="headerlink" title="Cocos Creator の設定を変更する"></a>Cocos Creator の設定を変更する</h3><p>設定を 3Dモード に変更します。</p><p><img src="201102_3-1.png" alt="3Dモード" loading="lazy"></p><h3 id="シーンを作成する"><a href="#シーンを作成する" class="headerlink" title="シーンを作成する"></a>シーンを作成する</h3><p>始める前に、一度シーンを保存しておきます。</p><p>「Ctrl」+「S」を押して、assetsフォルダ内であることを確認してから ファイル名 を入力し、保存ボタンでシーンを保存できます。</p><p><img src="WS002120.png" alt="シーン保存" loading="lazy"></p><h3 id="3D制作用のテンプレートを追加する"><a href="#3D制作用のテンプレートを追加する" class="headerlink" title="3D制作用のテンプレートを追加する"></a>3D制作用のテンプレートを追加する</h3><p>まず「Node Tree」の Canvas を選択してから右クリックをして「Create」&gt;「Create 3D Node」&gt;「3D Stage」の順で選択して、3D制作用のテンプレートオブジェクトを追加します。</p><p><img src="WS002121.png" alt="テンプレートオブジェクト追加" loading="lazy"></p><p>このように「New 3D Stage」が作られて、その中に「3D Camera」「New Directional Light」「New Ambient Light」「New Box」が出来上がります。</p><p><img src="WS002122.png" alt="テンプレートオブジェクト追加" loading="lazy"></p><p>「New Box」は使わないので New Box を選択して「Delete」キーで削除しておきます。</p><h3 id="床を作る"><a href="#床を作る" class="headerlink" title="床を作る"></a>床を作る</h3><p>New 3D Stage を選択し右クリックから「Create」&gt;「Create 3D Node」&gt;「Plane」の順で選択します。</p><p><img src="WS002123.png" alt="Plane 追加" loading="lazy"></p><p>そうすると、平らなオブジェクトが追加されます。</p><p><img src="WS002125.png" alt="オブジェクト追加" loading="lazy"></p><h3 id="カメラを動かす"><a href="#カメラを動かす" class="headerlink" title="カメラを動かす"></a>カメラを動かす</h3><p>今のままだと、カメラとオブジェクトが平行に配置されているため、実行画面には全く見えません。</p><p><img src="WS002126.png" alt="カメラ確認" loading="lazy"></p><p>なので、カメラを上方向に動かして見下ろす感じにします。</p><p>まず、カメラのロックを解除してカメラを動かせるようにします。</p><p><img src="WS002127.png" alt="カメラロック解除" loading="lazy"></p><p>ひとまず「Position」と「Rotation」をいじってみました。</p><p><img src="WS002128.png" alt="カメラ位置変更" loading="lazy"></p><p>実行してみるとこんな感じに見えると思います。</p><p><img src="WS002129.png" alt="動作確認" loading="lazy"></p><h3 id="背景色を変える"><a href="#背景色を変える" class="headerlink" title="背景色を変える"></a>背景色を変える</h3><p>黒い背景だと嫌なので、背景色を変えます。</p><p>Node Tree の 3D Camera を選択してから「Background Color」を変えて、ClearFlags の「Color」にチェックを入れると、背景色を設定する事が出来ます。</p><p><img src="WS002130.png" alt="Background Color 設定" loading="lazy"></p><h3 id="床の色を変える"><a href="#床の色を変える" class="headerlink" title="床の色を変える"></a>床の色を変える</h3><p>床の色も変えましょう。</p><p>最初は無地の DefaultMaterial が設定されているので、着色したマテリアルを作って、付け替えます。</p><p><img src="WS002131.png" alt="DefaultMaterial" loading="lazy"></p><p>assets を選択してから右クリックで「Create」&gt;「Material」の順で選択して、新しいマテリアル を作成します。</p><p><img src="WS002132.png" alt="マテリアル作成" loading="lazy"></p><p>新しく作ったマテリアルを選択して、Effect を「builtin-phong」に変更します。</p><p>そうすると diffuseColor が変更できるようになるので、床にしたい色を設定し「Apply」で確定します。</p><p><img src="WS002139.png" alt="マテリアル設定" loading="lazy"></p><p>最後に、今作ったマテリアルを 床のマテリアルにドラッグして、変更完了です。</p><p><img src="WS002134.png" alt="マテリアル設定" loading="lazy"></p><h3 id="落ちるブロックを作る"><a href="#落ちるブロックを作る" class="headerlink" title="落ちるブロックを作る"></a>落ちるブロックを作る</h3><p>3D空間に重力を設定して、落ちるブロックを作成します。</p><p>まず、落ちるブロックを作ってプレハブ化します。プレハブ化すると、同じオブジェクトを再利用することが出来ます。</p><p>Canvas に Box を置いて、その Box を assets にドラッグするとプレハブ化することが出来ます。</p><p><img src="WS002136.png" alt="プレハブ化" loading="lazy"></p><p>次にスクリプトを書くため、assets に TypeScriptファイル を追加します。</p><p><img src="WS002137.png" alt="TypeScriptファイル追加" loading="lazy"></p><p>作ったスクリプトファイルに下記ソースを貼り付けます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const &#123; ccclass, property &#125; = cc._decorator;</span><br><span class="line">@ccclass</span><br><span class="line">export default class NewScript extends cc.Component &#123;</span><br><span class="line">  start() &#123;</span><br><span class="line">    // 物理システムを有効にする.</span><br><span class="line">    cc.director.getPhysics3DManager().enabled = true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ブロックが重力の影響を受けるようにする"><a href="#ブロックが重力の影響を受けるようにする" class="headerlink" title="ブロックが重力の影響を受けるようにする"></a>ブロックが重力の影響を受けるようにする</h4><p>ブロックに Rigid Body 3D を設定すると、重力の影響を受けるようになります。</p><p><img src="WS002138.png" alt="Rigid Body 3D 設定" loading="lazy"></p><p>実行すると、ブロックがひたすら落ちていきます。</p><h3 id="コンベアを作る"><a href="#コンベアを作る" class="headerlink" title="コンベアを作る"></a>コンベアを作る</h3><p>Blender で作った 3Dモデル に当たり判定を付けていきます。</p><p>流れる部分と壁に BoxCollider3D を付けて行きます。</p><p><img src="WS002142.png" alt="BoxCollider3D 設定" loading="lazy"></p><p>実行すると、このようにブロックがすり抜けなくなります。</p><p><img src="cocos-creator-002.gif" alt="BoxCollider3D 設定後" loading="lazy"></p><p>あとは、同じ感じで作っていけば完成です。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>ソースコードを Github に上げたので、参考にどうぞ。</p><p><a href="https://github.com/noitaro/cocos-creator-conveyor">https://github.com/noitaro/cocos-creator-conveyor</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんなの作ります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;cocos-creator-003.gif&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://noitaro.github.io/cocos-creator-conveyor-web/&quot;&gt;</summary>
      
    
    
    
    
    <category term="game" scheme="https://noitaro.github.io/tags/game/"/>
    
    <category term="cocos-creator" scheme="https://noitaro.github.io/tags/cocos-creator/"/>
    
    <category term="blender" scheme="https://noitaro.github.io/tags/blender/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator 3.0 を使ってみる</title>
    <link href="https://noitaro.github.io/cocos-creator-3-0/"/>
    <id>https://noitaro.github.io/cocos-creator-3-0/</id>
    <published>2020-10-31T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.875Z</updated>
    
    <content type="html"><![CDATA[<p>先日 <a href="https://www.cocos.com/en/its-time-for-a-new-dimension-cocos-creator-3-0-tech-preview">Cocos Creator 3.0 Tech Preview</a> が公開されました。</p><p>Cocos Creator は 2Dゲームの開発に重点を置いて作られた IDE（統合開発環境）です。今回 Cocos Creator 3.0 が テクニカルプレビュー版 としてリリースされたので、早速試してみたいと思います。</p><p>Cocos Creator 3.0 になったことで、3Dゲームの開発がよりしやすくなったとの事です。Cocos Creator 2.x 時代でも 3Dゲームの開発は出来ていたのですが、どうにも使い勝手が良くありませんでした。</p><p>なのでメチャクチャ楽しみです！</p><h2 id="始めに"><a href="#始めに" class="headerlink" title="始めに"></a>始めに</h2><p>今現在（2020年10月31日）では、Cocos Creator 3.0 を Cocos Dashboard からダウンロードする事が出来ないので、直接 zipファイル ダウンロードして展開する必要があります。</p><p><img src="WS002085.png" alt="Cocos Dashboard" loading="lazy"></p><p>正式にリリースされれば、Cocos Dashboard からダウンロード出来るようになると思います。</p><h3 id="Cocos-Creator-3-0-テクニカルプレビュー版"><a href="#Cocos-Creator-3-0-テクニカルプレビュー版" class="headerlink" title="Cocos Creator 3.0 テクニカルプレビュー版"></a>Cocos Creator 3.0 テクニカルプレビュー版</h3><p><a href="https://www.cocos.com/en/its-time-for-a-new-dimension-cocos-creator-3-0-tech-preview">公式ブログ</a> からダウンロード出来ます。</p><p><img src="WS002086.png" alt="Cocos Creator 3.0 のダウンロード" loading="lazy"></p><p>とりあえず、Cドライブの直下に展開しておきました。</p><p><img src="WS002087-1.png" alt="圧縮ファイルの展開" loading="lazy"></p><p>展開が出来たら「CocosCreator3D.exe」をポチポチッとして起動させます。</p><p><img src="WS002088.png" alt="CocosCreator3Dを実行" loading="lazy"></p><p>「New Project」&gt;「empty」を選び、プロジェクトの保存先を指定して「Create」ボタンを押すと、CocosCreator3D のプロジェクトが作成されます。</p><p><img src="WS002089.png" alt="CocosCreator3D のプロジェクト作成" loading="lazy"></p><p>見た目は一緒ですね。</p><p><img src="WS002090.png" alt="CocosCreator3Dの画面" loading="lazy"></p><h2 id="3Dモデルをアニメーションさせてみる"><a href="#3Dモデルをアニメーションさせてみる" class="headerlink" title="3Dモデルをアニメーションさせてみる"></a>3Dモデルをアニメーションさせてみる</h2><p>試しに 3Dモデルを表示して、アニメーションさせてみましょう。</p><p><a href="https://noitaro.github.io/cocos-creator-3d-model-animation-github/">昔やった事</a> と同じ事を CocosCreator3D でもやってみます。</p><h3 id="FBXモデルのインポート"><a href="#FBXモデルのインポート" class="headerlink" title="FBXモデルのインポート"></a>FBXモデルのインポート</h3><p>assets に fbxモデル をドラッグして 3Dモデルを追加します。</p><p><img src="WS002092.png" alt="3Dモデルのインポート方法" loading="lazy"></p><p>こんな感じになればOK</p><p><img src="WS002093.png" alt="3Dモデルインポート" loading="lazy"></p><h2 id="Scene-に-3Dモデル-を追加"><a href="#Scene-に-3Dモデル-を追加" class="headerlink" title="Scene に 3Dモデル を追加"></a>Scene に 3Dモデル を追加</h2><p>次に、Scene に 3Dモデル を追加します。</p><p>assets の cat_rigged を Scene にドラッグすると 3Dモデル を追加出来ます。</p><p><img src="WS002095-1.png" alt="3Dモデルの追加方法" loading="lazy"></p><p>こんな感じになればOK</p><p><img src="WS002096.png" alt="3Dモデル追加" loading="lazy"></p><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>試しに実行してみましょう。</p><p>実行するとブラウザが立ち上がります。</p><p><img src="WS002097.png" alt="実行" loading="lazy"></p><p>う～ん、何か小さいですね。</p><p><img src="WS002098.png" alt="動作確認" loading="lazy"></p><h3 id="カメラを移動させる"><a href="#カメラを移動させる" class="headerlink" title="カメラを移動させる"></a>カメラを移動させる</h3><p>カメラを 3Dモデルに近づけましょう。</p><p>Scene の「Main Camera」を選択して、青矢印を動かします。</p><p>右下にカメラから見えてる映像がプレビューされるので、それを頼りに丁度よい位置を探します。</p><p><img src="WS002099.png" alt="カメラを移動" loading="lazy"></p><p>近づき過ぎると深度を外れてしまうので、これぐらいが限界でした。</p><p><img src="WS002101.png" alt="プレビューで確認" loading="lazy"></p><p>もう一度実行して、ブラウザで確認してみます。</p><p>今度は、いい感じになりました。が、アニメーションしていませんね。</p><p><img src="WS002102.png" alt="3Dモデルの確認" loading="lazy"></p><h3 id="アニメーションさせる"><a href="#アニメーションさせる" class="headerlink" title="アニメーションさせる"></a>アニメーションさせる</h3><p>今回使っている <a href="https://free3d.com/ja/3d-model/lowpoly-cat-rigged-run-animation-756268.html">3Dモデル</a> は、走るアニメーションが付いているんで、走らせてみましょう。</p><h4 id="Play-on-Load"><a href="#Play-on-Load" class="headerlink" title="Play on Load"></a>Play on Load</h4><p>Scene の「cat_rigged」3Dモデル を選択してから cc.SkeletalAnimation の「Play on Load」にチェックを入れます。</p><p><img src="WS002103.png" alt="Play on Load にチェックを入れる" loading="lazy"></p><h4 id="AnimationClip"><a href="#AnimationClip" class="headerlink" title="AnimationClip"></a>AnimationClip</h4><p>既に3つのアニメーションが付いているので、一度全て外します。</p><p>Clips の三角をクリックしてプルダウンを開き、ゴミ箱アイコンで設定済みのアニメーションを全てクリアします。</p><p><img src="WS002104.png" alt="アニメーションをクリアする" loading="lazy"></p><p>こんな感じになれば、ひとまずOK</p><p><img src="WS002105.png" alt="アニメーションクリア" loading="lazy"></p><p>で、改めて DefaultClip に走るアニメーションをドラッグで設定します。</p><p><img src="WS002106.png" alt="アニメーションを設定" loading="lazy"></p><p>こんな感じになればアニメーションの設定はOK</p><p><img src="WS002107.png" alt="アニメーションの設定" loading="lazy"></p><p>実行してアニメーションするか確認します。</p><p><img src="cocos-creator-3-0.gif" alt="3Dモデルアニメーションプレビュー" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>以前の Cocos Creator 2.x と比べると、使い方は全く一緒に感じました。</p><p>動作は軽くなった気がします。</p><p>もっと色々試してみたいと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先日 &lt;a href=&quot;https://www.cocos.com/en/its-time-for-a-new-dimension-cocos-creator-3-0-tech-preview&quot;&gt;Cocos Creator 3.0 Tech Preview&lt;/a&gt; が公開さ</summary>
      
    
    
    
    
    <category term="game" scheme="https://noitaro.github.io/tags/game/"/>
    
    <category term="3d-model" scheme="https://noitaro.github.io/tags/3d-model/"/>
    
    <category term="cocos-creator" scheme="https://noitaro.github.io/tags/cocos-creator/"/>
    
  </entry>
  
  <entry>
    <title>フォルダがグループ表示になった時の戻し方</title>
    <link href="https://noitaro.github.io/cancel-group-display/"/>
    <id>https://noitaro.github.io/cancel-group-display/</id>
    <published>2020-10-24T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.827Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 10 の フォルダの見た目が変わってしまったので、その戻し方です。</p><h2 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h2><p>フォルダがたまに、グループ表示になってしまうんですよね。</p><p><img src="WS002078.png" alt="グループ表示" loading="lazy"></p><p>グループ表示って見ずらいし分かりづらいので、1秒でも早く元の表示に戻したいんですが、毎回戻し方を忘れてしまうので私用に備忘録しておきます。</p><h2 id="グループ表示の解除方法"><a href="#グループ表示の解除方法" class="headerlink" title="グループ表示の解除方法"></a>グループ表示の解除方法</h2><p>フォルダ上部の表示タブをクリックして、現在のビューの「グループ化」を「なし」にするとグループ表示を解除する事が出来ます。</p><p><img src="WS002079.png" alt="グループ表示の解除方法" loading="lazy"></p><p>以上、未来の私へ愛を込めて。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows 10 の フォルダの見た目が変わってしまったので、その戻し方です。&lt;/p&gt;
&lt;h2 id=&quot;症状&quot;&gt;&lt;a href=&quot;#症状&quot; class=&quot;headerlink&quot; title=&quot;症状&quot;&gt;&lt;/a&gt;症状&lt;/h2&gt;&lt;p&gt;フォルダがたまに、グループ表示になってしま</summary>
      
    
    
    
    
    <category term="windows" scheme="https://noitaro.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Chrome拡張機能 を作ってみる</title>
    <link href="https://noitaro.github.io/chrome-extensions/"/>
    <id>https://noitaro.github.io/chrome-extensions/</id>
    <published>2020-10-22T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.839Z</updated>
    
    <content type="html"><![CDATA[<p>Chrome拡張機能 で何が出来るのか調べるために、Chrome拡張機能 を作ってみました。</p><p>結果としてローカルファイルにアクセスが出来ればよかったんですが、やっぱり厳しいようでした。</p><h2 id="Chrome拡張機能"><a href="#Chrome拡張機能" class="headerlink" title="Chrome拡張機能"></a>Chrome拡張機能</h2><p>簡単な Chrome拡張機能 を作ってみたいと思います。</p><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><p>始めに作業用フォルダを作って、その中に「manifest.json」という名前で新規ファイルを作成します。</p><p><img src="WS002064.png" alt="manifest.json" loading="lazy"></p><p>空っぽの「manifest.json」に下記を貼り付ければ、何もしないChrome拡張機能 の完成です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Hello Extensions&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Base Level Extension&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0&quot;,</span><br><span class="line">  &quot;manifest_version&quot;: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="WS002065.png" alt="manifest.json" loading="lazy"></p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>作ったからには、インストールして動作確認をしたいと思います。</p><p>Chromeメニューを押して「その他のツール」&gt;「拡張機能」の順に選択して 拡張機能の設定画面を開きます。</p><p><img src="WS002066.png" alt="「その他のツール」&gt;「拡張機能」の順に選択" loading="lazy"></p><p>またはブラウザのアドレスバーに「chrome:&#x2F;&#x2F;extensions&#x2F;」と入力しても、開く事が出来ます。</p><p><img src="WS002067.png" alt="chrome://extensions/" loading="lazy"></p><p>この状態だと開発中の拡張機能をインストールする事が出来ないので、右上のチェックをクリックしてデベロッパーモードを有効にします。</p><p>デベロッパーモードを有効にしたら「パッケージ化されていない拡張機能を読み込む」から「manifest.json」が保存してあるフォルダを指定して読み込むと、開発中の拡張機能をインストールする事が出来ます。</p><p><img src="WS002068.png" alt="パッケージ化されていない拡張機能を読み込む" loading="lazy"></p><p><img src="WS002069.png" alt="パッケージ化されていない拡張機能 読み込み後" loading="lazy"></p><h2 id="アイコンをクリックしたらダイアログを表示する"><a href="#アイコンをクリックしたらダイアログを表示する" class="headerlink" title="アイコンをクリックしたらダイアログを表示する"></a>アイコンをクリックしたらダイアログを表示する</h2><p>まだ何も機能しないので、簡単な「アイコンをクリックしたらダイアログを表示する」機能を作ってみます。</p><p>まず「manifest.json」を下記のように書き換えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Hello Extensions&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Base Level Extension&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0&quot;,</span><br><span class="line">  &quot;manifest_version&quot;: 2,</span><br><span class="line">  &quot;background&quot;: &#123;</span><br><span class="line">    &quot;scripts&quot;: [</span><br><span class="line">      &quot;background.js&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;persistent&quot;: false</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;browser_action&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="WS002074.png" alt="manifest.json」書き換え" loading="lazy"></p><h3 id="persistent"><a href="#persistent" class="headerlink" title="persistent"></a>persistent</h3><p>「”persistent”: false」にする事でイベントページとして扱われるようになります。</p><p>なので「呼ばれた時だけ動けばいい」という機能を作る時に向いています。</p><h3 id="browser-action"><a href="#browser-action" class="headerlink" title="browser_action"></a>browser_action</h3><p>「”browser_action”: { }」この記述が無いと「chrome.browserAction.onClicked」が使えませんでした。</p><p>「Uncaught TypeError: Cannot read property ‘onClicked’ of undefined」</p><p><img src="WS002075.png" alt="Cannot read property &#39;onClicked&#39; of undefined" loading="lazy"></p><p>browser_action が無い拡張機能はありえないってことなんでしょうね。</p><h3 id="background-js"><a href="#background-js" class="headerlink" title="background.js"></a>background.js</h3><p>次に「manifest.json」と同じフォルダ内に「background.js」という名前で新規JavaScriptファイルを作ります。</p><p>その「background.js」ファイルに下記処理を貼り付けます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome.browserAction.onClicked.addListener(function () &#123;</span><br><span class="line">  return alert(&#x27;拡張機能を実行しました&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="WS002071.png" alt="background.js" loading="lazy"></p><p>これで、アイコンをクリックしたらダイアログを表示する機能が出来ました。</p><p>ファイルを保存してから、Chromeの更新ボタンを押して拡張機能を再読み込みさせます。</p><p><img src="WS002076.png" alt="拡張機能を再読み込み" loading="lazy"></p><h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><p>アイコンをクリックしてダイアログが表示されれば成功です。</p><p><img src="WS002077.png" alt="ダイアログが表示されれば成功" loading="lazy"></p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>なるほど、こんな感じに作っていけばいいのか。ってのが分かりました。</p><p>今回はダイアログを表示しましたが、指定したサイトを表示させたり、表示中のサイトに手を加えたり、いろいろな事が出来るはずです。</p><p>また何か面白い使い方が浮かんだら、試してみようと思います。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.chrome.com/extensions">https://developer.chrome.com/extensions</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Chrome拡張機能 で何が出来るのか調べるために、Chrome拡張機能 を作ってみました。&lt;/p&gt;
&lt;p&gt;結果としてローカルファイルにアクセスが出来ればよかったんですが、やっぱり厳しいようでした。&lt;/p&gt;
&lt;h2 id=&quot;Chrome拡張機能&quot;&gt;&lt;a href=&quot;#Chr</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="chrome" scheme="https://noitaro.github.io/tags/chrome/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
    <category term="json" scheme="https://noitaro.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>アンドロイド自動操作ツール</title>
    <link href="https://noitaro.github.io/android-automation-tool/"/>
    <id>https://noitaro.github.io/android-automation-tool/</id>
    <published>2020-10-18T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.659Z</updated>
    
    <content type="html"><![CDATA[<p>ブロックを組み合わせるだけで、アンドロイドを操作することができます。</p><h2 id="特徴"><a href="#特徴" class="headerlink" title="特徴"></a>特徴</h2><p>Androidの自動化を簡単に行うことができるアプリ</p><ul><li><p>プログラムを書く必要がなく、ブロックを組み合わせるだけで自動化が可能</p></li><li><p>事前にタップしたい箇所を登録することで、画面内を自動でタップすることができる。</p></li><li><p>実機はもちろんのこと、Androidエミュレーター（<a href="https://jp.bignox.com/">NoxPlayer</a> 等）に対応</p></li><li><p>マウスカーソルやフォーカスを奪われないため、裏で回し続けることができる。</p></li><li><p>作った自動操作ロジックは Python のみでも実行することができる。</p></li></ul><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="アンドロイド自動操作ツール-をダウンロードする"><a href="#アンドロイド自動操作ツール-をダウンロードする" class="headerlink" title="アンドロイド自動操作ツール をダウンロードする"></a>アンドロイド自動操作ツール をダウンロードする</h3><p>まずは <a href="https://github.com/noitaro/android-automation-tool/releases">こちら</a> からツールをダウンロードします。</p><p><img src="image-750.png" loading="lazy"></p><p>ダウンロードが出来たら展開しておきます。</p><p><img src="image-751.png" loading="lazy"></p><h3 id="adb-exe-をパソコンに入れる"><a href="#adb-exe-をパソコンに入れる" class="headerlink" title="adb.exe をパソコンに入れる"></a>adb.exe をパソコンに入れる</h3><p>このツールを使うには adb.exe が必須です。Noxを使う場合はNox用のadb.exeを使います。</p><p>adb.exe を使って アンドロイドからスクリーンショットを取得したり、画面をタップしたりするので必須となっています。</p><p>adb.exe は Android SDK Platform-Tools に含まれています。</p><p>なので <a href="https://developer.android.com/studio/releases/platform-tools.html">SDK Platform-Tools</a> をダウンロードしましょう。</p><p><img src="WS002037.png" alt="SDK Platform-Tools をダウンロード" loading="lazy"></p><p>チェックを入れて、ダウンロードボタンを押すと platform-tools_r30.0.4-windows.zip がダウンロード出来ます。</p><p><img src="WS002038.png" alt="platform-tools_r30.0.4-windows.zip がダウンロード" loading="lazy"></p><p>今の時期だと バージョンr30.0.4 がダウンロード出来ますが、この先バージョンが上がってもダウンロード手順は同じです。</p><p>ダウンロードしたファイルを右クリックして、展開します。</p><p><img src="WS002039.png" alt="展開" loading="lazy"></p><p>展開先は分かりやすく Cドライブの直下にしました。お好みで変えて下さい。</p><p><img src="WS002040-1.png" alt="展開先はCドライブの直下" loading="lazy"></p><p>パソコン側の設定は以上です。</p><h3 id="アンドロイドの-USBデバッグ-を有効にする"><a href="#アンドロイドの-USBデバッグ-を有効にする" class="headerlink" title="アンドロイドの USBデバッグ を有効にする"></a>アンドロイドの USBデバッグ を有効にする</h3><p>次に、アンドロイドの USBデバッグ を有効にします。</p><p>アンドロイドの設定の中にある「ビルド番号」を7回タップして「開発者向けオプション」を表示させます。</p><p><img src="71b774e9-screenshot_20190902-220649.png" alt="ビルド番号を7回タップ" loading="lazy"></p><p>設定項目に「開発者向けオプション」が増えているので開きます。</p><p><img src="a0d16a2e-screenshot_20190902-220659.png" alt="開発者向けオプション" loading="lazy"></p><p>「開発者向けオプション」を 有効 にします。</p><p><img src="78b804eb-screenshot_20190902-220713.png" alt="開発者向けオプションを 有効" loading="lazy"></p><p>そのままスクロールして USBデバッグ を 有効 にします。</p><p><img src="e3e39701-screenshot_20190902-220730.png" alt="USBデバッグ を 有効" loading="lazy"></p><p>以上でアンドロイド側の設定は完了です。</p><h2 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h2><p>いきなり超大作を作るのは大変なので、簡単なダンジョンの周回などを自動で出来るようにします。</p><p>ひとまず、ツールを起動させます。パイナップルのアイコンが目印です。</p><p><img src="image-752.png" loading="lazy"></p><p>起動時に PC保護 が出る場合は、詳細情報 を押して</p><p><img src="WS001955.png" alt="Windows によって PC が保護されました" loading="lazy"></p><p>実行で起動します。</p><p><img src="WS002044.png" alt="PC保護実行" loading="lazy"></p><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><p>左メニューから新規プロジェクトを作成する。</p><p><img src="image-753.png" loading="lazy"></p><h3 id="自動操作設定"><a href="#自動操作設定" class="headerlink" title="自動操作設定"></a>自動操作設定</h3><p>右上の「自動操作設定」から設定していきます。</p><h4 id="adb-exe-の設定"><a href="#adb-exe-の設定" class="headerlink" title="adb.exe の設定"></a>adb.exe の設定</h4><p>PC内の adb.exe を指定する。</p><p><img src="image-757.png" loading="lazy"></p><p>今回は Cドライブの直下に置いてあるので、この様に設定しました。</p><p>「C:\platform-tools_r30.0.4-windows\platform-tools\」</p><p><img src="image-756.png" loading="lazy"></p><h4 id="タッチ画像の作成"><a href="#タッチ画像の作成" class="headerlink" title="タッチ画像の作成"></a>タッチ画像の作成</h4><p>作ると言ってもスクショを撮って、トリミングして保存するだけなので簡単に作れます。</p><p><img src="image-755.png" loading="lazy"></p><p>同じ要領でアンドロイドを操作しながら、クリック対象をガシガシと追加して行きましょう。</p><h4 id="実機でスクリーンショットが撮れない場合は？"><a href="#実機でスクリーンショットが撮れない場合は？" class="headerlink" title="実機でスクリーンショットが撮れない場合は？"></a>実機でスクリーンショットが撮れない場合は？</h4><p>アンドロイドの USBデバッグ を見直してみて下さい。</p><p>USBモードは メディアデバイス になっているか？</p><p><img src="Screenshot_20201017-143255.png" alt="USBモードは メディアデバイス" loading="lazy"></p><p>その後に USBデバッグが有効になっているか？</p><p><img src="Screenshot_20201017-143326-1.png" alt="USBデバッグが有効になっているか？" loading="lazy"></p><h3 id="自動操作ロジック作成"><a href="#自動操作ロジック作成" class="headerlink" title="自動操作ロジック作成"></a>自動操作ロジック作成</h3><p>ある程度、クリック対象画像がそろったら実際にアンドロイドを自動操作させてみましょう。</p><p>今作った画像が画像ブロックに入っているので、使いたい画像をドラッグで取り出します。</p><p><img src="WS002057.png" alt="画像ブロック" loading="lazy"></p><p>ワークスペースにブロックが出てきたらOKです。</p><p><img src="WS002059.png" alt="ワークスペースにブロックが出てきたらOK" loading="lazy"></p><p>まだこのままだと動かないので「この画像をどうしたいのか？」処理を作っていきます。</p><p>自動操作の中にあるブロックをこの様に配置して下さい。</p><p><img src="WS002060.png" alt="ブロックをこの様に配置" loading="lazy"></p><h4 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h4><p>出来たら右上の「実行」ボタンを押します。そうすると組んだブロックの処理の通りに動くはずです。</p><p><img src="WS002061.png" alt="アンドロイド自動操作ツールの画面" loading="lazy"></p><h5 id="繰り返し処理をしたい場合は？"><a href="#繰り返し処理をしたい場合は？" class="headerlink" title="繰り返し処理をしたい場合は？"></a>繰り返し処理をしたい場合は？</h5><p>繰り返し処理をしたい場合は、繰り返しブロックを使います。</p><p>このように繰り返しブロックで括ると、その条件の時だけ処理をしてくれます。</p><p><img src="WS002062.png" alt="繰り返し処理" loading="lazy"></p><p>無限ループはこんな感じで作れます。</p><p><img src="WS002063.png" alt="無限ループ" loading="lazy"></p><h3 id="NoxPlayer-を自動操作する"><a href="#NoxPlayer-を自動操作する" class="headerlink" title="NoxPlayer を自動操作する"></a>NoxPlayer を自動操作する</h3><p>「adb.exe の場所を選択」で、NOX用のadb.exe を指定すると、NOXを自動操作する事が出来ます。</p><p>NOXをデフォルトでインストールした場合、「C:\Program Files\Nox\bin\adb.exe」があるので、こちらを指定してみて下さい。</p><p><img src="WS002345.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>どうでしょうか？</p><p>出来るだけ使いやすくシンプルに作ってみました。</p><p>まだスクリーンショット内をタップすることしか出来ませんが、もっと機能を追加して行けたらと思っています。</p><p>要望等ありましたら、気軽に言って下さい。</p><p><a href="https://github.com/noitaro/android-automation-tool">https://github.com/noitaro/android-automation-tool</a></p><h3 id="Python-で-Android-ゲーム-を自動操作"><a href="#Python-で-Android-ゲーム-を自動操作" class="headerlink" title="Python で Android ゲーム を自動操作"></a>Python で Android ゲーム を自動操作</h3><p>こんなツールもあるので、こちらも良ければ使ってみて下さい。</p><p><a href="https://noitaro.github.io/android-auto-play-opencv/">https://noitaro.github.io/android-auto-play-opencv/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ブロックを組み合わせるだけで、アンドロイドを操作することができます。&lt;/p&gt;
&lt;h2 id=&quot;特徴&quot;&gt;&lt;a href=&quot;#特徴&quot; class=&quot;headerlink&quot; title=&quot;特徴&quot;&gt;&lt;/a&gt;特徴&lt;/h2&gt;&lt;p&gt;Androidの自動化を簡単に行うことができるアプリ&lt;/</summary>
      
    
    
    
    
    <category term="adb" scheme="https://noitaro.github.io/tags/adb/"/>
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="opencv" scheme="https://noitaro.github.io/tags/opencv/"/>
    
    <category term="games" scheme="https://noitaro.github.io/tags/games/"/>
    
    <category term="automation" scheme="https://noitaro.github.io/tags/automation/"/>
    
    <category term="android-auto-play" scheme="https://noitaro.github.io/tags/android-auto-play/"/>
    
  </entry>
  
  <entry>
    <title>Electron をパッケージ化して exe を作る</title>
    <link href="https://noitaro.github.io/electron-exe/"/>
    <id>https://noitaro.github.io/electron-exe/</id>
    <published>2020-10-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.027Z</updated>
    
    <content type="html"><![CDATA[<p>Electron をパッケージ化して exe形式にします。</p><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p><a href="https://noitaro.github.io/electron-desktop-app/">前回</a> の続きから作業して行きます。</p><h2 id="electron-packager-をインストール"><a href="#electron-packager-をインストール" class="headerlink" title="electron-packager をインストール"></a>electron-packager をインストール</h2><p>npm で Electron をパッケージ化するモジュールを グローバルにインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron-packager -g</span><br></pre></td></tr></table></figure><p><img src="WS002022.png" loading="lazy"></p><h2 id="パッケージ化"><a href="#パッケージ化" class="headerlink" title="パッケージ化"></a>パッケージ化</h2><p>electron-packager をグローバルにインストールするとelectron-packager のコマンドが使えるようになります。</p><p>とりあえず、作れるパッケージを全て作ってみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electron-packager ./ --all</span><br></pre></td></tr></table></figure><p><img src="WS002024.png" loading="lazy"></p><p><img src="WS002025.png" loading="lazy"></p><p>数が多いので少し時間がかかりました。配布先が決まっているなら、それだけをパッケージ化する方がいいと思います。</p><h3 id="Windows用の-exeだけ作る場合"><a href="#Windows用の-exeだけ作る場合" class="headerlink" title="Windows用の exeだけ作る場合"></a>Windows用の exeだけ作る場合</h3><p>Linux用とかMac用は要らないから Windows用の exeだけ作ってほしい場合は、下記コマンドを実行しましょう。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electron-packager ./ --platform=win32 --arch=x64</span><br></pre></td></tr></table></figure><p><img src="WS002026.png" loading="lazy"></p><p><img src="WS002027.png" loading="lazy"></p><p>上の方法だと Windows 64bit 用のexeしか出来ません。Windows 32bit 用のexeを作りたい場合は「–arch&#x3D;ia32」に変えて実行します。</p><h2 id="パッケージ化した-exeを実行"><a href="#パッケージ化した-exeを実行" class="headerlink" title="パッケージ化した exeを実行"></a>パッケージ化した exeを実行</h2><p>パッケージ化した exeを実行してみます。</p><p>出来上がった「electron-hello-world-win32-x64」フォルダ内の「electron-hello-world.exe」を実行します。</p><p><img src="WS002028.png" loading="lazy"></p><p>ちゃんと起動して画面が表示されますよ。</p><p><img src="WS002030.png" loading="lazy"></p><h2 id="exeアイコンを変える"><a href="#exeアイコンを変える" class="headerlink" title="exeアイコンを変える"></a>exeアイコンを変える</h2><p>Electron のアイコンでパッケージ化されてしまうので、アイコンをオリジナルのに変えてみます。</p><p>アイコンは <a href="https://icon-icons.com/ja/pack/Pineapple/2545">こちら</a> からダウンロードしました。アイコンをプロジェクト内のフォルダに保存して下記コマンドを実行すると、指定したアイコンのexeが出来上がります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electron-packager ./ --platform=win32 --arch=x64 --icon=pineapple_emoticon_emoji_icon_152245.ico</span><br></pre></td></tr></table></figure><p><img src="WS002031.png" loading="lazy"></p><p>しかし使ったアイコンが悪いのか、ある程度大きく表示しないとアイコンが変わりませんでした。</p><h2 id="ウインドウ左上のアイコンを変える"><a href="#ウインドウ左上のアイコンを変える" class="headerlink" title="ウインドウ左上のアイコンを変える"></a>ウインドウ左上のアイコンを変える</h2><p>「main.js」の BrowserWindowオプションでアイコンを指定すると変えることが出来ます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const &#123; app, BrowserWindow &#125; = require(&#x27;electron&#x27;)</span><br><span class="line">function createWindow() &#123;</span><br><span class="line">  const win = new BrowserWindow(&#123;</span><br><span class="line">    width: 800,</span><br><span class="line">    height: 500,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;icon&#x27;: __dirname + &#x27;/pineapple_emoticon_emoji_icon_152245.ico&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">  win.setMenu(null)</span><br><span class="line">  win.loadFile(&#x27;index.html&#x27;)</span><br><span class="line">  win.webContents.openDevTools()</span><br><span class="line">&#125;</span><br><span class="line">app.whenReady().then(createWindow)</span><br></pre></td></tr></table></figure><p><img src="WS002033-1024x409.png" loading="lazy"></p><p><img src="WS002035.png" loading="lazy"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Electron のパッケージ化で感じたことがあります。</p><h3 id="ソースコードが丸裸"><a href="#ソースコードが丸裸" class="headerlink" title="ソースコードが丸裸"></a>ソースコードが丸裸</h3><p>ソースコードが丸裸なことが気になりました。exeの中に組み込んでくれると思ったら「resources」フォルダ内に置いてあるだけ。</p><p>イヤだな。</p><p>ソースコードを読まれたく無いから JavaScript 難読化しないといけない。</p><h3 id="必要なファイルが多すぎ"><a href="#必要なファイルが多すぎ" class="headerlink" title="必要なファイルが多すぎ"></a>必要なファイルが多すぎ</h3><p>実行に必要な DLLやファイルが多すぎる。</p><p><img src="WS002036.png" loading="lazy"></p><p>ただ実行するだけなのにこんなにも詰め込まないといけないのはナンセンスな気がしました。</p><p>出来ればexeだけを配布して、実行できればいいのに。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Electron をパッケージ化して exe形式にします。&lt;/p&gt;
&lt;h2 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://noitaro.gith</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="electron" scheme="https://noitaro.github.io/tags/electron/"/>
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Electron でアンドロイドのスクリーンショット</title>
    <link href="https://noitaro.github.io/electron-android-screenshot/"/>
    <id>https://noitaro.github.io/electron-android-screenshot/</id>
    <published>2020-09-22T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.023Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js を使ってアンドロイドのスクリーンショットを取得する方法です。</p><h2 id="Electronアプリ作成"><a href="#Electronアプリ作成" class="headerlink" title="Electronアプリ作成"></a>Electronアプリ作成</h2><p>今回も Electronアプリを作成します。</p><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><p>見た目をよくするために、<a href="https://materializecss.com/">Materialize</a> CSSフレームワークを使用しています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Hello World!&lt;/title&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">  &lt;link href=&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;section&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col&quot;&gt;</span><br><span class="line">          &lt;button type=&quot;button&quot; class=&quot;waves-effect waves-light btn&quot; onclick=&quot;run()&quot;&gt;スクリーンショット取得&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col&quot;&gt;</span><br><span class="line">          &lt;img id=&quot;img&quot; class=&quot;materialboxed&quot; width=&quot;650&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><p>adb.exe のパスは書き換えて下さい。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const childProcess = require(&#x27;child_process&#x27;);</span><br><span class="line">function run() &#123;</span><br><span class="line">    let binaryData = childProcess.execSync(&#x27;&quot;D:/Program Files/Nox/bin/adb&quot; exec-out screencap -p&#x27;);</span><br><span class="line">    let blob = new Blob([binaryData], &#123; type: &quot;image/jpeg&quot; &#125;);</span><br><span class="line">    let url = URL.createObjectURL(blob);</span><br><span class="line">    let img = document.getElementById(&quot;img&quot;);</span><br><span class="line">    img.src = url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>Electronアプリを実行して スクリーンショット取得ボタンを押すと、アンドロイドのスクリーンショットが画面に表示されます。</p><p><img src="WS002013.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Node.js を使ってアンドロイドのスクリーンショットを取得する方法です。&lt;/p&gt;
&lt;h2 id=&quot;Electronアプリ作成&quot;&gt;&lt;a href=&quot;#Electronアプリ作成&quot; class=&quot;headerlink&quot; title=&quot;Electronアプリ作成&quot;&gt;&lt;/a&gt;E</summary>
      
    
    
    
    
    <category term="adb" scheme="https://noitaro.github.io/tags/adb/"/>
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="electron" scheme="https://noitaro.github.io/tags/electron/"/>
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Electron からコマンドライン実行</title>
    <link href="https://noitaro.github.io/electron-exec/"/>
    <id>https://noitaro.github.io/electron-exec/</id>
    <published>2020-09-20T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.031Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js を使ってコマンドライン実行をする方法を紹介します。</p><h2 id="Electronアプリの作成"><a href="#Electronアプリの作成" class="headerlink" title="Electronアプリの作成"></a>Electronアプリの作成</h2><p>Googleが推奨する <a href="https://materializecss.com/">マテリアルデザイン</a> が好きなので CSSフレームワーク を読み込んで見た目を変更しています。</p><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Hello World!&lt;/title&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">  &lt;link href=&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;section&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;input-field col l11&quot;&gt;</span><br><span class="line">          &lt;input id=&quot;inputtext1&quot; type=&quot;text&quot; class=&quot;validate&quot;&gt;</span><br><span class="line">          &lt;label for=&quot;last_name&quot;&gt;シェルコマンド&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;input-field col l1&quot;&gt;</span><br><span class="line">          &lt;button type=&quot;button&quot; class=&quot;waves-effect waves-light btn&quot; onclick=&quot;run()&quot;&gt;実行&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;input-field col s12&quot;&gt;</span><br><span class="line">          &lt;textarea id=&quot;textarea1&quot; class=&quot;materialize-textarea&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">          &lt;label for=&quot;textarea1&quot;&gt;実行結果&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const util = require(&#x27;util&#x27;);</span><br><span class="line">const childProcess = require(&#x27;child_process&#x27;);</span><br><span class="line">const exec = util.promisify(childProcess.exec);</span><br><span class="line">async function run() &#123;</span><br><span class="line">  let result = await exec(document.getElementById(&#x27;inputtext1&#x27;).value);</span><br><span class="line">  document.getElementById(&#x27;textarea1&#x27;).value = result.stdout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちょっと長いですが、htmlファイルとjsファイルに貼り付けて Electron で読み込めばオシャレな画面が表示されます。</p><p><img src="WS002010.png" loading="lazy"></p><h2 id="コマンドライン実行"><a href="#コマンドライン実行" class="headerlink" title="コマンドライン実行"></a>コマンドライン実行</h2><p>コマンドを入力して 実行ボタンを押せば、実行結果が表示されます。</p><p><img src="WS002011.png" loading="lazy"></p><h2 id="文字化け対策"><a href="#文字化け対策" class="headerlink" title="文字化け対策"></a>文字化け対策</h2><p>え？「文字化けしてるじゃん」ですって？</p><p>そーです。コマンドラインは「Shift_JIS」で動作しているので「UNICODE」にエンコーディングしてあげる必要があります。</p><p>npm で encoding-japanese モジュール をインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install encoding-japanese --save</span><br></pre></td></tr></table></figure><p>JavaScript を少し修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const util = require(&#x27;util&#x27;);</span><br><span class="line">const childProcess = require(&#x27;child_process&#x27;);</span><br><span class="line">const exec = util.promisify(childProcess.exec);</span><br><span class="line">const Encoding = require(&#x27;encoding-japanese&#x27;); // npm install encoding-japanese --save</span><br><span class="line">async function run() &#123;</span><br><span class="line">  // let result = await exec(document.getElementById(&#x27;inputtext1&#x27;).value);</span><br><span class="line">  // document.getElementById(&#x27;textarea1&#x27;).value = result.stdout;</span><br><span class="line">  let result = await exec(document.getElementById(&#x27;inputtext1&#x27;).value, &#123; encoding: &#x27;Shift_JIS&#x27; &#125;);</span><br><span class="line">  document.getElementById(&#x27;textarea1&#x27;).value = Encoding.convert(result.stdout, &#123; from: &#x27;SJIS&#x27;, to: &#x27;UNICODE&#x27;, type: &#x27;string&#x27; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで文字化けしなくなります。</p><p><img src="WS002012.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Electron はホントに素晴らしいですね。</p><p>画面も処理も Webアプリ感覚で作れてしまいます。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Node.js を使ってコマンドライン実行をする方法を紹介します。&lt;/p&gt;
&lt;h2 id=&quot;Electronアプリの作成&quot;&gt;&lt;a href=&quot;#Electronアプリの作成&quot; class=&quot;headerlink&quot; title=&quot;Electronアプリの作成&quot;&gt;&lt;/a&gt;Ele</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="electron" scheme="https://noitaro.github.io/tags/electron/"/>
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
    <category term="material" scheme="https://noitaro.github.io/tags/material/"/>
    
  </entry>
  
  <entry>
    <title>Electron で jQuery を使う</title>
    <link href="https://noitaro.github.io/electron-jquery/"/>
    <id>https://noitaro.github.io/electron-jquery/</id>
    <published>2020-09-17T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.031Z</updated>
    
    <content type="html"><![CDATA[<p>Electron で Bootstrap を使おうと思ったら、思いの外手こずったのでその備忘録です。</p><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p>Bootstrap を使うには jQuery が必須となっています。</p><p>で、jQuery を入れると Node.js の require が使えなくなって悪戦苦闘。</p><h2 id="nodeIntegration-を-false-にする（NG）"><a href="#nodeIntegration-を-false-にする（NG）" class="headerlink" title="nodeIntegration を false にする（NG）"></a>nodeIntegration を false にする（NG）</h2><p>何も設定を変えず jQuery と Bootstrap を入れてみる。</p><p>公式サイトにあった <a href="https://getbootstrap.com/docs/4.5/getting-started/introduction/#starter-template">テンプレート</a> を貼り付けて実行してみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;!-- Required meta tags --&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;</span><br><span class="line">  &lt;title&gt;Hello World!&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Bootstrap CSS --&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot; integrity=&quot;sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z&quot; crossorigin=&quot;anonymous&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">  const util = require(&#x27;util&#x27;);</span><br><span class="line"></span><br><span class="line">  &lt;!-- Optional JavaScript --&gt;</span><br><span class="line">  &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;</span><br><span class="line">  &lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot; integrity=&quot;sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj&quot;</span><br><span class="line">    crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js&quot; integrity=&quot;sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN&quot;</span><br><span class="line">    crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&quot; integrity=&quot;sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="WS002002.png" alt="Uncaught TypeError: Bootstrap&#39;s JavaScript requires jQuery. jQuery must be included before Bootstrap&#39;s JavaScript." loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Bootstrap&#x27;s JavaScript requires jQuery. jQuery must be included before Bootstrap&#x27;s JavaScript.</span><br></pre></td></tr></table></figure><p>Bootstrap には jQuery が必要なので、Bootstrap より先に jQuery を読み込んでねって言ってます。</p><p>Bootstrap より先に jQuery を読み込んでるんですけどね。</p><p>これを解決させるには「main.js」内で設定してある nodeIntegration を false にする必要があります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const &#123; app, BrowserWindow &#125; = require(&#x27;electron&#x27;)</span><br><span class="line">function createWindow() &#123;</span><br><span class="line">  const win = new BrowserWindow(&#123;</span><br><span class="line">    width: 800,</span><br><span class="line">    height: 600,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  win.loadFile(&#x27;index.html&#x27;)</span><br><span class="line">  win.webContents.openDevTools()</span><br><span class="line">&#125;</span><br><span class="line">app.whenReady().then(createWindow)</span><br></pre></td></tr></table></figure><p><img src="WS002003.png" alt="nodeIntegration を false" loading="lazy"></p><p>nodeIntegration を false に変えて実行します。</p><p>jQuery と Bootstrap が正常に読み込まれて 先程のエラーは消えましたが、また別のエラーが出てしまいました。</p><p><img src="WS002006.png" alt="Uncaught ReferenceError: require is not defined" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught ReferenceError: require is not defined</span><br></pre></td></tr></table></figure><p>require がねーですの。</p><p>nodeIntegration を false にすると Node.js の require が削除されるみたいですね。</p><p>require を使わないならこれでイイのですが、jQuery も require も使いたい時があると思います。</p><h2 id="nodeIntegration-は-true-のまま"><a href="#nodeIntegration-は-true-のまま" class="headerlink" title="nodeIntegration は true のまま"></a>nodeIntegration は true のまま</h2><p>nodeIntegration を true に戻し、</p><p><img src="WS002008.png" alt="nodeIntegration は true" loading="lazy"></p><p>下記 JavaScript を追加すれば jQuery も require もどっちも使えるようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  window.nodeRequire = require;</span><br><span class="line">  delete window.module;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="WS002007.png" alt="window.nodeRequire = require;delete window.module;" loading="lazy"></p><p>ね。</p><p><img src="WS002004.png" alt="エラーが無いことを確認" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Electron で Bootstrap を使おうと思ったら、思いの外手こずったのでその備忘録です。&lt;/p&gt;
&lt;h2 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h2&gt;&lt;p&gt;Bootstra</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="electron" scheme="https://noitaro.github.io/tags/electron/"/>
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
    <category term="bootstrap" scheme="https://noitaro.github.io/tags/bootstrap/"/>
    
    <category term="jquery" scheme="https://noitaro.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>Electron でファイルを読み込む</title>
    <link href="https://noitaro.github.io/electron-show-open-dialog/"/>
    <id>https://noitaro.github.io/electron-show-open-dialog/</id>
    <published>2020-09-12T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ドラッグ・アンド・ドロップ-で読み込む"><a href="#ドラッグ・アンド・ドロップ-で読み込む" class="headerlink" title="ドラッグ・アンド・ドロップ で読み込む"></a>ドラッグ・アンド・ドロップ で読み込む</h2><p>ドラッグ・アンド・ドロップ で画像ファイルを読み込みます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;ファイルをここにドラッグ&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;image-view&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.addEventListener(&#x27;drop&#x27;, (e) =&gt; &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line"></span><br><span class="line">        for (const f of e.dataTransfer.files) &#123;</span><br><span class="line">            console.log(&#x27;File(s) you dragged here: &#x27;, f.path)</span><br><span class="line">            const img = document.createElement(&#x27;img&#x27;);</span><br><span class="line">            img.src = f.path;</span><br><span class="line">            document.getElementById(&#x27;image-view&#x27;).appendChild(img);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    document.addEventListener(&#x27;dragover&#x27;, (e) =&gt; &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="WS001985.png" loading="lazy"></p><p><img src="WS001986.png" loading="lazy"></p><h2 id="ファイル選択ダイアログ-で読み込む"><a href="#ファイル選択ダイアログ-で読み込む" class="headerlink" title="ファイル選択ダイアログ で読み込む"></a>ファイル選択ダイアログ で読み込む</h2><p>ファイル選択ダイアログ で画像ファイルを読み込みます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;image_uploads&quot; accept=&quot;image/png, image/jpeg&quot;&gt;</span><br><span class="line">&lt;div id=&quot;image-view&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(&#x27;image_uploads&#x27;).addEventListener(&#x27;change&#x27;, (e) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        for (const f of e.target.files) &#123;</span><br><span class="line">            console.log(&#x27;File(s) you dragged here: &#x27;, f.path)</span><br><span class="line">            const img = document.createElement(&#x27;img&#x27;);</span><br><span class="line">            img.src = f.path;</span><br><span class="line">            document.getElementById(&#x27;image-view&#x27;).appendChild(img);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="WS001987.png" loading="lazy"></p><p><img src="WS001988.png" loading="lazy"></p><p><img src="WS001989.png" loading="lazy"></p><h2 id="Electron-のネイティブ呼び出しで読み込む"><a href="#Electron-のネイティブ呼び出しで読み込む" class="headerlink" title="Electron のネイティブ呼び出しで読み込む"></a>Electron のネイティブ呼び出しで読み込む</h2><p>Electron のネイティブシステムを使って、画像ファイルを読み込みます。</p><p>この方法は Electron でしか使えません。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;button&quot; id=&quot;image_uploads&quot;&gt;ファイルを選択&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;image-view&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(&#x27;image_uploads&#x27;).addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">        const &#123; dialog &#125; = require(&#x27;electron&#x27;).remote;</span><br><span class="line">        let files = dialog.showOpenDialogSync(&#123; filters: [&#123; name: &#x27;Images&#x27;, extensions: [&#x27;jpg&#x27;, &#x27;png&#x27;, &#x27;gif&#x27;] &#125;] &#125;)</span><br><span class="line"></span><br><span class="line">        for (const f of files) &#123;</span><br><span class="line">            console.log(&#x27;File(s) you dragged here: &#x27;, f)</span><br><span class="line">            const img = document.createElement(&#x27;img&#x27;);</span><br><span class="line">            img.src = f;</span><br><span class="line">            document.getElementById(&#x27;image-view&#x27;).appendChild(img);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="WS001991.png" loading="lazy"></p><p><img src="WS001992.png" loading="lazy"></p><p><img src="WS001993.png" loading="lazy"></p><h3 id="Electron-の-エントリーポイント-JavaScript-を修正"><a href="#Electron-の-エントリーポイント-JavaScript-を修正" class="headerlink" title="Electron の エントリーポイント JavaScript を修正"></a>Electron の エントリーポイント JavaScript を修正</h3><p>上記方法を試す場合は、BrowserWindow の webPreferences に「enableRemoteModule: true」を追加する必要があります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const &#123; app, BrowserWindow &#125; = require(&#x27;electron&#x27;)</span><br><span class="line">function createWindow () &#123;</span><br><span class="line">  const win = new BrowserWindow(&#123;</span><br><span class="line">    width: 300,</span><br><span class="line">    height: 300,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: true,</span><br><span class="line">      enableRemoteModule: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  win.loadFile(&#x27;./public/index.html&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">app.whenReady().then(createWindow)</span><br></pre></td></tr></table></figure><p><img src="WS001990.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ドラッグ・アンド・ドロップ-で読み込む&quot;&gt;&lt;a href=&quot;#ドラッグ・アンド・ドロップ-で読み込む&quot; class=&quot;headerlink&quot; title=&quot;ドラッグ・アンド・ドロップ で読み込む&quot;&gt;&lt;/a&gt;ドラッグ・アンド・ドロップ で読み込む&lt;/h2&gt;&lt;p&gt;ドラ</summary>
      
    
    
    
    
    <category term="electron" scheme="https://noitaro.github.io/tags/electron/"/>
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Electron でデスクトップアプリを作る</title>
    <link href="https://noitaro.github.io/electron-desktop-app/"/>
    <id>https://noitaro.github.io/electron-desktop-app/</id>
    <published>2020-09-08T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.023Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript で デスクトップアプリ が簡単に作れる Electron を試してみたいと思います。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p><a href="https://nodejs.org/">Node.js</a> がインストールされている前提で進めていきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"># v12.18.1</span><br><span class="line"></span><br><span class="line">npm -v</span><br><span class="line"># 6.14.5</span><br></pre></td></tr></table></figure><h2 id="Electronアプリ-を作る"><a href="#Electronアプリ-を作る" class="headerlink" title="Electronアプリ を作る"></a>Electronアプリ を作る</h2><p>Electron は Node.js によってパッケージ管理されているため、新規フォルダを作って プロジェクト を作成する必要があります。</p><h3 id="npmパッケージ-を作成"><a href="#npmパッケージ-を作成" class="headerlink" title="npmパッケージ を作成"></a>npmパッケージ を作成</h3><p>新規フォルダ内で下記コマンドを実行し「package.json」を作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>今回は「Hello-world」というアプリフォルダ名で作業して行きます。</p><p>初期化時の設定は下記の通りです。</p><ul><li>package name: hello-world（初期値）</li><li>version: 1.0.0（初期値）</li><li>description: 未入力</li><li>entry point: main.js</li><li>test command: 未入力</li><li>git repository: 未入力</li><li>keywords: 未入力</li><li>author: 未入力</li><li>license: ISC（初期値）</li></ul><p>変更点は entry point だけですね。index.js はメイン画面で使うので Electron では main.js に変更しました。</p><p><img src="WS001976.png" alt="npm init 実行" loading="lazy"></p><p>新規フォルダ内に「package.json」が作られました。</p><p><img src="WS001971.png" alt="package.json 作成" loading="lazy"></p><h4 id="package-json-を修正"><a href="#package-json-を修正" class="headerlink" title="package.json を修正"></a>package.json を修正</h4><p>「package.json」を作ったばかりですが、内容を一部修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>の部分を下記に修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;electron .&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>これを忘れると Electron の実行が出来ませんので忘れずに修正しましょう。</p><p><img src="WS001980.png" alt="package.json 修正" loading="lazy"></p><h3 id="Electron-をインストール"><a href="#Electron-をインストール" class="headerlink" title="Electron をインストール"></a>Electron をインストール</h3><p>次に Electronパッケージ をインストールします。</p><p>アプリフォルダ内で下記コマンドを実行し Electron をインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev electron</span><br></pre></td></tr></table></figure><p><img src="WS001972-1.png" alt="npm install electron 実行" loading="lazy"></p><p>アプリフォルダ内に「node_modules」フォルダと「package-lock.json」ファイルが作成されます。</p><p><img src="WS001973.png" alt="node_modules と package-lock.json 追加" loading="lazy"></p><h3 id="Electron用-JavaScript-の作成"><a href="#Electron用-JavaScript-の作成" class="headerlink" title="Electron用 JavaScript の作成"></a>Electron用 JavaScript の作成</h3><p>まず初めに Electron を制御するための JavaScript を作成します。</p><p>アプリフォルダ内に「main.js」ファイルを新規作成します。</p><p><img src="WS001974.png" alt="main.js 作成" loading="lazy"></p><p>「main.js」に下記をコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const &#123; app, BrowserWindow &#125; = require(&#x27;electron&#x27;);</span><br><span class="line">function createWindow () &#123;</span><br><span class="line">  const win = new BrowserWindow(&#123;</span><br><span class="line">    width: 800,</span><br><span class="line">    height: 600,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  win.loadFile(&#x27;index.html&#x27;);</span><br><span class="line">  // win.setMenu(null);</span><br><span class="line">  // win.webContents.openDevTools();</span><br><span class="line">&#125;</span><br><span class="line">app.whenReady().then(createWindow);</span><br></pre></td></tr></table></figure><p>これで Electronアプリ の起動準備が出来ました。</p><p><img src="WS001975.png" alt="main.js 修正" loading="lazy"></p><p>次に Electronアプリ内に表示する画面を作ります。</p><p>先程 index.html を読み込むように書いたので「index.html」を作ります。</p><p><img src="WS001977.png" alt="index.html 作成" loading="lazy"></p><p>「index.html」に下記をコピペします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello World!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">    We are using node &lt;script&gt;document.write(process.versions.node)&lt;/script&gt;,</span><br><span class="line">    Chrome &lt;script&gt;document.write(process.versions.chrome)&lt;/script&gt;,</span><br><span class="line">    and Electron &lt;script&gt;document.write(process.versions.electron)&lt;/script&gt;.</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="WS001978.png" alt="index.html 修正" loading="lazy"></p><h3 id="アプリの実行"><a href="#アプリの実行" class="headerlink" title="アプリの実行"></a>アプリの実行</h3><p>ここまで出来れば Electronアプリ を実行することが出来ます。</p><p>コマンドプロンプトに下記を入力して Electronアプリ を実行してみます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run test</span><br></pre></td></tr></table></figure><p><img src="WS001981.png" alt="Electronアプリ を実行" loading="lazy"></p><h4 id="エラーが出る場合は？"><a href="#エラーが出る場合は？" class="headerlink" title="エラーが出る場合は？"></a>エラーが出る場合は？</h4><p>D:\Electron\Hello-world&gt;npm run start<br>npm ERR! missing script: start</p><p><img src="WS001979.png" alt="npm ERR! missing script: start" loading="lazy"></p><p>「スクリプトの start なんて無いぜ」と言ってます。</p><p>「package.json」の scripts 修正忘れていませんか？ 少し記事をさかのぼって違いを探してみましょう。</p><h2 id="デバッグを簡単にする"><a href="#デバッグを簡単にする" class="headerlink" title="デバッグを簡単にする"></a>デバッグを簡単にする</h2><p>このままでもいいですが、実行するたびに「npm start」を入力するのは手間だと思います。</p><p>なので <a href="https://code.visualstudio.com/docs/editor/debugging#_launch-configurations">デバッグ実行の構成</a> を作ります。</p><p>VS Code の 実行アイコンを押して「launch.json ファイルを作成します」をクリック。</p><p><img src="WS001995.png" alt="launch.json ファイルを作成します" loading="lazy"></p><p>「Node.js」を選択。</p><p><img src="WS001996.png" alt="構成の選択" loading="lazy"></p><p>「構成の追加」を押して「Run “npm start” in a debug terminal」を選択したら設定完了です。</p><p><img src="WS001998.png" alt="Run &quot;npm start&quot; in a debug terminal" loading="lazy"></p><p>launch.json を保存してから デバッグ実行の構成を「Run npm start」に変えます。</p><p><img src="WS001999.png" alt="Run npm start" loading="lazy"></p><p>最後に「F5キー」を押すか デバックの開始 を押せば Electronアプリを実行できます。</p><p><img src="WS002000.png" alt="デバックの開始" loading="lazy"></p><p>「停止」ボタンを押せば終わらせることが出来ます。</p><p><img src="WS002001.png" alt="停止" loading="lazy"></p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>一番簡単な Electronアプリ が完成しました。</p><p>次回は、Electronアプリ をパッケージングして 配布できるようにします。</p><p>あとは、もう少し凝ったことをやってみたいと思っています。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.electronjs.org/docs">https://www.electronjs.org/docs</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JavaScript で デスクトップアプリ が簡単に作れる Electron を試してみたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;準備&quot;&gt;&lt;a href=&quot;#準備&quot; class=&quot;headerlink&quot; title=&quot;準備&quot;&gt;&lt;/a&gt;準備&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="vscode" scheme="https://noitaro.github.io/tags/vscode/"/>
    
    <category term="electron" scheme="https://noitaro.github.io/tags/electron/"/>
    
    <category term="node-js" scheme="https://noitaro.github.io/tags/node-js/"/>
    
    <category term="javascript" scheme="https://noitaro.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo のテーマを自作する</title>
    <link href="https://noitaro.github.io/generator-hexo-theme/"/>
    <id>https://noitaro.github.io/generator-hexo-theme/</id>
    <published>2020-09-07T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.075Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo のテーマを自作していきたいと思います。</p><p>といっても、新規テーマを作ってスタイルを整えるだけのやっつけお仕事です。</p><p>私には大層なスキルがないのでこれぐらいしか出来ないですが、よろしくお願い致します。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>今回は、Hexo の新規テーマをジェネレートしてくれる パッケージ を使います。</p><p><a href="https://github.com/tcrowe/generator-hexo-theme">generator-hexo-theme</a></p><p><a href="https://github.com/tcrowe/generator-hexo-theme">https://github.com/tcrowe/generator-hexo-theme</a></p><p>色々なオプションが用意されており、自分にあった新規テーマを作ってくれます。</p><p>Hexo は事前に用意しておいて下さい。</p><p>私は、何も手を加えていない出来たての Hexo を用意しました。</p><p><img src="WS001961.png" alt="Hexo" loading="lazy"></p><h2 id="パッケージを入れる"><a href="#パッケージを入れる" class="headerlink" title="パッケージを入れる"></a>パッケージを入れる</h2><p>新規テーマをジェネレートしてくれる パッケージ を入れます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --global yo</span><br><span class="line">npm install --global generator-hexo-theme</span><br></pre></td></tr></table></figure><h2 id="新規テーマをジェネレートする"><a href="#新規テーマをジェネレートする" class="headerlink" title="新規テーマをジェネレートする"></a>新規テーマをジェネレートする</h2><p>テーマフォルダ に 新規テーマフォルダ を作って 下記コマンドを実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo hexo-theme</span><br></pre></td></tr></table></figure><p>オプションを聞かれますので、自分が使いやすい設定にしましょう。</p><ul><li>What is the theme name?：テーマの名前を入力します。</li><li>Which template language to use?：テンプレート言語を選択します。私は JavaScript で書きたいため ejs を選択しました。</li><li>Which stylesheet language to use?：スタイルシート言語を選択します。私は複雑なスタイルが作れないので css を選択しました。</li><li>Other technical features：その他の設定。特にチェック無いです。</li></ul><p>これだけで、新規テーマフォルダ に 必要最低限のテーマファイルが追加されます。</p><p><img src="WS001965.png" alt="yo hexo-theme 実行" loading="lazy"></p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>新規テーマ を適応して動作確認をします。</p><p>_config.yml の theme を 今作った新規テーマ に書き換えて実行します。</p><p><img src="WS001967.png" alt="_config.yml の theme を修正" loading="lazy"></p><p>この通り、何もスタイルが設定されていない新規テーマが表示されます。</p><p><img src="WS001969.png" alt="generator-hexo-theme" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>次回は、この何もない新規テーマにスタイルを適応して見栄えを良くして行こうと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hexo のテーマを自作していきたいと思います。&lt;/p&gt;
&lt;p&gt;といっても、新規テーマを作ってスタイルを整えるだけのやっつけお仕事です。&lt;/p&gt;
&lt;p&gt;私には大層なスキルがないのでこれぐらいしか出来ないですが、よろしくお願い致します。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://noitaro.github.io/tags/hexo/"/>
    
    <category term="theme" scheme="https://noitaro.github.io/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>Nintendo Switch エミュレーター の Ryujinx を試す</title>
    <link href="https://noitaro.github.io/nintendo-switch-ryujinx/"/>
    <id>https://noitaro.github.io/nintendo-switch-ryujinx/</id>
    <published>2020-09-05T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.415Z</updated>
    
    <content type="html"><![CDATA[<p>PC で Nintendo Switch が遊べるとのことだったので、試してみました。</p><p>結果としては モッサリしていて快適に遊べませんでした。</p><p><a href="https://yuzu-emu.org/">yuzu</a> の方がまだ快適に動作します。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p><a href="https://noitaro.github.io/nintendo-switch-yuzu/">https://noitaro.github.io/nintendo-switch-yuzu/</a></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 2004</li><li>Intel Core i7 9700KF</li><li>Nvidia GeForce RTX 2060</li><li>.NET Core 3.1</li></ul><h2 id="必要なツールを揃える"><a href="#必要なツールを揃える" class="headerlink" title="必要なツールを揃える"></a>必要なツールを揃える</h2><h3 id="Ryujinx"><a href="#Ryujinx" class="headerlink" title="Ryujinx"></a>Ryujinx</h3><p>Nintendo Switch エミュレーター の本体です。</p><p><a href="https://ryujinx.org/">Ryujinx</a></p><p><a href="https://ryujinx.org/">https://ryujinx.org/</a></p><p><img src="WS001943.png" alt="Ryujinx ダウンロード" loading="lazy"></p><p>窓アイコン からダウンロードして、適当なところに展開しておきます。</p><p><img src="WS001944.png" alt="Ryujinx ダウンロード" loading="lazy"></p><h3 id="NET-Core-3-1-Runtime"><a href="#NET-Core-3-1-Runtime" class="headerlink" title=".NET Core 3.1 Runtime"></a>.NET Core 3.1 Runtime</h3><p>Ryujinx を実行するために必要です。</p><p>Ryujinx が実行できない場合、入れてみて下さい。</p><p><a href="https://dotnet.microsoft.com/download">.NET Core 3.1 Runtime</a></p><p><a href="https://dotnet.microsoft.com/download">https://dotnet.microsoft.com/download</a></p><p><img src="WS001945.png" alt=".NET Core 3.1 Runtime ダウンロード" loading="lazy"></p><p><img src="WS001946.png" alt=".NET Core 3.1 Runtime ダウンロード" loading="lazy"></p><h3 id="hekate"><a href="#hekate" class="headerlink" title="hekate"></a>hekate</h3><p>Nintendo Switch のブートローダーです。RCMモード時にペイロードします。自作アプリを起動させるための踏み台になります。</p><p>今回は、ゲームソフトをダンプするアプリを起動させるために使います。</p><p><a href="https://github.com/CTCaer/hekate/releases">hekate - Nyx</a></p><p><a href="https://github.com/CTCaer/hekate/releases">https://github.com/CTCaer/hekate/releases</a></p><p><img src="WS001947.png" alt="hekate ダウンロード" loading="lazy"></p><h3 id="Lockpick-RCM"><a href="#Lockpick-RCM" class="headerlink" title="Lockpick_RCM"></a>Lockpick_RCM</h3><p>prod.keysファイル をダンプするために使います。RCMモード時にペイロードします。</p><p>Nintendo Switch バージョン 7.0 以降から RCMモード時じゃないとダンプ出来ないキーが出てきたため、こちらを使います。</p><p><a href="https://github.com/shchmue/Lockpick_RCM/releases">Lockpick_RCM</a></p><p><a href="https://github.com/shchmue/Lockpick_RCM/releases">https://github.com/shchmue/Lockpick_RCM/releases</a></p><p><img src="WS001948.png" alt="Lockpick_RCM ダウンロード" loading="lazy"></p><h3 id="WAIN-Card-Dumper-v2-0-0"><a href="#WAIN-Card-Dumper-v2-0-0" class="headerlink" title="[WAIN]Card Dumper v2.0.0"></a>[WAIN]Card Dumper v2.0.0</h3><p>Nintendo Switch のゲームソフトをダンプするために使います。xci形式でダンプすることが出来ます。</p><p><a href="https://www.maxconsole.com/threads/switch-release-wain-card-dumper-v2-0-0.49490/">[WAIN]Card Dumper v2.0.0</a></p><p><a href="https://www.maxconsole.com/threads/switch-release-wain-card-dumper-v2-0-0.49490/">https://www.maxconsole.com/threads/switch-release-wain-card-dumper-v2-0-0.49490/</a></p><p><img src="WS001949.png" alt="[WAIN]Card Dumper v2.0.0 ダウンロード" loading="lazy"></p><h2 id="エミュレーター-を動かす"><a href="#エミュレーター-を動かす" class="headerlink" title="エミュレーター を動かす"></a>エミュレーター を動かす</h2><p>必要なツールがそろったので、実際にエミュレーターで動かしてみます。</p><h3 id="prod-keysファイル-をダンプする"><a href="#prod-keysファイル-をダンプする" class="headerlink" title="prod.keysファイル をダンプする"></a>prod.keysファイル をダンプする</h3><p>Lockpick_RCM を ペイロードして prod.keysファイル をダンプします。</p><p><img src="IMG_20200830_131942.png" alt="Lockpick_RCM を ペイロードして prod.keysファイル をダンプ" loading="lazy"></p><p>Lockpick_RCM を起動させたら、自動的に SDカードに prod.keysファイルがダンプされます。</p><p>SDカードの switchフォルダにダンプされるので PC にコピーしておきます。</p><p><img src="WS001951.png" alt="prod.keysファイルを PC にコピー" loading="lazy"></p><p>正常にダンプされていれば 10KB ほどのファイルサイズになっています。少ない場合は、失敗している可能性があるので再度挑戦します。</p><p>ダンプファイルの取り扱いには注意しましょう。</p><h3 id="ゲームソフトをダンプする"><a href="#ゲームソフトをダンプする" class="headerlink" title="ゲームソフトをダンプする"></a>ゲームソフトをダンプする</h3><p>[WAIN]Card Dumper を起動させて ゲームソフトをダンプします。</p><p>下記設定でダンプしました。</p><ul><li>Splitting：OFF ファイル分割しない</li><li>Remove Cert：NO 証明書削除しない</li><li>Destination：SD 保存先はSDカード</li></ul><p><img src="2020083013263000-DB1426D1DFD034027CECDE9C2DD914B8.png" alt="[WAIN]Card Dumper で ゲームソフトをダンプ" loading="lazy"></p><p>ダンプしたゲームソフトを PC にコピーしておきます。</p><p><img src="WS001952.png" alt="ゲームソフトを PC にコピー" loading="lazy"></p><p>ダンプファイルの取り扱いには注意しましょう。</p><h3 id="エミュレーター-を動かす-1"><a href="#エミュレーター-を動かす-1" class="headerlink" title="エミュレーター を動かす"></a>エミュレーター を動かす</h3><p>必要なものがそろったので Ryujinx を実行します。</p><p>ryujinx-1.0.5246-win_x64 -&gt; publish -&gt; Ryujinx.exe</p><p><img src="WS001953.png" alt="ryujinx-1.0.5246-win_x64 -&gt; publish -&gt; Ryujinx.exe" loading="lazy"></p><p>起動時に PC保護が出た場合は、詳細情報 を押して</p><p><img src="WS001955.png" alt="Windows によって PC が保護されました" loading="lazy"></p><p>実行ボタンを押せば起動します。</p><p><img src="WS001956.png" alt="Windows によって PC が保護されました" loading="lazy"></p><p>初回起動時に、下記警告が表示されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Key file was not found</span><br><span class="line">Please refer to &#x27;KEYS.md&#x27; for more info</span><br></pre></td></tr></table></figure><p><img src="WS001924.png" alt="Key file was not found" loading="lazy"></p><p>原因は prod.keysファイル を所定のフォルダに入れていないからです。なので、入れてあげましょう。</p><p>File -&gt; Open Ryujinx Folder を選択して、所定のフォルダを開きます。</p><p><img src="WS001927-1.png" alt="File -&gt; Open Ryujinx Folder を選択" loading="lazy"></p><p>開いた Ryujinxフォルダの systemフォルダに prod.keysファイルを入れます。</p><p><img src="WS001928.png" alt="systemフォルダに prod.keysファイルを入る" loading="lazy"></p><p>こんな感じになればOK</p><p><img src="WS001957.png" alt="prod.keys" loading="lazy"></p><p>prod.keysファイルを入れたら Ryujinx を再起動させておきます。</p><p>次に Firmware をインストールします。</p><p>PC にコピーした xciファイルに入っているので、それを指定します。</p><p>「Tools -&gt; Install Firmware -&gt; Install a firmware from XCI or ZIP」を選択します。</p><p><img src="WS001930.png" alt="「Tools -&gt; Install Firmware -&gt; Install a firmware from XCI or ZIP」を選択" loading="lazy"></p><p>ゲームソフトを選択して、ゲームソフト内の Firmware をインストールします。</p><p><img src="WS001931.png" alt="Choose the firmware file to open" loading="lazy"></p><p>successfully installed. と表示されればOKです。</p><p>今回は 9.0.1 がインストールされたみたいですね。</p><p><img src="WS001936.png" alt="9.0.1 がインストールされた" loading="lazy"></p><p>あとは、エミュレーターの設定を日本語に変えます。</p><p>「Options -&gt; Settings」を選択して設定画面を開きます。</p><p><img src="WS001958-1.png" alt="「Options -&gt; Settings」を選択" loading="lazy"></p><p>設定画面で「System」タブを選択し「System Region」と「System Language」を Japanese に変更します。</p><p><img src="WS001959.png" alt="「System Region」と「System Language」を Japanese に変更" loading="lazy"></p><p>変更したら「Save」ボタンを押します。</p><p>設定はこれで終わりです。</p><p>実際にゲームソフトを読み込んで遊んでみましょう。</p><p>「File -&gt; Load Application from File」を選択し、ゲームソフトを読み込みます。</p><p><img src="WS001937.png" alt="「File -&gt; Load Application from File」を選択" loading="lazy"></p><p><img src="WS001960.png" alt="Choose the file to open" loading="lazy"></p><p>ゲームソフトによると思いますが、快適に遊べるものもあれば重くて遊べないもの、起動すらしないものもあると思います。</p><p><img src="WS001942.png" alt="Ryujinx 実行画面" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PC で Nintendo Switch が遊べるとのことだったので、試してみました。&lt;/p&gt;
&lt;p&gt;結果としては モッサリしていて快適に遊べませんでした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://yuzu-emu.org/&quot;&gt;yuzu&lt;/a&gt; の方がまだ快適に動作</summary>
      
    
    
    
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="nintendo-switch" scheme="https://noitaro.github.io/tags/nintendo-switch/"/>
    
    <category term="hekate" scheme="https://noitaro.github.io/tags/hekate/"/>
    
    <category term="emulator" scheme="https://noitaro.github.io/tags/emulator/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 3.1 と SQL Server を使って Webアプリ を作成する</title>
    <link href="https://noitaro.github.io/aspnetcore-3-1-web-app-created/"/>
    <id>https://noitaro.github.io/aspnetcore-3-1-web-app-created/</id>
    <published>2020-08-28T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.747Z</updated>
    
    <content type="html"><![CDATA[<p>マイクロソフトのチュートリアル通り進めると「映画の情報を管理するアプリ」が完成します。</p><p><a href="https://docs.microsoft.com/ja-jp/aspnet/core/tutorials/razor-pages/razor-pages-start?view=aspnetcore-3.1&tabs=visual-studio">https://docs.microsoft.com/ja-jp/aspnet/core/tutorials/razor-pages/razor-pages-start?view=aspnetcore-3.1&amp;tabs=visual-studio</a></p><p>こいつを読み解きながら、作成して行こうと思います。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>Visual Studio 2019</li></ul><p>Visual Studio を使って作業して行くので、事前に使えるようセットアップしておきましょう。</p><ul><li>Docker Desktop</li></ul><p>今回は Docker システムを使ってみたいのでインストールしておきます。SQL Server も Webアプリ も Docker 上で動作させます。ちょっとカッコいい。</p><h2 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h2><p>まず初めに Webアプリケーション のプロジェクトを作成します。</p><p>Visual Studio を実行し「新しいプロジェクトの作成」を選択します。</p><p><img src="200827_1-1.png" alt="新しいプロジェクトの作成" loading="lazy"></p><p>プロジェクトのテンプレートに「ASP.NET Core Web アプリケーション」を選択し「次へ」ボタンを押します。</p><p><img src="200827_2.png" alt="ASP.NET Core Web アプリケーション" loading="lazy"></p><p>プロジェクト構成を確認して問題がなければ「作成」ボタンを押します。</p><p><img src="200827_3.png" alt="新しいプロジェクトを構成" loading="lazy"></p><p>下記のようにアプリケーションを設定し「作成」ボタンを押します。</p><ul><li>フレームワーク：.NET Core</li><li>フレームワークバージョン：ASP.NET Core 3.1</li><li>プロジェクトテンプレート：Web アプリケーション (モデル ビュー コントローラー)</li><li>認証：なし</li><li>HTTPS構成：チェックあり</li><li>Docker サポート：チェックあり</li><li>Docker サポート OS：Linux</li><li>Razor runtime：チェックあり</li></ul><p><img src="200827_4.png" alt="Web アプリケーション (モデル ビュー コントローラー)" loading="lazy"></p><p>プロジェクトの作成が出来たら「デバッグの開始」ボタンを押して、正常に動くことを確認します。</p><p><img src="200827_5.png" alt="デバッグの開始" loading="lazy"></p><p><img src="200827_6.png" alt="正常に動くことを確認" loading="lazy"></p><h2 id="モデル作成"><a href="#モデル作成" class="headerlink" title="モデル作成"></a>モデル作成</h2><p>映画を管理するクラスを作成します。</p><p>また、モデルクラスは Entity Framework Core (EF Core) を使ってデータベースを操作します。EF Core は、データアクセスをする マッパー なので簡単に 追加・更新・削除 の機能を実装することができます。</p><p>「Models」フォルダを選択し、マウスの右クリック を押します。</p><p><img src="200827_7.png" alt="モデル作成" loading="lazy"></p><p>コンテキストメニューから「追加 -&gt; クラス」を選択します。</p><p><img src="200827_8.png" alt="「追加 -&gt; クラス」を選択" loading="lazy"></p><p>名前を「Movie」に変更し「追加」ボタンを押します。</p><p><img src="200827_9.png" alt="「追加」ボタンを押す" loading="lazy"></p><p>Models フォルダ内に Movie のクラスファイルが追加されました。</p><p><img src="200827_10.png" alt="Movie のクラスファイル" loading="lazy"></p><p>Movie クラス に 下記プロパティを追加します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.ComponentModel.DataAnnotations;</span><br><span class="line"></span><br><span class="line">namespace WebApplication1.Models</span><br><span class="line">&#123;</span><br><span class="line">    public class Movie</span><br><span class="line">    &#123;</span><br><span class="line">        public int ID &#123; get; set; &#125;</span><br><span class="line">        public string Title &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">        [DataType(DataType.Date)]</span><br><span class="line">        public DateTime ReleaseDate &#123; get; set; &#125;</span><br><span class="line">        public string Genre &#123; get; set; &#125;</span><br><span class="line">        public decimal Price &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="200827_11.png" alt="プロパティを追加" loading="lazy"></p><h2 id="スキャフォールディング"><a href="#スキャフォールディング" class="headerlink" title="スキャフォールディング"></a>スキャフォールディング</h2><p>次に、今作った Movieモデル を スキャフォールディング します。</p><p>スキャフォールディング を実行すると、Movieモデル の 作成・読み取り・更新・削除 ページが自動生成されます。</p><p>まず「Controllers」フォルダを選択し、マウスの右クリック を押します。</p><p><img src="200827_12.png" alt="Controllers フォルダを選択" loading="lazy"></p><p>コンテキストメニューから「追加 -&gt; 新規スキャフォールディングアイテム」を選択します。</p><p><img src="200827_13.png" alt="追加 -&gt; 新規スキャフォールディングアイテム" loading="lazy"></p><p>新規スキャフォールディング アイテムの追加で「Entity Framework を使用したビューがある MVC コントローラー」を選択し「追加」ボタンを押します。</p><p><img src="200827_14.png" alt="Entity Framework を使用したビューがある MVC コントローラー を選択" loading="lazy"></p><p>「Entity Framework を使用したビューがある MVC コントローラー の追加」画面の設定をしていきます。</p><p>まず「モデル クラス」に「Movie (WebApplication1.Models)」を設定します。</p><p><img src="200827_15.png" alt="Movie (WebApplication1.Models) を設定" loading="lazy"></p><p>次に「データ コンテキスト クラス」の 「＋ (プラス)」ボタンを押して、データ コンテキストの追加をします。</p><p>特に変更せず「追加」ボタンを押します。</p><p><img src="200827_16.png" alt="追加ボタンを押す" loading="lazy"></p><p>最後に下記設定をして「追加」ボタンを押せば、スキャフォールディング が実行されます。</p><ul><li>ビューの生成：チェックあり</li><li>スクリプト ライブラリの参照：チェックあり</li><li>レイアウト ページを使用：チェックあり</li></ul><p><img src="200827_17.png" alt="スキャフォールディング を実行" loading="lazy"></p><p>NuGet のインストールがあるので少し時間はかかりますが、下記ファイルが作成されれば成功です。</p><ul><li>Controllers -&gt; MoviesController.cs</li><li>Models -&gt; Movie.cs</li><li>Views -&gt; Movies -&gt; Create.cshtml</li><li>Views -&gt; Movies -&gt; Delete.cshtml</li><li>Views -&gt; Movies -&gt; Details.cshtml</li><li>Views -&gt; Movies -&gt; Edit.cshtml</li><li>Views -&gt; Movies -&gt; Index.cshtml</li></ul><p><img src="200827_18.png" alt="下記ファイルが作成されれば成功" loading="lazy"></p><h2 id="接続文字列の修正"><a href="#接続文字列の修正" class="headerlink" title="接続文字列の修正"></a>接続文字列の修正</h2><p>次の工程に進む前に、接続文字列の修正をします。</p><p>先程の スキャフォールディング で「appsettings.json」に 接続文字列 が追加されました。</p><p><img src="200827_22.png" alt="appsettings.json の接続文字列" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;ConnectionStrings&quot;: &#123;</span><br><span class="line">  &quot;WebApplication1Context&quot;: &quot;Server=(localdb)\\mssqllocaldb;Database=WebApplication1Context-030d89c3-89e1-46f0-a903-ed108a831360;Trusted_Connection=True;MultipleActiveResultSets=true&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回は SQL Server につなぐので 下記に修正します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;ConnectionStrings&quot;: &#123;</span><br><span class="line">  &quot;WebApplication1Context&quot;: &quot;Data Source=localhost;Initial Catalog=WebApp1;User ID=SA;Password=&lt;YourStrong!Passw0rd&gt;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="データベース作成"><a href="#データベース作成" class="headerlink" title="データベース作成"></a>データベース作成</h2><p>今回使う データベース を作成しておきましょう。</p><p><img src="200827_26.png" alt="データベース作成" loading="lazy"></p><p>テーブルは次の工程で作成されますが、データベースは無理なのです。ちょっと残念。</p><h2 id="自動テーブル作成"><a href="#自動テーブル作成" class="headerlink" title="自動テーブル作成"></a>自動テーブル作成</h2><h3 id="移行-SQL-作成"><a href="#移行-SQL-作成" class="headerlink" title="移行 SQL 作成"></a>移行 SQL 作成</h3><p>次に、今作った Movieモデル の移行 SQL を自動生成させます。</p><p>テーブル作成 SQL が自動生成されるので、楽ちんですよ。</p><p>「ツール」&gt;「NuGet パッケージ マネージャー」の順で パッケージ マネージャー コンソール (PMC) を開きます。</p><p><img src="200827_19.png" alt="パッケージ マネージャー コンソール" loading="lazy"></p><p>開いた パッケージ マネージャー コンソール に下記コマンドを入力して 移行 SQL を作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-Migration InitialCreate</span><br></pre></td></tr></table></figure><p><img src="200827_20.png" alt="Add-Migration InitialCreate" loading="lazy"></p><p>プロジェクト内に「Migrations」フォルダが作られて、そのフォルダ内に 2つ の 移行ファイルが出来上がります。</p><p><img src="200827_21.png" alt="移行ファイルが完成" loading="lazy"></p><h3 id="自動テーブル作成-1"><a href="#自動テーブル作成-1" class="headerlink" title="自動テーブル作成"></a>自動テーブル作成</h3><p>出来上がった移行ファイルを実行して、テーブルを作ります。</p><p>パッケージ マネージャー コンソール に下記コマンドを入力すると、テーブルが作成されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Update-Database</span><br></pre></td></tr></table></figure><p><img src="200827_27.png" alt="Update-Database" loading="lazy"></p><p><img src="200827_28.png" alt="テーブルが作成された" loading="lazy"></p><p>ちなみに「dbo.__EFMigrationsHistory」はテーブルの移行履歴です。</p><p>モデルクラスを変更して、再度自動生成をした時に変更分だけが更新されるようになっているので、安心です。</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>映画の情報を管理するアプリ が完成したので、実際に動かして動作確認をします。</p><p>デバッグ実行をして「<a href="https://localhost:32770/Movies/%E3%80%8D%E3%81%AB%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%8B%E3%82%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%99%E3%82%8B%E3%81%A8%E3%80%81%E4%BB%8A%E5%9B%9E%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82">https://localhost:32770/Movies/」にブラウザからアクセスすると、今回作成したページが表示されます。</a></p><p><img src="200827_30.png" alt="動作確認" loading="lazy"></p><p>追加・更新・削除 も問題なく動きます。</p><p><img src="200827_31.png" alt="追加・更新・削除 の確認" loading="lazy"></p><h3 id="SQL-Server-に接続出来ない時は？"><a href="#SQL-Server-に接続出来ない時は？" class="headerlink" title="SQL Server に接続出来ない時は？"></a>SQL Server に接続出来ない時は？</h3><p>Docker の SQL Server を使っている場合、下記エラーが表示されるかもしれません。</p><blockquote><p>An unhandled exception occurred while processing the request.<br>SqlException: A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 40 - Could not open a connection to SQL Server)</p></blockquote><p><img src="200827_29.png" alt="サーバーが見つからなかったか、アクセスできませんでした。" loading="lazy"></p><p>対処方法を下記にまとめたので修正します。</p><h3 id="接続文字列の修正-1"><a href="#接続文字列の修正-1" class="headerlink" title="接続文字列の修正"></a>接続文字列の修正</h3><p>エラーの原因は Docker上の SQL Server につなげれないためです。</p><p>Docker は DNSサーバー を有しているので IPアドレス を指定してあげないと つなぐことが出来ないみたいです。</p><p><a href="https://stackoverflow.com/questions/52926064/how-to-connect-to-sql-sever-docker-container-from-another-container">How to connect to SQL Sever docker container from another container?</a></p><p><a href="https://stackoverflow.com/questions/52926064/how-to-connect-to-sql-sever-docker-container-from-another-container">https://stackoverflow.com/questions/52926064/how-to-connect-to-sql-sever-docker-container-from-another-container</a></p><p>これに気づかず躓いたので気をつけポイントですね。</p><p>まず、SQL Server の コンテナ名を調べます。</p><p>Docker Dashboard にあるコレが SQL Server の コンテナ名 ですね。</p><p><img src="200827_25.png" alt="Docker Dashboard でコンテナ名確認" loading="lazy"></p><p>次に、下記コマンドで Doker コンテナー の ネットワーク ID を調べます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p><img src="200827_23.png" alt="docker network ls" loading="lazy"></p><p>そして「bridge」の Network ID を コピーし、下記コマンドを実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect 74b39dcb7346</span><br></pre></td></tr></table></figure><p><img src="200827_24.png" alt="docker network inspect 74b39dcb7346" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot;Containers&quot;: &#123;</span><br><span class="line">    &quot;00e2d51c7b8adc1697c95c8b7bf5a28d49141489ece06083c6e15aba7149436d&quot;: &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;silly_engelbart&quot;,</span><br><span class="line">        &quot;EndpointID&quot;: &quot;8f5f1a8a9cca8f0312a17ff564ffdb16de69766932abfa2344c798d5b4aec1d1&quot;,</span><br><span class="line">        &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class="line">        &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</span><br><span class="line">        &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;f926042848b093be6004e1c721191ab43dd678486416953a7b2ae07ad8bcf7cc&quot;: &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;WebApplication1&quot;,</span><br><span class="line">        &quot;EndpointID&quot;: &quot;6c3d11c0c77ebd79c8c3c1c34447cbc1d0c7f5aa84e4fcc640b62cf9353301da&quot;,</span><br><span class="line">        &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">        &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">        &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>「Containers」の中にある「IPv4Address」 が Docker上 IPアドレスになります。</p><p>あとは「appsettings.json」の「ConnectionStrings」を修正して完成です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;ConnectionStrings&quot;: &#123;</span><br><span class="line">  &quot;WebApplication1Context&quot;: &quot;Data Source=172.17.0.3;Initial Catalog=WebApp1;User ID=SA;Password=&lt;YourStrong!Passw0rd&gt;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>SQL を一切書かずに 追加・更新・削除 の処理が作れたのに驚きました。</p><p>見た目はシンプルですが最低限の機能が備わっているので、あとは肉付けしていくだけですね。</p><p>Docker コンテナー になっているので、保守やメンテナンス・移行も簡単かもしれません。</p><p>Linux 上で展開できるのも魅力的だと思いました。</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>今回作ったプロジェクトを置いておきました。よければどうぞ。</p><p><a href="https://github.com/noitaro/aspnetcore-3-1-web-app-created">https://github.com/noitaro/aspnetcore-3-1-web-app-created</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.microsoft.com/ja-jp/aspnet/core/tutorials/razor-pages/razor-pages-start?view=aspnetcore-3.1&tabs=visual-studio">https://docs.microsoft.com/ja-jp/aspnet/core/tutorials/razor-pages/razor-pages-start?view=aspnetcore-3.1&amp;tabs=visual-studio</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;マイクロソフトのチュートリアル通り進めると「映画の情報を管理するアプリ」が完成します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/ja-jp/aspnet/core/tutorials/razor-pages/razor-page</summary>
      
    
    
    
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="sqlserver" scheme="https://noitaro.github.io/tags/sqlserver/"/>
    
    <category term="docker" scheme="https://noitaro.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker で SQL Server 2019 を動かす</title>
    <link href="https://noitaro.github.io/docker-sql-server/"/>
    <id>https://noitaro.github.io/docker-sql-server/</id>
    <published>2020-08-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.987Z</updated>
    
    <content type="html"><![CDATA[<p>Windows で作業しているなら 普通に SQL Server をインストールしたら良いだけの話ですが、私はインストールすることが嫌いです。</p><p>使っていけば思いもしない障害が発生することもあるので、出来るだけ PC はキレイなままで使いたいと思うのですよ。</p><p>なので Docker を使って SQL Server を動かしてみたいと思います。</p><p>今回は Windows PC を使いますが Docker がインストールされていれば Linux でも MacOS でも変わらず使えると思います。では、始めていきましょう。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>Docker Desktop がインストールされていること。</li></ul><h2 id="コンテナーイメージの取得と実行"><a href="#コンテナーイメージの取得と実行" class="headerlink" title="コンテナーイメージの取得と実行"></a>コンテナーイメージの取得と実行</h2><p>まず初めに SQL Server 2019 Linux コンテナーイメージ を取得します。</p><p>PowerShell で下記コマンドを実行すると、コンテナーイメージ が ローカルPC へダウンロードされます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mcr.microsoft.com/mssql/rhel/server:2019-CU1-rhel-8</span><br></pre></td></tr></table></figure><p><img src="200826_1.png" alt="コンテナーイメージ取得" loading="lazy"></p><p>次に、今取得した コンテナーイメージ を実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;&quot; -p 1433:1433 -d mcr.microsoft.com/mssql/rhel/server:2019-CU1-rhel-8</span><br></pre></td></tr></table></figure><p><img src="200826_2.png" alt="コンテナーイメージ実行" loading="lazy"></p><p>Docker Desktop の Dashboard でも 実行出来たことが確認できます。</p><p><img src="200826_3.png" alt="Docker Desktop の Dashboard 確認" loading="lazy"></p><h2 id="データベースに接続"><a href="#データベースに接続" class="headerlink" title="データベースに接続"></a>データベースに接続</h2><p>これで SQL Server 2019 が起動したので、さっそく接続してみましょう。</p><p>接続には「SQL Server Management Studio」を使います。</p><p>接続時の設定は下記の通りです。</p><ul><li>サーバの種類：データベース エンジン</li><li>サーバー名：localhost</li><li>認証：SQL Server 認証</li><li>ログイン：SA</li><li>パスワード：&lt;YourStrong!Passw0rd&gt;</li></ul><p><img src="200826_4.png" alt="SQL Server Management Studio サーバーへの接続" loading="lazy"></p><p>ユーザーSA のパスワードは コンテナ実行時と同じになります。</p><p>コピペで起動したなら、コピペパスワードで接続出来ます。</p><p><img src="200826_5.png" alt="SQL Server Management Studio 接続確認" loading="lazy"></p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>長ったらしいインストール作業もなく、コンテナーイメージを取得して実行するだけで SQL Server が使えちゃいました。</p><p>Docker には 他にもたくさんの コンテナーイメージ が公開されているので、色々使っていくと楽しいかと思います。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.microsoft.com/ja-jp/sql/linux/sql-server-linux-configure-docker">https://docs.microsoft.com/ja-jp/sql/linux/sql-server-linux-configure-docker</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows で作業しているなら 普通に SQL Server をインストールしたら良いだけの話ですが、私はインストールすることが嫌いです。&lt;/p&gt;
&lt;p&gt;使っていけば思いもしない障害が発生することもあるので、出来るだけ PC はキレイなままで使いたいと思うのですよ。&lt;/</summary>
      
    
    
    
    
    <category term="sqlserver" scheme="https://noitaro.github.io/tags/sqlserver/"/>
    
    <category term="docker" scheme="https://noitaro.github.io/tags/docker/"/>
    
    <category term="windows" scheme="https://noitaro.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Chrome OS をインストールして Google Play を使う方法</title>
    <link href="https://noitaro.github.io/chrome-os-installed/"/>
    <id>https://noitaro.github.io/chrome-os-installed/</id>
    <published>2020-08-23T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.843Z</updated>
    
    <content type="html"><![CDATA[<p>タンスの肥やしの中に <a href="https://amzn.to/47YUPra">N3510 ベアボーンPC</a> が眠っていたので、何か有効活用が出来ないか調べていたところ Chrome OS がインストール出来るとのことだったので実際にやってみました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/47YUPra"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/47YUPra"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | 東雲社（しののめしゃ）Pentium N3510ベアボーンPC 1.83GHZ デュアルコア ４スレッド（４GB DDR3L RAM+64G SSD+WiFi） window10 小型 ファンレス アルミ ブラック | 東 雲社（しののめしゃ） | ベアボーンPC 通販</div><div class="hbc-url">https://amzn.to/47YUPra</div></div></div></div></a></div></div><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><h3 id="Chrome-OS（クローム・オーエス）とは？"><a href="#Chrome-OS（クローム・オーエス）とは？" class="headerlink" title="Chrome OS（クローム・オーエス）とは？"></a>Chrome OS（クローム・オーエス）とは？</h3><p>Chrome OS（クローム・オーエス）とは、Linux をベースに Google が開発した OS（オペレーティングシステム）です。</p><p>Google Chrome ブラウザー に似たデザインで、主にウェブ閲覧とウェブアプリケーションを扱います。</p><p>また、Google Play がインストールされており Android アプリが動作することが他の Linux系 OS と違います。</p><h2 id="必須条件"><a href="#必須条件" class="headerlink" title="必須条件"></a>必須条件</h2><ul><li>Intel 系CPU を搭載している PC（UEFI をサポートしていることが必須）</li><li>Nvidia グラフィックカード非搭載</li></ul><p>タンスの肥やしになっていた <a href="https://amzn.to/47YUPra">N3510 アボーンPC</a> がちょうど条件をクリアしていました。ラッキー</p><p>あと、インストールに 8GB 以上の USBメモリ が必要です。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>必要なものを揃えます。</p><h3 id="Linux-Mint-MATE-isoイメージ"><a href="#Linux-Mint-MATE-isoイメージ" class="headerlink" title="Linux Mint MATE isoイメージ"></a>Linux Mint MATE isoイメージ</h3><p>Chrome OS をインストールするために一時的に使います。</p><p><a href="https://www.linuxmint.com/download.php">Linux Mint MATE</a></p><p>上記サイトから「MATE」を選択し、</p><p><img src="WS001894.png" alt="Linux Mint MATE を選択" loading="lazy"></p><p>「EvoWise CDN」を選択するとダウンロードできます。</p><p><img src="WS001895.png" alt="EvoWise CDN を選択" loading="lazy"></p><h3 id="Rufus"><a href="#Rufus" class="headerlink" title="Rufus"></a>Rufus</h3><p>Linux Mint を USBメモリ に入れる時に使います。</p><p><a href="https://rufus.ie/">Rufus</a></p><p>今回はインストールせずに使える Portable版 をダウンロードします。</p><p><img src="WS001896.png" alt="Rufus ポータブル ダウンロード" loading="lazy"></p><h3 id="Chrome-OS-recovery-image"><a href="#Chrome-OS-recovery-image" class="headerlink" title="Chrome OS recovery image"></a>Chrome OS recovery image</h3><p><a href="https://cros-updates-serving.appspot.com/">こちら</a> から 公式のChrome OS リカバリイメージ をダウンロードします。</p><p>まず、上記サイトを開き Ctrl + Fキー で「rammus」を検索します。</p><p>そして、最新版のリカバリイメージをダウンロードします。現在の最新版は「83」だったので 83 クリックしてリカバリイメージをダウンロードしました。</p><p><img src="WS001897.png" alt="rammus 83 ダウンロード" loading="lazy"></p><p>また、AMD CPU の場合は「grunt」版をダウンロードすると動くかも知れません。</p><p>Intel CPU でも 第4世代以降は「rammus」で、第3世代以前は「samus」になります。</p><h3 id="Brunch-framework"><a href="#Brunch-framework" class="headerlink" title="Brunch framework"></a>Brunch framework</h3><p>公式のChrome OS リカバリイメージ を 汎用 Chrome OS に変換してくれます。超重要で今回の要です。</p><p><a href="https://github.com/sebanc/brunch/releases">Brunch framework Releases</a></p><p>Chrome OS リカバリイメージと同じバージョンをダウンロードします。</p><p><img src="WS001898.png" alt="Brunch framework Releases" loading="lazy"></p><p>今回は Chrome OS リカバリイメージ が「83」だったので「r83」をダウンロードしました。</p><h3 id="Chrome-OS-インストール-スクリプト"><a href="#Chrome-OS-インストール-スクリプト" class="headerlink" title="Chrome OS インストール スクリプト"></a>Chrome OS インストール スクリプト</h3><p>Linux コマンドを入力しないでも Chrome OS をインストール出来る スクリプト をダウンロードします。</p><p><a href="https://github.com/shrikant2002/ChromeOS/blob/master/install.sh">Chrome OS インストール スクリプト</a></p><p>「Raw」を右クリックし「名前を付けてリンク先を保存」を選択するとスクリプトを保存することが出来ます。</p><p><img src="WS001899.png" alt="名前を付けてリンク先を保存" loading="lazy"></p><p><img src="WS001903.png" alt="名前を付けてリンク先を保存" loading="lazy"></p><h3 id="7-Zip"><a href="#7-Zip" class="headerlink" title="7-Zip"></a>7-Zip</h3><p>tar.gz形式 で圧縮されたファイルを展開する時に使います。</p><p><a href="https://sevenzip.osdn.jp/">7-Zip</a></p><p>ダウンロードしてインストールまで済ませておきましょう。</p><p><img src="WS001904-1024x420.png" alt="7-Zip ダウンロード" loading="lazy"></p><h2 id="Chrome-OS-をインストールする"><a href="#Chrome-OS-をインストールする" class="headerlink" title="Chrome OS をインストールする"></a>Chrome OS をインストールする</h2><p>インストール手順を簡単に説明します。</p><p>Linux Mint を起動し、そこから PC に Chrome OS をインストールします。HDD内のデータは全て削除されるので、必要なデータは移動させておきましょう。では、初めます。</p><h3 id="インストール-USB-を作成"><a href="#インストール-USB-を作成" class="headerlink" title="インストール USB を作成"></a>インストール USB を作成</h3><p>まず初めに インストール USB を作成します。</p><h4 id="「Linux-Mint」を書き込む"><a href="#「Linux-Mint」を書き込む" class="headerlink" title="「Linux Mint」を書き込む"></a>「Linux Mint」を書き込む</h4><p>USBメモリ を PC に挿して Rufus を起動します。</p><p>「選択」ボタンを押してダウンロードしておいた「linuxmint-20-mate-64bit.iso」を選択します。次に「スタート」ボタンを押して USBメモリ に Linux Mint を書き込みます。</p><p><img src="WS001905.png" alt="Rufus 使い方" loading="lazy"></p><p>また、USBメモリ内のデータは全て削除されるので、必要なデータは移動させておきましょう。</p><p>いくつかのダイアログが出ますが、気にせず進めます。</p><p><img src="WS001909.png" alt="警告ダイアログ" loading="lazy"></p><p><img src="WS001907.png" alt="警告ダイアログ" loading="lazy"></p><p><img src="WS001908.png" alt="警告ダイアログ" loading="lazy"></p><p>書き込みが終わったら「閉じる」ボタンを押して Rufus を終了させます。</p><p>次に 今書き込んだ USBメモリ のフォルダを開いて、その中に「Chrome OS」という名前の新規フォルダを作ります。</p><p><img src="WS001910.png" alt="「Chrome OS」という名前の新規フォルダを作る" loading="lazy"></p><p>で、その「Chrome OS」フォルダに必要なファイルを詰め込んで行きます。</p><h4 id="「Chrome-OS-インストール-スクリプト」を入れる"><a href="#「Chrome-OS-インストール-スクリプト」を入れる" class="headerlink" title="「Chrome OS インストール スクリプト」を入れる"></a>「Chrome OS インストール スクリプト」を入れる</h4><p>Chrome OS インストール スクリプト である「install.sh」ファイルを「Chrome OS」フォルダにコピーします。</p><p><img src="WS001912.png" alt="「Chrome OS」フォルダにコピー" loading="lazy"></p><h4 id="「Brunch-framework」を入れる"><a href="#「Brunch-framework」を入れる" class="headerlink" title="「Brunch framework」を入れる"></a>「Brunch framework」を入れる</h4><p>まず、ダウンロードしておいた「brunch_r83_k4.19_stable_20200708.tar.gz」を 7-Zip で展開します。</p><p><img src="WS001913.png" alt="7-Zip で展開" loading="lazy"></p><p>で、展開したフォルダ内にある「brunch_r83_k4.19_stable_20200708.tar」を再度 7-Zip で展開します。</p><p><img src="WS001914.png" alt="7-Zip で展開" loading="lazy"></p><p>展開して出てきたファイルを「Chrome OS」フォルダにコピーします。</p><p><img src="WS001915.png" alt="「Chrome OS」フォルダにコピー" loading="lazy"></p><p><img src="WS001916.png" alt="「Chrome OS」フォルダにコピー" loading="lazy"></p><h4 id="「Chrome-OS-recovery-image」を入れる"><a href="#「Chrome-OS-recovery-image」を入れる" class="headerlink" title="「Chrome OS recovery image」を入れる"></a>「Chrome OS recovery image」を入れる</h4><p>まず「chromeos_13020.87.0_rammus_recovery_stable-channel_mp-v2.bin.zip」を展開します。</p><p><img src="WS001917.png" alt="zip ファイルを展開" loading="lazy"></p><p>展開して出てきた「chromeos_13020.87.0_rammus_recovery_stable-channel_mp-v2.bin」ファイルを「rammus_recovery.bin」にリネームします。</p><p><img src="WS001919.png" alt="「rammus_recovery.bin」にリネーム" loading="lazy"></p><p>また別のリカバリーイメージをダウンロードした場合は、その名前にリネームして下さい。</p><p>リネームした「rammus_recovery.bin」ファイルを「Chrome OS」フォルダにコピーします。</p><p><img src="WS001921.png" alt="「rammus_recovery.bin」ファイルを「Chrome OS」フォルダにコピー" loading="lazy"></p><p>これで インストール USB の作成は完了です。</p><p>「Chrome OS」フォルダ内に 6つのファイルがあれば OK です。</p><p><img src="WS001922.png" alt="Chrome OS フォルダ内に 6つのファイル" loading="lazy"></p><h3 id="BIOS-設定を変更"><a href="#BIOS-設定を変更" class="headerlink" title="BIOS 設定を変更"></a>BIOS 設定を変更</h3><p>次に、インストールする PC の BIOS の設定を変更します。</p><p>今回は <a href="https://amzn.to/47YUPra">N3510 ベアボーンPC</a> を使って説明するので、設定出来る項目とかが若干違うかもしれませんが適材適所で臨機応変して下さい。</p><p>まず PC の電源を入れてすぐ Deleteキー か ESCキー を押しっぱなしにして BIOS 画面に入ります。</p><p><img src="Bay-Trail.png" alt="Bay-Trail" loading="lazy"></p><h4 id="CSM-Support-を-Disabled-無効-に変更する"><a href="#CSM-Support-を-Disabled-無効-に変更する" class="headerlink" title="CSM Support を Disabled(無効) に変更する"></a>CSM Support を Disabled(無効) に変更する</h4><p>左右キーで「Advanced」を選んで、上下キーで「CSM Configuration」を選んで エンターキーで 詳細設定をします。</p><p><img src="Advanced-CSM-Configuration_1.png" alt="CSM Configuration" loading="lazy"></p><p>「CSM Support」を「Disabled(無効)」に変更します。</p><p><img src="Advanced-CSM-Support-Disabled_1.png" alt="CSM Support Disabled" loading="lazy"></p><p>もし CSM Support が Enabled(有効) から Disabled(無効) に変更出来ない場合は、下記項目を UEFI に変更すると CSM Support を Disabled(無効) に変更出来ます。</p><ul><li>Boot option filter → UEFI only</li><li>Storage → UEFI</li><li>Video → UEFI</li><li>Other PCI Devices → UEFI</li></ul><p><img src="Advanced-CSM-Support-Enabled_1.png" alt="CSM Support Disabled" loading="lazy"></p><h4 id="Secure-Boot-を-Disabled-無効-に変更する"><a href="#Secure-Boot-を-Disabled-無効-に変更する" class="headerlink" title="Secure Boot を Disabled(無効) に変更する"></a>Secure Boot を Disabled(無効) に変更する</h4><p>ESCキー を何回か押すと最初の画面まで戻ることが出来ます。</p><p>左右キーで「Security」を選んで、上下キーで「Secure Boot menu」を選んで エンターキーで 詳細設定をします。</p><p><img src="Security-Secure-Boot-menu_1.png" alt="Secure Boot menu" loading="lazy"></p><p>「Secure Boot」を「Disabled(無効)」に変更します。</p><p><img src="Security-Secure-Boot-Disabled_1.png" alt="Secure Boot Disabled" loading="lazy"></p><p>変更が終わったら 最初の画面まで戻ります。</p><p>「Save &amp; Exit」を選んで「Save Changes and Exit」を選べば、設定が保存されて BIOS 画面が終了します。</p><p><img src="Save-and-Exit-Save-Changes-and-Exit_1.png" alt="Save Changes and Exit" loading="lazy"></p><h3 id="Chrome-OS-をインストール"><a href="#Chrome-OS-をインストール" class="headerlink" title="Chrome OS をインストール"></a>Chrome OS をインストール</h3><p>次に Chrome OS をインストール するため、USBメモリから Linux Mint を起動させます。</p><p>作成しておいた インストール USB を PC に挿して、電源を入れます。</p><p>USBメモリ から起動させるため F11キー を押しっぱなしにします。</p><p><img src="Bay-Trail.png" alt="Bay-Trail" loading="lazy"></p><p>一番上の「Start Linux Mint 20 MATE 64-bit」起動モードを選択した状態で エンタキー を押します。</p><p><img src="boot-the-selected-OS_1.png" alt="Start Linux Mint 20 MATE 64-bit" loading="lazy"></p><p>しばらくすると Linux Mint が起動します。</p><p><img src="Linux-Mint-desktop.png" alt="Linux Mint" loading="lazy"></p><p>Linux Mint が起動したら、右下のネットワークアイコンをクリックして Wi-Fi または イーサネット に接続します。</p><p>今回は、LANケーブル を接続してあったので自動的にネットワークと繋がりました。</p><p><img src="Connection-Established_1.png" alt="Connection-Established" loading="lazy"></p><p>その後、デスクトップの「Computer」をダブルクリックで開きます。</p><p><img src="Computer.png" alt="Computer を開く" loading="lazy"></p><p>左の「File System」タブを選択してから「media」フォルダをダブルクリックで開きます。</p><p><img src="FileSystem-media_1.png" alt="File System &gt; mediaフォルダを開く" loading="lazy"></p><p>次に「cdrom」フォルダをダブルクリックで開きます。</p><p><img src="cdrom_1.png" alt="cdrom フォルダを開く" loading="lazy"></p><p>最後に「Chrome OS」フォルダをダブルクリックで開きます。</p><p><img src="Chrome-OS_1.png" alt="Chrome OS フォルダを開く" loading="lazy"></p><p>何も無いところを選択してから、右クリックで「Open in Terminal」を選択し ターミナル(端末) を開きます。</p><p><img src="Open-in-Terminal_1.png" alt="Open in Terminal を選択" loading="lazy"></p><p>開いた ターミナル(端末) に下記コマンド を入力して エンタキー を押します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh install.sh</span><br></pre></td></tr></table></figure><p><img src="sudo-sh-install-sh_1.png" alt="sudo sh install.sh" loading="lazy"></p><p>そうすると必要なファイルを自動でダウンロードするので、しばらく待ちます。</p><p>ダウンロードが完了すると、インストールを続行するかどうか尋ねられます。</p><p>「yes」と入力し エンタキー を押すと、HDD が初期化されて Chorome OS がインストールされます。</p><p><img src="type-yes-to-continue_1.png" alt="type-yes-to-continue" loading="lazy"></p><p>しばらくまって「ChromeOS installed.」と表示されれば Chrome OS のインストールは完了です。</p><p><img src="ChromeOS-installed_1.png" alt="ChromeOS installed." loading="lazy"></p><p>インストールが完了したら、左下隅にある Linux Mint のスタートメニューを開き「Quit」を選択します。</p><p><img src="Quit_1.png" alt="メニューを開き「Quit」を選択" loading="lazy"></p><p>「Shut Down」を選択して PC の電源を切ります。</p><p><img src="Shut-Down_1.png" alt="Shut down this system now?" loading="lazy"></p><p>最後に USBメモリ を抜いてから エンタキー を押せば電源が切れます。</p><p><img src="please-remove-the-installation-medium-then-press-ENTER.png" alt="please-remove-the-installation-medium-then-press-ENTER" loading="lazy"></p><h3 id="Chrome-OS-を起動"><a href="#Chrome-OS-を起動" class="headerlink" title="Chrome OS を起動"></a>Chrome OS を起動</h3><p>USBメモリ を抜いてから PC の電源を入れると、Chrome OS が起動します。</p><p>初回だけは起動に時間がかかります。</p><p>無事に起動したら、初回設定を進めて行きます。</p><p>左下の 言語設定 から 言語とキーボードの選択が出来ます。</p><p><img src="English_1-1.png" alt="言語とキーボードの選択" loading="lazy"></p><p><img src="Choose-your-language-and-keyboard_1-1.png" alt="言語とキーボードの選択" loading="lazy"></p><p>後は Googleアカウント にログインしたり、プライバシーポリシーに同意したりして設定を進めて行けば、デスクトップ画面が表示されます。</p><p>Chrome OS なので もちろん Google Play も使えます。</p><p><img src="Google-Play.png" alt="Chrome-OS-Google-Play" loading="lazy"></p><p>以上で終了です。長々とお付き合い下さり、どうもありがとうございました。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://beebom.com/how-install-chrome-os-on-pc/">https://beebom.com/how-install-chrome-os-on-pc/</a></p><p><a href="https://github.com/sebanc/brunch">https://github.com/sebanc/brunch</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;タンスの肥やしの中に &lt;a href=&quot;https://amzn.to/47YUPra&quot;&gt;N3510 ベアボーンPC&lt;/a&gt; が眠っていたので、何か有効活用が出来ないか調べていたところ Chrome OS がインストール出来るとのことだったので実際にやってみました。&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="google" scheme="https://noitaro.github.io/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>【Python】TensorFlow の計算結果を POST で返す</title>
    <link href="https://noitaro.github.io/tensorflow-post-result/"/>
    <id>https://noitaro.github.io/tensorflow-post-result/</id>
    <published>2020-08-10T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.679Z</updated>
    
    <content type="html"><![CDATA[<p>TensorFlow のライブラリ容量が 1GB 以上もあるので、容易に配布することが出来ない。</p><p>なので TensorFlow の計算はサーバー処理でやって、結果だけをクライアントに返せばいいんじゃないかと思い挑戦してみました。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 2004</li><li>Python 3.7.8</li><li>TensorFlow 2.2.0</li></ul><h2 id="TensorFlow-の計算結果を返すサーバー処理"><a href="#TensorFlow-の計算結果を返すサーバー処理" class="headerlink" title="TensorFlow の計算結果を返すサーバー処理"></a>TensorFlow の計算結果を返すサーバー処理</h2><p>Python で TensorFlow の計算結果を返すサーバー処理を作成していきます。</p><h3 id="TensorFlow-側"><a href="#TensorFlow-側" class="headerlink" title="TensorFlow 側"></a>TensorFlow 側</h3><p>ファイル名：TfManager.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">class TfManager:</span><br><span class="line"></span><br><span class="line">    @tf.function</span><br><span class="line">    def MathAdd(self, x, y):</span><br><span class="line">        return tf.math.add(x, y)</span><br></pre></td></tr></table></figure><p>引数で来た xの値 と yの値 を足して、結果を返す処理となっています。</p><h3 id="HTTP-Server-側"><a href="#HTTP-Server-側" class="headerlink" title="HTTP Server 側"></a>HTTP Server 側</h3><p>ファイル名：http-server.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">from http.server import BaseHTTPRequestHandler, HTTPServer</span><br><span class="line">from TfManager import TfManager</span><br><span class="line"></span><br><span class="line">class HandleRequests(BaseHTTPRequestHandler):</span><br><span class="line"></span><br><span class="line">    def do_POST(self):</span><br><span class="line">        content_len  = int(self.headers.get(&quot;content-length&quot;))</span><br><span class="line">        post_body = self.rfile.read(content_len).decode(&quot;utf-8&quot;)</span><br><span class="line">        post_json = json.loads(post_body)</span><br><span class="line"></span><br><span class="line">        x = post_json[&#x27;x&#x27;]</span><br><span class="line">        y = post_json[&#x27;y&#x27;]</span><br><span class="line"></span><br><span class="line">        tfm = TfManager()</span><br><span class="line">        result = tfm.MathAdd(x, y)</span><br><span class="line">        result_val = str(result.numpy())</span><br><span class="line"></span><br><span class="line">        self.send_response(200)</span><br><span class="line">        self.send_header(&#x27;Content-type&#x27;, &#x27;application/json&#x27;)</span><br><span class="line">        self.send_header(&#x27;Content-Length&#x27;, len(result_val))</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(result_val.encode(&#x27;utf-8&#x27;))</span><br><span class="line">        </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    </span><br><span class="line">    server_address = (&#x27;0.0.0.0&#x27;, 8080)</span><br><span class="line">    httpd = HTTPServer(server_address, HandleRequests)</span><br><span class="line">    print(&#x27;Serving HTTP on localhost port %d ...&#x27; % server_address[1])</span><br><span class="line">    print(&#x27;use &lt;Ctrl-(C or break)&gt; to stop&#x27;)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure><p>POST で来た xの値 と yの値 を TfManagerクラス の MathAdd関数 に渡して、その結果をクライアントに返す処理となっています。</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>まず「http-server.py」をダブルクリックし、HTTP Server を立ち上げます。</p><p><img src="WS001890.png" alt="「http-server.py」をダブルクリック" loading="lazy"></p><p>こんな画面が立ち上がれば OK</p><p><img src="WS001891.png" alt="BaseHTTPRequestHandler" loading="lazy"></p><p>次に、このサーバーに向けて POST をして結果を確認します。</p><p>下記コマンドを コマンドプロンプト で実行すると POST する事ができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H &quot;Content-Type: application/json&quot; -d &quot;&#123;&quot;&quot;x&quot;&quot;: 13, &quot;&quot;y&quot;&quot;: 2&#125;&quot; http://localhost:8080/</span><br></pre></td></tr></table></figure><p>こんな感じに 15 が戻ってこれば成功です。</p><p><img src="WS001892.png" alt="curl-post-result" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TensorFlow のライブラリ容量が 1GB 以上もあるので、容易に配布することが出来ない。&lt;/p&gt;
&lt;p&gt;なので TensorFlow の計算はサーバー処理でやって、結果だけをクライアントに返せばいいんじゃないかと思い挑戦してみました。&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="tensorflow" scheme="https://noitaro.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>「対象のプリンシパル名が間違っています」の解決方法</title>
    <link href="https://noitaro.github.io/cannot-generate-sspi-context/"/>
    <id>https://noitaro.github.io/cannot-generate-sspi-context/</id>
    <published>2020-08-05T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.831Z</updated>
    
    <content type="html"><![CDATA[<p>SQL Server 2019 にログインする時、下記エラーが出たのでその解決方法です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">タイトル: サーバーへの接続</span><br><span class="line">ADDITIONAL INFORMATION: 対象のプリンシパル名が間違っています。SSPI コンテキストを生成できません。 (Microsoft SQL Server、エラー: 0)</span><br></pre></td></tr></table></figure><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 2004</li><li>SQL Server Management Studio 15.0</li></ul><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>私の場合は DNS を「8.8.8.8」にしていたのが原因でした。</p><p><img src="2020_08_05-8_29_47-1.png" loading="lazy"></p><h2 id="対処"><a href="#対処" class="headerlink" title="対処"></a>対処</h2><p>DNS 設定をやめたらつながるようになりました。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SQL Server 2019 にログインする時、下記エラーが出たのでその解決方法です。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    
    <category term="sqlserver" scheme="https://noitaro.github.io/tags/sqlserver/"/>
    
  </entry>
  
  <entry>
    <title>USB3.1 Gen2 対応の RAVPower を試す</title>
    <link href="https://noitaro.github.io/ravpower/"/>
    <id>https://noitaro.github.io/ravpower/</id>
    <published>2020-08-02T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.515Z</updated>
    
    <content type="html"><![CDATA[<p>ハードディスクを取っ払ったことで、容量不足に悩まされ始めました。</p><p>低価格で大容量の HDD もいいですが SSD の速度に慣れ親しんでしまうと、もう HDD を使うきにはなれません。</p><p>なので、外付けポータブル SSD の「<a href="https://www.ravpower.jp/rp-um003/">RAVPower Portable SSD</a>」を買いました。</p><h2 id="使い勝手はどうなの？"><a href="#使い勝手はどうなの？" class="headerlink" title="使い勝手はどうなの？"></a>使い勝手はどうなの？</h2><p>外箱はメチャクチャキレイでした。</p><p><img src="IMG_20200802_130742.png" alt="RAVPower 外" loading="lazy"></p><p>はろー！</p><p><img src="IMG_20200802_130818.png" alt="RAVPower 内" loading="lazy"></p><p>本体、トラベルポーチ、USB A to C ケーブル、USB C to C ケーブル</p><p><img src="IMG_20200802_130931.png" alt="本体、トラベルポーチ、USB A to C ケーブル、USB C to C ケーブル" loading="lazy"></p><h3 id="ファイルの出し入れストレスゼロ"><a href="#ファイルの出し入れストレスゼロ" class="headerlink" title="ファイルの出し入れストレスゼロ"></a>ファイルの出し入れストレスゼロ</h3><p>とりあえず USB3.1 Gen2 対応ポートに挿して、ファイルの転送速度を調べてみました。</p><p><img src="IMG_20200802_131022.png" alt="USB3.1 Gen2 対応ポート" loading="lazy"></p><p>ちゃんと既定値の 540MB&#x2F;s 以上出ています。</p><p><img src="WS001887-1.png" alt="USB3.1 Gen2 ポータブル SSD の転送速度" loading="lazy"></p><p>実際にファイルを入れてみても、ポータブル SSD って感じさせないぐらい早かったです。</p><p>比較するため、内蔵の SATA SSD の転送速度も調べてみました。</p><p><img src="WS001889-1.png" alt="内蔵の SATA SSD の転送速度" loading="lazy"></p><p>こうやって比べると USB3.1 Gen2 ポータブル SSD の速さが尋常じゃないことが分かりますね。サイコー！！</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ポータブル SSD なのに 内蔵 SSD と同等もしくはそれ以上の性能が、出せることが分かりました。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ハードディスクを取っ払ったことで、容量不足に悩まされ始めました。&lt;/p&gt;
&lt;p&gt;低価格で大容量の HDD もいいですが SSD の速度に慣れ親しんでしまうと、もう HDD を使うきにはなれません。&lt;/p&gt;
&lt;p&gt;なので、外付けポータブル SSD の「&lt;a href=&quot;htt</summary>
      
    
    
    
    
    <category term="gadget" scheme="https://noitaro.github.io/tags/gadget/"/>
    
    <category term="ssd" scheme="https://noitaro.github.io/tags/ssd/"/>
    
  </entry>
  
  <entry>
    <title>AVerMedia 2 PLUS と OBS で ゲームキャプチャー 方法</title>
    <link href="https://noitaro.github.io/avermedia-2-plus-obs/"/>
    <id>https://noitaro.github.io/avermedia-2-plus-obs/</id>
    <published>2020-08-01T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.763Z</updated>
    
    <content type="html"><![CDATA[<p>Nintendo Switch や PS4の映像を PC に録画出来るのが「<a href="https://www.avermedia.co.jp/jp/product-detail/GC513">AVerMedia 2 PLUS</a>」です。DVDや BD とか HDMI出力に対応している AV機器 の映像なら何でも録画出来ます。</p><p>今回は AVerMedia 2 PLUS と <a href="https://obsproject.com/">OBS</a> を使って Nintendo Switch の映像を PC に録画してみたいと思います。</p><h2 id="AVerMedia-2-PLUS"><a href="#AVerMedia-2-PLUS" class="headerlink" title="AVerMedia 2 PLUS"></a>AVerMedia 2 PLUS</h2><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3QYeaCY"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3QYeaCY"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: AVerMedia HDMI usb Live Gamer Portable 2 PLUS AVT-C878 PLUS [4Kパススルー対応 ゲームの録画・ライブ配信用キャプチャーデバイス] DV478 macOS : 家電＆カメラ</div><div class="hbc-url">https://amzn.to/3QYeaCY</div></div></div></div></a></div></div><h3 id="PCモード"><a href="#PCモード" class="headerlink" title="PCモード"></a>PCモード</h3><p>PCで録画する場合は下記の配線になります。</p><p><img src="c878plus_04.jpg" loading="lazy"></p><p>ゲーム機からHDMI入力 → 遅延ゼロHDMI出力、USB2.0出力</p><p><img src="IMG_20200801_194253_1.png" alt="ゲーム機からHDMI入力 → 遅延ゼロHDMI出力、USB2.0出力" loading="lazy"></p><p>接続するとこんな感じになります。</p><p><img src="IMG_20200801_224525.png" alt="純正ドックを使わずに HDMI変換アダプター を使っている" loading="lazy"></p><p>私は 純正ドックを使わずに <a href="https://amzn.to/2BOKiEZ">HDMI変換アダプター</a> を使っています。省スペースで取り外しが簡単です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3R21nPO"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3R21nPO"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: Nintendo Switch Type-C to HDMI変換アダプタ 3in1 ニンテンドー スイッチドック 代わり品 熱対策 映像変換 4K解像度 スイッチ ドックセット Macbook Chromebook Android適用 : ゲーム</div><div class="hbc-url">https://amzn.to/3R21nPO</div></div></div></div></a></div></div><h3 id="単体録画モード"><a href="#単体録画モード" class="headerlink" title="単体録画モード"></a>単体録画モード</h3><p>SDカードに直接録画する場合は下記の配線になります。</p><p><img src="c878plus_02.jpg" loading="lazy"></p><p>ゲーム機からHDMI入力 → 遅延ゼロHDMI出力、SDカード録画</p><p><img src="IMG_20200801_194253_2.png" alt="ゲーム機からHDMI入力 → 遅延ゼロHDMI出力、SDカード録画" loading="lazy"></p><h2 id="OBS"><a href="#OBS" class="headerlink" title="OBS"></a>OBS</h2><p>キャプチャー機器の配線が終わったら OBS の設定をします。</p><h3 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h3><p><a href="https://obsproject.com/">こちら</a> から OBS をダウンロードします。</p><p><img src="WS001870.png" alt="OBS をダウンロード" loading="lazy"></p><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p>ダウンロード した インストーラー を実行し OBS をPC にインストールします。</p><p><img src="WS001872.png" alt="インストーラーを実行" loading="lazy"></p><h3 id="自動構成ウィザードの設定"><a href="#自動構成ウィザードの設定" class="headerlink" title="自動構成ウィザードの設定"></a>自動構成ウィザードの設定</h3><p>初回起動時に 自動構成ウィザードが表示されるので「はい」を選択します。</p><p><img src="WS001877.png" alt="自動構成ウィザードが表示されるので「はい」を選択" loading="lazy"></p><p>今回の使用目的は 録画なので 録画のための最適化 を選択し「次へ」を押します。</p><p><img src="WS001878.png" alt="録画のための最適化 を選択し「次へ」を押す" loading="lazy"></p><p>映像設定では 解像度とFPS を設定出来ます。特に変える必要は無いので「次へ」を押します。</p><p><img src="WS001880.png" alt="「次へ」を押す" loading="lazy"></p><p>設定内容が表示されるので「設定を適用」を押して 自動構成ウィザード の設定は完了です。</p><p><img src="WS001881.png" alt="「設定を適用」を押す" loading="lazy"></p><h3 id="キャプチャーデバイスの設定"><a href="#キャプチャーデバイスの設定" class="headerlink" title="キャプチャーデバイスの設定"></a>キャプチャーデバイスの設定</h3><p>ソースの 「＋（プラス）」を選択し、</p><p><img src="WS001882.png" alt="ソースの 「＋（プラス）」を選択" loading="lazy"></p><p>「映像キャプチャデバイス」を選択します。</p><p><img src="WS001883.png" alt="「映像キャプチャデバイス」を選択" loading="lazy"></p><p>新規作成に適当な名前を入れて「OK」を押します。</p><p><img src="WS001884.png" alt="新規作成に適当な名前を入れて「OK」を押す" loading="lazy"></p><p>デバイスを選択して「OK」を押せばデバイス設定の完了です。</p><p><img src="WS001885.png" alt="デバイスを選択して「OK」を押す" loading="lazy"></p><h3 id="録画の開始"><a href="#録画の開始" class="headerlink" title="録画の開始"></a>録画の開始</h3><p>メイン画面の「録画開始」を押せば録画が開始されます。</p><p><img src="WS001886.png" alt="録画開始" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Nintendo Switch や PS4の映像を PC に録画出来るのが「&lt;a href=&quot;https://www.avermedia.co.jp/jp/product-detail/GC513&quot;&gt;AVerMedia 2 PLUS&lt;/a&gt;」です。DVDや BD とか HD</summary>
      
    
    
    
    
    <category term="video-editing" scheme="https://noitaro.github.io/tags/video-editing/"/>
    
    <category term="nintendo-switch" scheme="https://noitaro.github.io/tags/nintendo-switch/"/>
    
    <category term="obs" scheme="https://noitaro.github.io/tags/obs/"/>
    
  </entry>
  
  <entry>
    <title>GCP で TensorFlow の計算結果だけを返す API を作る</title>
    <link href="https://noitaro.github.io/gcp-tensorflow-api-1/"/>
    <id>https://noitaro.github.io/gcp-tensorflow-api-1/</id>
    <published>2020-07-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.075Z</updated>
    
    <content type="html"><![CDATA[<p>Google Cloud Platform（GCP）で TensorFlow（テンソルフロー）の計算結果だけを返す API を Python で作ります。</p><p>構成図はこんな感じです。</p><p><img src="Untitled-Diagram.png" alt="構成図" loading="lazy"></p><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p>TensorFlow とは、Google が開発した機械学習ライブラリのことです。今回は TensorFlow の計算機能を使って、Webブラウザー から呼び出せる簡単なプログラムを作っていきます。</p><h2 id="何で-GCP-を使うの？"><a href="#何で-GCP-を使うの？" class="headerlink" title="何で GCP を使うの？"></a>何で GCP を使うの？</h2><p>色々理由はありますが 大きな理由として TensorFlow を動かせる環境が Python だったからです。AWS の Lambda でも Python は動くのですが 容量の制限が厳しかったので諦めました。なので GCP を使います。</p><h2 id="GCP-内に無料で-仮想マシン-を作る"><a href="#GCP-内に無料で-仮想マシン-を作る" class="headerlink" title="GCP 内に無料で 仮想マシン を作る"></a>GCP 内に無料で 仮想マシン を作る</h2><p>GCP の 仮想マシン（VM）を無料で作ります。設定を間違えなければ無料で使えるので使います。</p><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><p>まず初めに GCP にプロジェクトを作成します。</p><p><a href="https://console.cloud.google.com/projectselector2/home/dashboard">こちら</a> から「プロジェクトを作成」を選択します。</p><p><img src="WS001861.png" alt="「プロジェクトを作成」を選択" loading="lazy"></p><p>分かりやすい「プロジェクト名」を入力して「作成」します。</p><p><img src="WS001862.png" alt="「プロジェクト名」を入力して「作成」を選択" loading="lazy"></p><h3 id="仮想マシン（VM）作成"><a href="#仮想マシン（VM）作成" class="headerlink" title="仮想マシン（VM）作成"></a>仮想マシン（VM）作成</h3><p>次に 仮想マシン を作成します。</p><p>左のナビゲーションメニューから「Compute Engine」を選択し、VMインスタンスの「作成」を選択します。</p><p><img src="WS001863.png" alt="VMインスタンスの「作成」を選択" loading="lazy"></p><p>設定をする上で気を付ける点は「リージョン」「マシンタイプ」「ブートディスク」の 3点です。これを間違えると無料枠から外れてしまい、課金の対象となるので注意が必要です。</p><h4 id="リージョン"><a href="#リージョン" class="headerlink" title="リージョン"></a>リージョン</h4><p>先頭が「us」から始まるのが無料の対象になります。例外として「us-east4（北バージニア）」は課金の対象なので選ばないようにします。</p><p><img src="WS001864.png" alt="リージョンを選択" loading="lazy"></p><h4 id="マシンタイプ"><a href="#マシンタイプ" class="headerlink" title="マシンタイプ"></a>マシンタイプ</h4><p>「f1-micro」のみ無料で使えます。それ以外は従量課金制です。</p><p><img src="WS001866-1.png" alt="マシンタイプを選択" loading="lazy"></p><h4 id="ブートディスク"><a href="#ブートディスク" class="headerlink" title="ブートディスク"></a>ブートディスク</h4><p>永続ディスクの 30GB まで無料で使えます。最初は 10GB に設定してあるので 30GB に変更します。</p><p><img src="WS001867.png" alt="ブートディスクを選択" loading="lazy"></p><p>各設定を済ませて「作成」を選択すれば 仮想マシン が作成されます。</p><p><img src="WS001868.png" alt="各設定を済ませて「作成」を選択" loading="lazy"></p><h2 id="次回は？"><a href="#次回は？" class="headerlink" title="次回は？"></a>次回は？</h2><p>次回は、仮想マシン上で動く API を作ります。</p><p>Python の HTTPServer を使って POST を受け取れる簡単なプログラムです。受け取った POSTデータ を TensorFlow に渡して、計算結果を戻す流れになります。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Google Cloud Platform（GCP）で TensorFlow（テンソルフロー）の計算結果だけを返す API を Python で作ります。&lt;/p&gt;
&lt;p&gt;構成図はこんな感じです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;Untitled-Diagram.png&quot; </summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="google" scheme="https://noitaro.github.io/tags/google/"/>
    
    <category term="gcp" scheme="https://noitaro.github.io/tags/gcp/"/>
    
    <category term="tensorflow" scheme="https://noitaro.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow で GPU が有効にならない時</title>
    <link href="https://noitaro.github.io/tensorflow-gpu/"/>
    <id>https://noitaro.github.io/tensorflow-gpu/</id>
    <published>2020-07-25T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.659Z</updated>
    
    <content type="html"><![CDATA[<p>CUDA も cuDNN もインストールして パスもちゃんと通っているのに使えなくて、悩みに悩んで見つけた答えです。</p><h2 id="エラー内容"><a href="#エラー内容" class="headerlink" title="エラー内容"></a>エラー内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2020-07-25 21:03:14.427523: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library &#x27;cudart64_101.dll&#x27;; dlerror: cudart64_101.dll not found</span><br><span class="line">2020-07-25 21:03:14.433183: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.</span><br><span class="line">2020-07-25 21:03:19.263633: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll</span><br><span class="line">2020-07-25 21:03:19.450067: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1561] Found device 0 with properties: pciBusID: 0000:01:00.0 name: GeForce GTX 760 computeCapability: 3.0 coreClock: 1.0585GHz coreCount: 6 deviceMemorySize: 2.00GiB deviceMemoryBandwidth: 179.05GiB/s</span><br><span class="line">2020-07-25 21:03:19.460269: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library &#x27;cudart64_101.dll&#x27;; dlerror: cudart64_101.dll not found</span><br><span class="line">2020-07-25 21:03:19.466664: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library &#x27;cublas64_10.dll&#x27;; dlerror: cublas64_10.dll not found</span><br><span class="line">2020-07-25 21:03:19.477715: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library &#x27;cufft64_10.dll&#x27;; dlerror: cufft64_10.dll not found</span><br><span class="line">2020-07-25 21:03:19.483943: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library &#x27;curand64_10.dll&#x27;; dlerror: curand64_10.dll not found</span><br><span class="line">2020-07-25 21:03:19.490209: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library &#x27;cusolver64_10.dll&#x27;; dlerror: cusolver64_10.dll not found</span><br><span class="line">2020-07-25 21:03:19.496002: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library &#x27;cusparse64_10.dll&#x27;; dlerror: cusparse64_10.dll not found</span><br><span class="line">2020-07-25 21:03:19.502397: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library &#x27;cudnn64_7.dll&#x27;; dlerror: cudnn64_7.dll not found</span><br><span class="line">2020-07-25 21:03:19.509451: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1598] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.</span><br><span class="line">Skipping registering GPU devices…</span><br></pre></td></tr></table></figure><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 2004</li><li>Python 3.7.8</li><li>pip 20.1.1</li><li>TensorFlow 2.2.0</li><li>CUDA 10.1</li><li>cuDNN v7.6.5</li></ul><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Python のインストール方法が悪かった。</p><p>NG: <a href="https://www.microsoft.com/ja-jp/p/python-37/9nj46sx7x90p?activetab=pivot:overviewtab">Microsoft Store</a></p><p>OK: <a href="https://www.python.org/">公式サイト</a></p><h2 id="対処方法"><a href="#対処方法" class="headerlink" title="対処方法"></a>対処方法</h2><p>Python を Microsoft Store からインストールしないで、公式サイト インストーラーを使って インストール する。</p><p>たったこれだけの事でした。</p><p>コマンドプロンプトで簡単にインストール出来るから重宝していたんですが、とんだ落とし穴でした。</p><h2 id="その後"><a href="#その後" class="headerlink" title="その後"></a>その後</h2><p>ちゃんと GPU が認識されています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2020-07-25 21:43:17.525257: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_101.dll</span><br><span class="line">2020-07-25 21:43:21.457325: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library nvcuda.dll</span><br><span class="line">2020-07-25 21:43:21.516624: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1561] Found device 0 with properties: pciBusID: 0000:01:00.0 name: GeForce GTX 760 computeCapability: 3.0 coreClock: 1.0585GHz coreCount: 6 deviceMemorySize: 2.00GiB deviceMemoryBandwidth: 179.05GiB/s</span><br><span class="line">2020-07-25 21:43:21.534583: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_101.dll</span><br><span class="line">2020-07-25 21:43:21.603125: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_10.dll</span><br><span class="line">2020-07-25 21:43:21.657679: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cufft64_10.dll</span><br><span class="line">2020-07-25 21:43:21.686695: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library curand64_10.dll</span><br><span class="line">2020-07-25 21:43:21.749413: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusolver64_10.dll</span><br><span class="line">2020-07-25 21:43:21.785608: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cusparse64_10.dll</span><br><span class="line">2020-07-25 21:43:21.879769: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudnn64_7.dll</span><br><span class="line">2020-07-25 21:43:21.886224: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1657] Ignoring visible gpu device (device: 0, name: GeForce GTX 760, pci bus id: 0000:01:00.0, compute capability: 3.0) with Cuda compute capability 3.0. The minimum required Cuda capability is 3.5.</span><br></pre></td></tr></table></figure><p>というか改めてこの記事読み返したんですが、結構適当ですね。申し訳ございません。</p><p>GPU認識されているんですが、GPUの性能が低すぎて機械学習には使わないよって言ってますね。</p><h3 id="数年後"><a href="#数年後" class="headerlink" title="数年後"></a>数年後</h3><p>新しい記事書きました。よければどうぞ</p><p><a href="https://noitaro.github.io/tensorflow-install/">https://noitaro.github.io/tensorflow-install/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CUDA も cuDNN もインストールして パスもちゃんと通っているのに使えなくて、悩みに悩んで見つけた答えです。&lt;/p&gt;
&lt;h2 id=&quot;エラー内容&quot;&gt;&lt;a href=&quot;#エラー内容&quot; class=&quot;headerlink&quot; title=&quot;エラー内容&quot;&gt;&lt;/a&gt;エラー内容</summary>
      
    
    
    
    
    <category term="python" scheme="https://noitaro.github.io/tags/python/"/>
    
    <category term="tensorflow" scheme="https://noitaro.github.io/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Nintendo Switch で Android 9.0(Pie) を起動させるまで</title>
    <link href="https://noitaro.github.io/nintendo-switch-android-9-0/"/>
    <id>https://noitaro.github.io/nintendo-switch-android-9-0/</id>
    <published>2020-07-19T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.375Z</updated>
    
    <content type="html"><![CDATA[<p>Nintendo Switch で Android 9.0(Pie) を起動させる事が出来るみたいなので、その方法を紹介します。</p><h2 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h2><p><a href="https://gitlab.com/ZachyCatGames/shitty-pie-guide">こちら</a>の記事を参考に作業して行きます。</p><p><a href="https://gitlab.com/ZachyCatGames/shitty-pie-guide">https://gitlab.com/ZachyCatGames/shitty-pie-guide</a></p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home 2004</li><li>Nintendo Switch 10.0.4</li><li>hekate 5.3.0</li></ul><h2 id="必要なファイルを集める"><a href="#必要なファイルを集める" class="headerlink" title="必要なファイルを集める"></a>必要なファイルを集める</h2><h3 id="Nintendo-Switch-Android-9-0-Pie"><a href="#Nintendo-Switch-Android-9-0-Pie" class="headerlink" title="Nintendo Switch Android 9.0(Pie)"></a>Nintendo Switch Android 9.0(Pie)</h3><p><a href="https://www.mediafire.com/file/mnjwm8xjxj1picb/switch_android9_pie.zip/file">こちら</a>から Nintendo Switch Android 9.0(Pie) をダウンロードし展開しておきます。</p><p>中身は、Nintendo Switch用のブートローダーと Android用のインストールファイル と、LineageOS 16.0(zip) が入っています。</p><p><img src="WS001847.png" alt="Nintendo Switch Android 9.0 の中身" loading="lazy"></p><h3 id="hekate"><a href="#hekate" class="headerlink" title="hekate"></a>hekate</h3><p><a href="https://github.com/CTCaer/hekate/releases/tag/v5.3.0">こちら</a>から「hekate_ctcaer_5.3.0_Nyx_0.9.2.zip」をダウンロードします。</p><p><a href="https://github.com/CTCaer/hekate/releases/tag/v5.3.0">https://github.com/CTCaer/hekate/releases/tag/v5.3.0</a></p><p><img src="WS001848.png" alt="hekate_ctcaer_5.3.0_Nyx_0.9.2.zip をダウンロード" loading="lazy"></p><p>こちらも展開しておきます。</p><p><img src="WS001849.png" alt="hekate_ctcaer_5.3.0_Nyx_0.9.2 を展開" loading="lazy"></p><h2 id="Nintendo-Switch-で-Android-9-0-Pie-を起動させる"><a href="#Nintendo-Switch-で-Android-9-0-Pie-を起動させる" class="headerlink" title="Nintendo Switch で Android 9.0(Pie) を起動させる"></a>Nintendo Switch で Android 9.0(Pie) を起動させる</h2><p>ここから先は、私が試して成功した方法を説明します。参考サイトの手順と若干違いますが、一つの方法として御覧ください。</p><h3 id="SDカードに-Android用パーティションを作成"><a href="#SDカードに-Android用パーティションを作成" class="headerlink" title="SDカードに Android用パーティションを作成"></a>SDカードに Android用パーティションを作成</h3><p>hekate で SDカードに Android を入れる領域を作成します。 <a href="https://github.com/CTCaer/hekate/releases/tag/v5.2.0">hekate 5.2.0</a> でSDカードのパーティション作成機能が実装されたのでそれを使います。</p><p>まず、SDカードに展開した「hekate」のファイル群を入れます。</p><p><img src="WS001855.png" alt="SDカードに展開した「hekate」のファイル群を入れる" loading="lazy"></p><p>SDカードを Nintendo Switch に挿して、hekate を ペイロードします。</p><p>hekate が起動したら「Tools」を選択します。</p><p><img src="nyx20200718_222652_1.png" alt="「Tools」を選択" loading="lazy"></p><p>Tools画面に切り替わるので「Arch bit・RCM・Touch・Partitions」を選択します。</p><p><img src="nyx20200718_222704.png" alt="「Arch bit・RCM・Touch・Partitions」を選択" loading="lazy"></p><p>Others項目の「Partition SD Card」を選択します。</p><p><img src="nyx20200718_222714.png" alt="「Partition SD Card」を選択" loading="lazy"></p><p>現在の SDカード のパーティション状況が表示されますので「OK」で閉じます。</p><p><img src="nyx20200718_222729.png" alt="現在のパーティション状況" loading="lazy"></p><p>4つ目のスライドバー（Android(USER)）を右にスライドして Android に割り当てる容量を設定します。</p><p>少なすぎると Android がインストール出来ません、8GBぐらい欲しいですね。</p><p>SDカードの中身は一応残りますが、PCに移動しておいた方が良いです。</p><p>Android に割り当てる容量が決まったら「Next Step」を選択します。</p><p><img src="nyx20200718_222814.png" alt="「Next Step」を選択" loading="lazy"></p><p>「Start」を選択すると、パーティション作成が開始されます。終わるまで電源を切らずに待ちましょう。</p><p><img src="nyx20200718_222826.png" alt="「Start」を選択" loading="lazy"></p><p>「Status: Done!」と表示されればパーティション作成は完了です。「OK」を押して閉じます。</p><p><img src="nyx20200718_223119.png" alt="パーティション作成完了" loading="lazy"></p><h3 id="SDカードに-Android-をインストール"><a href="#SDカードに-Android-をインストール" class="headerlink" title="SDカードに Android をインストール"></a>SDカードに Android をインストール</h3><p>一度、hekate を終了させて PC作業に戻ります。</p><p>先程の SDカードに 展開しておいた「Nintendo Switch Android 9.0(Pie)」のファイル群を入れます。</p><p><img src="WS001856.png" alt="SDカードに Nintendo Switch Android 9.0 を入れる" loading="lazy"></p><p>パーティションを作る前に入れると使えないことがあったので、後で入れるようにしました。</p><p>ファイルの置き換え確認が出ますが、気にせず上書きします。</p><p><img src="WS001852.png" alt="ファイルの置き換え確認" loading="lazy"></p><p>SDカード内の「bootloader」&gt;「ini」&gt;「00-android.txt」の拡張子を「00-android.ini」に変更します。</p><p><img src="WS001859.png" alt="「00-android.txt」の拡張子を「00-android.ini」に変更" loading="lazy"></p><p>これを忘れると、この後の Android 起動時にアイコンが表示されず、面倒くさい事になります。</p><p>拡張子の変更が出来たら、再度 Nintendo Switch に SDカードを入れて hekate を起動させます。</p><p>hekate が起動したら先程と同じ手順で、パーティション作成画面まで進みます。</p><p>「Tools」&gt;「Arch bit・RCM・Touch・Partitions」&gt;「Partition SD Card」</p><p>パーティション作成画面まで来たら「Flash Android」を選択します。</p><p><img src="nyx20200719_122306.png" alt="「Flash Android」を選択" loading="lazy"></p><p>Android用パーティション にファイルをコピーするので「Continue」を選択します。</p><p><img src="nyx20200719_122311.png" alt="「Continue」を選択" loading="lazy"></p><p>Android用パーティション に「Kernel」「TWRP」「DTB」がコピーされます。</p><p>3つとも「Success」が表示されれば完了です。</p><p>Continue を押すと hekate が再起動しますがほぼ失敗します。なので「Cancel」を押して自分で再起動させます。</p><p><img src="nyx20200719_122316.png" alt="「Success」が表示されれば完了" loading="lazy"></p><p>hekate 再起動後「More Configs」を選択します。</p><p><img src="nyx20200718_222652.png" alt="「More Configs」を選択" loading="lazy"></p><p>通常だったら「Switchroot Android」を選択し Android を起動させます、が！ まだ、Android のインストールが出来ていないので、このままだとまだ起動しません。</p><p><img src="nyx20200718_230531.png" alt="「Switchroot Android」を選択" loading="lazy"></p><p>なので 初回だけ TWRP を起動させて、LineageOS 16.0(zip) をAndroid用パーティションに展開させます。</p><p>TWRP を起動させるために、まず USBを抜いておきます。ドングルとか USB が刺さったままだと TWRP が起動しませんでした。</p><p>次に「Switchroot Android」を選択後すぐに 音量の＋(プラス)ボタンを押しっぱなしにします。これは、TWRP にを起動させるために必要な操作です。</p><p>無事に TWRP が起動したら「Swipe to Allow Modifications」を右にスライドします。</p><p><img src="IMG_20200719_132029_1.png" alt="「Swipe to Allow Modifications」を右にスライド" loading="lazy"></p><p>「Install」を選択します。</p><p><img src="IMG_20200719_132042_1.png" alt="「Install」を選択" loading="lazy"></p><p>「external_sd」内の「lineage-16.0-20200711-UNOFFICIAL-icosa.zip」を探し出してインストールします。</p><p>まず「(Up A Level)」を選択して 一つ上の階層に行きます。</p><p><img src="IMG_20200719_132730.png" alt="「(Up A Level)」を選択" loading="lazy"></p><p>「external_sd」を選択します。</p><p><img src="IMG_20200719_132744.png" alt="「external_sd」を選択" loading="lazy"></p><p>「lineage-16.0-20200711-UNOFFICIAL-icosa.zip」を選択します。</p><p><img src="IMG_20200719_132757.png" alt="「lineage-16.0-20200711-UNOFFICIAL-icosa.zip」を選択" loading="lazy"></p><p>「Swipe to confirm Flash」を右にスライドし Android を SDカードにインストールします。</p><p><img src="IMG_20200719_132808.png" alt="「Swipe to confirm Flash」を右にスライド" loading="lazy"></p><p>いろいろエラーが出てますが SDカードしか触れないので問題ないです。「succeeded」や「done」と出てればインストールは完了です。</p><p>「Reboot System」を選択して 電源を切ります。</p><p><img src="IMG_20200719_133002.png" alt="「Reboot System」を選択" loading="lazy"></p><h3 id="Android-を起動"><a href="#Android-を起動" class="headerlink" title="Android を起動"></a>Android を起動</h3><p>電源が切れた事を確認してから、再度 hekate を起動します。</p><p>「More Configs」を選択します。</p><p><img src="nyx20200718_222652.png" alt="「More Configs」を選択" loading="lazy"></p><p>「Switchroot Android」を選択し Android を起動させます。</p><p>今回は普通に起動させるため 音量ボタンは押しません。 USB を抜いておいた方が成功率が高い気がしました。</p><p><img src="nyx20200718_230531.png" alt="「Switchroot Android」を選択" loading="lazy"></p><p>初回起動は 3分ぐらい掛かりました。</p><p><img src="IMG_20200719_134410.png" alt="LineageOS 16.0 起動画面" loading="lazy"></p><p>後は普通に Android の初期設定をして完了です。</p><p><img src="IMG_20200719_135331_1.png" alt="Nintendo Switch で Android 9.0 を起動" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Wi-Fi とか タッチ性能とか、使い勝手が向上している気がしました。</p><p>でも、画面の表示がおかしくて常に点滅していました。ちょっと残念です。</p><p>PC で SDカードのパーティションを変更しなくて良いのは、簡単でいいですね。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/47Q3FYt"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/47Q3FYt"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: RGEEK RCMジグ 任天堂スイッチ用 RCMツール RCM SX OS ショートサーキットツール アーカイブプレイ GBA/FBA その他のシミュレーターの変更に使用 : ゲーム</div><div class="hbc-url">https://amzn.to/47Q3FYt</div></div></div></div></a></div></div><h2 id="トラブルシューティング"><a href="#トラブルシューティング" class="headerlink" title="トラブルシューティング"></a>トラブルシューティング</h2><h3 id="「More-Configs」を選択後「Switchroot-Android」が表示されない"><a href="#「More-Configs」を選択後「Switchroot-Android」が表示されない" class="headerlink" title="「More Configs」を選択後「Switchroot Android」が表示されない"></a>「More Configs」を選択後「Switchroot Android」が表示されない</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No .ini or boot entries found...</span><br><span class="line">Check that a .ini file exists in /bootloader/ini/.</span><br><span class="line">and that it contains at least one entry.</span><br></pre></td></tr></table></figure><p><img src="nyx20200718_223251.png" loading="lazy"></p><p>原因は ブートに必要なINIファイルが見つからないためです。</p><p>「bootloader」&gt;「ini」&gt;「00-android.txt」の拡張子を「00-android.ini」に変更したら「Switchroot Android」が表示されるようになりました。</p><p><img src="WS001859.png" alt="「00-android.txt」の拡張子を「00-android.ini」に変更" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Nintendo Switch で Android 9.0(Pie) を起動させる事が出来るみたいなので、その方法を紹介します。&lt;/p&gt;
&lt;h2 id=&quot;参考サイト&quot;&gt;&lt;a href=&quot;#参考サイト&quot; class=&quot;headerlink&quot; title=&quot;参考サイト&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="nintendo-switch" scheme="https://noitaro.github.io/tags/nintendo-switch/"/>
    
    <category term="twrp" scheme="https://noitaro.github.io/tags/twrp/"/>
    
    <category term="lineageos" scheme="https://noitaro.github.io/tags/lineageos/"/>
    
    <category term="hekate" scheme="https://noitaro.github.io/tags/hekate/"/>
    
    <category term="sxos" scheme="https://noitaro.github.io/tags/sxos/"/>
    
  </entry>
  
  <entry>
    <title>Windows 10 Home で Docker Desktop を使う</title>
    <link href="https://noitaro.github.io/install-docker-desktop-on-windows-10-home/"/>
    <id>https://noitaro.github.io/install-docker-desktop-on-windows-10-home/</id>
    <published>2020-07-12T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.203Z</updated>
    
    <content type="html"><![CDATA[<p>Docker Desktop は Hyper-V が使える Windows Pro か Enterprise でしか使えませんでした。</p><p>しかし <a href="https://docs.microsoft.com/ja-jp/windows/wsl/wsl2-index">Windows Subsystem for Linux 2 (WSL2)</a> がリリースされた事によって、Linux の実行ファイルが Windows上 でネイティブ実行出来るようになりました。そのおかげで、今まで <a href="https://www.virtualbox.org/">VirtualBox</a> や <a href="https://www.vmware.com/">VMware</a> などの 仮想マシンを使ってやっていたことが Windows でも出来るようになりました。</p><p>という訳で、WSL2 を使って Windows 10 Home でも Docker Desktop を使えるようにしましょう。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Home バージョン 2004</li></ul><p><img src="WS001824.png" alt="「設定」&gt;「システム」&gt;「バージョン情報」で確認" loading="lazy"></p><p>「設定」&gt;「システム」&gt;「バージョン情報」で確認</p><h2 id="WSL2-を有効にする"><a href="#WSL2-を有効にする" class="headerlink" title="WSL2 を有効にする"></a>WSL2 を有効にする</h2><h3 id="Linux用の-Windowsサブシステム-をインストールする"><a href="#Linux用の-Windowsサブシステム-をインストールする" class="headerlink" title="Linux用の Windowsサブシステム をインストールする"></a>Linux用の Windowsサブシステム をインストールする</h3><p>PowerShell を管理者モードで開きます。</p><p><img src="WS001826.png" alt="スタートメニューの検索ボックスに「PowerShell」と入力し「管理者として実行する」を選択" loading="lazy"></p><p>スタートメニューの検索ボックスに「PowerShell」と入力し「管理者として実行する」を選択</p><p>PowerShell で下記コマンドを実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><p><img src="WS001828.png" alt="dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart" loading="lazy"></p><p>dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Windows-Subsystem-Linux &#x2F;all &#x2F;norestart</p><h3 id="仮想マシンプラットフォームオプションを有効にする"><a href="#仮想マシンプラットフォームオプションを有効にする" class="headerlink" title="仮想マシンプラットフォームオプションを有効にする"></a>仮想マシンプラットフォームオプションを有効にする</h3><p>PowerShell で下記コマンドを実行します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p><img src="WS001829.png" alt="dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart" loading="lazy"></p><p>dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:VirtualMachinePlatform &#x2F;all &#x2F;norestart</p><h3 id="Linux-カーネル更新プログラムをインストールする"><a href="#Linux-カーネル更新プログラムをインストールする" class="headerlink" title="Linux カーネル更新プログラムをインストールする"></a>Linux カーネル更新プログラムをインストールする</h3><p><a href="https://docs.microsoft.com/ja-jp/windows/wsl/wsl2-kernel">Linux カーネル更新プログラムパッケージ</a></p><p><img src="WS001834.png" alt="最新の WSL2 Linux カーネル更新プログラム パッケージをダウンロード" loading="lazy"></p><p>最新の WSL2 Linux カーネル更新プログラム パッケージをダウンロード</p><p>正常終了したら、PC を再起動させます。</p><p>再起動が終わってから、次のステップに移ります。</p><h2 id="Docker-Desktop-をインストールする"><a href="#Docker-Desktop-をインストールする" class="headerlink" title="Docker Desktop をインストールする"></a>Docker Desktop をインストールする</h2><h3 id="Docker-Desktop-Installer-をダウンロード"><a href="#Docker-Desktop-Installer-をダウンロード" class="headerlink" title="Docker Desktop Installer をダウンロード"></a>Docker Desktop Installer をダウンロード</h3><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows">Docker Hub</a> から「Docker Desktop Installer.exe」をダウンロードします。</p><p><img src="WS001836.png" alt="Docker Desktop for Windows の Get Stable をクリック" loading="lazy"></p><p>Docker Desktop for Windows の Get Stable をクリック</p><p>ダウンロードが出来たらインストーラーを実行します。</p><p><img src="WS001837.png" alt="Docker Desktop Installer を実行" loading="lazy"></p><p>Docker Desktop Installer を実行</p><p>「Enable WSL 2 Windows Features」にチェックが入っている事を確認して「OK」ボタンを押します。</p><p><img src="WS001838.png" alt="Enable WSL 2 Windows Features にチェックを入れる" loading="lazy"></p><p>「Installation succeeded」と表示されればインストール完了です。右上の×ボタンでインストーラーを終了させます。</p><p><img src="WS001839.png" alt="Installation succeeded" loading="lazy"></p><h2 id="起動確認"><a href="#起動確認" class="headerlink" title="起動確認"></a>起動確認</h2><p>Docker Desktop のインストールが出来たので、最後に起動確認をして今回はおしまいです。</p><p>デスクトップのショートカットから起動します。</p><p><img src="WS001840.png" alt="Docker Desktop のショートカットを実行" loading="lazy"></p><p>Docker Desktop のショートカットを実行</p><p>タスクトレイに Docker のアイコンが追加されるので、アイコンを右クリックし「Dashnoard」で Docker画面が表示できます。</p><p><img src="WS001844.png" alt="Dashnoard を選択" loading="lazy"></p><p>Dashnoard を選択</p><p><img src="WS001845.png" alt="Docker画面" loading="lazy"></p><h3 id="起動しない場合は？"><a href="#起動しない場合は？" class="headerlink" title="起動しない場合は？"></a>起動しない場合は？</h3><p>下記エラーが出て起動しない場合？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Docker Desktop - Requires log out</span><br><span class="line">You need to log out of Windows Then your &quot;docker-users&quot; membership will be taken info account</span><br></pre></td></tr></table></figure><p><img src="WS001841.png" alt="Docker Desktop - Requires log out" loading="lazy"></p><p>一度、サインアウトをすると起動出来ました。</p><p><img src="WS001843.png" alt="サインアウト" loading="lazy"></p><h3 id="自動起動を止めたい場合は？"><a href="#自動起動を止めたい場合は？" class="headerlink" title="自動起動を止めたい場合は？"></a>自動起動を止めたい場合は？</h3><p>Docker画面 の 設定ボタンを押して「Start Docker Desktop when you log in」のチェックを外します。 最後に「Apply」を押せば OK です。</p><p><img src="WS001846.png" alt="Start Docker Desktop when you log in のチェックを外す" loading="lazy"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.docker.com/desktop/windows/install/">https://docs.docker.com/desktop/windows/install/</a></p><p><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">https://docs.microsoft.com/en-us/windows/wsl/install-win10</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Docker Desktop は Hyper-V が使える Windows Pro か Enterprise でしか使えませんでした。&lt;/p&gt;
&lt;p&gt;しかし &lt;a href=&quot;https://docs.microsoft.com/ja-jp/windows/wsl/wsl2</summary>
      
    
    
    
    
    <category term="docker" scheme="https://noitaro.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>【Noita】杖合成 Mod の使い方</title>
    <link href="https://noitaro.github.io/noita-mod-how-to-wand-workshop/"/>
    <id>https://noitaro.github.io/noita-mod-how-to-wand-workshop/</id>
    <published>2020-07-10T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.427Z</updated>
    
    <content type="html"><![CDATA[<p>Noita Mod の「<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1994857511">Wand Workshop（ワンドワークショップ）</a>」を紹介します。</p><p><img src="previewfile_1994857511.png" alt="Wand Workshop" loading="lazy"></p><p>Wand Workshop とは、杖を合成することが出来る Mod です。</p><p>この Mod を導入すると 聖なる山 の左側に 杖を合成することが出来る工房が出現します。</p><p>その工房で杖の性能を引き継がせる事が出来ます。引き継ぎに使われた杖は消滅してしまいますが、より強い杖で下層に挑むことが出来ます。</p><h2 id="杖合成-Mod-の入れ方"><a href="#杖合成-Mod-の入れ方" class="headerlink" title="杖合成 Mod の入れ方"></a>杖合成 Mod の入れ方</h2><p>Steam のワークショップでサブスクライブすると、簡単に導入する事が出来ます。</p><p><a href="https://steamcommunity.com/sharedfiles/filedetails/?id=1994857511">https://steamcommunity.com/sharedfiles/filedetails/?id=1994857511</a></p><p><img src="WS001821.png" alt="Steam のワークショップでサブスクライブする" loading="lazy"></p><p>サブスクライブしたら、ゲーム内で有効にする事を忘れずに行いましょう。</p><p><img src="Noita-Early-Access-Build-Jun-30-2020-20_11_53-2020_07_10-14_35_07.png" alt="チェックを忘れずに入れること" loading="lazy"></p><h2 id="杖合成-Mod-の使い方"><a href="#杖合成-Mod-の使い方" class="headerlink" title="杖合成 Mod の使い方"></a>杖合成 Mod の使い方</h2><p>まずは、ゲーム内で 聖なる山 に向かいます。道中で杖を拾っておきましょう。</p><p>聖なる山 に入ったら左側に工房が見えるので、そこで杖合成が出来ます。</p><p><img src="WS002143.png" alt="工房" loading="lazy"></p><p>中央の祭壇にメインとなる杖を置きます。</p><p>「I」キーで杖画面を開いて、杖をドラッグで自分の足元に落とします。</p><p><img src="20200710_10.png" alt="杖をドラッグで自分の足元に落とす" loading="lazy"></p><p>こんな感じで杖が祭壇に設定されます。</p><p><img src="20200710_2.png" alt="中央の祭壇にメインとなる杖" loading="lazy"></p><p>同じ手順で引き継がせたい杖を、それぞれの祭壇に設定して行きます。</p><p><img src="20200710_11-1.png" alt="中央以外の祭壇に引き継がせる杖" loading="lazy"></p><p>最後に中央の杖を拾えば完了です。</p><p><img src="20200710_12.png" alt="杖を拾う" loading="lazy"></p><p>能力が思った通りになっていることを確認してから拾いましょう。</p><p><img src="20200710_13.png" alt="杖を拾った" loading="lazy"></p><p>付けていた魔法と、少しばかりのゴールドが戻ってきます。</p><p><img src="20200710_14.png" alt="魔法とゴールドが戻ってくる" loading="lazy"></p><h2 id="祭壇について"><a href="#祭壇について" class="headerlink" title="祭壇について"></a>祭壇について</h2><p>祭壇の場所によって引き継がれる能力が違います。祭壇に目印が現れるので、それを頼りに引き継ぎを行いましょう。</p><p>左から、何の能力が引き継がれるか見ていきます。</p><h3 id="同時詠唱数"><a href="#同時詠唱数" class="headerlink" title="同時詠唱数"></a>同時詠唱数</h3><p><img src="20200710_7.png" alt="同時詠唱数を合成" loading="lazy"></p><h3 id="マナチャージ速度"><a href="#マナチャージ速度" class="headerlink" title="マナチャージ速度"></a>マナチャージ速度</h3><p><img src="20200710_4.png" alt="マナチャージ速度を合成" loading="lazy"></p><h3 id="リチャージ時間"><a href="#リチャージ時間" class="headerlink" title="リチャージ時間"></a>リチャージ時間</h3><p><img src="20200710_3.png" alt="リチャージ時間を合成" loading="lazy"></p><h3 id="詠唱遅延"><a href="#詠唱遅延" class="headerlink" title="詠唱遅延"></a>詠唱遅延</h3><p><img src="20200710_5.png" alt="詠唱遅延を合成" loading="lazy"></p><h3 id="最大マナ"><a href="#最大マナ" class="headerlink" title="最大マナ"></a>最大マナ</h3><p><img src="20200710_8.png" alt="最大マナを合成" loading="lazy"></p><h3 id="シャッフル"><a href="#シャッフル" class="headerlink" title="シャッフル"></a>シャッフル</h3><p><img src="20200710_6.png" alt="シャッフルを合成" loading="lazy"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>左の祭壇から「同時詠唱数」「マナチャージ速度」「リチャージ時間」「詠唱遅延」「最大マナ」「シャッフル」に引き継がれる事が分かりました。</p><p><img src="20200710_60.png" alt="左の祭壇から「同時詠唱数」「マナチャージ速度」「リチャージ時間」「詠唱遅延」「最大マナ」「シャッフル」" loading="lazy"></p><p>これを頭に叩き込んで、ゲームを有利に進めていきましょう。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Noita Mod の「&lt;a href=&quot;https://steamcommunity.com/sharedfiles/filedetails/?id=1994857511&quot;&gt;Wand Workshop（ワンドワークショップ）&lt;/a&gt;」を紹介します。&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
      
    
    
    
    
    <category term="games" scheme="https://noitaro.github.io/tags/games/"/>
    
    <category term="mod" scheme="https://noitaro.github.io/tags/mod/"/>
    
    <category term="noita" scheme="https://noitaro.github.io/tags/noita/"/>
    
  </entry>
  
  <entry>
    <title>M.2 SSD に換装</title>
    <link href="https://noitaro.github.io/m2-nvme-ssd/"/>
    <id>https://noitaro.github.io/m2-nvme-ssd/</id>
    <published>2020-07-03T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.243Z</updated>
    
    <content type="html"><![CDATA[<p>M.2 SSD を買っちゃいました。</p><p>読み込み速度は何と 3,100MB&#x2F;s、書き込み速度は 1,600MB&#x2F;s のめちゃくちゃ早くていいやつです。</p><h2 id="M-2-SSD"><a href="#M-2-SSD" class="headerlink" title="M.2 SSD"></a>M.2 SSD</h2><p>私が買ったのは Western Digital の <a href="https://amzn.to/44P6mH7">SN750</a> です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/44P6mH7"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/44P6mH7"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | Western Digital ウエスタンデジタル 内蔵SSD 500GB WD Black SN750 ゲーム向け M.2-2280 NVMe WDS500G3X0C-EC 【国内正規代理店品】 | ウエスタンデジタル(Western Digital) | パソコン・周辺機器 通販</div><div class="hbc-url">https://amzn.to/44P6mH7</div></div></div></div></a></div></div><p>メイド イン マレーシア！ 3GBのファイルを1秒足らずで読み込めちゃう優れもの。</p><p><img src="IMG_20200627_150201.png" alt="Western Digital SN750 の表" loading="lazy"></p><p>ちなみに片面実装でした。裏はツルツル、この容量なら片面で足りるんでしょうね。</p><p><img src="IMG_20200627_150221.png" alt="Western Digital SN750 の裏" loading="lazy"></p><h2 id="Akineko製-アルミニウム-ヒートシンク"><a href="#Akineko製-アルミニウム-ヒートシンク" class="headerlink" title="Akineko製 アルミニウム ヒートシンク"></a>Akineko製 アルミニウム ヒートシンク</h2><p>ヒートシンクは安いのを付けておきました。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/2ZznRLS"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/2ZznRLS"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | Akineko ヒートシンク 黒アルマイト処理 6個セット 熱伝導両面テープ付き 22.5×22.5×5mm | Akineko | ヒートシンク 通販</div><div class="hbc-url">https://amzn.to/2ZznRLS</div></div></div></div></a></div></div><p><img src="IMG_20200630_195258.png" alt="Akineko製 アルミニウム ヒートシンク" loading="lazy"></p><p>装着はちょー簡単でした。放熱シリコーンパッドを M.2 SSD と ヒートシンクで挟んでゴムで止めるだけ。</p><p><img src="IMG_20200630_200437.png" alt="M.2 SSD にヒートシンクを取付" loading="lazy"></p><h2 id="Let’s-換装"><a href="#Let’s-換装" class="headerlink" title="Let’s 換装"></a>Let’s 換装</h2><p>まず、PCケースを開けて中を確認。</p><p><img src="IMG_20200627_145525.png" alt="ケースの蓋を開けたところ" loading="lazy"></p><p>若干ホコリが積もってますが、まあ良いでしょう。</p><p>M.2 SSD を付ける箇所は、グラボの奥側なので１回グラボを外します。</p><p>グラボを外した姿がこちら。 M.2 SSD を付けるところは、msiロゴの右側か ボタン電池の右側の2箇所あります。</p><p><img src="IMG_20200627_150028.png" alt="マザーボードからグラボを取外" loading="lazy"></p><p>今回は msiロゴの右側に付けました。</p><p><img src="IMG_20200630_200649.png" alt="マザーボードに M.2 SSD を取付" loading="lazy"></p><p>うん、クソダサですね。まあ見えなくなるので良しとします。</p><p>最後にグラボを戻して配線しなおして完了です。</p><h2 id="実力は如何に？"><a href="#実力は如何に？" class="headerlink" title="実力は如何に？"></a>実力は如何に？</h2><p>せっかくなので OS も綺麗サッパリ入れ直しです。</p><p>SSD から M.2 SSD に換装したので比較する意味が無いですが、ビフォーアフターを報告します。</p><h3 id="換装前の-SSD"><a href="#換装前の-SSD" class="headerlink" title="換装前の SSD"></a>換装前の SSD</h3><p><img src="WS001756-1.png" alt="CrystalDiskMark SSD の情報" loading="lazy"></p><p><img src="WS001757-1.png" alt="CrystalDiskInfo SSD の情報" loading="lazy"></p><h3 id="換装後の-M-2-SSD"><a href="#換装後の-M-2-SSD" class="headerlink" title="換装後の M.2 SSD"></a>換装後の M.2 SSD</h3><p>読み込み速度は理論値を出してて、申し分のない結果です。</p><p>意外だったのが書き込み速度です。説明文には 1,600MB&#x2F;s と書いてあったのですが、2,100MB&#x2F;s も出てますね。1.3倍の性能が出ていますね。</p><p><img src="WS001767-1.png" alt="CrystalDiskMark M.2 SSD の情報" loading="lazy"></p><p>温度もちゃんと冷えてて良し。</p><p><img src="WS001758-1-1.png" alt="CrystalDiskInfo M.2 SSD の情報" loading="lazy"></p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>書き込み速度がボトルネックになるんじゃないかと心配していましたが 全然そんな事は無く、とてもパワフルに働いてくれています。</p><p>温度も 容量が少ないおかげで そんなに発熱も無く問題無さそうです。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/44P6mH7"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/44P6mH7"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon | Western Digital ウエスタンデジタル 内蔵SSD 500GB WD Black SN750 ゲーム向け M.2-2280 NVMe WDS500G3X0C-EC 【国内正規代理店品】 | ウエスタンデジタル(Western Digital) | パソコン・周辺機器 通販</div><div class="hbc-url">https://amzn.to/44P6mH7</div></div></div></div></a></div></div><p>ちょうど1年前に、今使っているPCを組み立てた記事を上げているので、良ければ読んで下さい。</p><p><a href="https://noitaro.github.io/build-pc/">https://noitaro.github.io/build-pc/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;M.2 SSD を買っちゃいました。&lt;/p&gt;
&lt;p&gt;読み込み速度は何と 3,100MB&amp;#x2F;s、書き込み速度は 1,600MB&amp;#x2F;s のめちゃくちゃ早くていいやつです。&lt;/p&gt;
&lt;h2 id=&quot;M-2-SSD&quot;&gt;&lt;a href=&quot;#M-2-SSD&quot; class</summary>
      
    
    
    
    
    <category term="gadget" scheme="https://noitaro.github.io/tags/gadget/"/>
    
    <category term="pc" scheme="https://noitaro.github.io/tags/pc/"/>
    
  </entry>
  
  <entry>
    <title>消せないシステムアプリを消す方法</title>
    <link href="https://noitaro.github.io/android-system-app-uninstall/"/>
    <id>https://noitaro.github.io/android-system-app-uninstall/</id>
    <published>2020-07-02T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.699Z</updated>
    
    <content type="html"><![CDATA[<p>アンドロイドの消せないシステムアプリを、消す方法を紹介します。</p><h2 id="始めに"><a href="#始めに" class="headerlink" title="始めに"></a>始めに</h2><p>普段だとアンドロイドのシステムアプリを消すことは出来ません。</p><p>良くて無効化までしか出来ないはずです。</p><p><img src="Screenshot_20200702-151859_1-1.png" alt="Gmail 無効にする" loading="lazy"></p><p>無効化しても画面上から消えるから良いんですが、システム領域にはシッカリと残っているので、神経質な人は気に食わないんですよね。主に私が！</p><p>そんなシステムアプリを消す（アンインストール）方法を紹介します。</p><p><img src="Screenshot_20200702-152328_2.png" alt="Gmail アンインストール" loading="lazy"></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>絶対条件として、ルート化してある必要があります。</p><p><img src="Screenshot_20200612-204708-1.png" alt="Magisk Manager" loading="lazy"></p><p>Magisk をインストールするとルート化出来ますが、自己責任でお願いします。</p><p>もう一つ、システム領域にアクセス出来るファイルマネージャーアプリが必要です。</p><p>今回は「<a href="https://play.google.com/store/apps/details?id=pl.solidexplorer2&hl=ja">Solid Explorer</a>」を使って説明します。</p><p><img src="Screenshot_20200702-152431.png" alt="Solid Explorer ファイル&amp;クラウドマネージャ" loading="lazy"></p><p>別に、システム領域にアクセス出来れば良いのでお好きなアプリを使ってください。</p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>ファイルマネージャー で「ルート &gt; System &gt; App」フォルダを開きます。</p><p><img src="Screenshot_20200702-151947.png" alt="ストレージのルートを選択" loading="lazy"></p><p>ルート領域にアクセスするには、スーパーユーザーに許可して貰わないと駄目なので、ダイアログが出たら「許可」を選択します。</p><p><img src="Screenshot_20200702-151956.png" alt="スーパーユーザーリクエストダイアログで許可を選択" loading="lazy"></p><p>Appフォルダ には、システムアプリが入っています。</p><p>このフォルダ内のアプリファイルを消すことで、システムアプリをアンインストールする事が出来るようになります。</p><p><img src="Screenshot_20200702-152049.png" alt="ルート &gt; System &gt; App" loading="lazy"></p><h3 id="システムアプリを削除する"><a href="#システムアプリを削除する" class="headerlink" title="システムアプリを削除する"></a>システムアプリを削除する</h3><p>試しに Gmailアプリ を消してみます。もし必要なったら Googleストア から再度インストールすれば使えるようになります。</p><p>Gmailアプリが入っているフォルダを選択してからゴミ箱アイコンをタップします。</p><p><img src="Screenshot_20200702-152147.png" alt="Gmailアプリが入っているフォルダを選択してからゴミ箱アイコンをタップ" loading="lazy"></p><p>削除確認ダイアログが出るので「削除」を選択します。</p><p><img src="Screenshot_20200702-152211.png" alt="削除確認ダイアログで「削除」を選択" loading="lazy"></p><p>最後に端末の再起動をします。</p><p>Gmail のアプリ情報を開くと「無効にする」ボタンが「アンインストール」ボタンに変わっています。</p><p><img src="Screenshot_20200702-152328_1.png" alt="システムアプリをアンインストールする" loading="lazy"></p><p>実際に「アンインストール」をタップすると、アンインストールする事が出来ます。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;アンドロイドの消せないシステムアプリを、消す方法を紹介します。&lt;/p&gt;
&lt;h2 id=&quot;始めに&quot;&gt;&lt;a href=&quot;#始めに&quot; class=&quot;headerlink&quot; title=&quot;始めに&quot;&gt;&lt;/a&gt;始めに&lt;/h2&gt;&lt;p&gt;普段だとアンドロイドのシステムアプリを消すことは出来ま</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="magisk" scheme="https://noitaro.github.io/tags/magisk/"/>
    
    <category term="rooted" scheme="https://noitaro.github.io/tags/rooted/"/>
    
  </entry>
  
  <entry>
    <title>スマホやスイッチで マインクラフトJavaエディション をプレイする</title>
    <link href="https://noitaro.github.io/minecraft-geyser/"/>
    <id>https://noitaro.github.io/minecraft-geyser/</id>
    <published>2020-06-28T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.267Z</updated>
    
    <content type="html"><![CDATA[<p>マインクラフトには Bedrock Edition または 統合版 と呼ばれているエディションと、Java Edition と呼ばれている2つのエディションが存在します。</p><ul><li>Bedrock Edition（統合版）</li><li>Java Edition</li></ul><p>その2つのエディションは見た目やゲーム性は同じですが、一緒にマルチプレイをする事が出来ません。</p><p>理由は多々あるのですが簡単にまとめると、Java Edition の方が新機能をいち早く開発し実装しており、Bedrock Edition は Java Edition の機能を取り込んで開発しているため、どうしても相容れない関係となってしまった見たいです。</p><p>なので Java Edition と Bedrock Edition は一緒にマルチプレイをする事が出来ないのです。</p><h2 id="Geyser"><a href="#Geyser" class="headerlink" title="Geyser"></a>Geyser</h2><p>今回の Geyser を使えば マインクラフト Bedrock Edition で マインクラフト Java Edition の住まうサーバーに接続して一緒に遊ぶ事が出来るので紹介します。</p><p>Geyser はプロキシの役目をして Bedrock Edition と Java Edition のギャップを埋めてくれます。つまり、擬似的にクロスプラットフォームを作り上げているのです。Bedrock Edition のパケットを全て Java Edition 用に変換している凄いやつなのです。</p><p><img src="WS001746.png" alt="マインクラフト Java server への接続する流れ" loading="lazy"></p><p>ただ開発途中なのでまだ未実装な部分があり、完全動作は保証出来ません。</p><p>Geyserには何個か種類があります。ここでは サーバープラグインバージョンのGeyser-Bukkit と スタンドアロンバージョンのGeyser-Standalone を紹介します。</p><ul><li>Geyser-Bukkit（サーバープラグイン）</li><li>Geyser-Standalone（スタンドアロン）</li></ul><p>サーバープラグインバージョンはその名の通りサーバーに直接インストールできます。スタンドアロンバージョンは、単体で実行します。機能は同じです。</p><p>マインクラフトサーバーに Geyser-Bukkit が入っていれば、プレイヤーは特別な事をしなくても Javaサーバーにログインする事が出来ます。しかしマインクラフトサーバーに Geyser-Bukkit が入っていいない場合、自分で Geyser-Standalone を用意しないと Javaサーバーにログイン出来ません。</p><h2 id="どうやってやるの？"><a href="#どうやってやるの？" class="headerlink" title="どうやってやるの？"></a>どうやってやるの？</h2><h3 id="サーバープラグインバージョン"><a href="#サーバープラグインバージョン" class="headerlink" title="サーバープラグインバージョン"></a>サーバープラグインバージョン</h3><p>自分自身が マインクラフト Javaサーバー を動かしている場合は、サーバープラグインバージョンの Geyser を入れるだけです。</p><p><img src="WS001748.png" alt="マインクラフト Javaサーバー に Geyser-Bukkit を入れる" loading="lazy"></p><p><a href="https://geysermc.org/">公式サイト</a> の Download をクリックして、ダウンロードページに行きます。</p><p><img src="WS001750-1.png" alt="公式サイト の Download をクリック" loading="lazy"></p><p>最新成功ビルドの「Geyser-Bukkit.jar」をダウンロードします。</p><p><img src="WS001751.png" alt="「Geyser-Bukkit.jar」をダウンロード" loading="lazy"></p><p>あとは、マインクラフト Javaサーバーの「plugins」フォルダに入れてサーバーを起動すれば完了です。</p><p><img src="WS001752.png" alt="マインクラフト Javaサーバーの「plugins」フォルダに「Geyser-Bukkit.jar」を入れる" loading="lazy"></p><p>マインクラフト Java サーバーを立ち上げて、Bedrock Edition でログイン出来るか確認します。</p><p><img src="WS001753.png" alt="マインクラフト Java サーバーを立ち上げる" loading="lazy"></p><p>このようなログが出てれば問題なく動作しています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Geyser-Bukkit] Enabling Geyser-Bukkit v1.0-SNAPSHOT  </span><br><span class="line">[Geyser-Bukkit] Loading Geyser version 1.0-SNAPSHOT (git-master-d0c95d3)  </span><br><span class="line">[Geyser-Bukkit] Missing locale file: en_us  </span><br><span class="line">[Geyser-Bukkit] Started Geyser on 0.0.0.0:19132  </span><br><span class="line">[Geyser-Bukkit] Done (2.836s)! Run /geyser help for help!</span><br></pre></td></tr></table></figure><p>ゲーム内で サーバー名、サーバーアドレス、ポートを入力します。</p><ul><li>サーバー名：java server（適当）</li><li>サーバーアドレス：192.168.0.8（JavaサーバーのIPアドレス）</li><li>ポート：19132（変えて無ければ）</li></ul><p><img src="IMG_0181.png" alt="サーバー名、サーバーアドレス、ポートを入力" loading="lazy"></p><p>そうすると、サーバーが追加されて Javaサーバーにログインすることが出来ます。</p><p><img src="IMG_0182.png" alt="Javaサーバーにログイン" loading="lazy"></p><h3 id="スタンドアロンバージョン"><a href="#スタンドアロンバージョン" class="headerlink" title="スタンドアロンバージョン"></a>スタンドアロンバージョン</h3><p>Geyser が入っていない Javaサーバー に遊びに行く場合は、スタンドアロンバージョンの Geyser を挟んであげる必要があります。</p><p><img src="WS001749.png" alt="スタンドアロンバージョンの Geyser を挟む図" loading="lazy"></p><p><a href="https://geysermc.org/">公式サイト</a> の Download をクリックして、ダウンロードページに行きます。</p><p>今度は「Geyser.jar」をダウンロードします。</p><p><img src="WS001755.png" alt="「Geyser.jar」をダウンロード" loading="lazy"></p><p>ダウンロードが出来たら 1回実行します。そうすると「config.yml（コンフィグファイル）」が作られます。</p><p><img src="WS001788.png" alt="Geyser.jar" loading="lazy"></p><p>実行方法は、下記をコマンドプロンプトで実行するとよいです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx1024M -Xms1024M -jar Geyser.jar nogui</span><br></pre></td></tr></table></figure><p>コマンドプロンプトを開くのが面倒くさい場合は、エクスプローラのアドレスバーにコピペして エンターキー を押すとコマンドプロンプトが起動しますよ。</p><p><img src="WS001789.png" alt="java -Xmx1024M -Xms1024M -jar Geyser.jar nogui" loading="lazy"></p><p>1回実行すると「config.yml」が作られます。</p><p><img src="WS001791.png" alt="1回実行すると「config.yml（コンフィグファイル）」が出来る" loading="lazy"></p><p>この「config.yml」ファイルを編集して、接続先の Java server を変更します。同じPC内で Java server が動いている場合は変更しなくても大丈夫です。</p><p>接続先の Java server を変更するには「remote」セクション内を変更します。</p><ul><li>address: 接続先の Java server の IPアドレス</li><li>port: 接続先の Java server の ポート番号</li><li>auth-type: 接続先の Java server の 認証タイプ</li></ul><p><img src="WS001792.png" alt="「config.yml」ファイルを編集" loading="lazy"></p><p>この 3つさえ正しく設定して上げれば、どの Java server にも Bedrock Edition でログインする事が出来ます。</p><h2 id="マインクラフトサーバーの認証を飛ばしてログイン"><a href="#マインクラフトサーバーの認証を飛ばしてログイン" class="headerlink" title="マインクラフトサーバーの認証を飛ばしてログイン"></a>マインクラフトサーバーの認証を飛ばしてログイン</h2><p>Java server に遊びに行くけど Java Edition のアカウントを持っていない場合は、マインクラフトサーバーの認証を飛ばしてログイン出来るようにしましょう。</p><h3 id="サーバープラグインバージョン-1"><a href="#サーバープラグインバージョン-1" class="headerlink" title="サーバープラグインバージョン"></a>サーバープラグインバージョン</h3><p>pluginsフォルダに「floodgate-bukkit.jar」を入れます。</p><p><img src="WS001752_2.png" alt="pluginsフォルダに「floodgate-bukkit.jar」を入れる" loading="lazy"></p><p>「floodgate-bukkit.jar」は <a href="https://github.com/GeyserMC/Geyser/wiki/Floodgate">こちら</a> のサイトからダウンロード出来ます。</p><p><a href="https://github.com/GeyserMC/Geyser/wiki/Floodgate">https://github.com/GeyserMC/Geyser/wiki/Floodgate</a></p><p>「Download」をクリックし、</p><p><img src="WS001794.png" alt="「Download」をクリック" loading="lazy"></p><p>「floodgate-bukkit.jar」をダウンロードします。</p><p><img src="WS001795.png" alt="「floodgate-bukkit.jar」をダウンロード" loading="lazy"></p><p>「plugins」フォルダに「floodgate-bukkit.jar」を入れたら、一回サーバーを起動して「config.yml（コンフィグファイル）」を作ります。</p><p>次に、サーバー側でマインクラフト認証をスキップするように変更します。</p><p><img src="WS001796.png" alt="サーバーフォルダにある「server.properties」ファイルをテキストエディッタで開き「online-mode」を「false」に変更" loading="lazy"></p><p>サーバーフォルダにある「server.properties」ファイルをテキストエディッタで開き「online-mode」を「false」に変更</p><p>次に「Geyser-Bukkit」フォルダの「config.yml（コンフィグファイル）」を開いて、認証をスキップするように変更します。</p><p><img src="WS001798.png" alt="「Geyser-Bukkit」フォルダの「config.yml（コンフィグファイル）」をテキストエディッタで開き「auth-type」を「floodgate」に変更" loading="lazy"></p><p>「Geyser-Bukkit」フォルダの「config.yml（コンフィグファイル）」をテキストエディッタで開き「auth-type」を「floodgate」に変更</p><p>これで サーバーを起動すれば、Java Edition のアカウントを持っていなくても、ログインする事が出来ます。</p><h3 id="スタンドアロンバージョン-1"><a href="#スタンドアロンバージョン-1" class="headerlink" title="スタンドアロンバージョン"></a>スタンドアロンバージョン</h3><p>スタンドアロンバージョンでやる場合は、サーバーから「public-key.pem」ファイルを貰わないと出来ません。</p><p>「public-key.pem」ファイルを貰ったら「Geyser.jar」と同じ階層に置きます。</p><p><img src="WS001799.png" alt="「public-key.pem」ファイルを「Geyser.jar」と同じ階層に置く" loading="lazy"></p><p>その後「config.yml（コンフィグファイル）」をテキストエディッタで開き「auth-type」を「floodgate」に変更すれば、ログインする事が出来ます。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;マインクラフトには Bedrock Edition または 統合版 と呼ばれているエディションと、Java Edition と呼ばれている2つのエディションが存在します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bedrock Edition（統合版）&lt;/li&gt;
&lt;li&gt;Java Edi</summary>
      
    
    
    
    
    <category term="minecraft" scheme="https://noitaro.github.io/tags/minecraft/"/>
    
    <category term="mod" scheme="https://noitaro.github.io/tags/mod/"/>
    
  </entry>
  
  <entry>
    <title>Rakuten Mini で TWRP を試す</title>
    <link href="https://noitaro.github.io/rakuten-mini-twrp/"/>
    <id>https://noitaro.github.io/rakuten-mini-twrp/</id>
    <published>2020-06-20T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.511Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://androplus.org/">AndroPlus</a> さんが Rakuten Mini 用の <a href="https://androplus.org/Entry/15061/">TWRP</a> を公開してくださったので試してみようと思います。</p><p><a href="https://androplus.org/Entry/15061/">https://androplus.org/Entry/15061/</a></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>事前にブートローダーを解除しておきます。</p><p><a href="https://noitaro.github.io/rakuten-mini-bootloader-unlock/">https://noitaro.github.io/rakuten-mini-bootloader-unlock/</a></p><h2 id="Rakuten-Mini-TWRP-ダウンロード"><a href="#Rakuten-Mini-TWRP-ダウンロード" class="headerlink" title="Rakuten Mini TWRP ダウンロード"></a>Rakuten Mini TWRP ダウンロード</h2><p><a href="https://androplus.org/Entry/15061/">こちら</a> の TWRPダウンロード から TWRP-3.4.0-0_C330.img をダウンロードします。</p><p><img src="WS001722.png" loading="lazy"></p><p><img src="WS001723.png" loading="lazy"></p><h2 id="TWRP-実行"><a href="#TWRP-実行" class="headerlink" title="TWRP 実行"></a>TWRP 実行</h2><p>PCとRakuten MiniをUSBで接続し、下記コマンドを実行で端末を Bootloader モードにします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure><p><img src="WS001724.png" loading="lazy"></p><p>Rakuten Mini 端末側はこんな画面になります。</p><p><img src="IMG_20200620_182948.png" loading="lazy"></p><p>この状態で下記コマンドを実行すると TWRP が起動します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot boot D:\rakuten-mini\TWRP-3.4.0-0_C330.img</span><br></pre></td></tr></table></figure><p><img src="WS001725.png" loading="lazy"></p><p>おしまい。</p><p><img src="IMG_20200620_182343.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://androplus.org/&quot;&gt;AndroPlus&lt;/a&gt; さんが Rakuten Mini 用の &lt;a href=&quot;https://androplus.org/Entry/15061/&quot;&gt;TWRP&lt;/a&gt; を公開してくださったので試してみ</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="twrp" scheme="https://noitaro.github.io/tags/twrp/"/>
    
    <category term="rakuten-mini" scheme="https://noitaro.github.io/tags/rakuten-mini/"/>
    
  </entry>
  
  <entry>
    <title>Rakuten Mini に Magisk を 入れて Root化 する</title>
    <link href="https://noitaro.github.io/rakuten-mini-magisk-rooted/"/>
    <id>https://noitaro.github.io/rakuten-mini-magisk-rooted/</id>
    <published>2020-06-13T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.511Z</updated>
    
    <content type="html"><![CDATA[<p>前回、Rakuten Mini の ブートローダーをアンロックしました。</p><p><a href="https://noitaro.github.io/rakuten-mini-bootloader-unlock/">https://noitaro.github.io/rakuten-mini-bootloader-unlock/</a></p><p>今回は ルート化 です。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>ブートローダーが解除してある事が前提です。まだの方は <a href="https://noitaro.github.io/rakuten-mini-bootloader-unlock/">過去記事</a> をどうぞ。</p><p><img src="Screenshot_20200608-223706.png" alt="ブートローダーは既にロック解除されています" loading="lazy"></p><h2 id="Magisk適応済みブートイメージを手に入れる"><a href="#Magisk適応済みブートイメージを手に入れる" class="headerlink" title="Magisk適応済みブートイメージを手に入れる"></a>Magisk適応済みブートイメージを手に入れる</h2><p>まず、Magiskパッチが当たった boot_magisk_patched.img を手に入れます。</p><p>「<a href="https://androplus.org/Entry/14664/">AndroPlus</a>」こちらの一番下にある ファームウェアダンプ から、自分の端末に合ったファイルをダウンロードします。</p><p><a href="https://androplus.org/Entry/14664/">https://androplus.org/Entry/14664/</a></p><p><img src="WS001711.png" alt="C330AE_9.0_RMN_JP_65_SS" loading="lazy"></p><h3 id="ソフトウェアバージョンを確認"><a href="#ソフトウェアバージョンを確認" class="headerlink" title="ソフトウェアバージョンを確認"></a>ソフトウェアバージョンを確認</h3><p>端末情報の ソフトウェアバージョン と同じ boot_magisk_patched.img を入れないと、ブートループに陥って Android が起動しなくなります。</p><p>私の場合は「C330AE_9.0_RMN_JP_65_SS」だったので n1ckn4m3さんの boot_magisk_patched.img をダウンロードしました。</p><p><img src="Screenshot_20200612-204828.png" alt="ソフトウェアバージョン「C330AE_9.0_RMN_JP_65_SS」" loading="lazy"></p><p><img src="WS001712.png" alt="boot_magisk_patched.img をダウンロード" loading="lazy"></p><h2 id="Magisk適応済みブートイメージ-を焼く"><a href="#Magisk適応済みブートイメージ-を焼く" class="headerlink" title="Magisk適応済みブートイメージ を焼く"></a>Magisk適応済みブートイメージ を焼く</h2><p>では boot_magisk_patched.img もダウンロード出来たので、早速焼いちゃいましょう。</p><h3 id="Bootloader-モード"><a href="#Bootloader-モード" class="headerlink" title="Bootloader モード"></a>Bootloader モード</h3><p>PC と Rakuten Mini を USBケーブルで接続し、下記コマンドを実行して 端末を Bootloader モードにします。これは前回と同じ流れですね。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure><p><img src="WS001708.png" alt="adb reboot bootloader" loading="lazy"></p><p>Rakuten Mini 端末側はこんな画面になります。</p><p><img src="IMG_20200608_221309.png" alt="Bootloader モード" loading="lazy"></p><h3 id="bootイメージ書き込み"><a href="#bootイメージ書き込み" class="headerlink" title="bootイメージ書き込み"></a>bootイメージ書き込み</h3><p>端末が Bootloaderモード になったら、下記コマンドを実行して boot_magisk_patched.img を書き込みます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot D:\rakuten-mini\boot_magisk_patched.img</span><br></pre></td></tr></table></figure><p><img src="WS001710.png" alt="fastboot flash boot" loading="lazy"></p><h4 id="追伸"><a href="#追伸" class="headerlink" title="追伸"></a>追伸</h4><p>いきなり「fastboot flash boot」は危険なのでやめましょう。最初に「fastboot boot」をして問題なく起動できることを確認してから「fastboot flash boot」をしましょう。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">問題なく起動できるか確認</span><br><span class="line">fastboot boot D:\rakuten-mini\boot_magisk_patched.img</span><br></pre></td></tr></table></figure><h2 id="Magisk-を-入れて-Root化-する"><a href="#Magisk-を-入れて-Root化-する" class="headerlink" title="Magisk を 入れて Root化 する"></a>Magisk を 入れて Root化 する</h2><p>この段階で Root化出来る状態になったので、最後の仕上げ Magisk Manager を 入れて Root化 します。</p><p>ここから先は Rakuten mini 端末で作業します。</p><h3 id="Magisk-Manager-をダウンロード"><a href="#Magisk-Manager-をダウンロード" class="headerlink" title="Magisk Manager をダウンロード"></a>Magisk Manager をダウンロード</h3><p>Chrome で「<a href="https://magiskmanager.com/">Magisk Manager</a>」を開きます。</p><p><a href="https://magiskmanager.com/">https://magiskmanager.com/</a></p><p>Menu の Download を押し「Download Magisk Manager [1.85 MB]」をダウンロードします。</p><p><img src="Screenshot_20200612-194523.png" alt="Download Magisk Manager [1.85 MB]" loading="lazy"></p><h3 id="Magisk-Manager-をインストール"><a href="#Magisk-Manager-をインストール" class="headerlink" title="Magisk Manager をインストール"></a>Magisk Manager をインストール</h3><p><img src="Screenshot_20200612-194738.png" alt="Magisk Manager をインストール" loading="lazy"></p><h3 id="Root化"><a href="#Root化" class="headerlink" title="Root化"></a>Root化</h3><p>Magisk Manager を起動すると Root化 が始まります。指示に従って操作し再起動したら Root化完了です。</p><p><img src="Screenshot_20200612-204129-1.png" alt="Magisk Manager で Root化" loading="lazy"></p><p>こんな感じになればOK</p><p><img src="Screenshot_20200612-204708.png" alt="Magisk Manager" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>次は、カスタムリカバリの TWRP を入れてみますかー</p><p>最後に、充電用じゃなくてデータ通信用の USB3.0ケーブル じゃないと adbコマンド や fastbootコマンド が使えないので持ってない人は買っておくといいですよ。この <a href="https://amzn.to/3iar39f">USB3.0ケーブル</a> なら、太くて丈夫だし急速充電にも対応しているからおすすめです。でもウサギには噛みちぎられるけどね。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3iar39f"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3iar39f"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: Rampow usb c ケーブル【1m/黒】typec ケーブル 急速充電 QuickCharge3.0対応 USB3.1 Gen1規格 USB Type C ケーブル Sony Xperia XZ/XZ2, Samsung S10, Asus Zenfone 2, Fujitsu Arrows, PS5コントローラー タイプc多機種対応 在宅勤務支援 : パソコン・周辺機器</div><div class="hbc-url">https://amzn.to/3iar39f</div></div></div></div></a></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前回、Rakuten Mini の ブートローダーをアンロックしました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://noitaro.github.io/rakuten-mini-bootloader-unlock/&quot;&gt;https://noitaro.github.io</summary>
      
    
    
    
    
    <category term="android" scheme="https://noitaro.github.io/tags/android/"/>
    
    <category term="magisk" scheme="https://noitaro.github.io/tags/magisk/"/>
    
    <category term="rooted" scheme="https://noitaro.github.io/tags/rooted/"/>
    
    <category term="rakuten-mini" scheme="https://noitaro.github.io/tags/rakuten-mini/"/>
    
  </entry>
  
  <entry>
    <title>1円で手に入れた Rakuten Mini の Bootloader を Unlock する</title>
    <link href="https://noitaro.github.io/rakuten-mini-bootloader-unlock/"/>
    <id>https://noitaro.github.io/rakuten-mini-bootloader-unlock/</id>
    <published>2020-06-08T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.503Z</updated>
    
    <content type="html"><![CDATA[<p>2020年6月17日 まで Rakuten Mini 端末が1円で買えるキャンペーンが開催されていたので試しに買ってみました。</p><p><a href="https://network.mobile.rakuten.co.jp/campaign/mini-discount/">https://network.mobile.rakuten.co.jp/campaign/mini-discount/</a></p><p>端末は まあ至って普通の…より劣る性能で、メイン端末で使うのは厳しい感じの代物でした。</p><p>なのでおもちゃ行きです。</p><p>まだ大したことは出来ないですが、Bootloader の Unlock 方法が公開されていたので試しにやってみました。</p><p>注意事項として Bootloader を Unlock すると端末が初期化されます。重要なデータが入っている場合は退避させておきましょう。あと自己責任でお願いします。失敗して使い物にならなくなっても責任は負いません。</p><h2 id="Bootloader-Unlock"><a href="#Bootloader-Unlock" class="headerlink" title="Bootloader Unlock"></a>Bootloader Unlock</h2><h3 id="開発者向けオプション-を有効にする"><a href="#開発者向けオプション-を有効にする" class="headerlink" title="開発者向けオプション を有効にする"></a>開発者向けオプション を有効にする</h3><p>開発者向けオプション を有効にするため、端末情報の「ビルド番号」を 7回連続でタップします。</p><p><img src="Screenshot_20200608-211455.png" alt="「ビルド番号」を 7回連続でタップして 開発者向けオプション を有効にする" loading="lazy"></p><h3 id="開発者向けオプション-の-OEMロック解除-を有効にする"><a href="#開発者向けオプション-の-OEMロック解除-を有効にする" class="headerlink" title="開発者向けオプション の OEMロック解除 を有効にする"></a>開発者向けオプション の OEMロック解除 を有効にする</h3><p>システム項目内に「開発者向けオプション」が増えているので中を確認します。</p><p><img src="Screenshot_20200608-212529.png" alt="開発者向けオプション" loading="lazy"></p><p>現状はまだ「OEMロック解除」項目が非表示なため「OEMロック解除」項目を表示させます。</p><p><img src="Screenshot_20200608-211408.png" alt="「OEMロック解除」項目が無い" loading="lazy"></p><h4 id="「OEMロック解除」項目を表示させる"><a href="#「OEMロック解除」項目を表示させる" class="headerlink" title="「OEMロック解除」項目を表示させる"></a>「OEMロック解除」項目を表示させる</h4><p>端末情報の「ソフトウェアバージョン」を10回以上連続でタップして「緊急時情報」画面を表示させます。</p><p><img src="Screenshot_20200608-213219.png" alt="「ソフトウェアバージョン」を10回以上連続でタップする" loading="lazy"></p><p>緊急時情報画面のダイヤルパッドで「*636865625#」と入力します。緊急時情報画面では何も起こりませんが、開発者向けオプション に「OEMロック解除」項目が表示されているはずです。</p><p><img src="Screenshot_20200608-213311_1.png" alt="緊急時情報画面のダイヤルパッドで「*636865625#」と入力する" loading="lazy"></p><p>あとは、開発者向けオプション から「OEMロック解除」をします。</p><p><img src="Screenshot_20200608-213407_1.png" alt="OEMロック解除を有効にする" loading="lazy"></p><h3 id="USBデバッグ-を有効にする"><a href="#USBデバッグ-を有効にする" class="headerlink" title="USBデバッグ を有効にする"></a>USBデバッグ を有効にする</h3><p>adbコマンド や fastbootコマンド を受け付けるようにするために USBデバッグ も有効にします。</p><p><img src="Screenshot_20200608-220046_1.png" alt="USBデバッグを有効にする" loading="lazy"></p><h3 id="PC-と-Rakuten-Mini-を-USBケーブルで接続する"><a href="#PC-と-Rakuten-Mini-を-USBケーブルで接続する" class="headerlink" title="PC と Rakuten Mini を USBケーブルで接続する"></a>PC と Rakuten Mini を USBケーブルで接続する</h3><p>PC と Rakuten Mini を USBケーブルで接続します。そうすると「USBデバッグの許可」確認ダイアログが表示されるので「常に許可」にチェックを入れてから OK します。</p><p><img src="Screenshot_20200608-220121.png" alt="USBデバッグの許可ダイアログ" loading="lazy"></p><h3 id="Bootloader-を-Unlock-する"><a href="#Bootloader-を-Unlock-する" class="headerlink" title="Bootloader を Unlock する"></a>Bootloader を Unlock する</h3><p>adb.exe があるフォルダ内で下記コマンドを実行し、端末を Bootloader モードにします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure><p><img src="WS001708.png" alt="adb reboot bootloader" loading="lazy"></p><p>Rakuten Mini 端末側はこんな画面になります。</p><p><img src="IMG_20200608_221309.png" alt="Bootloader モード" loading="lazy"></p><p>この状態で下記コマンドを実行し、端末の Bootloader を Unlock します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot oem unlock</span><br></pre></td></tr></table></figure><p><img src="WS001709.png" alt="fastboot oem unlock" loading="lazy"></p><p>Rakuten Mini 端末側はこんな画面になります。</p><p><img src="IMG_20200608_221502.png" alt="fastboot oem unlock モード" loading="lazy"></p><p>最後に、端末の音量キーと電源キーで「UNLOCK THE BOOTLOADER」を選択すれば完了です。</p><p><img src="IMG_20200608_221532.png" alt="端末の音量キーと電源キーで「UNLOCK THE BOOTLOADER」を選択する" loading="lazy"></p><p>端末が初期化されて、Bootloader が Unlock されます。本当に Unlock されたか確認するため、初期化された端末で 開発者向けオプション の「OEMロック解除」項目を見てみます。</p><p><img src="Screenshot_20200608-223706.png" alt="ブートローダーは既にロック解除されています" loading="lazy"></p><p>「ブートローダーは既にロック解除されています」と出て、変更不可能になっているはずです。</p><h2 id="adb-exe-を持っていない人は？"><a href="#adb-exe-を持っていない人は？" class="headerlink" title="adb.exe を持っていない人は？"></a>adb.exe を持っていない人は？</h2><p>「adb.exe」「fastboot.exe」を持ってない人は、下記記事を参考にして入手して下さい。</p><p><a href="https://noitaro.github.io/pixel-3a-bootloader-unlocking/">https://noitaro.github.io/pixel-3a-bootloader-unlocking/</a></p><h2 id="データ通信用の-USB3-0ケーブル-を持っていない人は？"><a href="#データ通信用の-USB3-0ケーブル-を持っていない人は？" class="headerlink" title="データ通信用の USB3.0ケーブル を持っていない人は？"></a>データ通信用の USB3.0ケーブル を持っていない人は？</h2><p>「<a href="https://amzn.to/3iar39f">USB 3.0 データ通信用 Type C ケーブル</a>」を買えばいいですよ。急速充電にも対応しているし、ケーブルも太いので丈夫です。</p><div class="blog-card"><div class="hbc-link-wrap"><a class="hbc-link" href="https://amzn.to/3iar39f"><div class="hbc-card"><div class="hbc-info"><img class="hbc-favicon" src="http://favicon.hatena.ne.jp/?url=https://amzn.to/3iar39f"></img><div class="hbc-site-name">amzn.to</div></div><div class="hbc-contents"><div class="hbc-text"><div class="hbc-title">Amazon.co.jp: Rampow usb c ケーブル【1m/黒】typec ケーブル 急速充電 QuickCharge3.0対応 USB3.1 Gen1規格 USB Type C ケーブル Sony Xperia XZ/XZ2, Samsung S10, Asus Zenfone 2, Fujitsu Arrows, PS5コントローラー タイプc多機種対応 在宅勤務支援 : パソコン・周辺機器</div><div class="hbc-url">https://amzn.to/3iar39f</div></div></div></div></a></div></div><h2 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h2><p><a href="https://androplus.org/Entry/14664/">https://androplus.org/Entry/14664/</a></p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>次回は、LineageOS が入れれるみたいなので それに挑戦してみたいと思います。</p><h3 id="購入したよレビュー"><a href="#購入したよレビュー" class="headerlink" title="購入したよレビュー"></a>購入したよレビュー</h3><p>購入したよレビュー記事を書こうと思っていたんですが、早速おもちゃ箱行きになっちゃって レビュー記事 も書けないからここで簡単に写真を上げときます。</p><p><img src="IMG_20200601_205512.png" alt="Rakuten Mini 化粧箱" loading="lazy"></p><p><img src="IMG_20200601_205530.png" alt="Rakuten Mini 中身" loading="lazy"></p><p><img src="IMG_20200601_205635.png" alt="Rakuten Mini 端末" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020年6月17日 まで Rakuten Mini 端末が1円で買えるキャンペーンが開催されていたので試しに買ってみました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://network.mobile.rakuten.co.jp/campaign/mini-discou</summary>
      
    
    
    
    
    <category term="adb" scheme="https://noitaro.github.io/tags/adb/"/>
    
    <category term="bootloader" scheme="https://noitaro.github.io/tags/bootloader/"/>
    
    <category term="rakuten-mini" scheme="https://noitaro.github.io/tags/rakuten-mini/"/>
    
  </entry>
  
  <entry>
    <title>API Gateway をクロスドメインに対応する</title>
    <link href="https://noitaro.github.io/api-gateway-cross-domain/"/>
    <id>https://noitaro.github.io/api-gateway-cross-domain/</id>
    <published>2020-06-05T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.707Z</updated>
    
    <content type="html"><![CDATA[<p>やりたい事は Amazon S3 に HTMLファイルを置いて、jQuery の ajax を使って API Gateway 経由で Lambda の実行結果を取得したい。</p><p>普通に実装すると クロスドメイン で怒られます。何故かと言うと、S3 のHTMLファイルと API Gateway のドメインが違うから。同じAWS内だから問題なさそうだけど、駄目みたいです。</p><h2 id="クロスドメイン未対応"><a href="#クロスドメイン未対応" class="headerlink" title="クロスドメイン未対応"></a>クロスドメイン未対応</h2><p>クロスドメインを考慮しないで実装してみます。</p><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p>要の Lambda関数 から作っていきます。まず、サービスメニューからコンピューティングの Lambda を選択し「関数の作成」を選択します。</p><p><img src="WS001671.png" alt="Lambda を選択し「関数の作成」を選択" loading="lazy"></p><p>簡単な関数を作るのでとりあえず「一から作成」を選択し、適当な「関数名」を入力て関数を作成します。</p><p><img src="WS001672.png" alt="「関数名」を入力て関数を作成" loading="lazy"></p><p>Lambda関数 の作成はこれでおしまいです。</p><h3 id="API-Gateway"><a href="#API-Gateway" class="headerlink" title="API Gateway"></a>API Gateway</h3><p>次に、呼び出し元（トリガー）を作っていきます。先に作った関数の Designer の「トリガーを追加」を選択します。</p><p><img src="WS001673.png" alt="Designer の「トリガーを追加」を選択" loading="lazy"></p><p>API Gateway トリガー を選択します。</p><p><img src="WS001674.png" alt="API Gateway トリガー を選択" loading="lazy"></p><p>API type を「HTTP API」にし、セキュリティを「オープン」にして トリガーを追加します。</p><p><img src="WS001676.png" alt="API type を「HTTP API」にし、セキュリティを「オープン」にして トリガーを追加" loading="lazy"></p><p>Lambda関数と API Gateway が繋がっていれば、準備完了です。</p><p><img src="WS001677.png" alt="Lambda関数と API Gateway が繋がる" loading="lazy"></p><h3 id="S3"><a href="#S3" class="headerlink" title="S3"></a>S3</h3><p>最後に S3 に呼び出すHTML を置きます。まず、バケットから作成します。</p><p><img src="WS001678.png" alt="バケットを作成する" loading="lazy"></p><p>一意となるバケット名を入力して「作成」ボタンを押します。</p><p><img src="WS001680.png" alt="一意となるバケット名を入力" loading="lazy"></p><p>S3 で静的サイトを配信できるように設定を変えます。作ったバケットにチェックを入れて「パブリックアクセス設定を編集する」ボタンを選択します。</p><p><img src="WS001682.png" alt="「パブリックアクセス設定を編集する」ボタンを選択" loading="lazy"></p><p>5つのチェックを外して「保存」ボタンを押します。</p><p><img src="WS001683.png" alt="5つのチェックを外して「保存」ボタンを押す" loading="lazy"></p><p>確認と入力し「確認」ボタンを押せば、バケット内の全てのファイルを公開することが出来るようになります。</p><p><img src="WS001684.png" loading="lazy"></p><p>アクセス欄が「オブジェクトは公開可能」に変わっているのが分かると思います。</p><p><img src="WS001685.png" alt="オブジェクトは公開可能" loading="lazy"></p><p>公開用バケットが出来たので、次に 静的サイト（HTML）を作ります。ボタンを押したら jQuery の ajax を使って API Gateway 経由で Lambda の実行結果を取得する HTML を作ります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;ja&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;CrossDomainEx1&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;CrossDomainEx1&quot; onclick=&quot;CrossDomainEx1()&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;CrossDomainEx1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        CrossDomainEx1 = () =&gt; &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: &#x27;GET&#x27;,</span><br><span class="line">                url: &#x27;https://pxmf09fdqf.execute-api.us-east-2.amazonaws.com/default/CrossDomainEx1&#x27;</span><br><span class="line">            &#125;).done((data, textStatus, jqXHR) =&gt; &#123;</span><br><span class="line">                // 成功</span><br><span class="line">                $(&#x27;#CrossDomainEx1&#x27;).text(data);</span><br><span class="line">            &#125;).fail((jqXHR, textStatus, errorThrown) =&gt; &#123;</span><br><span class="line">                // 失敗</span><br><span class="line">                $(&#x27;#CrossDomainEx1&#x27;).text(textStatus);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>16行目の url は、自分で作った API Gateway の URL を呼び出すようにします。</p><h4 id="API-Gateway-URL-確認"><a href="#API-Gateway-URL-確認" class="headerlink" title="API Gateway URL 確認"></a>API Gateway URL 確認</h4><p>確認方法は、Lambda関数の Designer の下の API Gateway の APIエンドポイント が 今回のAPIの入り口になります。</p><p><img src="WS001686.png" alt="APIエンドポイント" loading="lazy"></p><p>作ったHTML を S3 バケットにアップロードします。</p><p><img src="WS001687.png" alt="S3 バケットにアップロード" loading="lazy"></p><p>「index.html」をドラッグし「アップロード」ボタンでアップロードできます。</p><p><img src="WS001688.png" alt="「index.html」をドラッグしアップロード" loading="lazy"></p><p>「index.html」を公開設定にします。「index.html」のチェックを入れて アクション をクリックし「公開する」を選択します。</p><p><img src="WS001689.png" alt="「index.html」のチェックを入れて アクション をクリックし「公開する」を選択" loading="lazy"></p><p>最後に「公開する」ボタンを押すと、ブラウザから見れるようになります。</p><p><img src="WS001690.png" alt="「公開する」ボタンを押す" loading="lazy"></p><h4 id="公開URLの確認方法"><a href="#公開URLの確認方法" class="headerlink" title="公開URLの確認方法"></a>公開URLの確認方法</h4><p>公開URLは「オブジェクトURL」で確認できます。</p><p><img src="WS001691.png" alt="オブジェクトURL" loading="lazy"></p><h3 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h3><p>早速、S3 で公開した 静的サイト（HTML）から、API Gateway 経由で Lambda関数 を実行してみましょう。</p><p>その時に F12キー を押して Chrome DevTools を表示しておきます。</p><p><img src="WS001692.png" alt="has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource." loading="lazy"></p><p>ajax を実行した結果 エラー が返ってきました。</p><blockquote><p>has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p></blockquote><p>Google 翻訳 してみると、</p><blockquote><p>CORSポリシーによってブロックされました：要求されたリソースに「Access-Control-Allow-Origin」ヘッダーがありません。</p></blockquote><p>これが 俗に言うところの、クロスドメインでアクセス拒否されている状態です。</p><p>HTML の ドメインが「xxxxx85.s3.us-east-2.amazonaws.com」に対して、API Gateway が「pxmf09fdqf.execute-api.us-east-2.amazonaws.com」なため、CORSポリシーに違反しています。</p><h2 id="クロスドメイン対応"><a href="#クロスドメイン対応" class="headerlink" title="クロスドメイン対応"></a>クロスドメイン対応</h2><p>CORSポリシーを変更して、クロスドメインでもエラーにならないよう修正します。</p><h3 id="API-Gateway-1"><a href="#API-Gateway-1" class="headerlink" title="API Gateway"></a>API Gateway</h3><p>CORSポリシーを有効にします。Lambda の Designer から API Gateway を選択し下のリンクから API Gateway の設定画面へ行きます。</p><p><img src="WS001693.png" alt="Lambda の Designer から API Gateway を選択し下のリンクから API Gateway の設定画面へ" loading="lazy"></p><p>API Gateway の左メニューから「CORS」を選択し、CORSを編集します。</p><p><img src="WS001694.png" alt="「CORS」を選択し、CORSを編集する" loading="lazy"></p><p>「Access-Control-Allow-Origin」に アクセスを許可するURL を追加します。</p><p>どこのサイトからでも使えるようにする場合は「https:&#x2F;&#x2F;*」を追加します。</p><p>末尾にスラッシュがあると上手く機能しないので気を付けましょう。</p><p><img src="WS001702.png" alt="「Access-Control-Allow-Origin」に アクセスを許可するURL を追加" loading="lazy"></p><p>「Access-Control-Allow-Credentials」を有効にして保存したら完了です。</p><p><img src="WS001703.png" alt="「Access-Control-Allow-Credentials」を有効にして保存" loading="lazy"></p><h3 id="確認-1"><a href="#確認-1" class="headerlink" title="確認"></a>確認</h3><p>再度、ajax で Lambda関数 からデータを取得出来るか確認します。</p><p><img src="WS001705.png" alt="Hello from Lambda!" loading="lazy"></p><p>正しく「Hello from Lambda!」が取得出来ました。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>仕事で AWS を使う機会があり、自分の復習のため 記事にしました。</p><p>最初はよく分からずモヤモヤしていたけど、再度自分なりにまとめたら 少しだけですが理解が深まった気がします。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;やりたい事は Amazon S3 に HTMLファイルを置いて、jQuery の ajax を使って API Gateway 経由で Lambda の実行結果を取得したい。&lt;/p&gt;
&lt;p&gt;普通に実装すると クロスドメイン で怒られます。何故かと言うと、S3 のHTMLファイ</summary>
      
    
    
    
    
    <category term="amazon-s3" scheme="https://noitaro.github.io/tags/amazon-s3/"/>
    
    <category term="api-gateway" scheme="https://noitaro.github.io/tags/api-gateway/"/>
    
    <category term="aws" scheme="https://noitaro.github.io/tags/aws/"/>
    
    <category term="aws-lambda" scheme="https://noitaro.github.io/tags/aws-lambda/"/>
    
  </entry>
  
  <entry>
    <title>音楽ファイルや音声ファイルの音が小さ過ぎる時の対処法</title>
    <link href="https://noitaro.github.io/audacity-normalize/"/>
    <id>https://noitaro.github.io/audacity-normalize/</id>
    <published>2020-05-24T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.755Z</updated>
    
    <content type="html"><![CDATA[<p>音楽を聞いていると、曲ごとで音量がバラバラなことありませんか？</p><p>次の曲になったら、急に大きくなったりまたその逆で急に小さくなったり。</p><p>そんな時は、Audacity の ノーマライズ(正規化) でいい感じの音量に変えちゃいましょう。</p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>なにはともあれ「<a href="https://www.audacityteam.org/">Audacity</a>」を使うので、ダウンロードして展開しましょう。</p><h3 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h3><p><a href="https://www.audacityteam.org/">https://www.audacityteam.org/</a></p><p><img src="WS001657.png" alt="Audacity &gt; Download &gt; Windows" loading="lazy"></p><p>少しスクロールしたところにある「Audacity 2.4.0 zip file」から zipファイル がダウンロードできます。</p><p><img src="WS001658.png" alt="Audacity 2.4.0 zip file" loading="lazy"></p><h3 id="ノーマライズ-正規化"><a href="#ノーマライズ-正規化" class="headerlink" title="ノーマライズ(正規化)"></a>ノーマライズ(正規化)</h3><p>Audacity を起動したら、変換したい音楽ファイルをドラッグします。</p><p><img src="WS001659.png" alt="変換したい音声ファイルをドラッグします" loading="lazy"></p><p>「Ctrl」+「A」で ノーマライズしたい箇所を 全て選択状態にします。</p><p><img src="WS001664.png" alt="「Ctrl」+「A」で 全て選択状態 にする" loading="lazy"></p><p>メニューの エフェクト &gt; ノーマライズ を選択する。</p><p><img src="WS001665.png" alt="エフェクト &gt; ノーマライズ を選択" loading="lazy"></p><p>ノーマライズダイアログの「OK」を押せば、ノーマライズ され音量がいい感じになります。</p><p><img src="WS001666.png" alt="ノーマライズダイアログの「OK」を押す" loading="lazy"></p><p>最後に、ノーマライズ したファイルを 保存したら完成です。</p><p><img src="WS001667.png" alt="ファイル &gt; 書き出し &gt; MP3 として書き出し" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;音楽を聞いていると、曲ごとで音量がバラバラなことありませんか？&lt;/p&gt;
&lt;p&gt;次の曲になったら、急に大きくなったりまたその逆で急に小さくなったり。&lt;/p&gt;
&lt;p&gt;そんな時は、Audacity の ノーマライズ(正規化) でいい感じの音量に変えちゃいましょう。&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    
    <category term="audacity" scheme="https://noitaro.github.io/tags/audacity/"/>
    
    <category term="video-editing" scheme="https://noitaro.github.io/tags/video-editing/"/>
    
  </entry>
  
  <entry>
    <title>ステレオ音声だけど片方からしか音が出ない時の対処法</title>
    <link href="https://noitaro.github.io/split-from-stereo-to-mono/"/>
    <id>https://noitaro.github.io/split-from-stereo-to-mono/</id>
    <published>2020-05-17T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.623Z</updated>
    
    <content type="html"><![CDATA[<p>マイクで録音した時に、間違えてステレオ設定で録音してしまい 片方からしか音が出ない時の修正方法を紹介します。</p><p>こんな感じに ステレオ音声だけど片方にしか音が乗っていないのを修正しちゃいます。</p><p><img src="WS001660.png" alt="ステレオ音声だけど片方にしか音が乗っていない" loading="lazy"></p><p>修正方法は簡単。</p><p><a href="https://www.audacityteam.org/">Audacity</a> を使って、ステレオ音声をモノラル音声に分割し保存するだけ。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h3><p>Audacityはフリーなデジタル・オーディオ・エディタです。</p><p><a href="https://www.audacityteam.org/">https://www.audacityteam.org/</a></p><h4 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h4><p><img src="WS001657.png" alt="Audacity &gt; Download &gt; Windows" loading="lazy"></p><p>少しスクロールしたところにある「Audacity 2.4.0 zip file」から zipファイル がダウンロードできます。</p><p><img src="WS001658.png" alt="Audacity 2.4.0 zip file" loading="lazy"></p><p>適当なところで展開したら、即使えます。</p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>Audacity を起動して、変換したい音声ファイルをドラッグします。</p><p><img src="WS001659.png" alt="変換したい音声ファイルをドラッグします" loading="lazy"></p><p>ステレオ音声だけど片方にしか音が乗っていないのを確認します。</p><p><img src="WS001660.png" loading="lazy"></p><h3 id="モノラル音声に分割"><a href="#モノラル音声に分割" class="headerlink" title="モノラル音声に分割"></a>モノラル音声に分割</h3><p>開いた音声ファイルの左上にある トラック名をクリックして「ステレオからモノラルに分割」を選択します。</p><p><img src="WS001661.png" alt="ステレオからモノラルに分割" loading="lazy"></p><p>そうすると、ステレオ音声がモノラル音声へと変わります。</p><p><img src="WS001662.png" loading="lazy"></p><h3 id="MP3-として書き出し"><a href="#MP3-として書き出し" class="headerlink" title="MP3 として書き出し"></a>MP3 として書き出し</h3><p>最後に、分割した モノラル音声を PM3ファイル で保存します。</p><p>ファイル &gt; 書き出し &gt; MP3 として書き出し の順で選択し、保存場所とファイル名を決めて保存したら完成です。</p><p><img src="WS001663.png" alt="MP3 として書き出し" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;マイクで録音した時に、間違えてステレオ設定で録音してしまい 片方からしか音が出ない時の修正方法を紹介します。&lt;/p&gt;
&lt;p&gt;こんな感じに ステレオ音声だけど片方にしか音が乗っていないのを修正しちゃいます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;WS001660.png&quot; alt</summary>
      
    
    
    
    
    <category term="audacity" scheme="https://noitaro.github.io/tags/audacity/"/>
    
    <category term="video-editing" scheme="https://noitaro.github.io/tags/video-editing/"/>
    
  </entry>
  
  <entry>
    <title>YouTube に動画をアップロードしたら「動画が長すぎます」とエラーが出た時の対処法</title>
    <link href="https://noitaro.github.io/youtube-upload-error-long-videos/"/>
    <id>https://noitaro.github.io/youtube-upload-error-long-videos/</id>
    <published>2020-05-12T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.915Z</updated>
    
    <content type="html"><![CDATA[<p><img src="WS001644.png" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">処理を中止しました。  </span><br><span class="line">動画が長すぎます。長時間の動画をチャンネルで有効にする方法については、詳細をご確認ください。</span><br></pre></td></tr></table></figure><p>赤文字の 詳細 をクリックしようとしてもクリック出来ないし、どうしたもんかっと悩んでいました。</p><h2 id="対処方法"><a href="#対処方法" class="headerlink" title="対処方法"></a>対処方法</h2><p>結論から言うと、アカウントの確認 で SMS認証 をすると 長い動画も アップロード出来るようになりました。</p><p><img src="WS001655_1.png" alt="YouTube アカウントが確認されました。" loading="lazy"></p><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h3 id="従来のバージョンでアップロード"><a href="#従来のバージョンでアップロード" class="headerlink" title="従来のバージョンでアップロード"></a>従来のバージョンでアップロード</h3><p>右上の「作成」ボタンを押して「動画をアップロード」を選択します。</p><p><img src="WS001646.png" alt="動画をアップロード" loading="lazy"></p><p>更に「従来のバージョンでアップロード」を選択します。</p><p><img src="WS001647.png" alt="従来のバージョンでアップロード" loading="lazy"></p><p>注意画面が出るので、気にせず「従来のアップローダに移動」を選択します。</p><p><img src="WS001648.png" alt="従来のアップローダに移動" loading="lazy"></p><p>次に、アンケート画面が出るが設定を終えたらすぐに YouTube Studio に戻すので、気にせず「スキップ」を選択します。</p><p><img src="WS001649.png" loading="lazy"></p><h3 id="上限を引き上げる"><a href="#上限を引き上げる" class="headerlink" title="上限を引き上げる"></a>上限を引き上げる</h3><p>下部の ヘルプと推奨事項 にある「15分を超える動画をアップロードしますか？」の右側にある「上限を引き上げる」を選択します。</p><p><img src="WS001652.png" alt="15分を超える動画をアップロードしますか？" loading="lazy"></p><h3 id="アカウントの確認"><a href="#アカウントの確認" class="headerlink" title="アカウントの確認"></a>アカウントの確認</h3><p>そうすると「<a href="https://www.youtube.com/verify_phone_number">アカウントの確認</a>」画面が表示されるので、自動音声メッセージ か SMS で 確認コードを受け取って、アカウントの確認を完了させます。</p><p><img src="WS001653.png" alt="確認コードの受け取り方法を指定してください。" loading="lazy"></p><p><img src="WS001654_1.png" alt="6 桁の確認コードを入力してください" loading="lazy"></p><p><img src="WS001655_1.png" alt="YouTube アカウントが確認されました。" loading="lazy"></p><h3 id="制限時間を超える動画が有効になっているか確認"><a href="#制限時間を超える動画が有効になっているか確認" class="headerlink" title="制限時間を超える動画が有効になっているか確認"></a>制限時間を超える動画が有効になっているか確認</h3><p>「次へ」を押して「<a href="https://www.youtube.com/features">ステータスと機能</a>」画面で確認が出来ます。</p><p>「制限時間を超える動画」が 有効 になっていれば完了です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15 分を超える動画もアップロードできるようになりました。</span><br></pre></td></tr></table></figure><p><img src="WS001656.png" alt="制限時間を超える動画" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;WS001644.png&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</summary>
      
    
    
    
    
    <category term="video-editing" scheme="https://noitaro.github.io/tags/video-editing/"/>
    
    <category term="youtube" scheme="https://noitaro.github.io/tags/youtube/"/>
    
  </entry>
  
  <entry>
    <title>OBS の マルチトラック で撮った動画を AviUtl で使う方法</title>
    <link href="https://noitaro.github.io/aviutl-multitruck/"/>
    <id>https://noitaro.github.io/aviutl-multitruck/</id>
    <published>2020-05-08T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.775Z</updated>
    
    <content type="html"><![CDATA[<p>OBS では、マルチトラック音声 で 動画を保存する事が出来ます。</p><p><img src="WS001637.png" alt="OBS" loading="lazy"></p><p>しかし、このまま AviUtl の 拡張編集 で読み込んでも １つ目の音声しか読み込まれず編集する事が出来ません。</p><p><img src="WS001638.png" alt="AviUtl 拡張編集" loading="lazy"></p><p>なので AviUtl で マルチトラック の動画を編集するには、映像と音声を分割して読み込ませる必要があります。</p><h2 id="動画ファイルから映像と音声を分離させる"><a href="#動画ファイルから映像と音声を分離させる" class="headerlink" title="動画ファイルから映像と音声を分離させる"></a>動画ファイルから映像と音声を分離させる</h2><h3 id="音声抽出-for-FFmpeg"><a href="#音声抽出-for-FFmpeg" class="headerlink" title="音声抽出 for FFmpeg"></a>音声抽出 for FFmpeg</h3><p><a href="https://frailleaves.com/broadcast/obs_multitrack/">音声抽出 for FFmpeg</a></p><p><a href="https://frailleaves.com/broadcast/obs_multitrack/">https://frailleaves.com/broadcast/obs_multitrack/</a></p><p>上記サイトの中央ほどにある「ダウンロード」からファイルをダウンロードできます。</p><p><img src="WS001639.png" loading="lazy"></p><h3 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h3><p>「音声抽出 for FFmpeg」を使うには ffmpeg.exe が必要なのでそっちもダウンロードしてきます。</p><p><a href="https://ffmpeg.org/">FFmpeg</a></p><p><a href="https://ffmpeg.org/">https://ffmpeg.org/</a></p><p>上記サイトの「Download Build」からダウンロード出来ます。</p><p><img src="WS001640.png" loading="lazy"></p><h3 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h3><p>特に難しくありません。</p><p>分離させたい動画ファイルを選択して、もろもろの設定を変更して「抽出変換」ボタンで分離させることが出来ます。</p><p><img src="WS001641.png" alt="音声抽出 for FFmpeg" loading="lazy"></p><p>保存先のフォルダに、映像と それぞれに分離された音声 が出来上がります。</p><p><img src="WS001642.png" loading="lazy"></p><p>後は、AviUtl の 拡張編集にドラッグして編集が可能となります。</p><p><img src="WS001643.png" alt="AviUtl 拡張編集" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>AviUtl の 拡張編集 が マルチトラック に非対応なのが残念でした。</p><p>マルチトラック 対応の動画編集ソフトを使えば 分離作業なんて要らないので、面倒くさい人は 有料ツール を使うことをおすすめします。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OBS では、マルチトラック音声 で 動画を保存する事が出来ます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;WS001637.png&quot; alt=&quot;OBS&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;しかし、このまま AviUtl の 拡張編集 で読み込んでも １つ目の音声しか</summary>
      
    
    
    
    
    <category term="obs" scheme="https://noitaro.github.io/tags/obs/"/>
    
    <category term="aviutl" scheme="https://noitaro.github.io/tags/aviutl/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator で 3Dゲームを作る その５</title>
    <link href="https://noitaro.github.io/cocos-creator-3d-block-breaking-5/"/>
    <id>https://noitaro.github.io/cocos-creator-3d-block-breaking-5/</id>
    <published>2020-05-06T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.911Z</updated>
    
    <content type="html"><![CDATA[<p>全てのブロックを壊したらゲームクリアとなるようにします。</p><h2 id="前回"><a href="#前回" class="headerlink" title="前回"></a>前回</h2><p><a href="https://noitaro.github.io/cocos-creator-3d-block-breaking-4/">https://noitaro.github.io/cocos-creator-3d-block-breaking-4/</a></p><h2 id="今回の目標"><a href="#今回の目標" class="headerlink" title="今回の目標"></a>今回の目標</h2><p>ゲーム画面をクリックしたらボールが動き出すようにする。</p><p>全てのブロックを壊したらゲームクリアとする。</p><p>ブラウザーで遊べるようにしました。</p><p><a href="https://noitaro.github.io/block-breaking/">https://noitaro.github.io/block-breaking/</a></p><h2 id="ラベル追加"><a href="#ラベル追加" class="headerlink" title="ラベル追加"></a>ラベル追加</h2><p>ゲーム状態を表示するラベルを追加します。</p><p><img src="WS001630.png" loading="lazy"></p><p>経過時間を表示するラベルを追加します。</p><p><img src="WS001632.png" loading="lazy"></p><h2 id="処理修正"><a href="#処理修正" class="headerlink" title="処理修正"></a>処理修正</h2><p>「Helloworld.ts」の処理を修正します。</p><h3 id="変数追加"><a href="#変数追加" class="headerlink" title="変数追加"></a>変数追加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@property(cc.Label)</span><br><span class="line">Message: cc.Label = null;</span><br><span class="line"></span><br><span class="line">@property(cc.Label)</span><br><span class="line">Time: cc.Label = null;</span><br><span class="line"></span><br><span class="line">@property(cc.Node)</span><br><span class="line">Blocks: cc.Node = null;</span><br><span class="line"></span><br><span class="line">IsStarted: Boolean = false;</span><br><span class="line"></span><br><span class="line">StartTime: number;</span><br></pre></td></tr></table></figure><p>上3つの変数が、処理で使うコンポーネントを保持するための変数です。</p><p>下2つの変数が、処理中に状態を保持するための変数です。</p><h3 id="コンポーネントを登録"><a href="#コンポーネントを登録" class="headerlink" title="コンポーネントを登録"></a>コンポーネントを登録</h3><p>先程追加した変数に、コンポーネントを登録します。</p><p><img src="WS001633.png" loading="lazy"></p><p>それぞれ、同じ箇所にマウスドラッグで移動させます。</p><p><img src="WS001635.png" loading="lazy"></p><h3 id="開始時の処理を追加"><a href="#開始時の処理を追加" class="headerlink" title="開始時の処理を追加"></a>開始時の処理を追加</h3><p>start関数に下記処理を追加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.node.on(cc.Node.EventType.MOUSE_DOWN, this.onMouseDown, this);</span><br></pre></td></tr></table></figure><p>この処理は、マウスクリックをした時に動く処理となります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">onMouseDown(event: cc.Event.EventMouse) &#123;</span><br><span class="line">    switch (event.type) &#123;</span><br><span class="line">        case &quot;mousedown&quot;:</span><br><span class="line">            // イベント削除.</span><br><span class="line">            this.node.off(cc.Node.EventType.MOUSE_DOWN, this.onMouseDown, this);</span><br><span class="line">            // メッセージ非表示.</span><br><span class="line">            this.Message.string = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">            // ボールを動かす</span><br><span class="line">            let rigidBody = this.Ball.getComponent(cc.RigidBody3D);</span><br><span class="line">            // -3000 〜 3000 のランダム値.</span><br><span class="line">            let rnd1 = (Math.random() * 3 * 2 - 3) * 1000;</span><br><span class="line">            let rnd2 = (Math.random() * 3 * 2 - 3) * 1000;</span><br><span class="line">            rigidBody.applyImpulse(cc.v3(rnd1, 0, rnd2), cc.v3(0,0,0));</span><br><span class="line"></span><br><span class="line">            this.StartTime = Date.now();</span><br><span class="line">            this.IsStarted = true;</span><br><span class="line">            break;</span><br><span class="line">    </span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="終了時の処理を追加"><a href="#終了時の処理を追加" class="headerlink" title="終了時の処理を追加"></a>終了時の処理を追加</h3><p>update関数に下記処理を追加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 終了判定.</span><br><span class="line">if (this.Blocks.childrenCount == 0) &#123;</span><br><span class="line">    // ボール停止</span><br><span class="line">    let rigidBody = this.Ball.getComponent(cc.RigidBody3D);</span><br><span class="line">    rigidBody.sleep();</span><br><span class="line">    // メッセージ表示.</span><br><span class="line">    this.Message.string = &quot;ゲームクリア！&quot;;</span><br><span class="line">    this.IsStarted = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全部のブロックが消えたら、ボールを停止させて「ゲームクリア！」が表示されます。</p><h3 id="経過時間を表示する処理を追加"><a href="#経過時間を表示する処理を追加" class="headerlink" title="経過時間を表示する処理を追加"></a>経過時間を表示する処理を追加</h3><p>update関数に下記処理を追加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (this.IsStarted)</span><br><span class="line">&#123;</span><br><span class="line">    // 経過時間更新.</span><br><span class="line">    const diff = Date.now() - this.StartTime;</span><br><span class="line">    const minute  = Math.floor(diff / 60000);</span><br><span class="line">    const second  = Math.floor(diff / 1000) % 60;</span><br><span class="line">    this.Time.string = `$&#123;( minute &lt; 10 ) ? &#x27;0&#x27; + minute : minute&#125;:$&#123;( second &lt; 10 ) ? &#x27;0&#x27; + second : second&#125;`;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ゲームプレイ中は 経過時間 を更新するように処理します。</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>これで完成です。</p><p>動作確認をしましょう。</p><h3 id="ゲーム開始時"><a href="#ゲーム開始時" class="headerlink" title="ゲーム開始時"></a>ゲーム開始時</h3><p><img src="cocos-creator-3d-block-breaking-5_1.gif" loading="lazy"></p><h3 id="ゲームクリア時"><a href="#ゲームクリア時" class="headerlink" title="ゲームクリア時"></a>ゲームクリア時</h3><p><img src="cocos-creator-3d-block-breaking-5_2.gif" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;全てのブロックを壊したらゲームクリアとなるようにします。&lt;/p&gt;
&lt;h2 id=&quot;前回&quot;&gt;&lt;a href=&quot;#前回&quot; class=&quot;headerlink&quot; title=&quot;前回&quot;&gt;&lt;/a&gt;前回&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://noitaro.github.io</summary>
      
    
    
    
    
    <category term="game" scheme="https://noitaro.github.io/tags/game/"/>
    
    <category term="cocos-creator" scheme="https://noitaro.github.io/tags/cocos-creator/"/>
    
  </entry>
  
  <entry>
    <title>テーブルやカラムにコメントを付ける方法と取得する方法</title>
    <link href="https://noitaro.github.io/sqlserver-table-column-comment-set-get/"/>
    <id>https://noitaro.github.io/sqlserver-table-column-comment-set-get/</id>
    <published>2020-05-04T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><h3 id="テーブルを作成"><a href="#テーブルを作成" class="headerlink" title="テーブルを作成"></a>テーブルを作成</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE staff (</span><br><span class="line">    id     INT           NOT NULL,</span><br><span class="line">    name   NVARCHAR (50) NULL,</span><br><span class="line">    branch NVARCHAR (50) NULL,</span><br><span class="line">    age    INT           NULL,</span><br><span class="line">    PRIMARY KEY CLUSTERED (id ASC)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="レコードを追加"><a href="#レコードを追加" class="headerlink" title="レコードを追加"></a>レコードを追加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO staff (id, name, branch, age) VALUES (1, N&#x27;田中&#x27;, N&#x27;東京&#x27;, 29)</span><br><span class="line">INSERT INTO staff (id, name, branch, age) VALUES (2, N&#x27;山田&#x27;, N&#x27;横浜&#x27;, 31)</span><br><span class="line">INSERT INTO staff (id, name, branch, age) VALUES (3, N&#x27;杉浦&#x27;, N&#x27;千葉&#x27;, 34)</span><br><span class="line">INSERT INTO staff (id, name, branch, age) VALUES (4, N&#x27;山野&#x27;, N&#x27;大阪&#x27;, 25)</span><br><span class="line">INSERT INTO staff (id, name, branch, age) VALUES (5, N&#x27;中島&#x27;, N&#x27;横浜&#x27;, 38)</span><br><span class="line">INSERT INTO staff (id, name, branch, age) VALUES (6, N&#x27;鈴木&#x27;, N&#x27;東京&#x27;, 24)</span><br></pre></td></tr></table></figure><h2 id="コメント追加"><a href="#コメント追加" class="headerlink" title="コメント追加"></a>コメント追加</h2><h3 id="テーブルにコメントを追加"><a href="#テーブルにコメントを追加" class="headerlink" title="テーブルにコメントを追加"></a>テーブルにコメントを追加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXECUTE sp_addextendedproperty </span><br><span class="line">    @name       = N&#x27;MS_Description&#x27;, </span><br><span class="line">    @value      = N&#x27;スタッフマスタ&#x27;, </span><br><span class="line">    @level0type = N&#x27;SCHEMA&#x27;, </span><br><span class="line">    @level0name = N&#x27;dbo&#x27;, </span><br><span class="line">    @level1type = N&#x27;TABLE&#x27;, </span><br><span class="line">    @level1name = N&#x27;staff&#x27;;</span><br></pre></td></tr></table></figure><h3 id="カラムにコメントを追加"><a href="#カラムにコメントを追加" class="headerlink" title="カラムにコメントを追加"></a>カラムにコメントを追加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">EXECUTE sp_addextendedproperty </span><br><span class="line">    @name       = N&#x27;MS_Description&#x27;, </span><br><span class="line">    @value      = N&#x27;ID&#x27;, </span><br><span class="line">    @level0type = N&#x27;SCHEMA&#x27;, </span><br><span class="line">    @level0name = N&#x27;dbo&#x27;, </span><br><span class="line">    @level1type = N&#x27;TABLE&#x27;, </span><br><span class="line">    @level1name = N&#x27;staff&#x27;, </span><br><span class="line">    @level2type = N&#x27;COLUMN&#x27;, </span><br><span class="line">    @level2name = N&#x27;id&#x27;;</span><br><span class="line">EXECUTE sp_addextendedproperty </span><br><span class="line">    @name       = N&#x27;MS_Description&#x27;, </span><br><span class="line">    @value      = N&#x27;名前&#x27;, </span><br><span class="line">    @level0type = N&#x27;SCHEMA&#x27;, </span><br><span class="line">    @level0name = N&#x27;dbo&#x27;, </span><br><span class="line">    @level1type = N&#x27;TABLE&#x27;, </span><br><span class="line">    @level1name = N&#x27;staff&#x27;, </span><br><span class="line">    @level2type = N&#x27;COLUMN&#x27;, </span><br><span class="line">    @level2name = N&#x27;name&#x27;;</span><br><span class="line">EXECUTE sp_addextendedproperty </span><br><span class="line">    @name       = N&#x27;MS_Description&#x27;, </span><br><span class="line">    @value      = N&#x27;支社名&#x27;, </span><br><span class="line">    @level0type = N&#x27;SCHEMA&#x27;, </span><br><span class="line">    @level0name = N&#x27;dbo&#x27;, </span><br><span class="line">    @level1type = N&#x27;TABLE&#x27;, </span><br><span class="line">    @level1name = N&#x27;staff&#x27;, </span><br><span class="line">    @level2type = N&#x27;COLUMN&#x27;, </span><br><span class="line">    @level2name = N&#x27;branch&#x27;;</span><br><span class="line">EXECUTE sp_addextendedproperty </span><br><span class="line">    @name       = N&#x27;MS_Description&#x27;, </span><br><span class="line">    @value      = N&#x27;歳&#x27;, </span><br><span class="line">    @level0type = N&#x27;SCHEMA&#x27;, </span><br><span class="line">    @level0name = N&#x27;dbo&#x27;, </span><br><span class="line">    @level1type = N&#x27;TABLE&#x27;, </span><br><span class="line">    @level1name = N&#x27;staff&#x27;, </span><br><span class="line">    @level2type = N&#x27;COLUMN&#x27;, </span><br><span class="line">    @level2name = N&#x27;age&#x27;;</span><br></pre></td></tr></table></figure><h2 id="コメント取得"><a href="#コメント取得" class="headerlink" title="コメント取得"></a>コメント取得</h2><h3 id="テーブルのコメントを取得"><a href="#テーブルのコメントを取得" class="headerlink" title="テーブルのコメントを取得"></a>テーブルのコメントを取得</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    sys.tables.name AS テーブル物理名, </span><br><span class="line">    sys.extended_properties.value AS テーブル論理名 </span><br><span class="line">FROM </span><br><span class="line">    sys.schemas </span><br><span class="line">    INNER JOIN sys.tables </span><br><span class="line">        ON sys.tables.schema_id = sys.schemas.schema_id </span><br><span class="line">    LEFT JOIN sys.extended_properties </span><br><span class="line">        ON sys.extended_properties.major_id = sys.tables.object_id </span><br><span class="line">        AND sys.extended_properties.minor_id = 0 </span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>テーブル物理名</th><th>テーブル論理名</th></tr></thead><tbody><tr><td>1</td><td>staff</td><td>スタッフマスタ</td></tr></tbody></table><h3 id="カラムのコメントを取得"><a href="#カラムのコメントを取得" class="headerlink" title="カラムのコメントを取得"></a>カラムのコメントを取得</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    sys.columns.name AS カラム物理名, </span><br><span class="line">    sys.extended_properties.value AS カラム論理名 </span><br><span class="line">FROM </span><br><span class="line">    sys.schemas </span><br><span class="line">    INNER JOIN sys.tables </span><br><span class="line">        ON sys.tables.schema_id = sys.schemas.schema_id </span><br><span class="line">    INNER JOIN sys.columns </span><br><span class="line">        ON sys.columns.object_id = sys.tables.object_id </span><br><span class="line">    LEFT JOIN sys.extended_properties </span><br><span class="line">        ON sys.extended_properties.major_id = sys.columns.object_id </span><br><span class="line">        AND sys.extended_properties.minor_id = sys.columns.column_id </span><br><span class="line">WHERE </span><br><span class="line">    sys.schemas.name = N&#x27;dbo&#x27; </span><br><span class="line">    AND sys.tables.name = N&#x27;staff&#x27; </span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>カラム物理名</th><th>カラム論理名</th></tr></thead><tbody><tr><td>1</td><td>Id</td><td>ID</td></tr><tr><td>2</td><td>name</td><td>名前</td></tr><tr><td>3</td><td>branch</td><td>支社名</td></tr><tr><td>4</td><td>age</td><td>歳</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;準備&quot;&gt;&lt;a href=&quot;#準備&quot; class=&quot;headerlink&quot; title=&quot;準備&quot;&gt;&lt;/a&gt;準備&lt;/h2&gt;&lt;h3 id=&quot;テーブルを作成&quot;&gt;&lt;a href=&quot;#テーブルを作成&quot; class=&quot;headerlink&quot; title=&quot;テーブルを作成&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="sqlserver" scheme="https://noitaro.github.io/tags/sqlserver/"/>
    
    <category term="sql" scheme="https://noitaro.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>SQL Server Express 2016 LocalDB のインストール</title>
    <link href="https://noitaro.github.io/sql-server-express-localdb-2016-install/"/>
    <id>https://noitaro.github.io/sql-server-express-localdb-2016-install/</id>
    <published>2020-04-26T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.627Z</updated>
    
    <content type="html"><![CDATA[<p>Visual Studio Installer を使ってインストールしていきます。</p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p><img src="Visual-Studio-Installer-2020-04-26-19.46.16.png" alt="Visual Studio Installer の変更ボタンを押す" loading="lazy"></p><ol><li>個別のコンポーネントを選択</li><li>LocalDB で検索</li><li>SQL Server Express 2016 LocalDB にチェックを入れる</li><li>変更ボタンを押してインストール</li></ol><p><img src="Visual-Studio-Installer-2020-04-26-19.48.00.png" alt="SQL Server Express 2016 LocalDB にチェックを入れる" loading="lazy"></p><p>おしまいです。</p><h2 id="使う時は？"><a href="#使う時は？" class="headerlink" title="使う時は？"></a>使う時は？</h2><p>初めて使う時に 不足分のパッケージがインストールされます。</p><p><img src="WS001626.png" loading="lazy"></p><p><img src="WS001627.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Visual Studio Installer を使ってインストールしていきます。&lt;/p&gt;
&lt;h2 id=&quot;インストール&quot;&gt;&lt;a href=&quot;#インストール&quot; class=&quot;headerlink&quot; title=&quot;インストール&quot;&gt;&lt;/a&gt;インストール&lt;/h2&gt;&lt;p&gt;&lt;img </summary>
      
    
    
    
    
    <category term="visual-studio" scheme="https://noitaro.github.io/tags/visual-studio/"/>
    
    <category term="sqlserver" scheme="https://noitaro.github.io/tags/sqlserver/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator で 3Dゲームを作る その４</title>
    <link href="https://noitaro.github.io/cocos-creator-3d-block-breaking-4/"/>
    <id>https://noitaro.github.io/cocos-creator-3d-block-breaking-4/</id>
    <published>2020-04-25T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.903Z</updated>
    
    <content type="html"><![CDATA[<p>Cocos Creator で 3Dブロック崩しゲームを作る続きです。</p><p><a href="https://noitaro.github.io/cocos-creator-3d-block-breaking-3/">https://noitaro.github.io/cocos-creator-3d-block-breaking-3/</a></p><h2 id="今回の目標"><a href="#今回の目標" class="headerlink" title="今回の目標"></a>今回の目標</h2><p>ボールが当たったら消えるブロックを作ります。</p><p><img src="cocos-creator-3d-block-breaking-4_3-1.gif" loading="lazy"></p><h2 id="ブロック追加"><a href="#ブロック追加" class="headerlink" title="ブロック追加"></a>ブロック追加</h2><p>消えるブロック の元となる 箱 を追加します。</p><p>消えるブロックは 複数置く予定なので 一元管理できるように作っていきます。</p><p>そのため 空Node を作り、その中に 3DBox を配置します。</p><p><img src="WS001615.png" loading="lazy"></p><p>配置した 3D Box の設定を、壁やバーを作ったときと同じ要領で変更します。</p><ul><li>名前を分かりやすく「Block」に変更</li><li>Scale を X&#x3D;80、Y&#x3D;30、Z&#x3D;25 に変更</li><li>緑色のマテリアルを作って設定</li><li>壁やバーと同じ材質の PhysicsMaterial を設定</li></ul><p><img src="WS001616.png" loading="lazy"></p><p>上記設定を終えると、消えないブロックが完成します。</p><p><img src="cocos-creator-3d-block-breaking-4.gif" loading="lazy"></p><h2 id="ボールが当たったら消える処理を追加"><a href="#ボールが当たったら消える処理を追加" class="headerlink" title="ボールが当たったら消える処理を追加"></a>ボールが当たったら消える処理を追加</h2><p>次に、ボールが当たったら消える処理を 今作ったブロック に追加します。</p><h3 id="スクリプトファイル追加"><a href="#スクリプトファイル追加" class="headerlink" title="スクリプトファイル追加"></a>スクリプトファイル追加</h3><p>処理を書くためのスクリプトファイルを追加します。</p><p>Assets の Script フォルダを選択してから右クリックで Create &gt; TypeScript と選択して行きます。</p><p><img src="WS001617.png" loading="lazy"></p><p>名前は「Destroyer」と名付けました。</p><p><img src="WS001618.png" loading="lazy"></p><p>「Destroyer.ts」を下記のように書き換えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line">@ccclass</span><br><span class="line">export default class NewClass extends cc.Component &#123;</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line">        let collider = this.getComponent(cc.Collider3D);</span><br><span class="line">        collider.on(&#x27;collision-enter&#x27;, this.onCollision, this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onCollision () &#123;</span><br><span class="line">        this.node.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>start関数は、プログラムが読み込まれた時に実行される関数です。</p><p>処理の内容は「自分に何かが当たったら自分自身を消す」こんな感じの処理になっています。</p><h3 id="ブロックに処理を追加"><a href="#ブロックに処理を追加" class="headerlink" title="ブロックに処理を追加"></a>ブロックに処理を追加</h3><p>今作ったスクリプトを ブロック に追加します。</p><p>Block を選択して 右の Add Component ボタンから Custom Component &gt; Destroyer の順で選択して行きます。</p><p><img src="WS001619.png" loading="lazy"></p><p>ブロックに スクリプトを設定すると、ブロックが消えるようになります。</p><p><img src="cocos-creator-3d-block-breaking-4_2.gif" loading="lazy"></p><h2 id="プレハブ化"><a href="#プレハブ化" class="headerlink" title="プレハブ化"></a>プレハブ化</h2><p>消えるブロックが完成したので、コピーして複数並べます。</p><p>普通にコピーしてもよいのですが、今回はプレハブ化して再利用できるようにしたいと思います。</p><p>プレハブ化は簡単に出来ます。</p><p>Node Tree にある Block を、Assets にドラッグするだけです。</p><p><img src="WS001621.png" loading="lazy"></p><p>Node Tree の Block が青文字になり、Assets に Block がコピーされればOK</p><p><img src="WS001622.png" loading="lazy"></p><h2 id="プレハブブロックを配置"><a href="#プレハブブロックを配置" class="headerlink" title="プレハブブロックを配置"></a>プレハブブロックを配置</h2><p>後は、プレハブ化したBlock を好きなだけ配置すればOK</p><p><img src="WS001623.png" loading="lazy"></p><p>とりあえず、5個並べてみました。</p><p><img src="cocos-creator-3d-block-breaking-4_3-1.gif" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回の作業も <a href="https://github.com/noitaro/cocos-creator-3d-block-breaking/releases/tag/0.4">GitHub</a> で公開しています。</p><p>よろしければ参考にどうぞ。</p><p><a href="https://github.com/noitaro/cocos-creator-3d-block-breaking/releases/tag/0.4">https://github.com/noitaro/cocos-creator-3d-block-breaking/releases/tag/0.4</a></p><p>次回は、ゲーム性を持たせるために ゲームクリア処理 を入れようと思います。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Cocos Creator で 3Dブロック崩しゲームを作る続きです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://noitaro.github.io/cocos-creator-3d-block-breaking-3/&quot;&gt;https://noitaro.github.</summary>
      
    
    
    
    
    <category term="game" scheme="https://noitaro.github.io/tags/game/"/>
    
    <category term="cocos-creator" scheme="https://noitaro.github.io/tags/cocos-creator/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator で 3Dゲームを作る その３</title>
    <link href="https://noitaro.github.io/cocos-creator-3d-block-breaking-3/"/>
    <id>https://noitaro.github.io/cocos-creator-3d-block-breaking-3/</id>
    <published>2020-04-19T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.895Z</updated>
    
    <content type="html"><![CDATA[<p>Cocos Creator で 3Dブロック崩しゲームを作る続きです。</p><p><a href="https://noitaro.github.io/cocos-creator-3d-block-breaking-2/">https://noitaro.github.io/cocos-creator-3d-block-breaking-2/</a></p><h2 id="今回の目標"><a href="#今回の目標" class="headerlink" title="今回の目標"></a>今回の目標</h2><p>ボールが動いて跳ね返る処理を作っていきます。</p><p><img src="cocos-creator-3d-block-breaking-3_4.gif" loading="lazy"></p><h2 id="ボールを追加"><a href="#ボールを追加" class="headerlink" title="ボールを追加"></a>ボールを追加</h2><p>まず、前回作った枠の中にボールを追加します。</p><p>New 3D Stage を選択してから右クリックで Create &gt; Create 3D Node &gt; Sphere の順で選択していきます。</p><p><img src="WS001551-1.png" loading="lazy"></p><h3 id="ボールの設定を変更"><a href="#ボールの設定を変更" class="headerlink" title="ボールの設定を変更"></a>ボールの設定を変更</h3><p>追加した Sphere の設定を変更します。</p><ul><li>名前を「Ball」に変更。</li><li>Position を「Y&#x3D;20」に変更。</li><li>Scale を「X&#x3D;25, Y&#x3D;25, Z&#x3D;25」に変更。</li><li>黄色のマテリアルを作成。</li><li>黄色のマテリアルをボールに設定。</li></ul><p><img src="WS001552.png" loading="lazy"></p><p>以上の設定を施したのがこちらです。</p><p><img src="WS001554.png" loading="lazy"></p><h2 id="ボールを動かす"><a href="#ボールを動かす" class="headerlink" title="ボールを動かす"></a>ボールを動かす</h2><p>次にボールが動くように設定します。</p><h3 id="RigidBodyコンポーネント-を追加"><a href="#RigidBodyコンポーネント-を追加" class="headerlink" title="RigidBodyコンポーネント を追加"></a>RigidBodyコンポーネント を追加</h3><p>ボールに リジッドボディ3Dコンポーネント を追加することで、ボールが重力の影響を受けるようになります。</p><p>追加方法は、ボールを選択してから Add Component ボタンを押して Physics Component &gt; Rigid Body 3D の順で選択します。</p><p><img src="WS001555.png" loading="lazy"></p><p>ボールに Rigid Body 3D が追加されればOK</p><p><img src="WS001600.png" loading="lazy"></p><p>Rigid Body 3D の設定を変更します。</p><ul><li>Linear Damping (線形減衰) を 0 に変更します。そうすると、スピードが落ちなくなります。</li><li>Angular Damping (角ダンピング) を 0 に変更します。そうすると回転速度が落ちなくなります。</li></ul><p><img src="WS001606.png" loading="lazy"></p><h3 id="物理システムを有効にする"><a href="#物理システムを有効にする" class="headerlink" title="物理システムを有効にする"></a>物理システムを有効にする</h3><p>物理システムを有効にするために「Helloworld.ts」の start 関数を下記のように書き換えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start() &#123;</span><br><span class="line">    cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);</span><br><span class="line">    cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);</span><br><span class="line">    </span><br><span class="line">    // 物理システムを有効にする.</span><br><span class="line">    cc.director.getPhysics3DManager().enabled = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この状態で実行すると、ボールが床をすり抜けて下に落ちて行きます。</p><p><img src="cocos-creator-3d-block-breaking-3.gif" loading="lazy"></p><p>原因は、重力が Y軸方向に働いているからです。</p><p>今回のブロック崩しは無重力状態にして永遠にボールを動かしたいので「Helloworld.ts」の start 関数を下記のように書き換えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">start() &#123;</span><br><span class="line">    cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);</span><br><span class="line">    cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);</span><br><span class="line">    </span><br><span class="line">    // 物理システムを有効にする.</span><br><span class="line">    cc.director.getPhysics3DManager().enabled = true;</span><br><span class="line">    // ボールを止まらなくする.</span><br><span class="line">    cc.director.getPhysics3DManager().allowSleep = false;</span><br><span class="line">    // 無重力にする.</span><br><span class="line">    cc.director.getPhysics3DManager().gravity = cc.v3(0,0,0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この修正を行うと、ボールが下に落ちなくなります。しかし、ボールに力が加わっていないので静止してしまいます。</p><h3 id="ボールに力を加える"><a href="#ボールに力を加える" class="headerlink" title="ボールに力を加える"></a>ボールに力を加える</h3><p>「Helloworld.ts」を下記のように修正してボールに力を加えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const &#123; ccclass, property &#125; = cc._decorator;</span><br><span class="line"></span><br><span class="line">@ccclass</span><br><span class="line">export default class Helloworld extends cc.Component &#123;</span><br><span class="line"></span><br><span class="line">  @property(cc.Node)</span><br><span class="line">  Ball: cc.Node = null;</span><br><span class="line"></span><br><span class="line">  @property(cc.Node)</span><br><span class="line">  Player: cc.Node = null;</span><br><span class="line"></span><br><span class="line">  AccLeft: Boolean = false;</span><br><span class="line">  AccRight: Boolean = false;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">      cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);</span><br><span class="line">      cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);</span><br><span class="line">      </span><br><span class="line">      // 物理システムを有効にする.</span><br><span class="line">      cc.director.getPhysics3DManager().enabled = true;</span><br><span class="line">      cc.director.getPhysics3DManager().allowSleep = false;</span><br><span class="line">      cc.director.getPhysics3DManager().gravity = cc.v3(0,0,0);</span><br><span class="line"> </span><br><span class="line">      // ボールを動かす</span><br><span class="line">      let rigidBody = this.Ball.getComponent(cc.RigidBody3D);</span><br><span class="line">      rigidBody.applyImpulse(cc.v3(0, 0, 3000), cc.v3(0,0,0));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  /* 省略 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Canvas に登録してある Helloworldコンポーネントの Ball変数に Ballの実体を登録します。</p><p><img src="WS001601.png" loading="lazy"></p><p>保存して実行すると、ボールがZ方向に3000のスピードで移動するようになります。</p><p><img src="cocos-creator-3d-block-breaking-3_2.gif" loading="lazy"></p><h2 id="衝突判定を付ける"><a href="#衝突判定を付ける" class="headerlink" title="衝突判定を付ける"></a>衝突判定を付ける</h2><p>ボールや壁などに衝突判定が無いので、ボールがすり抜けてしまいます。</p><p>なので、ボールや壁、バーに 3Dコライダーコンポーネント を追加していきます。</p><h3 id="3Dスフィアコライダーコンポーネントを追加"><a href="#3Dスフィアコライダーコンポーネントを追加" class="headerlink" title="3Dスフィアコライダーコンポーネントを追加"></a>3Dスフィアコライダーコンポーネントを追加</h3><p>ボールに 3D Sphere Collider Component (3Dスフィアコライダーコンポーネント) を追加します。</p><p>ボールを選択した状態で Add Component をクリックし Physics Component &gt; Collider &gt; Sphere 3D の順で選択して行きます。</p><p><img src="WS001607.png" loading="lazy"></p><p>ボールに SphereCollider3D が追加されればOK</p><p><img src="WS001608.png" loading="lazy"></p><h3 id="3Dボックスコライダーコンポーネントを追加"><a href="#3Dボックスコライダーコンポーネントを追加" class="headerlink" title="3Dボックスコライダーコンポーネントを追加"></a>3Dボックスコライダーコンポーネントを追加</h3><p>壁とバーに 3D Box Collider Component (3Dボックスコライダーコンポーネント) を追加します。</p><p>バーを選択した状態で Add Component をクリックし Physics Component &gt; Collider &gt; Box 3D の順で選択して行きます。</p><p><img src="WS001601_2.png" loading="lazy"></p><p>バーに BoxCollider3D が追加されればOK</p><p><img src="WS001602.png" loading="lazy"></p><p>同様の作業を壁にも実施しておきます。</p><p>実行してみると、ちゃんと衝突するようになりました。</p><p><img src="cocos-creator-3d-block-breaking-3_3.gif" loading="lazy"></p><p>ですが、減速してしまってゲームになりません。</p><p>なので Physics Material (3D物理マテリアル) を設定して、衝突時の挙動を制御して上げる必要があります。</p><h3 id="3D物理マテリアル"><a href="#3D物理マテリアル" class="headerlink" title="3D物理マテリアル"></a>3D物理マテリアル</h3><p>Assets の ＋ (プラス) ボタンから「Physics Material」を選択します。</p><p><img src="WS001603.png" loading="lazy"></p><p>Properties (プロパティ) を変更します。</p><ul><li>Friction (摩擦) は、0</li><li>Restitution (反発) は、1</li></ul><p>「Apply」で確定します。</p><p><img src="WS001609.png" loading="lazy"></p><p>作った Physics Material を ボールと壁とバーに設定します。</p><p><img src="WS001605.png" loading="lazy"></p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>壁とバーに当たった後、減速しないで跳ね返っています。</p><p><img src="cocos-creator-3d-block-breaking-3_4.gif" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回の作業も <a href="https://github.com/noitaro/cocos-creator-3d-block-breaking/releases">GitHub</a> で公開しています。</p><p>よろしければ参考にどうぞ。</p><p><a href="https://github.com/noitaro/cocos-creator-3d-block-breaking/releases">https://github.com/noitaro/cocos-creator-3d-block-breaking/releases</a></p><p>次回は、ボールが当たったら消える箱を作っていきます。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Cocos Creator で 3Dブロック崩しゲームを作る続きです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://noitaro.github.io/cocos-creator-3d-block-breaking-2/&quot;&gt;https://noitaro.github.</summary>
      
    
    
    
    
    <category term="game" scheme="https://noitaro.github.io/tags/game/"/>
    
    <category term="cocos-creator" scheme="https://noitaro.github.io/tags/cocos-creator/"/>
    
  </entry>
  
  <entry>
    <title>WordPress を 無料で使いたい</title>
    <link href="https://noitaro.github.io/wordpress-wp2static-githubpages/"/>
    <id>https://noitaro.github.io/wordpress-wp2static-githubpages/</id>
    <published>2020-04-18T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:41.847Z</updated>
    
    <content type="html"><![CDATA[<p>WordPress を 無料で使いたい！</p><p>もちろん SSL に対応したサーバーで HTTPS がいい！</p><p>そんな、わがままを叶えれられるかもしれませんよ。</p><h2 id="妙案"><a href="#妙案" class="headerlink" title="妙案"></a>妙案</h2><p>まず、ローカル版 WordPress を PC にインストールして、そこで記事を書きます。</p><p>次に、WordPress の記事を 静的サイト にしてくれる プラグインで HTML に変換します。</p><p>最後に、HTML になった 記事 を GitHub Pages などで公開すれば、完成です！</p><p><img src="WS001579_1.png" loading="lazy"></p><p>GitHub Pagesや、Firebase Hosting、Netlify は、SSL 対応なので HTTPS 運用できますし、広告も入りません。</p><p>まあ、これを WordPress 運用と呼んでいいのかは分かりませんがね。</p><p>注意として、動的な機能は使えません。サイト内検索とかコメントフォームとかですね。</p><h2 id="ローカル版-WordPress-を立ち上げる"><a href="#ローカル版-WordPress-を立ち上げる" class="headerlink" title="ローカル版 WordPress を立ち上げる"></a>ローカル版 WordPress を立ち上げる</h2><h3 id="Local-WordPress"><a href="#Local-WordPress" class="headerlink" title="Local WordPress"></a>Local WordPress</h3><p>PC に ローカル版 WordPress をインストールしましょう。</p><p><a href="https://localwp.com/">Local WordPress</a></p><p><a href="https://localwp.com/">https://localwp.com/</a></p><h4 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h4><p>左下の「FREE DOWNLOAD!」をクリックし、</p><p><img src="WS001580.png" loading="lazy"></p><p>Windows を選択します。</p><p><img src="WS001581.png" loading="lazy"></p><p>メールアドレスだけが必須なので、適当に入力し「GET IT NOW!」でダウンロードできます。</p><p><img src="WS001583.png" loading="lazy"></p><h4 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h4><p>ダウンロードした「local-5.3.1-windows.exe」を起動します。</p><p><img src="WS001584.png" loading="lazy"></p><p>基本的には、特に設定を変更しなくても大丈夫です。</p><p><img src="WS001556-1.png" loading="lazy"></p><p><img src="WS001557.png" loading="lazy"></p><p><img src="WS001558.png" loading="lazy"></p><p><img src="WS001559.png" loading="lazy"></p><h4 id="WordPress-を作成"><a href="#WordPress-を作成" class="headerlink" title="WordPress を作成"></a>WordPress を作成</h4><p>「CREATE A NEW SITE」をクリックして WordPress を作成します。</p><p><img src="WS001560.png" loading="lazy"></p><p>適当にサイトの名前を入力して「CONTINUE」を押し、</p><p><img src="WS001561.png" loading="lazy"></p><p>WordPress にログインするための Username と Password を入力して「ADD SITE」を押せば WordPress が出来上がります。</p><p><img src="WS001562.png" loading="lazy"></p><p>「VIEW SITE」を押すと、ブラウザが立ち上がり 今作った サイト が表示されます。</p><p><img src="WS001585.png" loading="lazy"></p><h2 id="WordPress-の記事を-HTML-に変換する"><a href="#WordPress-の記事を-HTML-に変換する" class="headerlink" title="WordPress の記事を HTML に変換する"></a>WordPress の記事を HTML に変換する</h2><p>WordPress の記事を HTML に変換する手順を説明します。</p><h3 id="WordPress-プラグイン「WP2Static」"><a href="#WordPress-プラグイン「WP2Static」" class="headerlink" title="WordPress プラグイン「WP2Static」"></a>WordPress プラグイン「WP2Static」</h3><p>WordPress に プラグイン「WP2Static」を入れます。</p><p><img src="WS001586.png" loading="lazy"></p><p>左メニューから「WP2Static」を選択します。</p><h4 id="Deploy-static-website"><a href="#Deploy-static-website" class="headerlink" title="Deploy static website"></a>Deploy static website</h4><p>「Where will you host the optimized version of your site?（どこにどんな形式で出力するの？）」と聞かれているので「Subdirectory on current server（サーバーのフォルダ内）」を選択します。</p><p>「Destination URL」は、公開予定の URL を入力します。WP2Static が今の URL(<a href="http://test.local/">http://test.local</a>) を この URL に置換してくれます。</p><p>「Target Directory」は変更しなくても大丈夫です。ここに HTML が出力されます。</p><p><img src="WS001587.png" loading="lazy"></p><p>設定ができたら下の「Start static site export」をクリックして HTML に変換されるのを待ちます。</p><p>結構かかるのでネットサーフィンをして待ちましょう。</p><p>「Process completed」と表示されればOK</p><p><img src="WS001588-1.png" loading="lazy"></p><p>「Target Directory」のフォルダに出力されているので確認してみます。</p><p><img src="WS001589.png" loading="lazy"></p><p>このフォルダ内のファイルを レンタルサーバや GitHub Pages で公開すれば 無料ブログの完成です。</p><h2 id="GitHub-Pages-で公開する"><a href="#GitHub-Pages-で公開する" class="headerlink" title="GitHub Pages で公開する"></a>GitHub Pages で公開する</h2><p>最後の仕上げとして WP2Static で出力された 静的サイトを GitHub Pages で公開します。</p><p><a href="https://github.com/new">GitHub</a> で Pages用のリポジトリを作成します。</p><p><img src="WS001590.png" loading="lazy"></p><p>「Target Directory」のフォルダ内で右クリックし「Git Bash Here」をクリックし Gitコンソール を開きます。</p><p><img src="WS001591.png" loading="lazy"></p><p>Gitコンソール に下記を入力して、「Target Directory」内の全てのファイルを リポジトリ に プッシュします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://github.com/noitaro/wp2static.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="WS001595.png" loading="lazy"></p><h3 id="公開"><a href="#公開" class="headerlink" title="公開"></a>公開</h3><p>GitHub に全てのファイルをプッシュしたら「Settings」から公開設定をします。</p><p><img src="WS001596.png" loading="lazy"></p><p>「GitHub Pages」の項目までスクロールし、Source を「master branch」に変更したらOK</p><p><img src="WS001597.png" loading="lazy"></p><p>「GitHub Pages」の 公開URL でアクセスできます。</p><p><img src="WS001598.png" loading="lazy"></p><p>ローカル版 WordPress と同じ見た目で 表示されるはずです。</p><p><img src="WS001599.png" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>WP2Staticプラグイン で出力するのに 20分 も掛かるのが難点です。</p><p>数分で終わってくれれば実用性があると思うのですが…、有料版を使えって事ですかね。</p><p>WP2Static の設定で、直接 GitHubリポジトリに デプロイ出来るらしいですが、私が試したところ何度やっても出来ませんでした。</p><p>設定が悪いのか、はたまた有料版じゃないと出来ないのか定かではありませんが、真相がハッキリしたらまた記事にします。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;WordPress を 無料で使いたい！&lt;/p&gt;
&lt;p&gt;もちろん SSL に対応したサーバーで HTTPS がいい！&lt;/p&gt;
&lt;p&gt;そんな、わがままを叶えれられるかもしれませんよ。&lt;/p&gt;
&lt;h2 id=&quot;妙案&quot;&gt;&lt;a href=&quot;#妙案&quot; class=&quot;headerlin</summary>
      
    
    
    
    
    <category term="github" scheme="https://noitaro.github.io/tags/github/"/>
    
    <category term="wordpress" scheme="https://noitaro.github.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator で 3Dゲームを作る その２</title>
    <link href="https://noitaro.github.io/cocos-creator-3d-block-breaking-2/"/>
    <id>https://noitaro.github.io/cocos-creator-3d-block-breaking-2/</id>
    <published>2020-04-11T00:00:00.000Z</published>
    <updated>2024-03-18T02:41:40.887Z</updated>
    
    <content type="html"><![CDATA[<p>Cocos Creator で 3Dブロック崩しゲームを作る続きです。</p><p><a href="https://noitaro.github.io/cocos-creator-3d-block-breaking-1/">https://noitaro.github.io/cocos-creator-3d-block-breaking-1/</a></p><h2 id="今回の目標"><a href="#今回の目標" class="headerlink" title="今回の目標"></a>今回の目標</h2><p>左右キーでバーを動かせるようにします。</p><p><img src="cocos-creator-3d-block-breaking-2.gif" loading="lazy"></p><h2 id="前回までのあらすじ"><a href="#前回までのあらすじ" class="headerlink" title="前回までのあらすじ"></a>前回までのあらすじ</h2><p>キャンバスの3Dステージに床と壁を使って枠を作りました。</p><p><img src="WS001525.png" loading="lazy"></p><p>今回はこの枠の中に バーを置いて十字キーで動かせるようにします。</p><h2 id="壁の色を変える"><a href="#壁の色を変える" class="headerlink" title="壁の色を変える"></a>壁の色を変える</h2><p>まず、前回作った壁の色を変えます。</p><p>壁の色を変える方法は MeshRenderer の Materials を色付きのマテリアルに変更すると変わります。</p><p><img src="WS001526.png" loading="lazy"></p><h3 id="色付き-Material-の作成"><a href="#色付き-Material-の作成" class="headerlink" title="色付き Material の作成"></a>色付き Material の作成</h3><p>Assets で右クリックし Create &gt; Material の順で選択して、新規マテリアルを作成します。</p><p><img src="WS001527.png" loading="lazy"></p><p>名前は「WhiteMaterial」にしました。</p><p><img src="WS001528.png" loading="lazy"></p><p>WhiteMaterial を選択して Properties の Effect を「builtin-phong」に変更します。</p><p><img src="WS001529.png" loading="lazy"></p><p>diffuseColor をお好みな色に変更します。</p><p><img src="WS001530.png" loading="lazy"></p><p>今回は 白マテリアル を作るので 白色 にしました。</p><p>最後に「Apply」を押して 白マテリアル の完成です。</p><p><img src="WS001531.png" loading="lazy"></p><h3 id="枠に白マテリアルを設定"><a href="#枠に白マテリアルを設定" class="headerlink" title="枠に白マテリアルを設定"></a>枠に白マテリアルを設定</h3><p>作った マテリアル を 3Dモデルに設定します。</p><p>Kabe を選択し、WhiteMaterial を Properties の Materials にドラッグすると マテリアルを設定することが出来ます。</p><p><img src="WS001532-1.png" loading="lazy"></p><p>4方向の壁を白くしてみました。</p><p><img src="WS001533.png" loading="lazy"></p><h2 id="3D-Box-でバーを作る"><a href="#3D-Box-でバーを作る" class="headerlink" title="3D Box でバーを作る"></a>3D Box でバーを作る</h2><p>ボールを跳ね返すために、左右に動かせるバーを作ります。</p><h3 id="3D-Box-を作成"><a href="#3D-Box-を作成" class="headerlink" title="3D Box を作成"></a>3D Box を作成</h3><p>まず、枠を作った時と同じように キャンバスに 3D Box を作成します。</p><p><img src="WS001534-1.png" loading="lazy"></p><p>名前は「Player」としました。</p><p><img src="WS001535-1.png" loading="lazy"></p><h3 id="位置と尺度を設定"><a href="#位置と尺度を設定" class="headerlink" title="位置と尺度を設定"></a>位置と尺度を設定</h3><p>位置(Position) と 尺度(Scale) をいい感じに設定します。</p><p><img src="WS001536.png" loading="lazy"></p><p>今回は、位置 x0 y20 z380、尺度 x80 y30 z25 にしました。</p><h3 id="マテリアルを設定"><a href="#マテリアルを設定" class="headerlink" title="マテリアルを設定"></a>マテリアルを設定</h3><p>壁用の白マテリアルと同じ要領で、バー用のマテリアルを作って「Player」に設定します。</p><p>今回は、青マテリアルを作って設定しました。</p><p><img src="WS001537.png" loading="lazy"></p><h2 id="左右キーを押したら左右に動くようにする"><a href="#左右キーを押したら左右に動くようにする" class="headerlink" title="左右キーを押したら左右に動くようにする"></a>左右キーを押したら左右に動くようにする</h2><p>左右キーを押したら左右に動くようにします。</p><p>言語は TypeScript を使います。TypeScript は、JavaScript と互換性があり、なおかつ 静的型付けとクラスベースオブジェクト指向言語なので、JavaScript より コーディング時のバグが生まれにくくなっています。</p><h3 id="スクリプトファイルを開く"><a href="#スクリプトファイルを開く" class="headerlink" title="スクリプトファイルを開く"></a>スクリプトファイルを開く</h3><p>プログラムを組んで、バーを動かせるようにします。</p><p>で、まずプログラム記述するスクリプトファイルを開きます。</p><p>Assets内の Scriptフォルダに「Hellowold」があるので、選択し右クリックで「Open In Explorer」を選びます。</p><p><img src="WS001538.png" loading="lazy"></p><p>Cocos Creator プロジェクトの Scriptフォルダ が開くので、その中にある「Helloworld.ts」をテキストエディッタで開きます。</p><p><img src="WS001539.png" loading="lazy"></p><p>私は、テキストエディッタに「<a href="https://code.visualstudio.com/">Visual Studio Code</a>」を使っています。オススメです。</p><p><img src="WS001540.png" loading="lazy"></p><h4 id="VS-Code-で開いた時に-赤い波線-が出る場合は？"><a href="#VS-Code-で開いた時に-赤い波線-が出る場合は？" class="headerlink" title="VS Code で開いた時に 赤い波線 が出る場合は？"></a>VS Code で開いた時に 赤い波線 が出る場合は？</h4><p>Cocos Creator の 「Developer」メニューの VS Code Workflow &gt; Update VS Code API Source の順で選択します。</p><p><img src="WS001542-1.png" loading="lazy"></p><p>すると、VS Code に Cocos Creator の API が読み込まれるようになり、赤い波線が消えます。</p><p><img src="WS001543.png" loading="lazy"></p><h3 id="バーを動かすプログラムを組む"><a href="#バーを動かすプログラムを組む" class="headerlink" title="バーを動かすプログラムを組む"></a>バーを動かすプログラムを組む</h3><p>「Helloworld.ts」を以下のように修正して、上書き保存をします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">const &#123;ccclass, property&#125; = cc._decorator;</span><br><span class="line"> </span><br><span class="line">@ccclass</span><br><span class="line">export default class Helloworld extends cc.Component &#123;</span><br><span class="line"> </span><br><span class="line">    @property(cc.Node)</span><br><span class="line">    Player: cc.Node = null;</span><br><span class="line"> </span><br><span class="line">    AccLeft: Boolean = false;</span><br><span class="line">    AccRight: Boolean = false;</span><br><span class="line"> </span><br><span class="line">    start() &#123;</span><br><span class="line">        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);</span><br><span class="line">        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    update()&#123;</span><br><span class="line">        if (this.AccLeft) &#123;</span><br><span class="line">            this.Player.x -= 8;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (this.AccRight) &#123;</span><br><span class="line">            this.Player.x += 8;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    onKeyDown(event: cc.Event.EventKeyboard) &#123;</span><br><span class="line">        switch (event.keyCode) &#123;</span><br><span class="line">            case cc.macro.KEY.left:</span><br><span class="line">                this.AccLeft = true;</span><br><span class="line">                break;</span><br><span class="line">            case cc.macro.KEY.right:</span><br><span class="line">                this.AccRight = true;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    onKeyUp(event: cc.Event.EventKeyboard) &#123;</span><br><span class="line">        switch (event.keyCode) &#123;</span><br><span class="line">            case cc.macro.KEY.left:</span><br><span class="line">                this.AccLeft = false;</span><br><span class="line">                break;</span><br><span class="line">            case cc.macro.KEY.right:</span><br><span class="line">                this.AccRight = false;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="バーとプログラムを関連付けさせる"><a href="#バーとプログラムを関連付けさせる" class="headerlink" title="バーとプログラムを関連付けさせる"></a>バーとプログラムを関連付けさせる</h3><p>次に Cocos Creator 側で、バーとプログラムを関連付けさせます。</p><p>まず「Canvas」を選択し、Properties の「Add Component」をクリックし Custom Component &gt; Helloworld を選択します。</p><p><img src="WS001544.png" loading="lazy"></p><p>そうすると、キャンバスに Helloworldコンポーネント が追加されます。</p><p><img src="WS001545.png" loading="lazy"></p><p>次に、Node Tree の Player を Helloworldコンポーネント の Player にドラッグして、関連付けさせます。</p><p><img src="WS001546.png" loading="lazy"></p><p>こんな感じになれば、関連付けOK</p><p><img src="WS001547.png" loading="lazy"></p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>ここまで出来たら、実行ボタンを押して動作確認をします。</p><p><img src="WS001548-1.png" loading="lazy"></p><p>左右キーでバーが動かない場合は、一度画面内をクリックすると操作できるようになります。</p><p><img src="cocos-creator-3d-block-breaking-2.gif" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回の作業も <a href="https://github.com/noitaro/cocos-creator-3d-block-breaking/releases/tag/0.2">GitHub</a> で公開しています。</p><p>よろしければ参考にどうぞ。</p><p><a href="https://github.com/noitaro/cocos-creator-3d-block-breaking/releases/tag/0.2">https://github.com/noitaro/cocos-creator-3d-block-breaking/releases/tag/0.2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Cocos Creator で 3Dブロック崩しゲームを作る続きです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://noitaro.github.io/cocos-creator-3d-block-breaking-1/&quot;&gt;https://noitaro.github.</summary>
      
    
    
    
    
    <category term="game" scheme="https://noitaro.github.io/tags/game/"/>
    
    <category term="cocos-creator" scheme="https://noitaro.github.io/tags/cocos-creator/"/>
    
  </entry>
  
</feed>
